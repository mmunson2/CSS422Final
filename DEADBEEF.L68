00001020 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 6/10/2020 10:14:34 PM

00000000                             1  *-------------------------------------------------------------------------------
00000000                             2  * Title      : PUSH_BWT / EA_MODE_ID Development
00000000                             3  * Written by : Ihsan Halimun, Camden Brewster, Matthew Munson
00000000                             4  * Created    : May 16th 2020
00000000                             5  * Last Edited: June 10th 2020
00000000                             6  *-------------------------------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  *-------------------------------------------------------------------------------
00001000                             9  *      ________   ___        ________   ________   ________   ___
00001000                            10  *     |\   ____\ |\  \      |\   __  \ |\   __  \ |\   __  \ |\  \
00001000                            11  *     \ \  \___| \ \  \     \ \  \|\  \\ \  \|\ /_\ \  \|\  \\ \  \
00001000                            12  *      \ \  \  ___\ \  \     \ \  \\\  \\ \   __  \\ \   __  \\ \  \
00001000                            13  *       \ \  \|\  \\ \  \____ \ \  \\\  \\ \  \|\  \\ \  \ \  \\ \  \____
00001000                            14  *        \ \_______\\ \_______\\ \_______\\ \_______\\ \__\ \__\\ \_______\
00001000                            15  *         \|_______| \|_______| \|_______| \|_______| \|__|\|__| \|_______|
00001000                            16  *-------------------------------------------------------------------------------
00001000                            17  
00001000                            18  START_ADDR   DS.L  1   *User defined memory start address
00001004                            19  END_ADDR     DS.L  1   *User defined memory end address
00001008                            20  
00001008  =0000000D                 21  CR    EQU   $0D
00001008  =0000000A                 22  LF    EQU   $0A
00001008                            23  
00001008                            24  * How many print statements are sitting in the stack:
00001008                            25  PRINT_COUNT              DS.W    1
0000100A                            26  
0000100A                            27  PRINT_OPCODE_LOOP_INDEX  DS.W    1   * The print loop index
0000100C                            28  STACK_BASE               DS.L    1   * Where the print calls start
00001010                            29  
00001010                            30  LOOP_INC       DS.W    1    * How many words to skip to find the next opcode
00001012                            31  LOOP_INDEX     DS.L    1    * The opcode loop's index
00001016                            32  
00001016                            33  
00001016                            34  DATA1          DS.L    1    * The first line of opcode data
0000101A                            35  DATA1_IN_USE   DS.W    1  * Boolean: Whether or not DATA1 is being used
0000101C                            36  
0000101C                            37  DATA2          DS.L    1    * The second line of opcode data
00001020                            38  
00001020                            39  START:
00001020                            40  
00001020                            41  *-------------------------------------------------------------------------------
00001020                            42  *                ________  ________  ________  _______
00001020                            43  *               |\   ____\|\   __  \|\   ___ \|\  ___ \
00001020                            44  *               \ \  \___|\ \  \|\  \ \  \_|\ \ \   __/|
00001020                            45  *                \ \  \    \ \  \\\  \ \  \ \\ \ \  \_|/__
00001020                            46  *                 \ \  \____\ \  \\\  \ \  \_\\ \ \  \_|\ \
00001020                            47  *                  \ \_______\ \_______\ \_______\ \_______\
00001020                            48  *                   \|_______|\|_______|\|_______|\|_______|
00001020                            49  *
00001020                            50  *-------------------------------------------------------------------------------
00001020                            51  
00001020                            52  *-------------------------------------------------------------------------------
00001020                            53  INITIALIZE
00001020                            54  * ------ Standard Initializations ------
00001020  31FC 0000 1008            55    MOVE.W    #0, PRINT_COUNT
00001026  13FC 0000 00002B6A        56    MOVE.B    #0, MISC_NUMBER
0000102E  33FC 0000 00002B70        57    MOVE.W    #0, LINE_COUNT
00001036                            58  
00001036                            59    * Begin the user input loop
00001036  4EB9 000027A8             60    JSR GET_INPUT
0000103C                            61  
0000103C  2078 1000                 62    MOVEA.L  START_ADDR,A0
00001040  21C8 1012                 63    MOVE.L   A0,LOOP_INDEX * Both A0 and LOOP_INDEX contain the start address
00001044                            64  
00001044                            65  
00001044                            66  
00001044                            67  *-------------------------------------------------------------------------------
00001044                            68  *    OPCODE LOOP
00001044                            69  *
00001044                            70  *    The disassembler's main loop. Gets the contents of a memory location,
00001044                            71  *    sends it to BRANCHBLOCK to be decoded and printed, and checks if we're
00001044                            72  *    at the user defined endpoint.
00001044                            73  *
00001044                            74  * ________________________________________
00001044                            75  * Register Use Summary:
00001044                            76  *
00001044                            77  * D7: CONST - The opcode to decode. Set before BRANCHBLOCK
00001044                            78  *
00001044                            79  * A0: The current Loop Index, updated before and after BRANCHBLOCK
00001044                            80  * A1: How much we should increment the loop index
00001044                            81  * A2: Local Variable - used for retrieving DATA
00001044                            82  *-------------------------------------------------------------------------------
00001044                            83  OPCODE_LOOP
00001044                            84  
00001044  2078 1012                 85      MOVEA.L LOOP_INDEX,A0
00001048  B1F8 1004                 86      CMP.L   END_ADDR,A0  * Check to see if we're done
0000104C  6E00 0082                 87      BGT     DONE
00001050                            88  
00001050                            89  * ------ Reset Loop Variables ------
00001050  31FC 0000 1008            90      MOVE.W  #0,PRINT_COUNT  * Reset print count to zero
00001056  31FC 0000 1010            91      MOVE.W  #0,LOOP_INC     * Reset loop index increment to zero
0000105C  4287                      92      CLR.L   D7
0000105E                            93  
0000105E                            94  * ------ Get memory at loop index ------
0000105E  3E10                      95      MOVE.W  (A0),D7
00001060                            96  
00001060                            97  * ------ Fill DATA1 and DATA2 ------
00001060  2448                      98      MOVEA.L  A0,A2
00001062  544A                      99      ADDA     #2,A2        * Increment by 1 word to get the long afterwards
00001064  21D2 1016                100      MOVE.L  (A2),DATA1   * Fill DATA1 with the long after the opcode
00001068  584A                     101      ADDA     #4,A2
0000106A  21D2 101C                102      MOVE.L  (A2),DATA2   * Fill DATA2 with the long after DATA1
0000106E                           103  
0000106E  31FC 0000 101A           104      MOVE.W  #0,DATA1_IN_USE  * Reset data boolean
00001074  13FC 0000 00002B6A       105      MOVE.B  #0,MISC_NUMBER   * Reset MISC_NUMBER
0000107C  13FC 0000 00002B6E       106      MOVE.B  #0,MISC_REGISTER * Reset MISC_REGISTER
00001084                           107  
00001084                           108  * ------ Execute Subroutines ------
00001084  4EB9 00002448            109      JSR     PRINTADDR             * Print the memory address
0000108A  4EB9 000010DE            110      JSR     BRANCHBLOCK           * Figure out what opcode this is and print
00001090                           111  
00001090                           112  
00001090                           113  * ------ Increment Loop ------
00001090  2078 1012                114      MOVEA.L     LOOP_INDEX,A0
00001094  3278 1010                115      MOVEA.W     LOOP_INC,A1
00001098  D0C9                     116      ADDA    A1,A0  * Move the index to the next opcode
0000109A  21C8 1012                117      MOVE.L  A0,LOOP_INDEX
0000109E                           118  
0000109E                           119  
0000109E                           120  * ------ Check for pause ------
0000109E  247C 00000000            121      MOVEA.L   #0,A2
000010A4  3479 00002B70            122      MOVEA.W   LINE_COUNT,A2
000010AA  524A                     123      ADDA.W    #1,A2
000010AC  33CA 00002B70            124      MOVE.W    A2,LINE_COUNT
000010B2                           125  
000010B2  B4FC 001E                126      CMP.W     #30,A2
000010B6  6C00 0006                127      BGE       OPCODE_LOOP_PAUSE
000010BA                           128  
000010BA                           129  
000010BA  6000 0010                130      BRA     OPCODE_LOOP_CONTINUE
000010BE                           131  
000010BE                           132  OPCODE_LOOP_PAUSE
000010BE  4EB9 0000246A            133      JSR     PAUSE_CONSOLE
000010C4  33FC 0000 00002B70       134      MOVE.W  #0, LINE_COUNT
000010CC                           135  
000010CC                           136  OPCODE_LOOP_CONTINUE
000010CC  6000 FF76                137      BRA     OPCODE_LOOP
000010D0                           138  
000010D0                           139  DONE
000010D0                           140  
000010D0  4EB9 0000246A            141      JSR     PAUSE_CONSOLE
000010D6  6000 1864                142      BRA     QUERY_CONTINUE
000010DA                           143  
000010DA  FFFF FFFF                144      SIMHALT
000010DE                           145  
000010DE                           146  
000010DE                           147  
000010DE                           148  *-------------------------------------------------------------------------------
000010DE                           149  *     BRANCHBLOCK
000010DE                           150  *
000010DE                           151  *  Decodes the opcode in D7 and jumps to the corresponding opcode subroutine
000010DE                           152  *
000010DE                           153  *  Because 1 line is pulled out of memory at a time, it's possible that the
000010DE                           154  *  next opcode only takes up one word, and it's in the upper word of the
000010DE                           155  *  opcode long (eg.4E71FFFF is NOP then empty). We must check for single word
000010DE                           156  *  opcodes before we use any of the data in the lower word of D7.
000010DE                           157  *________________________________________
000010DE                           158  * Register Use Summary:
000010DE                           159  *
000010DE                           160  * D0: General variable, cleared every use to be safe
000010DE                           161  * D1:
000010DE                           162  * D2:
000010DE                           163  * D3:
000010DE                           164  * D4: (Keep in mind this is parameter for BWL)
000010DE                           165  * D5:
000010DE                           166  * D6:
000010DE                           167  * D7: CONST - The opcode to decode - NO TOUCH
000010DE                           168  *________________________________________
000010DE                           169  * A0:
000010DE                           170  * A1:
000010DE                           171  * A2:
000010DE                           172  * A3:
000010DE                           173  * A4:
000010DE                           174  * A5:
000010DE                           175  * A6:
000010DE                           176  * A7:
000010DE                           177  *-------------------------------------------------------------------------------
000010DE                           178  BRANCHBLOCK
000010DE                           179  
000010DE  21CF 100C                180    MOVE.L  SP,STACK_BASE   * Save the position of the stack for later
000010E2                           181  
000010E2                           182  * ---- EMPTY MEMORY ----
000010E2  BEBC 0000FFFF            183    CMP.L   #$FFFF,D7
000010E8  6700 1338                184    BEQ     PRINT_NON_OPCODE_DATA
000010EC                           185  
000010EC                           186  * ---- CONSTANT OPCODES ----
000010EC  BE7C 4E71                187    CMP.W   #$4E71,D7
000010F0  6700 0C0A                188    BEQ     NOP
000010F4                           189  
000010F4  BE7C 4E75                190    CMP.W   #$4E75,D7
000010F8  6700 0C1C                191    BEQ     RTS
000010FC                           192  
000010FC                           193  * ------ MOVE / MOVEA ------
000010FC  4280                     194    CLR.L   D0
000010FE  3007                     195    MOVE.W  D7,D0
00001100                           196  
00001100  E598                     197    ROL.L   #$02,D0 * Move the first two bits into the upper word
00001102  4840                     198    SWAP    D0      * Swap the upper word and the lower word
00001104                           199  
00001104  B07C 0000                200    CMP.W   #0,D0
00001108  6700 05B4                201    BEQ     MOVE_MOVEA
0000110C                           202  
0000110C                           203  * ------ MOVEQ ------
0000110C  4280                     204    CLR.L   D0
0000110E  4281                     205    CLR.L   D1
00001110  3007                     206    MOVE.W  D7,D0
00001112                           207  
00001112  E058                     208    ROR.W   #$8,D0 * Check bit 8 to make sure it's zero
00001114  3200                     209    MOVE.W  D0,D1 * D1 is where we'll do the mask
00001116  0241 0001                210    ANDI.W  #1,D1 * Mask 1
0000111A                           211  
0000111A  B27C 0000                212    CMP.W   #0,D1
0000111E  6600 0010                213    BNE     BRANCHBLOCK_MOVEQ_END
00001122                           214  
00001122  E858                     215    ROR.W   #$4,D0 * Check bits 12-15 for 0111
00001124  C07C 000F                216    AND.W   #$F,D0
00001128  B03C 0007                217    CMP.B   #$7,D0
0000112C  6700 053A                218    BEQ     MOVEQ
00001130                           219  
00001130                           220  BRANCHBLOCK_MOVEQ_END * Go here if it's not MOVEQ
00001130                           221  
00001130                           222  * ------ MOVEM ------
00001130  4280                     223    CLR.L   D0
00001132  3007                     224    MOVE.W  D7,D0
00001134                           225  
00001134  C07C FB80                226    AND.W   #$FB80,D0 * Mask 1111 1011 1000 0000
00001138  B07C 4880                227    CMP.W   #$4880,D0
0000113C                           228  
0000113C  6700 0364                229    BEQ     MOVEM
00001140                           230  
00001140                           231  * ---- NOT ----
00001140  4280                     232    CLR.L   D0
00001142  3007                     233    MOVE.W  D7,D0
00001144  C07C FF00                234    AND.W   #$FF00,D0
00001148  B07C 4600                235    CMP.W   #$4600,D0
0000114C  6700 0116                236    BEQ     NOT
00001150                           237  
00001150                           238  * ---- LEA ----
00001150  4280                     239    CLR.L   D0
00001152  3007                     240    MOVE.W  D7,D0
00001154  C07C F1C0                241    AND.W   #$F1C0,D0
00001158  B07C 41C0                242    CMP.W   #$41C0,D0
0000115C  6700 008C                243    BEQ     LEA
00001160                           244  
00001160                           245  * ---- ADDQ ----
00001160  4280                     246    CLR.L   D0
00001162  3007                     247    MOVE.W  D7,D0
00001164  4840                     248    SWAP    D0
00001166  E998                     249    ROL.L   #$04,D0
00001168  C03C 000F                250    AND.B   #$F,D0
0000116C  B03C 0005                251    CMP.B   #5,D0
00001170  6700 0B16                252    BEQ     ADDQ
00001174                           253  
00001174                           254  * ---- ADDA / ADD ----
00001174  4280                     255    CLR.L   D0
00001176  3007                     256    MOVE.W  D7,D0   *DXXX
00001178  C07C F000                257    AND.W   #$F000,D0
0000117C  B07C D000                258    CMP.W   #$D000,D0
00001180  6700 09DC                259    BEQ     ADD_ADDA
00001184                           260  
00001184                           261  * ---- SUB ----
00001184  4280                     262    CLR.L   D0
00001186  3007                     263    MOVE.W  D7,D0
00001188  C07C F000                264    AND.W   #$F000,D0
0000118C  B07C 9000                265    CMP.W   #$9000,D0
00001190  6700 0272                266    BEQ     SUB
00001194                           267  
00001194                           268  * ---- OR ----
00001194  4280                     269    CLR.L   D0
00001196  3007                     270    MOVE.W  D7,D0
00001198  C07C F000                271    AND.W   #$F000,D0
0000119C  B07C 8000                272    CMP.W   #$8000,D0
000011A0  6700 01B2                273    BEQ     OR
000011A4                           274  
000011A4                           275  * ---- AND ----
000011A4  4280                     276    CLR.L   D0
000011A6  3007                     277    MOVE.W  D7,D0
000011A8  C07C F000                278    AND.W   #$F000,D0
000011AC  B07C C000                279    CMP.W   #$C000,D0
000011B0  6700 00F2                280    BEQ     AND
000011B4                           281  
000011B4                           282  * ---- BCC ----
000011B4  4280                     283    CLR.L   D0
000011B6  2007                     284    MOVE.L  D7,D0
000011B8  C07C F000                285    AND.W   #$F000,D0
000011BC  B07C 6000                286    CMP.W   #$6000,D0
000011C0  6700 08D4                287    BEQ     BCC
000011C4                           288  
000011C4                           289  * ---- LSX_ASX_ROR ----
000011C4  4280                     290    CLR.L   D0
000011C6  2007                     291    MOVE.L  D7,D0
000011C8  C07C F000                292    AND.W   #$F000,D0
000011CC  B07C E000                293    CMP.W   #$E000,D0
000011D0  6700 06D6                294    BEQ     LSX_ASX_ROX
000011D4                           295  
000011D4                           296  * ---- JSR ----
000011D4  4280                     297    CLR.L   D0
000011D6  3007                     298    MOVE.W  D7,D0
000011D8  C07C FFC0                299    AND.W   #$FFC0,D0   * Mask opcode to get first 10 bits only
000011DC                           300  
000011DC  EC40                     301    ASR.W   #6,D0
000011DE  B07C 013A                302    CMP     #$13A,D0
000011E2  6700 0B4C                303    BEQ     JSR
000011E6                           304  
000011E6                           305  * ---- Data is not recognized as opcode ----
000011E6                           306  
000011E6  6000 123A                307    BRA     PRINT_NON_OPCODE_DATA
000011EA                           308  
000011EA                           309  
000011EA                           310  *-------------------------------------------------------------------------------
000011EA                           311  * ________   ________   ________   ________   ________   _______
000011EA                           312  *|\   __  \ |\   __  \ |\   ____\ |\   __  \ |\   ___ \ |\  ___ \
000011EA                           313  *\ \  \|\  \\ \  \|\  \\ \  \___| \ \  \|\  \\ \  \_|\ \\ \   __/|
000011EA                           314  * \ \  \\\  \\ \   ____\\ \  \     \ \  \\\  \\ \  \ \\ \\ \  \_|/__
000011EA                           315  *  \ \  \\\  \\ \  \___| \ \  \____ \ \  \\\  \\ \  \_\\ \\ \  \_|\ \
000011EA                           316  *   \ \_______\\ \__\     \ \_______\\ \_______\\ \_______\\ \_______\
000011EA                           317  *    \|_______| \|__|      \|_______| \|_______| \|_______| \|_______|
000011EA                           318  *
000011EA                           319  *-------------------------------------------------------------------------------
000011EA                           320  
000011EA                           321  *-------------------------------------------------------------------------------
000011EA                           322  * LEA
000011EA                           323  *
000011EA                           324  * Load Effective address
000011EA                           325  *
000011EA                           326  * "LEA" -> "    " -> <ea> -> "," -> An
000011EA                           327  *
000011EA                           328  * Effective address does not allow Dn, An, (An)+, -(An)
000011EA                           329  *-------------------------------------------------------------------------------
000011EA                           330  LEA
000011EA                           331  
000011EA                           332    * ------ Print "LEA" ------
000011EA  4BF9 000023CA            333    LEA     PRINT_LEA,A5    * Load the print subroutine into intermediate address
000011F0  2F0D                     334    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000011F2  5878 1008                335    ADD.W   #4,PRINT_COUNT
000011F6                           336  
000011F6                           337    * ------ Print some spaces ------
000011F6  4BF9 000023DA            338    LEA     PRINT_FOURSPACE,A5    * Load the print subroutine into temp
000011FC  2F0D                     339    MOVE.L  A5, -(SP)             * Put the print subroutine jump onto the stack
000011FE  5878 1008                340    ADD.W   #4,PRINT_COUNT
00001202                           341  
00001202                           342    * ------ Dn,An,(An)+,-(An) are not allowed ------
00001202  4280                     343    CLR.L   D0
00001204  1007                     344    MOVE.B  D7,D0 * Put opcode in D0
00001206  C03C 0038                345    AND.B   #$38,D0   * Mask D0 with 0111000 to get MODE bits only
0000120A  E600                     346    ASR.B   #3,D0 * Shift the result so D0 ranges between 000 and 111
0000120C                           347  
0000120C  B03C 0000                348    CMP.B   #0,D0         *000 -> Register
00001210  6700 11F8                349    BEQ     PRINT_ILLEGAL
00001214  B03C 0001                350    CMP.B   #1,D0         *001 -> Address Register
00001218  6700 11F0                351    BEQ     PRINT_ILLEGAL
0000121C  B03C 0003                352    CMP.B   #3,D0         *011 -> Address Register  (Indirect)+
00001220  6700 11E8                353    BEQ     PRINT_ILLEGAL
00001224  B03C 0004                354    CMP.B   #4,D0         *100 -> Address Register -(Indirect)
00001228  6700 11E0                355    BEQ     PRINT_ILLEGAL
0000122C                           356  
0000122C                           357    * ------ Print the effective address ------
0000122C  2C07                     358    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
0000122E  4EB9 00001DC8            359    JSR     PUSH_EA_MODE_ID
00001234                           360  
00001234                           361  * ------ Print a comma ------
00001234  4BF9 000023FA            362    LEA     PRINT_COMMA,A5   * Load the print subroutine
0000123A  2F0D                     363    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000123C  5878 1008                364    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001240                           365  
00001240                           366  * ------ Get Destination Address ------
00001240  2007                     367    MOVE.L    D7,D0
00001242  E058                     368    ROR.W     #$8,D0 * Get the three register bits
00001244  E258                     369    ROR.W     #$1,D0
00001246  C07C 0007                370    AND.W     #$7,D0 * Mask 111
0000124A                           371  
0000124A  13C0 00002B6A            372    MOVE.B    D0,MISC_NUMBER
00001250                           373  
00001250                           374  * ------ Print Destination Address ------
00001250  4BF9 00001FDA            375    LEA       PRINT_MISC_NUMBER_AS_ADDRESS,A5
00001256  2F0D                     376    MOVE.L    A5, -(SP)       * Put the print subroutine jump onto the stack
00001258  5878 1008                377    ADD.W     #4,PRINT_COUNT
0000125C                           378  
0000125C                           379  
0000125C  5478 1010                380    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
00001260                           381  
00001260  6000 0B3A                382    BRA   PRINT_OPCODE
00001264                           383  
00001264                           384  
00001264                           385  *-------------------------------------------------------------------------------
00001264                           386  * NOT
00001264                           387  *
00001264                           388  * "NOT" -> <.Size> -> <ea>
00001264                           389  *
00001264                           390  * Effective address does not allow An
00001264                           391  *-------------------------------------------------------------------------------
00001264                           392  NOT
00001264                           393  
00001264                           394  * ------ Print "NOT" ------
00001264  4BF9 000023BA            395    LEA     PRINT_NOT,A5    * Load the print subroutine into intermediate address
0000126A  2F0D                     396    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000126C  5878 1008                397    ADD.W   #4,PRINT_COUNT
00001270                           398  
00001270                           399    * ------ Print size ------
00001270  4280                     400      CLR.L   D0
00001272  2007                     401      MOVE.L  D7,D0
00001274                           402  
00001274  EC58                     403      ROR.W   #06,D0     * Get bits 7,6 on end
00001276  C03C 0003                404      AND.B   #03,D0     * Isolate bits 7,6
0000127A                           405  
0000127A  1800                     406      MOVE.B   D0,D4      * Move bits 7,6 to D4 for BWL
0000127C  4EB9 00001EA2            407      JSR      PUSH_BWL
00001282                           408  
00001282                           409  
00001282                           410    * ------ An is not allowed ------
00001282  4280                     411    CLR.L   D0
00001284  1007                     412    MOVE.B  D7,D0 * Put opcode in D0
00001286  C03C 0038                413    AND.B   #$38,D0   * Mask D0 with 0111000 to get MODE bits only
0000128A  E600                     414    ASR.B   #3,D0 * Shift the result so D0 ranges between 000 and 111
0000128C                           415  
0000128C  B03C 0001                416    CMP.B   #1,D0         *001 -> Address Register
00001290  6700 1178                417    BEQ     PRINT_ILLEGAL
00001294                           418  
00001294                           419    * ------ Print the effective address ------
00001294  2C07                     420    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001296  4EB9 00001DC8            421    JSR     PUSH_EA_MODE_ID
0000129C                           422  
0000129C  5478 1010                423    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
000012A0                           424  
000012A0  6000 0AFA                425    BRA   PRINT_OPCODE
000012A4                           426  
000012A4                           427  
000012A4                           428  *-------------------------------------------------------------------------------
000012A4                           429  * AND
000012A4                           430  *
000012A4                           431  *-------------------------------------------------------------------------------
000012A4                           432  AND
000012A4                           433  
000012A4                           434  * ------ Print "AND" ------
000012A4  4BF9 000021A4            435    LEA     PRINT_AND,A5    * Load the print subroutine into intermediate address
000012AA  2F0D                     436    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000012AC  5878 1008                437    ADD.W   #4,PRINT_COUNT
000012B0                           438  
000012B0                           439  * ------ Print size ------
000012B0  4280                     440    CLR.L    D0
000012B2  2007                     441    MOVE.L   D7,D0
000012B4                           442  
000012B4  EC58                     443    ROR.W    #06,D0     * Get bits 7,6 on end
000012B6  C03C 0003                444    AND.B    #03,D0     * Isolate bits 7,6
000012BA                           445  
000012BA  1800                     446    MOVE.B   D0,D4     * Move bits 7,6 to D4 for BWL
000012BC  4EB9 00001EA2            447    JSR      PUSH_BWL
000012C2                           448  
000012C2                           449  * ------ Reset D0, determine order ------
000012C2  2007                     450    MOVE.L  D7,D0
000012C4  E058                     451    ROR.W   #08,D0     * Get bit 8 on the end
000012C6  C07C 0001                452    AND.W   #1,D0
000012CA                           453  
000012CA                           454    * If bit 8 == 0 the order is <ea> AND Dn
000012CA                           455    * If bit 8 == 1 the order is Dn AND <ea>
000012CA                           456  
000012CA  B03C 0001                457    CMP.B   #1,D0
000012CE  6700 004C                458    BEQ     AND_DN_FIRST
000012D2                           459  
000012D2                           460  * ------ Print order is effective address, data register ------
000012D2                           461  AND_EA_FIRST
000012D2                           462  
000012D2                           463    * ------ An is not allowed ------
000012D2  4280                     464    CLR.L   D0
000012D4  1007                     465    MOVE.B  D7,D0 * Put opcode in D0
000012D6  C03C 0038                466    AND.B   #$38,D0   * Mask D0 with 0111000 to get MODE bits only
000012DA  E600                     467    ASR.B   #3,D0 * Shift the result so D0 ranges between 000 and 111
000012DC                           468  
000012DC  B03C 0001                469    CMP.B   #1,D0         *001 -> Address Register
000012E0  6700 1128                470    BEQ     PRINT_ILLEGAL
000012E4                           471  
000012E4                           472    * ------ Print the effective address ------
000012E4  2C07                     473    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
000012E6  4EB9 00001DC8            474    JSR     PUSH_EA_MODE_ID
000012EC                           475  
000012EC                           476    * ------ Print a comma ------
000012EC  4BF9 000023FA            477    LEA     PRINT_COMMA,A5   * Load the print subroutine
000012F2  2F0D                     478    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000012F4  5878 1008                479    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000012F8                           480  
000012F8                           481    * ------ Determine the register number ------
000012F8  2007                     482    MOVE.L  D7,D0
000012FA  E058                     483    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
000012FC  E258                     484    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
000012FE  C07C 0007                485    AND.W   #7,D0 * Mask against 111 to only get 3 bits
00001302                           486  
00001302                           487    * ------ Print the register number ------
00001302  13C0 00002B6A            488    MOVE.B  D0,MISC_NUMBER
00001308  4BF9 00002000            489    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
0000130E  2F0D                     490    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001310  5878 1008                491    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001314                           492  
00001314  5478 1010                493    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
00001318                           494  
00001318  6000 0A82                495    BRA   PRINT_OPCODE
0000131C                           496  
0000131C                           497  
0000131C                           498  * ------ Print order is data register, effective address ------
0000131C                           499  AND_DN_FIRST
0000131C                           500  
0000131C                           501  
0000131C                           502    * ------ Determine the register number ------
0000131C  2007                     503    MOVE.L  D7,D0
0000131E  E058                     504    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
00001320  E258                     505    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
00001322  C07C 0007                506    AND.W   #7,D0 * Mask against 111 to only get 3 bits
00001326                           507  
00001326                           508    * ------ Print the register number ------
00001326  13C0 00002B6A            509    MOVE.B  D0,MISC_NUMBER
0000132C  4BF9 00002000            510    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
00001332  2F0D                     511    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001334  5878 1008                512    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001338                           513  
00001338                           514    * ------ Print a comma ------
00001338  4BF9 000023FA            515    LEA     PRINT_COMMA,A5   * Load the print subroutine
0000133E  2F0D                     516    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001340  5878 1008                517    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001344                           518  
00001344                           519    * ------ Print the effective address ------
00001344  2C07                     520    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001346  4EB9 00001DC8            521    JSR     PUSH_EA_MODE_ID
0000134C                           522  
0000134C  5478 1010                523    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
00001350                           524  
00001350  6000 0A4A                525    BRA   PRINT_OPCODE
00001354                           526  
00001354                           527  
00001354                           528  *-------------------------------------------------------------------------------
00001354                           529  * OR
00001354                           530  *
00001354                           531  *
00001354                           532  *-------------------------------------------------------------------------------
00001354                           533  OR
00001354                           534  
00001354                           535  * ------ Print "OR" ------
00001354  4BF9 000021B4            536    LEA     PRINT_OR,A5    * Load the print subroutine into intermediate address
0000135A  2F0D                     537    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000135C  5878 1008                538    ADD.W   #4,PRINT_COUNT
00001360                           539  
00001360                           540  * ------ Print size ------
00001360  4280                     541    CLR.L   D0
00001362  2007                     542    MOVE.L  D7,D0
00001364                           543  
00001364  EC58                     544    ROR.W   #06,D0     * Get bits 7,6 on end
00001366  C03C 0003                545    AND.B   #03,D0     * Isolate bits 7,6
0000136A                           546  
0000136A  1800                     547    MOVE.B   D0,D4            * Move bits 7,6 to D4 for BWL
0000136C  4EB9 00001EA2            548    JSR      PUSH_BWL
00001372                           549  
00001372                           550  * ------ Reset D0, determine order ------
00001372  2007                     551    MOVE.L  D7,D0
00001374  E058                     552    ROR.W   #08,D0     * Get bit 8 on the end
00001376  C07C 0001                553    AND.W   #1,D0
0000137A                           554  
0000137A                           555    * If bit 8 == 0 the order is <ea> OR Dn
0000137A                           556    * If bit 8 == 1 the order is Dn OR <ea>
0000137A                           557  
0000137A                           558  
0000137A  B03C 0001                559    CMP.B   #1,D0
0000137E  6700 004C                560    BEQ     OR_DN_FIRST
00001382                           561  
00001382                           562  * ------ Print order is effective address, data register ------
00001382                           563  OR_EA_FIRST
00001382                           564  
00001382                           565    * ------ An is not allowed ------
00001382  4280                     566    CLR.L   D0
00001384  1007                     567    MOVE.B  D7,D0 * Put opcode in D0
00001386  C03C 0038                568    AND.B   #$38,D0   * Mask D0 with 0111000 to get MODE bits only
0000138A  E600                     569    ASR.B   #3,D0 * Shift the result so D0 ranges between 000 and 111
0000138C                           570  
0000138C  B03C 0001                571    CMP.B   #1,D0         *001 -> Address Register
00001390  6700 1078                572    BEQ     PRINT_ILLEGAL
00001394                           573  
00001394                           574    * ------ Print the effective address ------
00001394  2C07                     575    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001396  4EB9 00001DC8            576    JSR     PUSH_EA_MODE_ID
0000139C                           577  
0000139C                           578    * ------ Print a comma ------
0000139C  4BF9 000023FA            579    LEA     PRINT_COMMA,A5   * Load the print subroutine
000013A2  2F0D                     580    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000013A4  5878 1008                581    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000013A8                           582  
000013A8                           583    * ------ Determine the register number ------
000013A8  2007                     584    MOVE.L  D7,D0
000013AA  E058                     585    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
000013AC  E258                     586    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
000013AE  C07C 0007                587    AND.W   #7,D0 * Mask against 111 to only get 3 bits
000013B2                           588  
000013B2                           589    * ------ Print the register number ------
000013B2  13C0 00002B6A            590    MOVE.B  D0,MISC_NUMBER
000013B8  4BF9 00002000            591    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
000013BE  2F0D                     592    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000013C0  5878 1008                593    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000013C4                           594  
000013C4  5478 1010                595    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
000013C8                           596  
000013C8  6000 09D2                597    BRA   PRINT_OPCODE
000013CC                           598  
000013CC                           599  
000013CC                           600  * ------ Print order is data register, effective address ------
000013CC                           601  OR_DN_FIRST
000013CC                           602  
000013CC                           603  
000013CC                           604    * ------ Determine the register number ------
000013CC  2007                     605    MOVE.L  D7,D0
000013CE  E058                     606    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
000013D0  E258                     607    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
000013D2  C07C 0007                608    AND.W   #7,D0 * Mask against 111 to only get 3 bits
000013D6                           609  
000013D6                           610    * ------ Print the register number ------
000013D6  13C0 00002B6A            611    MOVE.B  D0,MISC_NUMBER
000013DC  4BF9 00002000            612    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
000013E2  2F0D                     613    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000013E4  5878 1008                614    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000013E8                           615  
000013E8                           616    * ------ Print a comma ------
000013E8  4BF9 000023FA            617    LEA     PRINT_COMMA,A5   * Load the print subroutine
000013EE  2F0D                     618    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000013F0  5878 1008                619    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000013F4                           620  
000013F4                           621    * ------ Print the effective address ------
000013F4  2C07                     622    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
000013F6  4EB9 00001DC8            623    JSR     PUSH_EA_MODE_ID
000013FC                           624  
000013FC  5478 1010                625    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
00001400                           626  
00001400  6000 099A                627    BRA   PRINT_OPCODE
00001404                           628  
00001404                           629  
00001404                           630  
00001404                           631  
00001404                           632  *-------------------------------------------------------------------------------
00001404                           633  * SUB
00001404                           634  *
00001404                           635  *
00001404                           636  *-------------------------------------------------------------------------------
00001404                           637  SUB
00001404                           638  
00001404                           639  * ------ Print "SUB" ------
00001404  4BF9 00002194            640    LEA     PRINT_SUB,A5    * Load the print subroutine into intermediate address
0000140A  2F0D                     641    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000140C  5878 1008                642    ADD.W   #4,PRINT_COUNT
00001410                           643  
00001410                           644  * ------ Print size ------
00001410  4280                     645    CLR.L   D0
00001412  2007                     646    MOVE.L  D7,D0
00001414                           647  
00001414  EC58                     648    ROR.W   #06,D0     * Get bits 7,6 on end
00001416  C03C 0003                649    AND.B   #03,D0     * Isolate bits 7,6
0000141A                           650  
0000141A  1800                     651    MOVE.B   D0,D4            * Move bits 7,6 to D4 for BWL
0000141C  4EB9 00001EA2            652    JSR      PUSH_BWL
00001422                           653  
00001422                           654  * ------ Reset D0, determine order ------
00001422  2007                     655    MOVE.L  D7,D0
00001424  E058                     656    ROR.W   #08,D0     * Get bit 8 on the end
00001426  C07C 0001                657    AND.W   #1,D0
0000142A                           658  
0000142A                           659    * If bit 8 == 0 the order is Dn - <ea>
0000142A                           660    * If bit 8 == 1 the order is <ea> - Dn
0000142A                           661  
0000142A  B03C 0000                662    CMP.B   #0,D0
0000142E  6700 003A                663    BEQ     SUB_DN_FIRST
00001432                           664  
00001432                           665  * ------ Print order is effective address, data register ------
00001432                           666  SUB_EA_FIRST
00001432                           667  
00001432                           668  
00001432                           669    * ------ Print the effective address ------
00001432  2C07                     670    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001434  4EB9 00001DC8            671    JSR     PUSH_EA_MODE_ID
0000143A                           672  
0000143A                           673    * ------ Print a comma ------
0000143A  4BF9 000023FA            674    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001440  2F0D                     675    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001442  5878 1008                676    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001446                           677  
00001446                           678    * ------ Determine the register number ------
00001446  2007                     679    MOVE.L  D7,D0
00001448  E058                     680    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
0000144A  E258                     681    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
0000144C  C07C 0007                682    AND.W   #7,D0 * Mask against 111 to only get 3 bits
00001450                           683  
00001450                           684    * ------ Print the register number ------
00001450  13C0 00002B6A            685    MOVE.B  D0,MISC_NUMBER
00001456  4BF9 00002000            686    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
0000145C  2F0D                     687    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000145E  5878 1008                688    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001462                           689  
00001462  5478 1010                690    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
00001466                           691  
00001466  6000 0934                692    BRA   PRINT_OPCODE
0000146A                           693  
0000146A                           694  
0000146A                           695  * ------ Print order is data register, effective address ------
0000146A                           696  SUB_DN_FIRST
0000146A                           697  
0000146A                           698  
0000146A                           699    * ------ Determine the register number ------
0000146A  2007                     700    MOVE.L  D7,D0
0000146C  E058                     701    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
0000146E  E258                     702    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
00001470  C07C 0007                703    AND.W   #7,D0 * Mask against 111 to only get 3 bits
00001474                           704  
00001474                           705    * ------ Print the register number ------
00001474  13C0 00002B6A            706    MOVE.B  D0,MISC_NUMBER
0000147A  4BF9 00002000            707    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
00001480  2F0D                     708    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001482  5878 1008                709    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001486                           710  
00001486                           711    * ------ Print a comma ------
00001486  4BF9 000023FA            712    LEA     PRINT_COMMA,A5   * Load the print subroutine
0000148C  2F0D                     713    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000148E  5878 1008                714    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001492                           715  
00001492                           716    * ------ Print the effective address ------
00001492  2C07                     717    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001494  4EB9 00001DC8            718    JSR     PUSH_EA_MODE_ID
0000149A                           719  
0000149A  5478 1010                720    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
0000149E                           721  
0000149E  6000 08FC                722    BRA   PRINT_OPCODE
000014A2                           723  
000014A2                           724  
000014A2                           725  
000014A2                           726  
000014A2                           727  
000014A2                           728  
000014A2                           729  *-------------------------------------------------------------------------------
000014A2                           730  * MOVEM
000014A2                           731  *
000014A2                           732  *
000014A2                           733  *-------------------------------------------------------------------------------
000014A2                           734  MOVEM
000014A2                           735  
000014A2                           736  * ------ Check for ILLEGAL ------
000014A2                           737  * Bits 7-9 must equal 001
000014A2  4280                     738    CLR.L   D0
000014A4  3007                     739    MOVE.W  D7,D0
000014A6                           740  
000014A6  EE58                     741    ROR.W   #7,D0 * Shift to bit 7
000014A8  C07C 0007                742    AND.W   #7,D0 * Mask 111
000014AC                           743  
000014AC  B03C 0001                744    CMP.B   #1,D0
000014B0  6600 0F58                745    BNE     PRINT_ILLEGAL
000014B4                           746  
000014B4                           747  
000014B4                           748  * ------ Put List Mask in MISC_OPCODE ------
000014B4  2038 1016                749    MOVE.L    DATA1,D0
000014B8  4840                     750    SWAP      D0
000014BA  33C0 00002B6C            751    MOVE.W    D0,MISC_OPCODE
000014C0                           752  
000014C0                           753  * ------ Shift so DATA1 is standard ------
000014C0                           754  * The Effective Address Subroutine expects data in DATA1
000014C0                           755  * So we've moved the List Mask to MISC_OPCODE
000014C0                           756  * and shifted everything back 1 word so it fits nicely
000014C0                           757  
000014C0  2238 101C                758    MOVE.L    DATA2,D1
000014C4  4841                     759    SWAP      D1
000014C6                           760  
000014C6  3001                     761    MOVE.W    D1,D0
000014C8  21C0 1016                762    MOVE.L    D0,DATA1
000014CC                           763  
000014CC                           764  * ------ Print "MOVEM" ------
000014CC                           765  
000014CC  4BF9 00002184            766    LEA     PRINT_MOVEM,A5
000014D2  2F0D                     767    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000014D4  5878 1008                768    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000014D8                           769  
000014D8                           770  * ------ Get Size Bit ------
000014D8  4280                     771    CLR.L   D0
000014DA  3007                     772    MOVE.W  D7,D0
000014DC                           773  
000014DC  EC58                     774    ROR.W   #6,D0 * Bit 6 is size bit
000014DE  C07C 0001                775    AND.W   #1,D0 * Mask 0001
000014E2                           776  
000014E2                           777  * ------ Size Branching ------
000014E2  B03C 0000                778    CMP.B   #0,D0 * 0 = Word
000014E6  6700 0016                779    BEQ     MOVEM_SIZE_WORD
000014EA  6600 0002                780    BNE     MOVEM_SIZE_LONG
000014EE                           781  
000014EE                           782  * ------ Print ".L" ------
000014EE                           783  MOVEM_SIZE_LONG
000014EE                           784  
000014EE  4BF9 000021E4            785    LEA     PRINT_LONG_DESIGNATOR,A5 * Load the ".L" print subroutine
000014F4  2F0D                     786    MOVE.L  A5, -(SP)       * Put the subroutine onto the stack
000014F6  5878 1008                787    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000014FA                           788  
000014FA  6000 0012                789    BRA   MOVEM_SIZE_CONTINUE
000014FE                           790  
000014FE                           791  * ------ Print ".W" ------
000014FE                           792  MOVEM_SIZE_WORD
000014FE                           793  
000014FE  4BF9 000021D4            794    LEA     PRINT_WORD_DESIGNATOR,A5 * Load the ".W" print subroutine
00001504  2F0D                     795    MOVE.L  A5, -(SP)         * Put the subroutine onto the stack
00001506  5878 1008                796    ADD.W   #4,PRINT_COUNT    * Increment Print Count by 1 long
0000150A                           797  
0000150A  6000 0002                798    BRA   MOVEM_SIZE_CONTINUE
0000150E                           799  
0000150E                           800  MOVEM_SIZE_CONTINUE
0000150E                           801  
0000150E                           802  * ------ Get the direction bit ------
0000150E  4280                     803    CLR.L   D0
00001510  3007                     804    MOVE.W  D7,D0
00001512                           805  
00001512  E058                     806    ROR.W   #8,D0   * Get bit 10
00001514  E458                     807    ROR.W   #2,D0
00001516                           808  
00001516  C07C 0001                809    AND.W   #1,D0   * Mask 0000 0001
0000151A                           810  
0000151A  B03C 0001                811    CMP.B   #1,D0
0000151E  6700 0006                812    BEQ     MOVEM_MEM2REG * If direction bit is 1, do memory -> register(s)
00001522                           813  
00001522  6000 009E                814    BRA     MOVEM_REG2MEM * else, do register(s) -> memory
00001526                           815  
00001526                           816  
00001526                           817  *-------------------------------------------------------------------------------
00001526                           818  * MOVEM_MEM2REG
00001526                           819  *
00001526                           820  * • Do modified EA_MODE first
00001526                           821  *   • (An), (An)+, (xxx).W, (xxx).L only!
00001526                           822  * • Then push MOVEM register print
00001526                           823  *-------------------------------------------------------------------------------
00001526                           824  MOVEM_MEM2REG
00001526                           825  
00001526                           826  
00001526                           827  * ---- Custom Branching Block ----
00001526  4280                     828    CLR.L     D0
00001528  4286                     829    CLR.L     D6
0000152A  1007                     830    MOVE.B    D7,D0 * Copy opcode into local variable
0000152C  3C07                     831    MOVE.W    D7,D6
0000152E                           832  
0000152E  C03C 0038                833    AND.B     #$38,D0 * Mask D0 with 0111000 to get MODE bits only
00001532  E600                     834    ASR.B     #3,D0   * Shift the result so D0 ranges between 000 and 111
00001534  1200                     835    MOVE.B    D0,D1 * Save result for later.
00001536                           836  
00001536  B03C 0002                837    CMP.B     #2,D0
0000153A  6700 0032                838    BEQ       MOVEM_MEM2REG_AN_IND
0000153E  B03C 0003                839    CMP.B     #3,D0
00001542  6700 0034                840    BEQ       MOVEM_MEM2REG_POST_INC
00001546  B03C 0007                841    CMP.B     #7,D0
0000154A  6700 0006                842    BEQ       MOVEM_MEM2REG_ELSE
0000154E                           843  
0000154E  6000 0EBA                844    BRA       PRINT_ILLEGAL
00001552                           845  
00001552                           846  MOVEM_MEM2REG_ELSE
00001552                           847  
00001552  4280                     848    CLR.L   D0
00001554  1007                     849    MOVE.B  D7,D0
00001556  C03C 0007                850    AND.B   #7,D0
0000155A                           851  
0000155A  B03C 0000                852    CMP.B   #0,D0
0000155E  6700 0022                853    BEQ     MOVEM_MEM2REG_IND_SHORT
00001562  B03C 0001                854    CMP.B   #1,D0
00001566  6700 0024                855    BEQ     MOVEM_MEM2REG_IND_LONG
0000156A                           856  
0000156A  6000 0E9E                857    BRA     PRINT_ILLEGAL
0000156E                           858  
0000156E                           859  *________________________________________
0000156E                           860  * Jump directly into the middle of
0000156E                           861  * the PUSH_EA_MODE subroutine
0000156E                           862  *----------------------------------------
0000156E                           863  MOVEM_MEM2REG_AN_IND
0000156E                           864  
0000156E  4EB9 00001E18            865    JSR     PUSH_EA_MODE_ID_AN_INDIRECT
00001574  6000 0020                866    BRA     MOVEM_MEM2REG_EA_FINISH
00001578                           867  *________________________________________
00001578                           868  * Jump directly into the middle of
00001578                           869  * the PUSH_EA_MODE subroutine
00001578                           870  *----------------------------------------
00001578                           871  MOVEM_MEM2REG_POST_INC
00001578                           872  
00001578  4EB9 00001E22            873    JSR     PUSH_EA_MODE_ID_AN_POST_INC
0000157E  6000 0016                874    BRA     MOVEM_MEM2REG_EA_FINISH
00001582                           875  
00001582                           876  *________________________________________
00001582                           877  * Jump directly into the middle of
00001582                           878  * the PUSH_EA_MODE subroutine
00001582                           879  *----------------------------------------
00001582                           880  MOVEM_MEM2REG_IND_SHORT
00001582                           881  
00001582  4EB9 00001E58            882    JSR   PUSH_EA_MODE_ID_IND_SHORT
00001588  6000 000C                883    BRA   MOVEM_MEM2REG_EA_FINISH
0000158C                           884  
0000158C                           885  *________________________________________
0000158C                           886  * Jump directly into the middle of
0000158C                           887  * the PUSH_EA_MODE subroutine
0000158C                           888  *----------------------------------------
0000158C                           889  MOVEM_MEM2REG_IND_LONG
0000158C                           890  
0000158C  4EB9 00001E6C            891    JSR   PUSH_EA_MODE_ID_IND_LONG
00001592  6000 0002                892    BRA     MOVEM_MEM2REG_EA_FINISH
00001596                           893  
00001596                           894  *________________________________________
00001596                           895  * Jump directly into the middle of
00001596                           896  * the PUSH_EA_MODE subroutine
00001596                           897  *----------------------------------------
00001596                           898  MOVEM_MEM2REG_EA_FINISH
00001596                           899  
00001596  4BF9 000023FA            900    LEA     PRINT_COMMA,A5   * Load the print subroutine
0000159C  2F0D                     901    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000159E  5878 1008                902    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000015A2                           903  
000015A2  4BF9 000023EA            904    LEA     PRINT_SPACE,A5   * Load the print subroutine
000015A8  2F0D                     905    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000015AA  5878 1008                906    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000015AE                           907  
000015AE  4BF9 00002478            908    LEA     PRINT_MOVEM_STANDARD,A5   * Load the print subroutine
000015B4  2F0D                     909    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000015B6  5878 1008                910    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000015BA                           911  
000015BA                           912  
000015BA  5878 1010                913    ADD.W  #4,LOOP_INC     * Increment the loop counter by 2 bytes
000015BE                           914  
000015BE  6000 07DC                915    BRA   PRINT_OPCODE
000015C2                           916  
000015C2                           917  
000015C2                           918  *-------------------------------------------------------------------------------
000015C2                           919  * MOVEM_REG2MEM
000015C2                           920  *
000015C2                           921  * • Push MOVEM register print first
000015C2                           922  * • Then do modified EA_MODE
000015C2                           923  *     • (An), -(An), (xxx).W, (xxx.L) only!
000015C2                           924  *
000015C2                           925  *-------------------------------------------------------------------------------
000015C2                           926  MOVEM_REG2MEM
000015C2                           927  
000015C2                           928  
000015C2                           929    * ---- Custom Branching Block ----
000015C2  4280                     930      CLR.L     D0
000015C4  4286                     931      CLR.L     D6
000015C6  1007                     932      MOVE.B    D7,D0 * Copy opcode into local variable
000015C8  3C07                     933      MOVE.W    D7,D6
000015CA                           934  
000015CA  C03C 0038                935      AND.B     #$38,D0 * Mask D0 with 0111000 to get MODE bits only
000015CE  E600                     936      ASR.B     #3,D0 * Shift the result so D0 ranges between 000 and 111
000015D0                           937  
000015D0  B03C 0002                938      CMP.B     #2,D0
000015D4  6700 0032                939      BEQ       MOVEM_REG2MEM_AN_IND
000015D8  B03C 0004                940      CMP.B     #4,D0
000015DC  6700 0040                941      BEQ       MOVEM_REG2MEM_PRE_DEC
000015E0  B03C 0007                942      CMP.B     #7,D0
000015E4  6700 0006                943      BEQ       MOVEM_REG2MEM_ELSE
000015E8                           944  
000015E8  6000 0E20                945      BRA       PRINT_ILLEGAL
000015EC                           946  
000015EC                           947  MOVEM_REG2MEM_ELSE
000015EC                           948  
000015EC  4280                     949      CLR.L   D0
000015EE  1007                     950      MOVE.B  D7,D0
000015F0  C03C 0007                951      AND.B   #7,D0
000015F4                           952  
000015F4  B03C 0000                953      CMP.B   #0,D0
000015F8  6700 003A                954      BEQ     MOVEM_REG2MEM_IND_SHORT
000015FC  B03C 0001                955      CMP.B   #1,D0
00001600  6700 0048                956      BEQ     MOVEM_REG2MEM_IND_LONG
00001604                           957  
00001604  6000 0E04                958      BRA     PRINT_ILLEGAL
00001608                           959  
00001608                           960  *________________________________________
00001608                           961  * Jump directly into the middle of
00001608                           962  * the PUSH_EA_MODE subroutine
00001608                           963  *----------------------------------------
00001608                           964  MOVEM_REG2MEM_AN_IND
00001608                           965  
00001608  4BF9 00002478            966      LEA     PRINT_MOVEM_STANDARD,A5   * Load the print subroutine
0000160E  2F0D                     967      MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001610  5878 1008                968      ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001614                           969  
00001614  4EB9 00001E18            970      JSR     PUSH_EA_MODE_ID_AN_INDIRECT
0000161A  6000 0044                971      BRA     MOVEM_REG2MEM_EA_FINISH
0000161E                           972  *________________________________________
0000161E                           973  * Jump directly into the middle of
0000161E                           974  * the PUSH_EA_MODE subroutine
0000161E                           975  *----------------------------------------
0000161E                           976  MOVEM_REG2MEM_PRE_DEC
0000161E                           977  
0000161E  4BF9 00002610            978      LEA     PRINT_MOVEM_REVERSE,A5   * Load the print subroutine
00001624  2F0D                     979      MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001626  5878 1008                980      ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000162A                           981  
0000162A  4EB9 00001E2C            982      JSR     PUSH_EA_MODE_ID_AN_PRE_DEC
00001630  6000 002E                983      BRA     MOVEM_REG2MEM_EA_FINISH
00001634                           984  
00001634                           985  *________________________________________
00001634                           986  * Jump directly into the middle of
00001634                           987  * the PUSH_EA_MODE subroutine
00001634                           988  *----------------------------------------
00001634                           989  MOVEM_REG2MEM_IND_SHORT
00001634                           990  
00001634  4BF9 00002478            991      LEA     PRINT_MOVEM_STANDARD,A5   * Load the print subroutine
0000163A  2F0D                     992      MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000163C  5878 1008                993      ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001640                           994  
00001640                           995  
00001640  4EB9 00001E58            996      JSR   PUSH_EA_MODE_ID_IND_SHORT
00001646  6000 0018                997      BRA   MOVEM_REG2MEM_EA_FINISH
0000164A                           998  
0000164A                           999  *________________________________________
0000164A                          1000  * Jump directly into the middle of
0000164A                          1001  * the PUSH_EA_MODE subroutine
0000164A                          1002  *----------------------------------------
0000164A                          1003  MOVEM_REG2MEM_IND_LONG
0000164A                          1004  
0000164A  4BF9 00002478           1005      LEA     PRINT_MOVEM_STANDARD,A5   * Load the print subroutine
00001650  2F0D                    1006      MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001652  5878 1008               1007      ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001656                          1008  
00001656  4EB9 00001E6C           1009      JSR   PUSH_EA_MODE_ID_IND_LONG
0000165C  6000 0002               1010      BRA     MOVEM_REG2MEM_EA_FINISH
00001660                          1011  
00001660                          1012  *________________________________________
00001660                          1013  * Jump directly into the middle of
00001660                          1014  * the PUSH_EA_MODE subroutine
00001660                          1015  *----------------------------------------
00001660                          1016  MOVEM_REG2MEM_EA_FINISH
00001660                          1017  
00001660  5878 1010               1018    ADD.W  #4,LOOP_INC     * Increment the loop counter by 2 bytes
00001664                          1019  
00001664  6000 0736               1020    BRA   PRINT_OPCODE
00001668                          1021  
00001668                          1022  
00001668                          1023  *-------------------------------------------------------------------------------
00001668                          1024  * MOVEQ
00001668                          1025  * Assumption: Bit 8 is checked for zero so this subroutine is always valid
00001668                          1026  *
00001668                          1027  *-------------------------------------------------------------------------------
00001668                          1028  MOVEQ
00001668                          1029  
00001668  4280                    1030    CLR.L   D0
0000166A  3007                    1031    MOVE.W  D7,D0
0000166C                          1032  
0000166C                          1033  * ------ Print "MOVEQ" ------
0000166C                          1034  
0000166C  4BF9 00002174           1035    LEA     PRINT_MOVEQ,A5
00001672  2F0D                    1036    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001674  5878 1008               1037    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001678                          1038  
00001678                          1039  * ------ Print Data ------
00001678                          1040  
00001678  C07C 00FF               1041    AND.W   #$FF,D0 * Get bits 0-7
0000167C  13C0 00002B6A           1042    MOVE.B  D0,MISC_NUMBER
00001682                          1043  
00001682  4BF9 0000211E           1044    LEA     PRINT_MISC_NUMBER_AS_DATA,A5   * Load the print subroutine
00001688  2F0D                    1045    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000168A  5878 1008               1046    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000168E                          1047  
0000168E                          1048  * ------ Print a comma ------
0000168E  4BF9 000023FA           1049    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001694  2F0D                    1050    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001696  5878 1008               1051    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000169A                          1052  
0000169A                          1053  * ------ Print Register ------
0000169A                          1054  
0000169A  3007                    1055    MOVE.W  D7,D0
0000169C  E058                    1056    ROR.W   #8,D0 *Shift to get bits 9 - 11
0000169E  E258                    1057    ROR.W   #1,D0
000016A0                          1058  
000016A0  C07C 0007               1059    AND.W   #7,D0 * Mask 111
000016A4  13C0 00002B6E           1060    MOVE.B  D0,MISC_REGISTER
000016AA                          1061  
000016AA  4BF9 00002026           1062    LEA     PRINT_MISC_REGISTER,A5   * Load the print subroutine
000016B0  2F0D                    1063    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000016B2  5878 1008               1064    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000016B6                          1065  
000016B6  5478 1010               1066    ADD.W  #2,LOOP_INC     * Increment the loop counter by 2 bytes
000016BA                          1067  
000016BA  6000 06E0               1068    BRA   PRINT_OPCODE
000016BE                          1069  
000016BE                          1070  
000016BE                          1071  
000016BE                          1072  
000016BE                          1073  *-------------------------------------------------------------------------------
000016BE                          1074  * MOVE_MOVEA
000016BE                          1075  *
000016BE                          1076  * Both opcodes start with 00 so we need to figure out which is which
000016BE                          1077  *-------------------------------------------------------------------------------
000016BE                          1078  MOVE_MOVEA
000016BE  4280                    1079      CLR.L   D0
000016C0  3007                    1080      MOVE.W  D7,D0
000016C2                          1081  
000016C2  EC58                    1082      ROR     #$6,D0    *Get bits 6, 7, and 8
000016C4  0200 0007               1083      ANDI.B  #$07,D0   * Mask against 111
000016C8                          1084  
000016C8  0C00 0001               1085      CMPI.B  #1,D0     * If bits equal 001, it's MOVEA
000016CC  6700 015A               1086      BEQ     MOVEA
000016D0                          1087  
000016D0  6000 0002               1088      BRA     MOVE      * Else it's MOVE
000016D4                          1089  
000016D4                          1090  *-------------------------------------------------------------------------------
000016D4                          1091  * MOVE
000016D4                          1092  *
000016D4                          1093  * This hurts me
000016D4                          1094  *
000016D4                          1095  *-------------------------------------------------------------------------------
000016D4                          1096  MOVE
000016D4                          1097  
000016D4  2007                    1098    MOVE.L    D7,D0 * Load the print subroutine into intermediate address
000016D6                          1099  
000016D6                          1100  * ------ Print "MOVE" ------
000016D6                          1101  
000016D6  4BF9 00002154           1102    LEA       PRINT_MOVE,A5
000016DC  2F0D                    1103    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000016DE  5878 1008               1104    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000016E2                          1105  
000016E2                          1106  * ------ Determine Size ------
000016E2  E058                    1107    ROR.W   #$8,D0 * Shift a total of 12 bits to retrieve SIZE designator
000016E4  E858                    1108    ROR.W   #$4,D0
000016E6  C07C 0007               1109    AND.W   #$7,D0 * Mask 111
000016EA                          1110  
000016EA  4284                    1111    CLR.L   D4 * Clear D4 for use as BWL parameter
000016EC                          1112  
000016EC  B03C 0001               1113    CMP.B   #1,D0
000016F0  6700 0016               1114    BEQ     MOVE_B
000016F4  B03C 0003               1115    CMP.B   #3,D0
000016F8  6700 001C               1116    BEQ     MOVE_W
000016FC  B03C 0002               1117    CMP.B   #2,D0
00001700  6700 0022               1118    BEQ     MOVE_L
00001704                          1119  
00001704  6000 0D04               1120    BRA     PRINT_ILLEGAL
00001708                          1121  
00001708                          1122  * ------ Size Branching ------
00001708                          1123  * MOVE uses a nonstandard size code. We convert it to the standard so we can
00001708                          1124  * easily use the existing PUSH_BWL subroutine
00001708                          1125  MOVE_B
00001708  183C 0000               1126    MOVE.B  #0,D4
0000170C  4EB9 00001EA2           1127    JSR     PUSH_BWL
00001712  6000 001E               1128    BRA     MOVE_SIZE_CONTINUE
00001716                          1129  
00001716                          1130  MOVE_W
00001716  183C 0001               1131    MOVE.B  #1,D4
0000171A  4EB9 00001EA2           1132    JSR     PUSH_BWL
00001720  6000 0010               1133    BRA     MOVE_SIZE_CONTINUE
00001724                          1134  
00001724                          1135  MOVE_L
00001724  183C 0002               1136    MOVE.B  #2,D4
00001728  4EB9 00001EA2           1137    JSR     PUSH_BWL
0000172E  6000 0002               1138    BRA     MOVE_SIZE_CONTINUE
00001732                          1139  
00001732                          1140  MOVE_SIZE_CONTINUE
00001732                          1141  
00001732                          1142  * ------ Print Source ------
00001732  2C07                    1143    MOVE.L    D7,D6
00001734  4EB9 00001DC8           1144    JSR       PUSH_EA_MODE_ID
0000173A                          1145  
0000173A                          1146  * ------ Print a comma ------
0000173A  4BF9 000023FA           1147    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001740  2F0D                    1148    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001742  5878 1008               1149    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001746                          1150  
00001746                          1151  * ------ Print Destination ------
00001746                          1152  * Unfortunately our PUSH_EA_MODE_ID wasn't designed for this :/
00001746                          1153  
00001746  2007                    1154    MOVE.L    D7,D0 * D0 holds MODE bits
00001748  2207                    1155    MOVE.L    D7,D1 * D1 holds REGISTER bits
0000174A                          1156  
0000174A  EC58                    1157    ROR.W     #$6,D0 * Get the three mode bits
0000174C  C07C 0007               1158    AND.W     #$7,D0 * Mask 111
00001750                          1159  
00001750  E059                    1160    ROR.W     #$8,D1 * Get the three register bits
00001752  E259                    1161    ROR.W     #$1,D1
00001754  C27C 0007               1162    AND.W     #$7,D1 * Mask 111
00001758                          1163  
00001758                          1164  * ---- Branching Block ----
00001758                          1165  
00001758                          1166  
00001758  13C1 00002B6A           1167    MOVE.B  D1,MISC_NUMBER * For modes that print the register bits as a number
0000175E                          1168  
0000175E  B03C 0000               1169    CMP.B   #0,D0         *000 -> Register
00001762  6700 0026               1170    BEQ     MOVE_MODE_DN
00001766  B03C 0002               1171    CMP.B   #2,D0         *010 -> Address Register   Indirect
0000176A  6700 0028               1172    BEQ     MOVE_MODE_AN_INDIRECT
0000176E  B03C 0003               1173    CMP.B   #3,D0         *011 -> Address Register  (Indirect)+
00001772  6700 002A               1174    BEQ     MOVE_MODE_AN_POST_INC
00001776  B03C 0004               1175    CMP.B   #4,D0         *100 -> Address Register -(Indirect)
0000177A  6700 002C               1176    BEQ     MOVE_MODE_AN_PRE_DEC
0000177E  B03C 0007               1177    CMP.B   #7,D0         *111 -> All Data Operations
00001782  6700 002E               1178    BEQ     MOVE_MODE_ELSE
00001786                          1179  
00001786  6000 0C82               1180    BRA     PRINT_ILLEGAL
0000178A                          1181  
0000178A                          1182  *________________________________________
0000178A                          1183  * Load Register Print Label
0000178A                          1184  *----------------------------------------
0000178A                          1185  MOVE_MODE_DN
0000178A  4BF9 00002000           1186    LEA   PRINT_MISC_NUMBER_AS_REGISTER,A5
00001790  6000 0088               1187    BRA   MOVE_MODE_FINISH
00001794                          1188  *________________________________________
00001794                          1189  * Load (Address Register) Print Label
00001794                          1190  *----------------------------------------
00001794                          1191  MOVE_MODE_AN_INDIRECT
00001794  4BF9 000020E0           1192    LEA   PRINT_MISC_ADDRESS_IND,A5
0000179A  6000 007E               1193    BRA   MOVE_MODE_FINISH
0000179E                          1194  *________________________________________
0000179E                          1195  * Load (Address Register)+ Print Label
0000179E                          1196  *----------------------------------------
0000179E                          1197  MOVE_MODE_AN_POST_INC
0000179E  4BF9 00002096           1198    LEA   PRINT_MISC_POST_INC,A5
000017A4  6000 0074               1199    BRA   MOVE_MODE_FINISH
000017A8                          1200  *________________________________________
000017A8                          1201  * Load -(Address Register) Print Label
000017A8                          1202  *----------------------------------------
000017A8                          1203  MOVE_MODE_AN_PRE_DEC
000017A8  4BF9 0000204C           1204    LEA   PRINT_MISC_PRE_DEC,A5
000017AE  6000 006A               1205    BRA   MOVE_MODE_FINISH
000017B2                          1206  
000017B2                          1207  *________________________________________
000017B2                          1208  * Handle Data Branching Logic
000017B2                          1209  *----------------------------------------
000017B2                          1210  MOVE_MODE_ELSE
000017B2                          1211  
000017B2  B23C 0000               1212      CMP.B   #0,D1
000017B6  6700 000A               1213      BEQ     MOVE_MODE_IND_SHORT
000017BA                          1214  
000017BA  B23C 0001               1215      CMP.B   #1,D1
000017BE  6700 002E               1216      BEQ     MOVE_MODE_IND_LONG
000017C2                          1217  
000017C2                          1218  * ------ Data is short ------
000017C2                          1219  MOVE_MODE_IND_SHORT
000017C2  0C78 0001 101A          1220      CMP.W  #1,DATA1_IN_USE
000017C8  6700 0016               1221      BEQ     MOVE_MODE_IND_SHORT_DATA2
000017CC  5478 1010               1222      ADD.W           #2, LOOP_INC * Adjust the Loop increment to skip the data
000017D0  31FC 0001 101A          1223      MOVE.W  #1,DATA1_IN_USE
000017D6                          1224  
000017D6  4BF9 000022EA           1225      LEA     PRINT_EA_MODE_ID_IND_SHORT,A5
000017DC  6000 003C               1226      BRA     MOVE_MODE_FINISH
000017E0                          1227  
000017E0                          1228  * ------ Data is short, DATA1 is in use ------
000017E0                          1229  MOVE_MODE_IND_SHORT_DATA2
000017E0  5478 1010               1230      ADD.W           #2, LOOP_INC * Adjust the Loop increment to skip the data
000017E4                          1231  
000017E4  4BF9 0000230A           1232      LEA     PRINT_EA_MODE_ID_IND_SHORT_DATA2,A5
000017EA  6000 002E               1233      BRA     MOVE_MODE_FINISH
000017EE                          1234  
000017EE                          1235  * ------ Data is Long ------
000017EE                          1236  MOVE_MODE_IND_LONG
000017EE  0C78 0001 101A          1237      CMP.W  #1,DATA1_IN_USE
000017F4  6700 0016               1238      BEQ     MOVE_MODE_IND_LONG_DATA2
000017F8                          1239  
000017F8  4BF9 0000232A           1240      LEA     PRINT_EA_MODE_ID_IND_LONG,A5
000017FE  5878 1010               1241      ADD.W           #4,LOOP_INC * Adjust the Loop increment to skip the data
00001802  31FC 0001 101A          1242      MOVE.W  #1,DATA1_IN_USE
00001808  6000 0010               1243      BRA     MOVE_MODE_FINISH
0000180C                          1244  
0000180C                          1245  
0000180C                          1246  * ------ Data is Long, DATA1 is in use ------
0000180C                          1247  MOVE_MODE_IND_LONG_DATA2
0000180C                          1248  
0000180C  4BF9 00002344           1249      LEA     PRINT_EA_MODE_ID_IND_LONG_DATA2,A5
00001812  5878 1010               1250      ADD.W           #4,LOOP_INC * Adjust the Loop increment to skip the data
00001816  6000 0002               1251      BRA     MOVE_MODE_FINISH
0000181A                          1252  
0000181A                          1253  
0000181A                          1254  MOVE_MODE_FINISH
0000181A                          1255  
0000181A  2F0D                    1256    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000181C  5878 1008               1257    ADD.W           #4,PRINT_COUNT
00001820                          1258  
00001820  5478 1010               1259    ADD.W  #2,LOOP_INC     * Increment the loop counter by 2 bytes
00001824                          1260  
00001824  6000 0576               1261    BRA   PRINT_OPCODE
00001828                          1262  
00001828                          1263  
00001828                          1264  *-------------------------------------------------------------------------------
00001828                          1265  * MOVEA
00001828                          1266  *
00001828                          1267  *
00001828                          1268  *-------------------------------------------------------------------------------
00001828                          1269  MOVEA
00001828                          1270  
00001828  2007                    1271    MOVE.L    D7,D0 * Load the print subroutine into intermediate address
0000182A                          1272  
0000182A                          1273  * ------ Print "MOVEA" ------
0000182A                          1274  
0000182A  4BF9 00002164           1275    LEA     PRINT_MOVEA,A5
00001830  2F0D                    1276    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001832  5878 1008               1277    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001836                          1278  
00001836                          1279  * ------ Determine Size ------
00001836  E058                    1280    ROR.W   #$8,D0 * Shift a total of 12 bits to retrieve SIZE designator
00001838  E858                    1281    ROR.W   #$4,D0
0000183A  C07C 0007               1282    AND.W   #$7,D0 * Mask 111
0000183E                          1283  
0000183E  4284                    1284    CLR.L   D4 * Clear D4 for use as BWL parameter
00001840                          1285  
00001840  B03C 0003               1286    CMP.B   #3,D0
00001844  6700 000E               1287    BEQ     MOVEA_W
00001848  B03C 0002               1288    CMP.B   #2,D0
0000184C  6700 0014               1289    BEQ     MOVEA_L
00001850                          1290  
00001850  6000 0BB8               1291    BRA     PRINT_ILLEGAL
00001854                          1292  
00001854                          1293  
00001854                          1294  * ------ Size Branching ------
00001854                          1295  * MOVEA uses a nonstandard size code. We convert it to the standard so we can
00001854                          1296  * easily use the existing PUSH_BWL subroutine
00001854                          1297  MOVEA_W
00001854  183C 0001               1298    MOVE.B  #1,D4
00001858  4EB9 00001EA2           1299    JSR     PUSH_BWL
0000185E  6000 0010               1300    BRA     MOVEA_SIZE_CONTINUE
00001862                          1301  
00001862                          1302  MOVEA_L
00001862  183C 0002               1303    MOVE.B  #2,D4
00001866  4EB9 00001EA2           1304    JSR     PUSH_BWL
0000186C  6000 0002               1305    BRA     MOVEA_SIZE_CONTINUE
00001870                          1306  
00001870                          1307  MOVEA_SIZE_CONTINUE
00001870                          1308  
00001870                          1309  * ------ Print Source ------
00001870  2C07                    1310    MOVE.L    D7,D6
00001872  4EB9 00001DC8           1311    JSR       PUSH_EA_MODE_ID
00001878                          1312  
00001878                          1313  * ------ Print a comma ------
00001878  4BF9 000023FA           1314    LEA     PRINT_COMMA,A5   * Load the print subroutine
0000187E  2F0D                    1315    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001880  5878 1008               1316    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001884                          1317  
00001884                          1318  * ------ Get Destination Address ------
00001884  2007                    1319    MOVE.L    D7,D0
00001886  E058                    1320    ROR.W     #$8,D0 * Get the three register bits
00001888  E258                    1321    ROR.W     #$1,D0
0000188A  C07C 0007               1322    AND.W     #$7,D0 * Mask 111
0000188E                          1323  
0000188E  13C0 00002B6A           1324    MOVE.B    D0,MISC_NUMBER
00001894                          1325  
00001894                          1326  * ------ Print Destination Address ------
00001894  4BF9 00001FDA           1327    LEA       PRINT_MISC_NUMBER_AS_ADDRESS,A5
0000189A  2F0D                    1328    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000189C  5878 1008               1329    ADD.W           #4,PRINT_COUNT
000018A0                          1330  
000018A0  5478 1010               1331    ADD.W  #2,LOOP_INC     * Increment the loop counter by 2 bytes
000018A4                          1332  
000018A4  6000 04F6               1333    BRA   PRINT_OPCODE
000018A8                          1334  
000018A8                          1335  *-------------------------------------------------------------------------------
000018A8                          1336  *   LSX_ASX_ROX
000018A8                          1337  *
000018A8                          1338  *
000018A8                          1339  *-------------------------------------------------------------------------------
000018A8                          1340  LSX_ASX_ROX
000018A8  2007                    1341    MOVE.L    D7,D0      * Reset D0
000018AA  C07C FEC0               1342    AND.W     #$FEC0,D0
000018AE                          1343     
000018AE                          1344  * ------ Arithmetic Shift MEM ------   
000018AE  B07C E0C0               1345    CMP.W #$E0C0,D0
000018B2  6700 0066               1346    BEQ   ASX
000018B6                          1347  
000018B6                          1348  * ------ Logical Shift MEM -----
000018B6  B07C E2C0               1349    CMP.W #$E2C0,D0
000018BA  6700 002C               1350    BEQ   LSX
000018BE                          1351  
000018BE                          1352  * ------ Rotate MEM ------
000018BE  B07C E6C0               1353    CMP.W #$E6C0,D0
000018C2  6700 0088               1354    BEQ   ROX
000018C6                          1355    
000018C6  2007                    1356    MOVE.L    D7,D0      * Reset D0  
000018C8  C07C 0018               1357    AND.W     #$18,D0  * Isolate bits 4,3 
000018CC                          1358    
000018CC                          1359  * ------ Arithmetic Shift ------
000018CC  B07C 0000               1360    CMP.W #0,D0
000018D0  6700 0048               1361    BEQ   ASX
000018D4                          1362  
000018D4                          1363  * ------ Logical Shift ------
000018D4  B07C 0008               1364    CMP.W #8,D0
000018D8  6700 000E               1365    BEQ   LSX
000018DC                          1366  
000018DC                          1367  * ------ Rotate ------
000018DC  B07C 0018               1368    CMP.W #$18,D0
000018E0  6700 006A               1369    BEQ   ROX
000018E4                          1370  
000018E4  6000 0B24               1371    BRA   PRINT_ILLEGAL
000018E8                          1372  *______________________________
000018E8                          1373  *Determine Logical Shift Direction
000018E8                          1374  *------------------------------
000018E8                          1375  LSX
000018E8  2007                    1376    MOVE.L    D7,D0      * Reset D0
000018EA  C07C 0100               1377    AND.W     #$100,D0   * Isolate bit 8
000018EE  B07C 0000               1378    CMP.W     #0,D0
000018F2  6700 0006               1379    BEQ       LSR
000018F6  6000 0012               1380    BRA       LSL
000018FA                          1381  
000018FA                          1382  *______________________________
000018FA                          1383  * Logical Shift Right
000018FA                          1384  *------------------------------
000018FA                          1385  LSR
000018FA  4BF9 00001EEA           1386    LEA     PRINT_LSR,A5    * Load the print subroutine into intermediate address
00001900  2F0D                    1387    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001902  5878 1008               1388    ADD.W   #4,PRINT_COUNT
00001906                          1389  
00001906  6000 0076               1390    BRA     LSX_ASX_ROX_CONTINUE
0000190A                          1391  
0000190A                          1392  *______________________________
0000190A                          1393  * Logical Shift Left
0000190A                          1394  *------------------------------
0000190A                          1395  LSL
0000190A  4BF9 00001EFA           1396    LEA     PRINT_LSL,A5    * Load the print subroutine into intermediate address
00001910  2F0D                    1397    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001912  5878 1008               1398    ADD.W   #4,PRINT_COUNT
00001916                          1399  
00001916  6000 0066               1400    BRA     LSX_ASX_ROX_CONTINUE
0000191A                          1401  
0000191A                          1402  *______________________________
0000191A                          1403  *Determine Arithmetic Shift Direction
0000191A                          1404  *------------------------------
0000191A                          1405  ASX
0000191A  2007                    1406    MOVE.L    D7,D0      * Reset D0
0000191C  C07C 0100               1407    AND.W     #$100,D0   * Isolate bit 8
00001920  B07C 0000               1408    CMP.W     #0,D0
00001924  6700 0006               1409    BEQ       ASR
00001928  6000 0012               1410    BRA       ASL
0000192C                          1411  
0000192C                          1412  *______________________________
0000192C                          1413  * Arithmetic Shift Right
0000192C                          1414  *------------------------------
0000192C                          1415  ASR
0000192C  4BF9 00001F0A           1416    LEA     PRINT_ASR,A5    * Load the print subroutine into intermediate address
00001932  2F0D                    1417    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001934  5878 1008               1418    ADD.W   #4,PRINT_COUNT
00001938                          1419  
00001938  6000 0044               1420    BRA     LSX_ASX_ROX_CONTINUE
0000193C                          1421  
0000193C                          1422  *______________________________
0000193C                          1423  * Arithmetic Shift Left
0000193C                          1424  *------------------------------
0000193C                          1425  ASL
0000193C  4BF9 00001F1A           1426    LEA     PRINT_ASL,A5    * Load the print subroutine into intermediate address
00001942  2F0D                    1427    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001944  5878 1008               1428    ADD.W   #4,PRINT_COUNT
00001948                          1429  
00001948  6000 0034               1430    BRA     LSX_ASX_ROX_CONTINUE
0000194C                          1431  
0000194C                          1432  *______________________________
0000194C                          1433  * Determine Rotate Direction
0000194C                          1434  *------------------------------
0000194C                          1435  ROX
0000194C  2007                    1436    MOVE.L    D7,D0      * Reset D0
0000194E  C07C 0100               1437    AND.W     #$100,D0   * Isolate bit 8
00001952  B07C 0000               1438    CMP.W     #0,D0
00001956  6700 0006               1439    BEQ       ROR
0000195A  6000 0012               1440    BRA       ROL
0000195E                          1441  
0000195E                          1442  *______________________________
0000195E                          1443  * Rotate Right
0000195E                          1444  *------------------------------
0000195E                          1445  ROR
0000195E  4BF9 00001F2A           1446    LEA     PRINT_ROR,A5    * Load the print subroutine into intermediate address
00001964  2F0D                    1447    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001966  5878 1008               1448    ADD.W   #4,PRINT_COUNT
0000196A                          1449  
0000196A  6000 0012               1450    BRA     LSX_ASX_ROX_CONTINUE
0000196E                          1451  
0000196E                          1452  *______________________________
0000196E                          1453  * Rotate Left
0000196E                          1454  *------------------------------
0000196E                          1455  ROL
0000196E  4BF9 00001F3A           1456    LEA     PRINT_ROL,A5    * Load the print subroutine into intermediate address
00001974  2F0D                    1457    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001976  5878 1008               1458    ADD.W   #4,PRINT_COUNT
0000197A                          1459  
0000197A  6000 0002               1460    BRA     LSX_ASX_ROX_CONTINUE
0000197E                          1461  
0000197E                          1462  *______________________________
0000197E                          1463  * All Subroutine Continue
0000197E                          1464  *------------------------------
0000197E                          1465  LSX_ASX_ROX_CONTINUE
0000197E  2007                    1466    MOVE.L    D7,D0      * Reset D0
00001980  EC98                    1467    ROR.L     #$06,D0    * Isolate bits 7,6
00001982  C0BC 00000003           1468    AND.L     #3,D0
00001988  4284                    1469    CLR.L     D4
0000198A  1800                    1470    MOVE.B    D0,D4      * Move bits 7,6 to D4 for BWL
0000198C                          1471  
0000198C  B03C 0003               1472    CMP.B     #3,D0
00001990  6700 00CE               1473    BEQ       LSX_ASX_ROX_MEM
00001994                          1474  
00001994  4EB9 00001EA2           1475    JSR PUSH_BWL
0000199A                          1476  
0000199A  2007                    1477    MOVE.L    D7,D0      * Reset D0
0000199C  C07C 0020               1478    AND.W     #$20,D0    * Isolate bit 5
000019A0  B07C 0000               1479    CMP.W     #0,D0
000019A4  6700 0006               1480    BEQ       LSX_ASX_ROX_SHIFT
000019A8  6000 007C               1481    BRA       LSX_ASX_ROX_REGISTER
000019AC                          1482  
000019AC                          1483  *__________________________________
000019AC                          1484  * Print the number of bits to shift
000019AC                          1485  *----------------------------------
000019AC                          1486  LSX_ASX_ROX_SHIFT
000019AC  2007                    1487    MOVE.L  D7,D0             * Reset D0
000019AE  C0BC 00000E00           1488    AND.L   #$E00,D0           * Get bits 11 - 9
000019B4  B0BC 00000000           1489    CMP.L   #0,D0
000019BA  6700 003A               1490    BEQ     LSX_ASX_ROX_SHIFT_8  * If 0, shift count is 8
000019BE                          1491  
000019BE  21FC 00000000 1016      1492    MOVE.L  #0,DATA1
000019C6  E080                    1493    ASR.L   #$8,D0
000019C8  E280                    1494    ASR.L   #$1,D0
000019CA  21C0 1016               1495    MOVE.L  D0,DATA1
000019CE                          1496  
000019CE  4BF9 0000235E           1497    LEA PRINT_EA_MODE_ID_ABS_DATA,A5 * Print shift count
000019D4  2F0D                    1498    MOVE.L    A5, -(SP)
000019D6  5878 1008               1499    ADD.W     #4, PRINT_COUNT
000019DA                          1500  
000019DA  4BF9 000023FA           1501    LEA     PRINT_COMMA,A5   * Load the print subroutine
000019E0  2F0D                    1502    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000019E2  5878 1008               1503    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000019E6                          1504  
000019E6  4BF9 000021F4           1505    LEA   PRINT_EA_MODE_ID_DN,A5  * Print data register
000019EC  2F0D                    1506    MOVE.L    A5, -(SP)
000019EE  5878 1008               1507    ADD.W     #4, PRINT_COUNT
000019F2                          1508  
000019F2  6000 0092               1509    BRA LSX_ASX_ROX_FINISH
000019F6                          1510  
000019F6                          1511  *__________________________________
000019F6                          1512  * Convert 0 to 8 (Special case)
000019F6                          1513  *----------------------------------
000019F6                          1514  LSX_ASX_ROX_SHIFT_8
000019F6  21FC 00000008 1016      1515    MOVE.L  #8,DATA1
000019FE  4BF9 0000235E           1516    LEA PRINT_EA_MODE_ID_ABS_DATA,A5  * Print shift count 8
00001A04  2F0D                    1517    MOVE.L    A5, -(SP)
00001A06  5878 1008               1518    ADD.W     #4, PRINT_COUNT
00001A0A                          1519  
00001A0A  4BF9 000023FA           1520    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001A10  2F0D                    1521    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001A12  5878 1008               1522    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001A16                          1523  
00001A16                          1524  
00001A16  4BF9 000021F4           1525    LEA   PRINT_EA_MODE_ID_DN,A5  * Print data register
00001A1C  2F0D                    1526    MOVE.L    A5, -(SP)
00001A1E  5878 1008               1527    ADD.W     #4, PRINT_COUNT
00001A22                          1528  
00001A22  6000 0062               1529    BRA LSX_ASX_ROX_FINISH
00001A26                          1530  
00001A26                          1531  *__________________________________
00001A26                          1532  * Print the register that contains the number of bits to shift
00001A26                          1533  *----------------------------------
00001A26                          1534  LSX_ASX_ROX_REGISTER
00001A26  2007                    1535    MOVE.L    D7,D0      * Reset D0
00001A28  C0BC 00000E00           1536    AND.L   #$E00,D0
00001A2E                          1537  
00001A2E  E080                    1538    ASR.L   #$8,D0
00001A30  E280                    1539    ASR.L   #$1,D0
00001A32                          1540  
00001A32  13C0 00002B6A           1541    MOVE.B  D0,MISC_NUMBER
00001A38  4BF9 00002000           1542    LEA   PRINT_MISC_NUMBER_AS_REGISTER,A5  * Print data register
00001A3E  2F0D                    1543    MOVE.L    A5, -(SP)
00001A40  5878 1008               1544    ADD.W     #4, PRINT_COUNT
00001A44                          1545  
00001A44  4BF9 000023FA           1546    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001A4A  2F0D                    1547    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001A4C  5878 1008               1548    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001A50                          1549  
00001A50  4BF9 000021F4           1550    LEA   PRINT_EA_MODE_ID_DN,A5  * Print data register
00001A56  2F0D                    1551    MOVE.L    A5, -(SP)
00001A58  5878 1008               1552    ADD.W     #4, PRINT_COUNT
00001A5C                          1553  
00001A5C  6000 0028               1554    BRA LSX_ASX_ROX_FINISH
00001A60                          1555  
00001A60                          1556  *__________________________________
00001A60                          1557  * Memory Shift mode
00001A60                          1558  *----------------------------------
00001A60                          1559  LSX_ASX_ROX_MEM
00001A60  2C07                    1560    MOVE.L D7,D6
00001A62  CCBC 00000038           1561    AND.L #$38,D6
00001A68  BC7C 0008               1562    CMP.W #8,D6
00001A6C  6F00 099C               1563    BLE   PRINT_ILLEGAL
00001A70                          1564  
00001A70  4BF9 000023DA           1565    LEA PRINT_FOURSPACE,A5
00001A76  2F0D                    1566    MOVE.L    A5,-(SP)
00001A78  5878 1008               1567    ADD.W    #4,PRINT_COUNT
00001A7C                          1568  
00001A7C  4EB9 00001DC8           1569    JSR     PUSH_EA_MODE_ID
00001A82  6000 0002               1570    BRA LSX_ASX_ROX_FINISH
00001A86                          1571  
00001A86                          1572  
00001A86                          1573  *__________________________________
00001A86                          1574  * Finish
00001A86                          1575  *----------------------------------
00001A86                          1576  LSX_ASX_ROX_FINISH
00001A86  31FC 0002 1010          1577    MOVE.W  #2,LOOP_INC
00001A8C  6000 030E               1578    BRA   PRINT_OPCODE
00001A90                          1579  
00001A90                          1580  LSX_ASX_ROX_RESET_D7
00001A90  2007                    1581      MOVE.L    D7,D0
00001A92  6000 0322               1582      BRA   PRINT_OPCODE_LOOP_RETURN
00001A96                          1583  
00001A96                          1584  *-------------------------------------------------------------------------------
00001A96                          1585  *   BCC
00001A96                          1586  *
00001A96                          1587  *
00001A96                          1588  *-------------------------------------------------------------------------------
00001A96                          1589  BCC
00001A96  2007                    1590    MOVE.L    D7,D0      * Reset D0
00001A98  C07C 0F00               1591    AND.W     #$0F00,D0  * Isolate bits 11-8
00001A9C  B07C 0000               1592    CMP.W     #0,D0
00001AA0  6700 001E               1593    BEQ       BRA
00001AA4                          1594  
00001AA4  B07C 0E00               1595    CMP.W     #$E00,D0
00001AA8  6700 0026               1596    BEQ       BGT
00001AAC                          1597  
00001AAC  B07C 0F00               1598    CMP.W     #$F00,D0
00001AB0  6700 002E               1599    BEQ       BLE
00001AB4                          1600  
00001AB4  B07C 0700               1601    CMP.W     #$700,D0
00001AB8  6700 0036               1602    BEQ       BEQ
00001ABC                          1603  
00001ABC  6000 094C               1604    BRA       PRINT_ILLEGAL
00001AC0                          1605  
00001AC0                          1606  BRA
00001AC0  4BF9 00001F94           1607    LEA     PRINT_BRA,A5    * Load the print subroutine into intermediate address
00001AC6  2F0D                    1608    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001AC8  5878 1008               1609    ADD.W   #4,PRINT_COUNT
00001ACC                          1610  
00001ACC  6000 0032               1611    BRA   BCC_CONTINUE
00001AD0                          1612  
00001AD0                          1613  BGT
00001AD0  4BF9 00001F64           1614    LEA     PRINT_BGT,A5    * Load the print subroutine into intermediate address
00001AD6  2F0D                    1615    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001AD8  5878 1008               1616    ADD.W   #4,PRINT_COUNT
00001ADC                          1617  
00001ADC  6000 0022               1618    BRA   BCC_CONTINUE
00001AE0                          1619  
00001AE0                          1620  BLE
00001AE0  4BF9 00001F74           1621    LEA     PRINT_BLE,A5    * Load the print subroutine into intermediate address
00001AE6  2F0D                    1622    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001AE8  5878 1008               1623    ADD.W   #4,PRINT_COUNT
00001AEC                          1624  
00001AEC  6000 0012               1625    BRA   BCC_CONTINUE
00001AF0                          1626  
00001AF0                          1627  BEQ
00001AF0  4BF9 00001F84           1628    LEA     PRINT_BEQ,A5    * Load the print subroutine into intermediate address
00001AF6  2F0D                    1629    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001AF8  5878 1008               1630    ADD.W   #4,PRINT_COUNT
00001AFC                          1631  
00001AFC  6000 0002               1632    BRA   BCC_CONTINUE
00001B00                          1633  
00001B00                          1634  BCC_CONTINUE
00001B00  7000                    1635    MOVE.L    #0,D0
00001B02  1007                    1636    MOVE.B    D7,D0      * Reset D0
00001B04  B03C 0000               1637    CMP.B     #0,D0
00001B08  6700 0020               1638    BEQ       BCC_16     * if 16 bit displacement, print the following short
00001B0C                          1639  
00001B0C  B03C 00FF               1640    CMP.B     #$FF,D0    * if 32 bit displacement, print the following long
00001B10  6700 0032               1641    BEQ       BCC_32
00001B14                          1642  
00001B14  21FC 00000000 1016      1643    MOVE.L    #0,DATA1
00001B1C                          1644    *ROR.L     #4,D0
00001B1C  21C0 1016               1645    MOVE.L    D0,DATA1
00001B20                          1646  
00001B20  31FC 0002 1010          1647    MOVE.W  #2,LOOP_INC
00001B26                          1648  
00001B26  6000 0026               1649    BRA     BCC_END
00001B2A                          1650  
00001B2A                          1651  BCC_16
00001B2A  2238 1016               1652    MOVE.L          DATA1,D1
00001B2E  4841                    1653    SWAP            D1              * We only want the upper word
00001B30  C2BC 0000FFFF           1654    AND.L           #$0000FFFF,D1   * Bit mask for upper word
00001B36  21C1 1016               1655    MOVE.L          D1,DATA1
00001B3A                          1656  
00001B3A  31FC 0004 1010          1657    MOVE.W  #4,LOOP_INC
00001B40                          1658  
00001B40  6000 000C               1659    BRA     BCC_END
00001B44                          1660  
00001B44                          1661  BCC_32
00001B44  31FC 0006 1010          1662    MOVE.W  #6,LOOP_INC
00001B4A  6000 0002               1663    BRA     BCC_END
00001B4E                          1664  
00001B4E                          1665  BCC_END
00001B4E  4BF9 0000235E           1666    LEA     PRINT_EA_MODE_ID_ABS_DATA,A5
00001B54  2F0D                    1667    MOVE.L  A5, -(SP)
00001B56  5878 1008               1668    ADD.W   #4, PRINT_COUNT
00001B5A                          1669  
00001B5A  6000 0240               1670    BRA   PRINT_OPCODE
00001B5E                          1671  
00001B5E                          1672  
00001B5E                          1673  *-------------------------------------------------------------------------------
00001B5E                          1674  *   ADD ADDA
00001B5E                          1675  *
00001B5E                          1676  * Because ADD and ADDA have the same first four bits (1101), we need to do
00001B5E                          1677  * some additional branching to differentiate them.
00001B5E                          1678  *________________________________________
00001B5E                          1679  * Register Use Summary:
00001B5E                          1680  *
00001B5E                          1681  * D0: General variable, cleared every use to be safe
00001B5E                          1682  * D7: CONST - The opcode to decode - NO TOUCH
00001B5E                          1683  *
00001B5E                          1684  *-------------------------------------------------------------------------------
00001B5E                          1685  ADD_ADDA
00001B5E                          1686  
00001B5E  4280                    1687    CLR.L   D0
00001B60  2007                    1688    MOVE.L  D7,D0
00001B62                          1689  
00001B62  EC58                    1690    ROR.W   #06,D0     * Get bits 7,6 on end
00001B64  C03C 0003               1691    AND.B   #03,D0     * Isolate bits 7,6
00001B68  B03C 0003               1692    CMP.B   #03,D0
00001B6C  6700 0006               1693    BEQ   ADDA
00001B70                          1694  
00001B70  6000 0082               1695    BRA   ADD          * Else it's ADD
00001B74                          1696  *-------------------------------------------------------------------------------
00001B74                          1697  
00001B74                          1698  
00001B74                          1699  *-------------------------------------------------------------------------------
00001B74                          1700  *   ADDA
00001B74                          1701  *
00001B74                          1702  *
00001B74                          1703  *-------------------------------------------------------------------------------
00001B74                          1704  ADDA
00001B74                          1705  
00001B74  2007                    1706    MOVE.L  D7,D0         * Reset D0
00001B76                          1707  
00001B76  4BF9 00001FB4           1708    LEA     PRINT_ADDA,A5    * Load the print subroutine into intermediate address
00001B7C  2F0D                    1709    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001B7E  5878 1008               1710    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001B82                          1711  
00001B82  EC58                    1712    ROR.W   #$6,D0        * Get bits 9,8,7,6 on end byte
00001B84  C03C 0007               1713    AND.B   #7,D0         * Isolate bits 8,7,6
00001B88                          1714  
00001B88  B03C 0003               1715    CMP.B   #3,D0         * If 8,7,6 == 011
00001B8C  6700 001E               1716    BEQ     ADDA_W
00001B90                          1717  
00001B90  B03C 0007               1718    CMP.B   #7,D0         * If 8,7,6 == 111
00001B94  6700 0006               1719    BEQ     ADDA_L
00001B98                          1720  
00001B98  6000 0870               1721    BRA     PRINT_ILLEGAL
00001B9C                          1722  
00001B9C                          1723  * ------ Long Opmode ------
00001B9C                          1724  ADDA_L
00001B9C                          1725  
00001B9C  4BF9 000021E4           1726    LEA     PRINT_LONG_DESIGNATOR,A5 * Load the ".L" print subroutine
00001BA2  2F0D                    1727    MOVE.L  A5, -(SP)       * Put the subroutine onto the stack
00001BA4  5878 1008               1728    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001BA8                          1729  
00001BA8  6000 0012               1730    BRA     ADDA_CONTINUE
00001BAC                          1731  
00001BAC                          1732  * ------ Word Opmode ------
00001BAC                          1733  ADDA_W
00001BAC                          1734  
00001BAC  4BF9 000021D4           1735    LEA     PRINT_WORD_DESIGNATOR,A5 * Load the ".W" print subroutine
00001BB2  2F0D                    1736    MOVE.L  A5, -(SP)         * Put the subroutine onto the stack
00001BB4  5878 1008               1737    ADD.W   #4,PRINT_COUNT    * Increment Print Count by 1 long
00001BB8                          1738  
00001BB8  6000 0002               1739    BRA     ADDA_CONTINUE
00001BBC                          1740  
00001BBC                          1741  * ------ Continue ------
00001BBC                          1742  ADDA_CONTINUE
00001BBC                          1743  
00001BBC                          1744  * Push the effective address print subroutine onto the stack
00001BBC  2C07                    1745    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001BBE  4EB9 00001DC8           1746    JSR     PUSH_EA_MODE_ID
00001BC4                          1747  
00001BC4                          1748  
00001BC4  4BF9 000023FA           1749    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001BCA  2F0D                    1750    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001BCC  5878 1008               1751    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001BD0                          1752  
00001BD0                          1753  
00001BD0                          1754  
00001BD0                          1755  * Reset and push the address register print subroutine onto the stack
00001BD0  2007                    1756    MOVE.L D7,D0    * Reset D0
00001BD2                          1757  
00001BD2  E080                    1758    ASR.L   #$8,D0
00001BD4  E280                    1759    ASR.L   #$1,D0
00001BD6  C03C 0007               1760    AND.B   #$7,D0
00001BDA                          1761  
00001BDA  13C0 00002B6A           1762    MOVE.B  D0,MISC_NUMBER
00001BE0                          1763  
00001BE0  4BF9 00001FDA           1764    LEA     PRINT_MISC_NUMBER_AS_ADDRESS,A5   * Load the print subroutine
00001BE6  2F0D                    1765    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001BE8  5878 1008               1766    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001BEC                          1767  
00001BEC  5478 1010               1768    ADD.W  #2,LOOP_INC     * Increment the loop counter by 2 bytes
00001BF0                          1769  
00001BF0  6000 01AA               1770    BRA   PRINT_OPCODE
00001BF4                          1771  
00001BF4                          1772  *-------------------------------------------------------------------------------
00001BF4                          1773  *   ADD
00001BF4                          1774  *
00001BF4                          1775  *
00001BF4                          1776  *-------------------------------------------------------------------------------
00001BF4                          1777  ADD
00001BF4                          1778  
00001BF4                          1779  * ------ Print "ADD" ------
00001BF4  4BF9 00001FA4           1780    LEA     PRINT_ADD,A5    * Load the print subroutine into intermediate address
00001BFA  2F0D                    1781    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001BFC  5878 1008               1782    ADD.W   #4,PRINT_COUNT
00001C00                          1783  
00001C00                          1784  * ------ Print size ------
00001C00  1800                    1785    MOVE.B   D0,D4            * Move bits 7,6 to D4 for BWL
00001C02  4EB9 00001EA2           1786    JSR      PUSH_BWL
00001C08                          1787  
00001C08                          1788  * ------ Reset D0, determine order ------
00001C08  2007                    1789    MOVE.L  D7,D0
00001C0A  E058                    1790    ROR.W   #08,D0     * Get bit 8 on the end
00001C0C  C07C 0001               1791    AND.W   #1,D0
00001C10                          1792  
00001C10                          1793    * If bit 8 == 0 the order is <ea> + Dn
00001C10                          1794    * If bit 8 == 1 the order is Dn + <ea>
00001C10                          1795  
00001C10  B03C 0001               1796    CMP.B   #1,D0
00001C14  6700 003A               1797    BEQ     ADD_DN_FIRST
00001C18                          1798  
00001C18                          1799  * ------ Print order is effective address, data register ------
00001C18                          1800  ADD_EA_FIRST
00001C18                          1801  
00001C18                          1802  
00001C18                          1803    * ------ Print the effective address ------
00001C18  2C07                    1804    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001C1A  4EB9 00001DC8           1805    JSR     PUSH_EA_MODE_ID
00001C20                          1806  
00001C20                          1807    * ------ Print a comma ------
00001C20  4BF9 000023FA           1808    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001C26  2F0D                    1809    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001C28  5878 1008               1810    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001C2C                          1811  
00001C2C                          1812    * ------ Determine the register number ------
00001C2C  2007                    1813    MOVE.L  D7,D0
00001C2E  E058                    1814    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
00001C30  E258                    1815    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
00001C32  C07C 0007               1816    AND.W   #7,D0 * Mask against 111 to only get 3 bits
00001C36                          1817  
00001C36                          1818    * ------ Print the register number ------
00001C36  13C0 00002B6A           1819    MOVE.B  D0,MISC_NUMBER
00001C3C  4BF9 00002000           1820    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
00001C42  2F0D                    1821    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001C44  5878 1008               1822    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001C48                          1823  
00001C48  5478 1010               1824    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
00001C4C                          1825  
00001C4C  6000 014E               1826    BRA   PRINT_OPCODE
00001C50                          1827  
00001C50                          1828  
00001C50                          1829  * ------ Print order is data register, effective address ------
00001C50                          1830  ADD_DN_FIRST
00001C50                          1831  
00001C50                          1832  
00001C50                          1833    * ------ Determine the register number ------
00001C50  2007                    1834    MOVE.L  D7,D0
00001C52  E058                    1835    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
00001C54  E258                    1836    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
00001C56  C07C 0007               1837    AND.W   #7,D0 * Mask against 111 to only get 3 bits
00001C5A                          1838  
00001C5A                          1839    * ------ Print the register number ------
00001C5A  13C0 00002B6A           1840    MOVE.B  D0,MISC_NUMBER
00001C60  4BF9 00002000           1841    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
00001C66  2F0D                    1842    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001C68  5878 1008               1843    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001C6C                          1844  
00001C6C                          1845    * ------ Print a comma ------
00001C6C  4BF9 000023FA           1846    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001C72  2F0D                    1847    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001C74  5878 1008               1848    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001C78                          1849  
00001C78                          1850    * ------ Print the effective address ------
00001C78  2C07                    1851    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001C7A  4EB9 00001DC8           1852    JSR     PUSH_EA_MODE_ID
00001C80                          1853  
00001C80  5478 1010               1854    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
00001C84                          1855  
00001C84  6000 0116               1856    BRA   PRINT_OPCODE
00001C88                          1857  
00001C88                          1858  
00001C88                          1859  *-------------------------------------------------------------------------------
00001C88                          1860  *   ADDQ
00001C88                          1861  *
00001C88                          1862  *
00001C88                          1863  *-------------------------------------------------------------------------------
00001C88                          1864  ADDQ
00001C88                          1865  
00001C88                          1866  
00001C88                          1867  * ------ Ensure that opcode is valid ------
00001C88  2007                    1868    MOVE.L  D7,D0
00001C8A  E058                    1869    ROR.W   #$08,D0
00001C8C  C03C 0001               1870    AND.B   #1,D0
00001C90  B03C 0000               1871    CMP.B   #0,D0             * Check for 0 in 8th bit
00001C94  6600 0774               1872    BNE     PRINT_ILLEGAL
00001C98                          1873  
00001C98                          1874  * ------ Print "ADDQ" ------
00001C98  4BF9 00002144           1875    LEA     PRINT_ADDQ,A5    * Load the print subroutine into intermediate address
00001C9E  2F0D                    1876    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001CA0  5878 1008               1877    ADD.W   #4,PRINT_COUNT
00001CA4                          1878  
00001CA4                          1879  * ------ Print Size ------
00001CA4  2007                    1880    MOVE.L  D7,D0
00001CA6  EC58                    1881    ROR.W   #6,D0
00001CA8  C07C 0003               1882    AND.W   #3,D0
00001CAC                          1883  
00001CAC  4284                    1884    CLR.L   D4
00001CAE  1800                    1885    MOVE.B  D0,D4            * Move bits 7,6 to D4 for BWL
00001CB0  4EB9 00001EA2           1886    JSR     PUSH_BWL
00001CB6                          1887  
00001CB6                          1888  * ------ Retrieve Data ------
00001CB6  2007                    1889    MOVE.L  D7,D0             * Reset D0
00001CB8  E058                    1890    ROR.W   #$8, D0           * Get bits 11 - 9
00001CBA  E258                    1891    ROR.W   #$1, D0           * Get bits 11 - 9
00001CBC  C03C 0007               1892    AND.B   #$7, D0           * Clear bit 11
00001CC0                          1893  
00001CC0                          1894  
00001CC0                          1895  * ADDQ converts 000 to 8 since nobody wants to add 0 to their number
00001CC0  0C00 0000               1896    CMPI.B   #0,D0
00001CC4  6600 0006               1897    BNE      ADDQ_NOT_ZERO
00001CC8                          1898  
00001CC8                          1899  *Else: D0 is 0, so we convert to 8
00001CC8  103C 0008               1900    MOVE.B   #8,D0
00001CCC                          1901  
00001CCC                          1902  ADDQ_NOT_ZERO
00001CCC                          1903  
00001CCC  13C0 00002B6A           1904    MOVE.B  D0,MISC_NUMBER
00001CD2                          1905  
00001CD2                          1906  * ------ Print Data ------
00001CD2  4BF9 0000211E           1907    LEA     PRINT_MISC_NUMBER_AS_DATA,A5
00001CD8  2F0D                    1908    MOVE.L  A5, -(SP)
00001CDA  5878 1008               1909    ADD.W   #4, PRINT_COUNT
00001CDE                          1910  
00001CDE                          1911  * ------ Print a comma ------
00001CDE  4BF9 000023FA           1912    LEA     PRINT_COMMA,A5  * Load the print subroutine
00001CE4  2F0D                    1913    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001CE6  5878 1008               1914    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001CEA                          1915  
00001CEA                          1916  * ------ Print Effective Address ------
00001CEA  2C07                    1917    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001CEC  4EB9 00001DC8           1918    JSR     PUSH_EA_MODE_ID
00001CF2                          1919  
00001CF2                          1920  
00001CF2  31FC 0002 1010          1921    MOVE.W  #2,LOOP_INC     * Increment the loop counter by 2 bytes
00001CF8  6000 00A2               1922    BRA     PRINT_OPCODE    * Always put this at the end
00001CFC                          1923  
00001CFC                          1924  
00001CFC                          1925  
00001CFC                          1926  *-------------------------------------------------------------------------------
00001CFC                          1927  *   NOP
00001CFC                          1928  *
00001CFC                          1929  *   NONSTANDARD OPCODE! Don't base your design off of this :)
00001CFC                          1930  *
00001CFC                          1931  *-------------------------------------------------------------------------------
00001CFC                          1932  NOP
00001CFC                          1933  
00001CFC  43F9 00002ACA           1934    LEA     STRING_NOP,A1
00001D02  103C 000E               1935    MOVE.B  #14,D0
00001D06  4E4F                    1936    TRAP    #15
00001D08                          1937  
00001D08  31FC 0002 1010          1938    MOVE.W  #2,LOOP_INC   * Increment the loop counter by 2 bytes
00001D0E                          1939  
00001D0E  4EB9 0000245E           1940    JSR     PRINT_IMMEDIATE_NEWLINE
00001D14                          1941  
00001D14  4E75                    1942    RTS
00001D16                          1943  
00001D16                          1944  *-------------------------------------------------------------------------------
00001D16                          1945  *   RTS
00001D16                          1946  *
00001D16                          1947  *   NONSTANDARD OPCODE! Don't base your design off of this :)
00001D16                          1948  *
00001D16                          1949  *-------------------------------------------------------------------------------
00001D16                          1950  RTS
00001D16                          1951  
00001D16  43F9 00002ACE           1952    LEA     STRING_RTS,A1
00001D1C  103C 000E               1953    MOVE.B  #14,D0
00001D20  4E4F                    1954    TRAP    #15
00001D22                          1955  
00001D22  31FC 0002 1010          1956    MOVE.W  #2,LOOP_INC   * Increment the loop counter by 2 bytes
00001D28                          1957  
00001D28  4EB9 0000245E           1958    JSR     PRINT_IMMEDIATE_NEWLINE
00001D2E                          1959  
00001D2E  4E75                    1960    RTS
00001D30                          1961  
00001D30                          1962  
00001D30                          1963  *-------------------------------------------------------------------------------
00001D30                          1964  *   JSR
00001D30                          1965  *
00001D30                          1966  *
00001D30                          1967  *-------------------------------------------------------------------------------
00001D30                          1968  JSR
00001D30                          1969  
00001D30  4BF9 000023AA           1970    LEA     PRINT_JSR,A5    * Load the print subroutine into intermediate address
00001D36  2F0D                    1971    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001D38  5878 1008               1972    ADD.W           #4,PRINT_COUNT
00001D3C                          1973  
00001D3C                          1974  * ---- Custom Branching Block ----
00001D3C                          1975  * Supported Modes: (An), Indirect short, Indirect Long
00001D3C                          1976  
00001D3C  4280                    1977    CLR.L     D0
00001D3E  1007                    1978    MOVE.B    D7,D0 * Copy opcode into local variable
00001D40  C03C 0038               1979    AND.B     #$38,D0 * Mask D0 with 0111000 to get MODE bits only
00001D44  E600                    1980    ASR.B   #3,D0 * Shift the result so D0 ranges between 000 and 111
00001D46                          1981  
00001D46  B03C 0002               1982    CMP.B   #2,D0         *010 -> Address Register   Indirect
00001D4A  6700 002A               1983    BEQ   JSR_PUSH_EA_MODE_ID_AN_INDIRECT
00001D4E  B03C 0007               1984    CMP.B   #7,D0         *111 -> All Data Operations
00001D52  6700 0006               1985    BEQ     JSR_EA_MODE_ELSE
00001D56                          1986  
00001D56  6000 06B2               1987    BRA     PRINT_ILLEGAL
00001D5A                          1988  
00001D5A                          1989  
00001D5A                          1990  *________________________________________
00001D5A                          1991  * Handle Data Branching Logic
00001D5A                          1992  * Only short and long indirect allowed
00001D5A                          1993  *----------------------------------------
00001D5A                          1994  JSR_EA_MODE_ELSE
00001D5A                          1995  
00001D5A  4280                    1996    CLR.L   D0
00001D5C  1007                    1997    MOVE.B  D7,D0
00001D5E  C03C 0007               1998    AND.B   #7,D0
00001D62                          1999  
00001D62  B03C 0000               2000    CMP.B   #0,D0
00001D66  6700 0018               2001    BEQ     JSR_PUSH_EA_MODE_ID_IND_SHORT
00001D6A                          2002  
00001D6A  B03C 0001               2003    CMP.B   #1,D0
00001D6E  6700 001A               2004    BEQ     JSR_PUSH_EA_MODE_ID_IND_LONG
00001D72                          2005  
00001D72  6000 0696               2006    BRA     PRINT_ILLEGAL
00001D76                          2007  
00001D76                          2008  *________________________________________
00001D76                          2009  * Jump directly into the middle of
00001D76                          2010  * the PUSH_EA_MODE subroutine
00001D76                          2011  *----------------------------------------
00001D76                          2012  JSR_PUSH_EA_MODE_ID_AN_INDIRECT
00001D76  4EB9 00001E18           2013    JSR   PUSH_EA_MODE_ID_AN_INDIRECT
00001D7C  6000 0016               2014    BRA   JSR_FINISH
00001D80                          2015  
00001D80                          2016  *________________________________________
00001D80                          2017  * Jump directly into the middle of
00001D80                          2018  * the PUSH_EA_MODE subroutine
00001D80                          2019  *----------------------------------------
00001D80                          2020  JSR_PUSH_EA_MODE_ID_IND_SHORT
00001D80  4EB9 00001E58           2021    JSR   PUSH_EA_MODE_ID_IND_SHORT
00001D86  6000 000C               2022    BRA   JSR_FINISH
00001D8A                          2023  
00001D8A                          2024  *________________________________________
00001D8A                          2025  * Jump directly into the middle of
00001D8A                          2026  * the PUSH_EA_MODE subroutine
00001D8A                          2027  *----------------------------------------
00001D8A                          2028  JSR_PUSH_EA_MODE_ID_IND_LONG
00001D8A  4EB9 00001E6C           2029    JSR   PUSH_EA_MODE_ID_IND_LONG
00001D90  6000 0002               2030    BRA   JSR_FINISH
00001D94                          2031  
00001D94                          2032  JSR_FINISH
00001D94                          2033  
00001D94  5478 1010               2034    ADD.W   #2,LOOP_INC     * Increment the loop counter by 1 word
00001D98                          2035  
00001D98  6000 0002               2036    BRA     PRINT_OPCODE    * Always put this at the end
00001D9C                          2037  
00001D9C                          2038  *-------------------------------------------------------------------------------
00001D9C                          2039  *   PRINT OPCODE
00001D9C                          2040  *-------------------------------------------------------------------------------
00001D9C                          2041  
00001D9C                          2042  PRINT_OPCODE
00001D9C                          2043  
00001D9C  2E78 100C               2044    MOVE.L  STACK_BASE,SP * Put the stack back to where it was when we started
00001DA0  31FC 0000 100A          2045    MOVE.W  #0,PRINT_OPCODE_LOOP_INDEX
00001DA6                          2046  
00001DA6                          2047  PRINT_OPCODE_LOOP
00001DA6                          2048  
00001DA6  3278 100A               2049    MOVEA.W   PRINT_OPCODE_LOOP_INDEX,A1
00001DAA                          2050  
00001DAA  B2F8 1008               2051    CMP.W   PRINT_COUNT,A1 * Check if we're done
00001DAE  6C00 000C               2052    BGE     PRINT_OPCODE_LOOP_FINISH
00001DB2                          2053  
00001DB2  2467                    2054    MOVE.L  -(SP),A2  * Pop the next item on the stack and put it in A1
00001DB4  4ED2                    2055    JMP     (A2)        * Jump to the routine we stored on the stack
00001DB6                          2056  
00001DB6                          2057  PRINT_OPCODE_LOOP_RETURN * Print methods come back here
00001DB6                          2058  
00001DB6  5878 100A               2059    ADD.W    #4,PRINT_OPCODE_LOOP_INDEX
00001DBA                          2060  
00001DBA  60EA                    2061    BRA     PRINT_OPCODE_LOOP
00001DBC                          2062  
00001DBC                          2063  PRINT_OPCODE_LOOP_FINISH
00001DBC                          2064  
00001DBC  2E78 100C               2065    MOVE.L  STACK_BASE,SP  * Return the stack to normal so we can RTS
00001DC0                          2066  
00001DC0  4EB9 0000245E           2067    JSR     PRINT_IMMEDIATE_NEWLINE
00001DC6  4E75                    2068    RTS
00001DC8                          2069  
00001DC8                          2070  *-------------------------------------------------------------------------------
00001DC8                          2071  
00001DC8                          2072  
00001DC8                          2073  
00001DC8                          2074  
00001DC8                          2075  
00001DC8                          2076  
00001DC8                          2077  
00001DC8                          2078  
00001DC8                          2079  
00001DC8                          2080  
00001DC8                          2081  *-------------------------------------------------------------------------------
00001DC8                          2082  *     _______    ________
00001DC8                          2083  *    |\  ___ \  |\   __  \
00001DC8                          2084  *    \ \   __/| \ \  \|\  \
00001DC8                          2085  *     \ \  \_|/__\ \   __  \
00001DC8                          2086  *      \ \  \_|\ \\ \  \ \  \
00001DC8                          2087  *       \ \_______\\ \__\ \__\
00001DC8                          2088  *        \|_______| \|__|\|__|
00001DC8                          2089  *
00001DC8                          2090  *-------------------------------------------------------------------------------
00001DC8                          2091  
00001DC8                          2092  *-------------------------------------------------------------------------------
00001DC8                          2093  *
00001DC8                          2094  *       PUSH EFFECTIVE ADDRESS MODE IDENTIFIER
00001DC8                          2095  *
00001DC8                          2096  * Determines the addressing mode of the effective address. Used for opcodes
00001DC8                          2097  * with the last five bits dedicated to the effective address.
00001DC8                          2098  *
00001DC8                          2099  * TODO: Implement a counter for how many prints we've made
00001DC8                          2100  *
00001DC8                          2101  *________________________________________
00001DC8                          2102  * Register Use Summary:
00001DC8                          2103  *
00001DC8                          2104  * D0: LOCAL VARIABLE - low byte of opcode
00001DC8                          2105  * D6: PARAMETER - The effective address bits. Assumes bits are shifted into
00001DC8                          2106  *                 the lowest 6 bits of the register.
00001DC8                          2107  *
00001DC8                          2108  * A4: LOCAL VARIABLE - RTS value temporary storage - must be swapped
00001DC8                          2109  * A5: LOCAL VARIABLE - Print Label to be pushed to stack
00001DC8                          2110  *
00001DC8                          2111  *-------------------------------------------------------------------------------
00001DC8                          2112  PUSH_EA_MODE_ID
00001DC8                          2113  
00001DC8                          2114  
00001DC8                          2115  * ---- Input Processing ----
00001DC8                          2116  
00001DC8  1006                    2117      MOVE.B  D6,D0   * Put opcode in D0
00001DCA  C03C 0038               2118      AND.B   #$38,D0 * Mask D0 with 0111000 to get MODE bits only
00001DCE  E600                    2119      ASR.B   #3,D0   * Shift the result so D0 ranges between 000 and 111
00001DD0                          2120  
00001DD0                          2121  
00001DD0                          2122  * ---- Branching Block ----
00001DD0                          2123  
00001DD0  B03C 0000               2124      CMP.B   #0,D0           *000 -> Register
00001DD4  6700 002E               2125      BEQ     PUSH_EA_MODE_ID_DN
00001DD8  B03C 0001               2126      CMP.B   #1,D0           *001 -> Address Register
00001DDC  6700 0030               2127      BEQ     PUSH_EA_MODE_ID_AN
00001DE0  B03C 0002               2128      CMP.B   #2,D0           *010 -> Address Register   Indirect
00001DE4  6700 0032               2129      BEQ     PUSH_EA_MODE_ID_AN_INDIRECT
00001DE8  B03C 0003               2130      CMP.B   #3,D0           *011 -> Address Register  (Indirect)+
00001DEC  6700 0034               2131      BEQ     PUSH_EA_MODE_ID_AN_POST_INC
00001DF0  B03C 0004               2132      CMP.B   #4,D0           *100 -> Address Register -(Indirect)
00001DF4  6700 0036               2133      BEQ     PUSH_EA_MODE_ID_AN_PRE_DEC
00001DF8  B03C 0007               2134      CMP.B   #7,D0           *111 -> All Data Operations
00001DFC  6700 0038               2135      BEQ     PUSH_EA_MODE_ID_ELSE
00001E00                          2136  
00001E00  6000 0608               2137      BRA     PRINT_ILLEGAL
00001E04                          2138  
00001E04                          2139  *________________________________________
00001E04                          2140  * Load Register Print Label
00001E04                          2141  *----------------------------------------
00001E04                          2142  PUSH_EA_MODE_ID_DN
00001E04  4BF9 000021F4           2143      LEA     PRINT_EA_MODE_ID_DN,A5
00001E0A  6000 0088               2144      BRA     PUSH_EA_MODE_ID_FINISH
00001E0E                          2145  
00001E0E                          2146  *________________________________________
00001E0E                          2147  * Load Address Register Print Label
00001E0E                          2148  *----------------------------------------
00001E0E                          2149  PUSH_EA_MODE_ID_AN
00001E0E  4BF9 00002212           2150      LEA     PRINT_EA_MODE_ID_AN,A5
00001E14  6000 007E               2151      BRA     PUSH_EA_MODE_ID_FINISH
00001E18                          2152  
00001E18                          2153  *________________________________________
00001E18                          2154  * Load (Address Register) Print Label
00001E18                          2155  *----------------------------------------
00001E18                          2156  PUSH_EA_MODE_ID_AN_INDIRECT
00001E18  4BF9 00002230           2157      LEA     PRINT_EA_MODE_ID_AN_INDIRECT,A5
00001E1E  6000 0074               2158      BRA     PUSH_EA_MODE_ID_FINISH
00001E22                          2159  
00001E22                          2160  *________________________________________
00001E22                          2161  * Load (Address Register)+ Print Label
00001E22                          2162  *----------------------------------------
00001E22                          2163  PUSH_EA_MODE_ID_AN_POST_INC
00001E22  4BF9 00002266           2164      LEA     PRINT_EA_MODE_ID_AN_POST_INC,A5
00001E28  6000 006A               2165      BRA     PUSH_EA_MODE_ID_FINISH
00001E2C                          2166  
00001E2C                          2167  *________________________________________
00001E2C                          2168  * Load -(Address Register) Print Label
00001E2C                          2169  *----------------------------------------
00001E2C                          2170  PUSH_EA_MODE_ID_AN_PRE_DEC
00001E2C  4BF9 000022A8           2171      LEA     PRINT_EA_MODE_ID_AN_PRE_DEC,A5
00001E32  6000 0060               2172      BRA     PUSH_EA_MODE_ID_FINISH
00001E36                          2173  
00001E36                          2174  *________________________________________
00001E36                          2175  * Handle Data Branching Logic
00001E36                          2176  *----------------------------------------
00001E36                          2177  PUSH_EA_MODE_ID_ELSE
00001E36  1006                    2178      MOVE.B  D6,D0
00001E38  C03C 0007               2179      AND.B   #7,D0
00001E3C                          2180  
00001E3C  B03C 0000               2181      CMP.B   #0,D0
00001E40  6700 0016               2182      BEQ     PUSH_EA_MODE_ID_IND_SHORT
00001E44                          2183  
00001E44  B03C 0001               2184      CMP.B   #1,D0
00001E48  6700 0022               2185      BEQ     PUSH_EA_MODE_ID_IND_LONG
00001E4C                          2186  
00001E4C  B03C 0004               2187      CMP.B   #4,D0
00001E50  6700 002E               2188      BEQ     PUSH_EA_MODE_ID_ABS_DATA
00001E54                          2189  
00001E54  6000 05B4               2190      BRA     PRINT_ILLEGAL
00001E58                          2191  
00001E58                          2192  PUSH_EA_MODE_ID_IND_SHORT
00001E58  4BF9 000022EA           2193      LEA     PRINT_EA_MODE_ID_IND_SHORT,A5
00001E5E  5478 1010               2194      ADD.W           #2, LOOP_INC * Adjust the Loop increment to skip the data
00001E62  31FC 0001 101A          2195      MOVE.W  #1,DATA1_IN_USE
00001E68  6000 002A               2196      BRA     PUSH_EA_MODE_ID_FINISH
00001E6C                          2197  
00001E6C                          2198  PUSH_EA_MODE_ID_IND_LONG
00001E6C  4BF9 0000232A           2199      LEA     PRINT_EA_MODE_ID_IND_LONG,A5
00001E72  5878 1010               2200      ADD.W           #4,LOOP_INC * Adjust the Loop increment to skip the data
00001E76  31FC 0001 101A          2201      MOVE.W  #1,DATA1_IN_USE
00001E7C  6000 0016               2202      BRA     PUSH_EA_MODE_ID_FINISH
00001E80                          2203  
00001E80                          2204  PUSH_EA_MODE_ID_ABS_DATA
00001E80  4BF9 0000235E           2205      LEA     PRINT_EA_MODE_ID_ABS_DATA,A5
00001E86  5878 1010               2206      ADD.W           #4,LOOP_INC * Adjust the Loop increment to skip the data
00001E8A  31FC 0001 101A          2207          MOVE.W  #1,DATA1_IN_USE
00001E90  6000 0002               2208      BRA     PUSH_EA_MODE_ID_FINISH
00001E94                          2209  
00001E94                          2210  *________________________________________
00001E94                          2211  PUSH_EA_MODE_ID_FINISH
00001E94  2857                    2212      MOVEA.L         (SP),A4 * Store the value we're going to RTS to
00001E96  588F                    2213      ADD.L           #4,SP   * Move the stack pointer down to the RTS value
00001E98  2F0D                    2214      MOVE.L          A5,-(SP)    * Overwrite the RTS value with the print label
00001E9A  2F0C                    2215      MOVE.L          A4,-(SP)    * Push the RTS so we can return like normal
00001E9C                          2216  
00001E9C  5878 1008               2217      ADD.W           #4,PRINT_COUNT
00001EA0                          2218  
00001EA0  4E75                    2219      RTS
00001EA2                          2220  
00001EA2                          2221  *-------------------------------------------------------------------------------
00001EA2                          2222  *                 ________  ___       __   ___
00001EA2                          2223  *                |\   __  \|\  \     |\  \|\  \
00001EA2                          2224  *                \ \  \|\ /\ \  \    \ \  \ \  \
00001EA2                          2225  *                 \ \   __  \ \  \  __\ \  \ \  \
00001EA2                          2226  *                  \ \  \|\  \ \  \|\__\_\  \ \  \____
00001EA2                          2227  *                   \ \_______\ \____________\ \_______\
00001EA2                          2228  *                    \|_______|\|____________|\|_______|
00001EA2                          2229  *
00001EA2                          2230  
00001EA2                          2231  *-------------------------------------------------------------------------------
00001EA2                          2232  
00001EA2                          2233  *-------------------------------------------------------------------------------
00001EA2                          2234  *
00001EA2                          2235  *       PUSH BYTE, WORD, OR LONG
00001EA2                          2236  *
00001EA2                          2237  * TODO: Implement a counter for how many prints we've made
00001EA2                          2238  *________________________________________
00001EA2                          2239  * Register Use Summary:
00001EA2                          2240  *
00001EA2                          2241  * D4: PARAMETER       - The size bits to print
00001EA2                          2242  * D7: CONST PARAMETER - The opcode word
00001EA2                          2243  *
00001EA2                          2244  * A4: LOCAL VARIABLE  - Temp RTS location
00001EA2                          2245  * A5: LOCAL VARIABLE  - Label for the print routine to store on the stack
00001EA2                          2246  *-------------------------------------------------------------------------------
00001EA2                          2247  PUSH_BWL
00001EA2                          2248  
00001EA2                          2249  * ---- Branching Block ----
00001EA2                          2250  
00001EA2  B83C 0000               2251      CMP.B           #0,D4       *00 -> Byte
00001EA6  6700 0016               2252      BEQ             PUSH_BWL_BYTE
00001EAA  B83C 0001               2253      CMP.B           #1,D4       *01 -> Word
00001EAE  6700 0018               2254      BEQ             PUSH_BWL_WORD
00001EB2  B83C 0002               2255      CMP.B           #2,D4       *10 -> Long
00001EB6  6700 001A               2256      BEQ             PUSH_BWL_LONG
00001EBA                          2257  
00001EBA  6000 054E               2258      BRA             PRINT_ILLEGAL
00001EBE                          2259  
00001EBE                          2260  *________________________________________
00001EBE                          2261  * Load Byte Print Label
00001EBE                          2262  *----------------------------------------
00001EBE                          2263  PUSH_BWL_BYTE
00001EBE  4BF9 000021C4           2264      LEA             PRINT_BYTE_DESIGNATOR,A5
00001EC4  6000 0016               2265      BRA             PUSH_BWL_FINISH
00001EC8                          2266  *________________________________________
00001EC8                          2267  * Load Word Print Label
00001EC8                          2268  *----------------------------------------
00001EC8                          2269  PUSH_BWL_WORD
00001EC8  4BF9 000021D4           2270      LEA             PRINT_WORD_DESIGNATOR,A5
00001ECE  6000 000C               2271      BRA             PUSH_BWL_FINISH
00001ED2                          2272  
00001ED2                          2273  *________________________________________
00001ED2                          2274  * Load Long Print Label
00001ED2                          2275  *----------------------------------------
00001ED2                          2276  PUSH_BWL_LONG
00001ED2  4BF9 000021E4           2277      LEA             PRINT_LONG_DESIGNATOR,A5
00001ED8  6000 0002               2278      BRA             PUSH_BWL_FINISH
00001EDC                          2279  
00001EDC                          2280  *________________________________________
00001EDC                          2281  PUSH_BWL_FINISH
00001EDC                          2282  
00001EDC  2857                    2283      MOVEA.L         (SP),A4 * Store the value we're going to RTS to
00001EDE  588F                    2284      ADD.L           #4,SP   * Move the stack pointer down to the RTS value
00001EE0  2F0D                    2285      MOVE.L          A5,-(SP)    * Overwrite the RTS value with the print label
00001EE2  2F0C                    2286      MOVE.L          A4,-(SP)    * Push the RTS so we can return like normal
00001EE4                          2287  
00001EE4  5878 1008               2288      ADD.W           #4,PRINT_COUNT
00001EE8                          2289  
00001EE8  4E75                    2290      RTS
00001EEA                          2291  
00001EEA                          2292  
00001EEA                          2293  *-------------------------------------------------------------------------------
00001EEA                          2294  *     ________   ________   ___   ________    _________
00001EEA                          2295  *    |\   __  \ |\   __  \ |\  \ |\   ___  \ |\___   ___\
00001EEA                          2296  *    \ \  \|\  \\ \  \|\  \\ \  \\ \  \\ \  \\|___ \  \_|
00001EEA                          2297  *     \ \   ____\\ \   _  _\\ \  \\ \  \\ \  \    \ \  \
00001EEA                          2298  *      \ \  \___| \ \  \\  \|\ \  \\ \  \\ \  \    \ \  \
00001EEA                          2299  *       \ \__\     \ \__\\ _\ \ \__\\ \__\\ \__\    \ \__\
00001EEA                          2300  *        \|__|      \|__|\|__| \|__| \|__| \|__|     \|__|
00001EEA                          2301  *
00001EEA                          2302  * May god have mercy on your soul
00001EEA                          2303  *-------------------------------------------------------------------------------
00001EEA                          2304  *-------------------------------------------------------------------------------
00001EEA                          2305  *
00001EEA                          2306  *       PRINT LSR
00001EEA                          2307  *________________________________________
00001EEA                          2308  * Register Use Summary:
00001EEA                          2309  *
00001EEA                          2310  * D0: LOCAL VARIABLE  - Trap task designator
00001EEA                          2311  *
00001EEA                          2312  * A1: LOCAL VARIABLE  - String address
00001EEA                          2313  *-------------------------------------------------------------------------------
00001EEA                          2314  PRINT_LSR
00001EEA  43F9 00002ABA           2315      LEA             STRING_LSR,A1   * Load "LSR" into A1
00001EF0  103C 000E               2316      MOVE.B          #14,D0      * Set trap task to String
00001EF4  4E4F                    2317      TRAP            #15         * Print "LSR "
00001EF6  6000 FEBE               2318      BRA             PRINT_OPCODE_LOOP_RETURN
00001EFA                          2319  
00001EFA                          2320  *-------------------------------------------------------------------------------
00001EFA                          2321  *
00001EFA                          2322  *       PRINT LSL
00001EFA                          2323  *________________________________________
00001EFA                          2324  * Register Use Summary:
00001EFA                          2325  *
00001EFA                          2326  * D0: LOCAL VARIABLE  - Trap task designator
00001EFA                          2327  *
00001EFA                          2328  * A1: LOCAL VARIABLE  - String address
00001EFA                          2329  *-------------------------------------------------------------------------------
00001EFA                          2330  PRINT_LSL
00001EFA  43F9 00002ABE           2331      LEA             STRING_LSL,A1   * Load "LSL" into A1
00001F00  103C 000E               2332      MOVE.B          #14,D0      * Set trap task to String
00001F04  4E4F                    2333      TRAP            #15         * Print "LSL "
00001F06  6000 FEAE               2334      BRA             PRINT_OPCODE_LOOP_RETURN
00001F0A                          2335  
00001F0A                          2336  *-------------------------------------------------------------------------------
00001F0A                          2337  *
00001F0A                          2338  *       PRINT ASR
00001F0A                          2339  *________________________________________
00001F0A                          2340  * Register Use Summary:
00001F0A                          2341  *
00001F0A                          2342  * D0: LOCAL VARIABLE  - Trap task designator
00001F0A                          2343  *
00001F0A                          2344  * A1: LOCAL VARIABLE  - String address
00001F0A                          2345  *-------------------------------------------------------------------------------
00001F0A                          2346  PRINT_ASR
00001F0A  43F9 00002AB2           2347      LEA             STRING_ASR,A1   * Load "ASR" into A1
00001F10  103C 000E               2348      MOVE.B          #14,D0      * Set trap task to String
00001F14  4E4F                    2349      TRAP            #15         * Print "ASR "
00001F16  6000 FE9E               2350      BRA             PRINT_OPCODE_LOOP_RETURN
00001F1A                          2351  
00001F1A                          2352  *-------------------------------------------------------------------------------
00001F1A                          2353  *
00001F1A                          2354  *       PRINT ASL
00001F1A                          2355  *________________________________________
00001F1A                          2356  * Register Use Summary:
00001F1A                          2357  *
00001F1A                          2358  * D0: LOCAL VARIABLE  - Trap task designator
00001F1A                          2359  *
00001F1A                          2360  * A1: LOCAL VARIABLE  - String address
00001F1A                          2361  *-------------------------------------------------------------------------------
00001F1A                          2362  PRINT_ASL
00001F1A  43F9 00002AB6           2363      LEA             STRING_ASL,A1   * Load "ASL" into A1
00001F20  103C 000E               2364      MOVE.B          #14,D0      * Set trap task to String
00001F24  4E4F                    2365      TRAP            #15         * Print "ASL "
00001F26  6000 FE8E               2366      BRA             PRINT_OPCODE_LOOP_RETURN
00001F2A                          2367  
00001F2A                          2368  *-------------------------------------------------------------------------------
00001F2A                          2369  *
00001F2A                          2370  *       PRINT ROR
00001F2A                          2371  *________________________________________
00001F2A                          2372  * Register Use Summary:
00001F2A                          2373  *
00001F2A                          2374  * D0: LOCAL VARIABLE  - Trap task designator
00001F2A                          2375  *
00001F2A                          2376  * A1: LOCAL VARIABLE  - String address
00001F2A                          2377  *-------------------------------------------------------------------------------
00001F2A                          2378  PRINT_ROR
00001F2A  43F9 00002AC2           2379      LEA             STRING_ROR,A1   * Load "ROR" into A1
00001F30  103C 000E               2380      MOVE.B          #14,D0      * Set trap task to String
00001F34  4E4F                    2381      TRAP            #15         * Print "ROR "
00001F36  6000 FE7E               2382      BRA             PRINT_OPCODE_LOOP_RETURN
00001F3A                          2383  
00001F3A                          2384  *-------------------------------------------------------------------------------
00001F3A                          2385  *
00001F3A                          2386  *       PRINT ROL
00001F3A                          2387  *________________________________________
00001F3A                          2388  * Register Use Summary:
00001F3A                          2389  *
00001F3A                          2390  * D0: LOCAL VARIABLE  - Trap task designator
00001F3A                          2391  *
00001F3A                          2392  * A1: LOCAL VARIABLE  - String address
00001F3A                          2393  *-------------------------------------------------------------------------------
00001F3A                          2394  PRINT_ROL
00001F3A  43F9 00002AC6           2395      LEA             STRING_ROL,A1   * Load "ROL" into A1
00001F40  103C 000E               2396      MOVE.B          #14,D0      * Set trap task to String
00001F44  4E4F                    2397      TRAP            #15         * Print "ROL"
00001F46  6000 FE6E               2398      BRA             PRINT_OPCODE_LOOP_RETURN
00001F4A                          2399  
00001F4A                          2400  *-------------------------------------------------------------------------------
00001F4A                          2401  *
00001F4A                          2402  *       PRINT DATA1_WORD
00001F4A                          2403  *________________________________________
00001F4A                          2404  * Register Use Summary:
00001F4A                          2405  *
00001F4A                          2406  * D0: LOCAL VARIABLE  - Trap task designator
00001F4A                          2407  *
00001F4A                          2408  * D1: LOCAL VARIABLE  - DATA1 local copy
00001F4A                          2409  *
00001F4A                          2410  * D2: LOCAL VARIABLE  - Base in which to print
00001F4A                          2411  *
00001F4A                          2412  * A1: LOCAL VARIABLE  - String address
00001F4A                          2413  *-------------------------------------------------------------------------------
00001F4A                          2414  PRINT_DATA1_LONG
00001F4A  2238 1016               2415      MOVE.L          DATA1,D1
00001F4E  700F                    2416      MOVEQ           #15,D0
00001F50  7410                    2417      MOVEQ           #16,D2
00001F52  4E4F                    2418      TRAP            #15
00001F54                          2419  
00001F54                          2420  *-------------------------------------------------------------------------------
00001F54                          2421  *
00001F54                          2422  *       PRINT DATA1_WORD
00001F54                          2423  *________________________________________
00001F54                          2424  * Register Use Summary:
00001F54                          2425  *
00001F54                          2426  * D0: LOCAL VARIABLE  - Trap task designator
00001F54                          2427  *
00001F54                          2428  * D1: LOCAL VARIABLE  - DATA1 local copy
00001F54                          2429  *
00001F54                          2430  * D2: LOCAL VARIABLE  - Base in which to print
00001F54                          2431  *
00001F54                          2432  * A1: LOCAL VARIABLE  - String address
00001F54                          2433  *-------------------------------------------------------------------------------
00001F54                          2434  PRINT_DATA1_WORD
00001F54  2238 1016               2435      MOVE.L          DATA1,D1
00001F58  4841                    2436      SWAP            D1              * We only want the upper word
00001F5A  C27C FFFF               2437      AND             #$0000FFFF,D1   * Bit mask for upper word
00001F5E  700F                    2438      MOVEQ           #15,D0
00001F60  7410                    2439      MOVEQ           #16,D2
00001F62  4E4F                    2440      TRAP            #15
00001F64                          2441  
00001F64                          2442  *-------------------------------------------------------------------------------
00001F64                          2443  *
00001F64                          2444  *       PRINT BGT
00001F64                          2445  *________________________________________
00001F64                          2446  * Register Use Summary:
00001F64                          2447  *
00001F64                          2448  * D0: LOCAL VARIABLE  - Trap task designator
00001F64                          2449  *
00001F64                          2450  * A1: LOCAL VARIABLE  - String address
00001F64                          2451  *-------------------------------------------------------------------------------
00001F64                          2452  PRINT_BGT
00001F64  43F9 00002AEF           2453      LEA             STRING_BGT,A1   * Load "BGT" into A1
00001F6A  103C 000E               2454      MOVE.B          #14,D0      * Set trap task to String
00001F6E  4E4F                    2455      TRAP            #15         * Print "BGT "
00001F70  6000 FE44               2456      BRA             PRINT_OPCODE_LOOP_RETURN
00001F74                          2457  
00001F74                          2458  *-------------------------------------------------------------------------------
00001F74                          2459  *
00001F74                          2460  *       PRINT BLE
00001F74                          2461  *________________________________________
00001F74                          2462  * Register Use Summary:
00001F74                          2463  *
00001F74                          2464  * D0: LOCAL VARIABLE  - Trap task designator
00001F74                          2465  *
00001F74                          2466  * A1: LOCAL VARIABLE  - String address
00001F74                          2467  *-------------------------------------------------------------------------------
00001F74                          2468  PRINT_BLE
00001F74  43F9 00002AE5           2469      LEA             STRING_BLE,A1   * Load "BLE" into A1
00001F7A  103C 000E               2470      MOVE.B          #14,D0      * Set trap task to String
00001F7E  4E4F                    2471      TRAP            #15         * Print "BLE "
00001F80  6000 FE34               2472      BRA             PRINT_OPCODE_LOOP_RETURN
00001F84                          2473  
00001F84                          2474  *-------------------------------------------------------------------------------
00001F84                          2475  *
00001F84                          2476  *       PRINT BEQ
00001F84                          2477  *________________________________________
00001F84                          2478  * Register Use Summary:
00001F84                          2479  *
00001F84                          2480  * D0: LOCAL VARIABLE  - Trap task designator
00001F84                          2481  *
00001F84                          2482  * A1: LOCAL VARIABLE  - String address
00001F84                          2483  *-------------------------------------------------------------------------------
00001F84                          2484  PRINT_BEQ
00001F84  43F9 00002AE0           2485      LEA             STRING_BEQ,A1   * Load "BEQ" into A1
00001F8A  103C 000E               2486      MOVE.B          #14,D0      * Set trap task to String
00001F8E  4E4F                    2487      TRAP            #15         * Print "BEQ "
00001F90  6000 FE24               2488      BRA             PRINT_OPCODE_LOOP_RETURN
00001F94                          2489  
00001F94                          2490  
00001F94                          2491  *-------------------------------------------------------------------------------
00001F94                          2492  *
00001F94                          2493  *       PRINT BRA
00001F94                          2494  *________________________________________
00001F94                          2495  * Register Use Summary:
00001F94                          2496  *
00001F94                          2497  * D0: LOCAL VARIABLE  - Trap task designator
00001F94                          2498  *
00001F94                          2499  * A1: LOCAL VARIABLE  - String address
00001F94                          2500  *-------------------------------------------------------------------------------
00001F94                          2501  PRINT_BRA
00001F94  43F9 00002AEA           2502      LEA             STRING_BRA,A1   * Load "BRA" into A1
00001F9A  103C 000E               2503      MOVE.B          #14,D0      * Set trap task to String
00001F9E  4E4F                    2504      TRAP            #15         * Print "BRA "
00001FA0  6000 FE14               2505      BRA             PRINT_OPCODE_LOOP_RETURN
00001FA4                          2506  
00001FA4                          2507  
00001FA4                          2508  *-------------------------------------------------------------------------------
00001FA4                          2509  *
00001FA4                          2510  *       PRINT ADD
00001FA4                          2511  *________________________________________
00001FA4                          2512  * Register Use Summary:
00001FA4                          2513  *
00001FA4                          2514  * D0: LOCAL VARIABLE  - Trap task designator
00001FA4                          2515  *
00001FA4                          2516  * A1: LOCAL VARIABLE  - String address
00001FA4                          2517  *-------------------------------------------------------------------------------
00001FA4                          2518  PRINT_ADD
00001FA4  43F9 00002AD7           2519      LEA             STRING_ADD,A1   * Load "ADD" into A1
00001FAA  103C 000E               2520      MOVE.B          #14,D0      * Set trap task to String
00001FAE  4E4F                    2521      TRAP            #15         * Print "ADD "
00001FB0  6000 FE04               2522      BRA             PRINT_OPCODE_LOOP_RETURN
00001FB4                          2523  
00001FB4                          2524  
00001FB4                          2525  *-------------------------------------------------------------------------------
00001FB4                          2526  *
00001FB4                          2527  *       PRINT ADDA
00001FB4                          2528  *________________________________________
00001FB4                          2529  * Register Use Summary:
00001FB4                          2530  *
00001FB4                          2531  * D0: LOCAL VARIABLE  - Trap task designator
00001FB4                          2532  *
00001FB4                          2533  * A1: LOCAL VARIABLE  - String address
00001FB4                          2534  *-------------------------------------------------------------------------------
00001FB4                          2535  PRINT_ADDA
00001FB4  43F9 00002ADB           2536      LEA             STRING_ADDA,A1  * Load "ADDA" into A1
00001FBA  103C 000E               2537      MOVE.B          #14,D0      * Set trap task to String
00001FBE  4E4F                    2538      TRAP            #15         * Print "ADDA "
00001FC0  6000 FDF4               2539      BRA             PRINT_OPCODE_LOOP_RETURN
00001FC4                          2540  
00001FC4                          2541  
00001FC4                          2542  *-------------------------------------------------------------------------------
00001FC4                          2543  *
00001FC4                          2544  *       PRINT MISC_NUMBER
00001FC4                          2545  *________________________________________
00001FC4                          2546  * Register Use Summary:
00001FC4                          2547  *
00001FC4                          2548  * D0: LOCAL VARIABLE  - Trap task designator
00001FC4                          2549  *
00001FC4                          2550  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
00001FC4                          2551  *
00001FC4                          2552  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
00001FC4                          2553  *
00001FC4                          2554  * A1: LOCAL VARIABLE  - String address
00001FC4                          2555  *-------------------------------------------------------------------------------
00001FC4                          2556  PRINT_MISC_NUMBER
00001FC4  4281                    2557      CLR.L   D1
00001FC6                          2558  
00001FC6  103C 000F               2559      MOVE.B  #15,D0
00001FCA  1239 00002B6A           2560      MOVE.B  MISC_NUMBER,D1
00001FD0  143C 000A               2561      MOVE.B  #10,D2
00001FD4  4E4F                    2562      TRAP #15
00001FD6                          2563  
00001FD6  6000 FDDE               2564      BRA     PRINT_OPCODE_LOOP_RETURN
00001FDA                          2565  
00001FDA                          2566  *-------------------------------------------------------------------------------
00001FDA                          2567  *
00001FDA                          2568  *       PRINT MISC_NUMBER_AS_ADDRESS
00001FDA                          2569  *________________________________________
00001FDA                          2570  * Register Use Summary:
00001FDA                          2571  *
00001FDA                          2572  * D0: LOCAL VARIABLE  - Trap task designator
00001FDA                          2573  *
00001FDA                          2574  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
00001FDA                          2575  *
00001FDA                          2576  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
00001FDA                          2577  *
00001FDA                          2578  * A1: LOCAL VARIABLE  - String address
00001FDA                          2579  *-------------------------------------------------------------------------------
00001FDA                          2580  PRINT_MISC_NUMBER_AS_ADDRESS
00001FDA                          2581  
00001FDA  43F9 00002A98           2582      LEA             STRING_A,A1
00001FE0  103C 000E               2583      MOVE.B          #14,D0
00001FE4  4E4F                    2584      TRAP            #15
00001FE6                          2585  
00001FE6  4280                    2586      CLR.L   D0
00001FE8  4281                    2587      CLR.L   D1
00001FEA  4282                    2588      CLR.L   D2
00001FEC                          2589  
00001FEC  103C 000F               2590      MOVE.B  #15,D0
00001FF0  1239 00002B6A           2591      MOVE.B  MISC_NUMBER,D1
00001FF6  143C 000A               2592      MOVE.B  #10,D2
00001FFA  4E4F                    2593      TRAP #15
00001FFC                          2594  
00001FFC  6000 FDB8               2595      BRA     PRINT_OPCODE_LOOP_RETURN
00002000                          2596  
00002000                          2597  *-------------------------------------------------------------------------------
00002000                          2598  *
00002000                          2599  *       PRINT MISC_NUMBER_AS_REGISTER
00002000                          2600  *________________________________________
00002000                          2601  * Register Use Summary:
00002000                          2602  *
00002000                          2603  * D0: LOCAL VARIABLE  - Trap task designator
00002000                          2604  *
00002000                          2605  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
00002000                          2606  *
00002000                          2607  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
00002000                          2608  *
00002000                          2609  * A1: LOCAL VARIABLE  - String address
00002000                          2610  *-------------------------------------------------------------------------------
00002000                          2611  PRINT_MISC_NUMBER_AS_REGISTER
00002000                          2612  
00002000  43F9 00002A96           2613      LEA             STRING_D,A1
00002006  103C 000E               2614      MOVE.B          #14,D0
0000200A  4E4F                    2615      TRAP            #15
0000200C                          2616  
0000200C  4280                    2617      CLR.L   D0
0000200E  4281                    2618      CLR.L   D1
00002010  4282                    2619      CLR.L   D2
00002012                          2620  
00002012  103C 000F               2621      MOVE.B  #15,D0
00002016  1239 00002B6A           2622      MOVE.B  MISC_NUMBER,D1
0000201C  143C 000A               2623      MOVE.B  #10,D2
00002020  4E4F                    2624      TRAP #15
00002022                          2625  
00002022  6000 FD92               2626      BRA     PRINT_OPCODE_LOOP_RETURN
00002026                          2627  
00002026                          2628  *-------------------------------------------------------------------------------
00002026                          2629  *
00002026                          2630  *       PRINT MISC_REGISTER
00002026                          2631  *________________________________________
00002026                          2632  * Register Use Summary:
00002026                          2633  *
00002026                          2634  * D0: LOCAL VARIABLE  - Trap task designator
00002026                          2635  *
00002026                          2636  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
00002026                          2637  *
00002026                          2638  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
00002026                          2639  *
00002026                          2640  * A1: LOCAL VARIABLE  - String address
00002026                          2641  *-------------------------------------------------------------------------------
00002026                          2642  PRINT_MISC_REGISTER
00002026                          2643  
00002026  43F9 00002A96           2644      LEA             STRING_D,A1
0000202C  103C 000E               2645      MOVE.B          #14,D0
00002030  4E4F                    2646      TRAP            #15
00002032                          2647  
00002032  4280                    2648      CLR.L   D0
00002034  4281                    2649      CLR.L   D1
00002036  4282                    2650      CLR.L   D2
00002038                          2651  
00002038  103C 000F               2652      MOVE.B  #15,D0
0000203C  1239 00002B6E           2653      MOVE.B  MISC_REGISTER,D1
00002042  143C 000A               2654      MOVE.B  #10,D2
00002046  4E4F                    2655      TRAP #15
00002048                          2656  
00002048  6000 FD6C               2657      BRA     PRINT_OPCODE_LOOP_RETURN
0000204C                          2658  
0000204C                          2659  
0000204C                          2660  
0000204C                          2661  *-------------------------------------------------------------------------------
0000204C                          2662  *
0000204C                          2663  *       PRINT_MISC_PRE_DEC
0000204C                          2664  *________________________________________
0000204C                          2665  * Register Use Summary:
0000204C                          2666  *
0000204C                          2667  * D0: LOCAL VARIABLE  - Trap task designator
0000204C                          2668  *
0000204C                          2669  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
0000204C                          2670  *
0000204C                          2671  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
0000204C                          2672  *
0000204C                          2673  * A1: LOCAL VARIABLE  - String address
0000204C                          2674  *-------------------------------------------------------------------------------
0000204C                          2675  PRINT_MISC_PRE_DEC
0000204C                          2676  
0000204C  43F9 00002AA2           2677      LEA             STRING_MINUS,A1
00002052  103C 000E               2678      MOVE.B          #14,D0
00002056  4E4F                    2679      TRAP            #15
00002058                          2680  
00002058  43F9 00002A9C           2681      LEA             STRING_LEFT_PAREN,A1
0000205E  103C 000E               2682      MOVE.B          #14,D0
00002062  4E4F                    2683      TRAP            #15
00002064                          2684  
00002064  43F9 00002A98           2685      LEA             STRING_A,A1
0000206A  103C 000E               2686      MOVE.B          #14,D0
0000206E  4E4F                    2687      TRAP            #15
00002070                          2688  
00002070  4280                    2689      CLR.L   D0
00002072  4281                    2690      CLR.L   D1
00002074  4282                    2691      CLR.L   D2
00002076                          2692  
00002076  103C 000F               2693      MOVE.B  #15,D0
0000207A  1239 00002B6A           2694      MOVE.B  MISC_NUMBER,D1
00002080  143C 000A               2695      MOVE.B  #10,D2
00002084  4E4F                    2696      TRAP #15
00002086                          2697  
00002086  43F9 00002A9E           2698      LEA             STRING_RIGHT_PAREN,A1
0000208C  103C 000E               2699      MOVE.B          #14,D0
00002090  4E4F                    2700      TRAP            #15
00002092                          2701  
00002092  6000 FD22               2702      BRA     PRINT_OPCODE_LOOP_RETURN
00002096                          2703  
00002096                          2704  *-------------------------------------------------------------------------------
00002096                          2705  *
00002096                          2706  *       PRINT_MISC_POST_INC
00002096                          2707  *________________________________________
00002096                          2708  * Register Use Summary:
00002096                          2709  *
00002096                          2710  * D0: LOCAL VARIABLE  - Trap task designator
00002096                          2711  *
00002096                          2712  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
00002096                          2713  *
00002096                          2714  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
00002096                          2715  *
00002096                          2716  * A1: LOCAL VARIABLE  - String address
00002096                          2717  *-------------------------------------------------------------------------------
00002096                          2718  PRINT_MISC_POST_INC
00002096                          2719  
00002096  43F9 00002A9C           2720      LEA             STRING_LEFT_PAREN,A1
0000209C  103C 000E               2721      MOVE.B          #14,D0
000020A0  4E4F                    2722      TRAP            #15
000020A2                          2723  
000020A2  43F9 00002A98           2724      LEA             STRING_A,A1
000020A8  103C 000E               2725      MOVE.B          #14,D0
000020AC  4E4F                    2726      TRAP            #15
000020AE                          2727  
000020AE  4280                    2728      CLR.L   D0
000020B0  4281                    2729      CLR.L   D1
000020B2  4282                    2730      CLR.L   D2
000020B4                          2731  
000020B4  103C 000F               2732      MOVE.B  #15,D0
000020B8  1239 00002B6A           2733      MOVE.B  MISC_NUMBER,D1
000020BE  143C 000A               2734      MOVE.B  #10,D2
000020C2  4E4F                    2735      TRAP #15
000020C4                          2736  
000020C4  43F9 00002A9E           2737      LEA             STRING_RIGHT_PAREN,A1
000020CA  103C 000E               2738      MOVE.B          #14,D0
000020CE  4E4F                    2739      TRAP            #15
000020D0                          2740  
000020D0  43F9 00002AA0           2741      LEA             STRING_PLUS,A1
000020D6  103C 000E               2742      MOVE.B          #14,D0
000020DA  4E4F                    2743      TRAP            #15
000020DC                          2744  
000020DC  6000 FCD8               2745      BRA     PRINT_OPCODE_LOOP_RETURN
000020E0                          2746  
000020E0                          2747  *-------------------------------------------------------------------------------
000020E0                          2748  *
000020E0                          2749  *       PRINT_MISC_ADDRESS_IND
000020E0                          2750  *________________________________________
000020E0                          2751  * Register Use Summary:
000020E0                          2752  *
000020E0                          2753  * D0: LOCAL VARIABLE  - Trap task designator
000020E0                          2754  *
000020E0                          2755  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
000020E0                          2756  *
000020E0                          2757  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
000020E0                          2758  *
000020E0                          2759  * A1: LOCAL VARIABLE  - String address
000020E0                          2760  *-------------------------------------------------------------------------------
000020E0                          2761  PRINT_MISC_ADDRESS_IND
000020E0                          2762  
000020E0  43F9 00002A9C           2763      LEA             STRING_LEFT_PAREN,A1
000020E6  103C 000E               2764      MOVE.B          #14,D0
000020EA  4E4F                    2765      TRAP            #15
000020EC                          2766  
000020EC  43F9 00002A98           2767      LEA             STRING_A,A1
000020F2  103C 000E               2768      MOVE.B          #14,D0
000020F6  4E4F                    2769      TRAP            #15
000020F8                          2770  
000020F8  4280                    2771      CLR.L   D0
000020FA  4281                    2772      CLR.L   D1
000020FC  4282                    2773      CLR.L   D2
000020FE                          2774  
000020FE  103C 000F               2775      MOVE.B  #15,D0
00002102  1239 00002B6A           2776      MOVE.B  MISC_NUMBER,D1
00002108  143C 000A               2777      MOVE.B  #10,D2
0000210C  4E4F                    2778      TRAP #15
0000210E                          2779  
0000210E  43F9 00002A9E           2780      LEA             STRING_RIGHT_PAREN,A1
00002114  103C 000E               2781      MOVE.B          #14,D0
00002118  4E4F                    2782      TRAP            #15
0000211A                          2783  
0000211A  6000 FC9A               2784      BRA     PRINT_OPCODE_LOOP_RETURN
0000211E                          2785  
0000211E                          2786  
0000211E                          2787  *-------------------------------------------------------------------------------
0000211E                          2788  *
0000211E                          2789  *       PRINT MISC_NUMBER_AS_DATA
0000211E                          2790  *________________________________________
0000211E                          2791  * Register Use Summary:
0000211E                          2792  *
0000211E                          2793  * D0: LOCAL VARIABLE  - Trap task designator
0000211E                          2794  *
0000211E                          2795  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
0000211E                          2796  *
0000211E                          2797  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
0000211E                          2798  *
0000211E                          2799  * A1: LOCAL VARIABLE  - String address
0000211E                          2800  *-------------------------------------------------------------------------------
0000211E                          2801  PRINT_MISC_NUMBER_AS_DATA
0000211E                          2802  
0000211E  43F9 00002AA4           2803      LEA             STRING_POUND,A1
00002124  103C 000E               2804      MOVE.B          #14,D0
00002128  4E4F                    2805      TRAP            #15
0000212A                          2806  
0000212A  4280                    2807      CLR.L   D0
0000212C  4281                    2808      CLR.L   D1
0000212E  4282                    2809      CLR.L   D2
00002130                          2810  
00002130  103C 000F               2811      MOVE.B  #15,D0
00002134  1239 00002B6A           2812      MOVE.B  MISC_NUMBER,D1
0000213A  143C 000A               2813      MOVE.B  #10,D2
0000213E  4E4F                    2814      TRAP #15
00002140                          2815  
00002140  6000 FC74               2816      BRA     PRINT_OPCODE_LOOP_RETURN
00002144                          2817  
00002144                          2818  
00002144                          2819  *-------------------------------------------------------------------------------
00002144                          2820  *
00002144                          2821  *       PRINT ADDQ
00002144                          2822  *________________________________________
00002144                          2823  * Register Use Summary:
00002144                          2824  *
00002144                          2825  * D0: LOCAL VARIABLE  - Trap task designator
00002144                          2826  *
00002144                          2827  * A1: LOCAL VARIABLE  - String address
00002144                          2828  *-------------------------------------------------------------------------------
00002144                          2829  PRINT_ADDQ
00002144  43F9 00002AD2           2830      LEA             STRING_ADDQ,A1  * Load "ADDQ" into A1
0000214A  103C 000E               2831      MOVE.B          #14,D0      * Set trap task to String
0000214E  4E4F                    2832      TRAP            #15         * Print ", "
00002150  6000 FC64               2833      BRA             PRINT_OPCODE_LOOP_RETURN
00002154                          2834  
00002154                          2835  *-------------------------------------------------------------------------------
00002154                          2836  *
00002154                          2837  *       PRINT MOVE
00002154                          2838  *________________________________________
00002154                          2839  * Register Use Summary:
00002154                          2840  *
00002154                          2841  * D0: LOCAL VARIABLE  - Trap task designator
00002154                          2842  *
00002154                          2843  * A1: LOCAL VARIABLE  - String address
00002154                          2844  *-------------------------------------------------------------------------------
00002154                          2845  PRINT_MOVE
00002154  43F9 00002AFC           2846      LEA             STRING_MOVE,A1  * Load "MOVE" into A1
0000215A  103C 000E               2847      MOVE.B          #14,D0      * Set trap task to String
0000215E  4E4F                    2848      TRAP            #15         * Print ", "
00002160  6000 FC54               2849      BRA             PRINT_OPCODE_LOOP_RETURN
00002164                          2850  
00002164                          2851  *-------------------------------------------------------------------------------
00002164                          2852  *
00002164                          2853  *       PRINT MOVEA
00002164                          2854  *________________________________________
00002164                          2855  * Register Use Summary:
00002164                          2856  *
00002164                          2857  * D0: LOCAL VARIABLE  - Trap task designator
00002164                          2858  *
00002164                          2859  * A1: LOCAL VARIABLE  - String address
00002164                          2860  *-------------------------------------------------------------------------------
00002164                          2861  PRINT_MOVEA
00002164  43F9 00002B01           2862      LEA             STRING_MOVEA,A1 * Load "MOVEA" into A1
0000216A  103C 000E               2863      MOVE.B          #14,D0      * Set trap task to String
0000216E  4E4F                    2864      TRAP            #15         * Print ", "
00002170  6000 FC44               2865      BRA             PRINT_OPCODE_LOOP_RETURN
00002174                          2866  
00002174                          2867  
00002174                          2868  *-------------------------------------------------------------------------------
00002174                          2869  *
00002174                          2870  *       PRINT MOVEQ
00002174                          2871  *________________________________________
00002174                          2872  * Register Use Summary:
00002174                          2873  *
00002174                          2874  * D0: LOCAL VARIABLE  - Trap task designator
00002174                          2875  *
00002174                          2876  * A1: LOCAL VARIABLE  - String address
00002174                          2877  *-------------------------------------------------------------------------------
00002174                          2878  PRINT_MOVEQ
00002174  43F9 00002B07           2879      LEA             STRING_MOVEQ,A1 * Load "MOVEQ" into A1
0000217A  103C 000E               2880      MOVE.B          #14,D0      * Set trap task to String
0000217E  4E4F                    2881      TRAP            #15         * Print ", "
00002180  6000 FC34               2882      BRA             PRINT_OPCODE_LOOP_RETURN
00002184                          2883  
00002184                          2884  
00002184                          2885  *-------------------------------------------------------------------------------
00002184                          2886  *
00002184                          2887  *       PRINT MOVEM
00002184                          2888  *________________________________________
00002184                          2889  * Register Use Summary:
00002184                          2890  *
00002184                          2891  * D0: LOCAL VARIABLE  - Trap task designator
00002184                          2892  *
00002184                          2893  * A1: LOCAL VARIABLE  - String address
00002184                          2894  *-------------------------------------------------------------------------------
00002184                          2895  PRINT_MOVEM
00002184  43F9 00002B11           2896      LEA             STRING_MOVEM,A1 * Load "MOVEM" into A1
0000218A  103C 000E               2897      MOVE.B          #14,D0      * Set trap task to String
0000218E  4E4F                    2898      TRAP            #15         * Print ", "
00002190  6000 FC24               2899      BRA             PRINT_OPCODE_LOOP_RETURN
00002194                          2900  
00002194                          2901  *-------------------------------------------------------------------------------
00002194                          2902  *
00002194                          2903  *       PRINT SUB
00002194                          2904  *________________________________________
00002194                          2905  * Register Use Summary:
00002194                          2906  *
00002194                          2907  * D0: LOCAL VARIABLE  - Trap task designator
00002194                          2908  *
00002194                          2909  * A1: LOCAL VARIABLE  - String address
00002194                          2910  *-------------------------------------------------------------------------------
00002194                          2911  PRINT_SUB
00002194  43F9 00002B17           2912      LEA             STRING_SUB,A1   * Load "SUB" into A1
0000219A  103C 000E               2913      MOVE.B          #14,D0      * Set trap task to String
0000219E  4E4F                    2914      TRAP            #15         * Print ", "
000021A0  6000 FC14               2915      BRA             PRINT_OPCODE_LOOP_RETURN
000021A4                          2916  
000021A4                          2917  *-------------------------------------------------------------------------------
000021A4                          2918  *
000021A4                          2919  *       PRINT AND
000021A4                          2920  *________________________________________
000021A4                          2921  * Register Use Summary:
000021A4                          2922  *
000021A4                          2923  * D0: LOCAL VARIABLE  - Trap task designator
000021A4                          2924  *
000021A4                          2925  * A1: LOCAL VARIABLE  - String address
000021A4                          2926  *-------------------------------------------------------------------------------
000021A4                          2927  PRINT_AND
000021A4  43F9 00002B1B           2928      LEA             STRING_AND,A1   * Load "AND" into A1
000021AA  103C 000E               2929      MOVE.B          #14,D0      * Set trap task to String
000021AE  4E4F                    2930      TRAP            #15         * Print ", "
000021B0  6000 FC04               2931      BRA             PRINT_OPCODE_LOOP_RETURN
000021B4                          2932  
000021B4                          2933  *-------------------------------------------------------------------------------
000021B4                          2934  *
000021B4                          2935  *       PRINT OR
000021B4                          2936  *________________________________________
000021B4                          2937  * Register Use Summary:
000021B4                          2938  *
000021B4                          2939  * D0: LOCAL VARIABLE  - Trap task designator
000021B4                          2940  *
000021B4                          2941  * A1: LOCAL VARIABLE  - String address
000021B4                          2942  *-------------------------------------------------------------------------------
000021B4                          2943  PRINT_OR
000021B4  43F9 00002B1F           2944      LEA             STRING_OR,A1    * Load "OR" into A1
000021BA  103C 000E               2945      MOVE.B          #14,D0      * Set trap task to String
000021BE  4E4F                    2946      TRAP            #15         * Print ", "
000021C0  6000 FBF4               2947      BRA             PRINT_OPCODE_LOOP_RETURN
000021C4                          2948  
000021C4                          2949  
000021C4                          2950  *-------------------------------------------------------------------------------
000021C4                          2951  *
000021C4                          2952  *       PRINT BYTE DESIGNATOR
000021C4                          2953  *________________________________________
000021C4                          2954  * Register Use Summary:
000021C4                          2955  *
000021C4                          2956  * D0: LOCAL VARIABLE  - low byte of opcode
000021C4                          2957  * A1: LOCAL VARIABLE  - String address
000021C4                          2958  *-------------------------------------------------------------------------------
000021C4                          2959  PRINT_BYTE_DESIGNATOR
000021C4  43F9 00002A8A           2960      LEA             STRING_BYTE_DESIGNATOR,A1
000021CA  103C 000E               2961      MOVE.B          #14,D0
000021CE  4E4F                    2962      TRAP            #15
000021D0  6000 FBE4               2963      BRA             PRINT_OPCODE_LOOP_RETURN
000021D4                          2964  
000021D4                          2965  *-------------------------------------------------------------------------------
000021D4                          2966  *
000021D4                          2967  *       PRINT WORD DESIGNATOR
000021D4                          2968  *________________________________________
000021D4                          2969  * Register Use Summary:
000021D4                          2970  *
000021D4                          2971  * D0: LOCAL VARIABLE  - low byte of opcode
000021D4                          2972  * A1: LOCAL VARIABLE  - String address
000021D4                          2973  *-------------------------------------------------------------------------------
000021D4                          2974  PRINT_WORD_DESIGNATOR
000021D4  43F9 00002A8E           2975      LEA             STRING_WORD_DESIGNATOR,A1
000021DA  103C 000E               2976      MOVE.B          #14,D0
000021DE  4E4F                    2977      TRAP            #15
000021E0  6000 FBD4               2978      BRA             PRINT_OPCODE_LOOP_RETURN
000021E4                          2979  
000021E4                          2980  *-------------------------------------------------------------------------------
000021E4                          2981  *
000021E4                          2982  *       PRINT LONG DESIGNATOR
000021E4                          2983  *________________________________________
000021E4                          2984  * Register Use Summary:
000021E4                          2985  *
000021E4                          2986  * D0: LOCAL VARIABLE  - low byte of opcode
000021E4                          2987  * A1: LOCAL VARIABLE  - String address
000021E4                          2988  *-------------------------------------------------------------------------------
000021E4                          2989  PRINT_LONG_DESIGNATOR
000021E4  43F9 00002A92           2990      LEA             STRING_LONG_DESIGNATOR,A1
000021EA  103C 000E               2991      MOVE.B          #14,D0
000021EE  4E4F                    2992      TRAP            #15
000021F0  6000 FBC4               2993      BRA             PRINT_OPCODE_LOOP_RETURN
000021F4                          2994  
000021F4                          2995  *-------------------------------------------------------------------------------
000021F4                          2996  *
000021F4                          2997  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - Dn REGISTER
000021F4                          2998  *
000021F4                          2999  * Prints "Dx, " where x ranges between 0 and 7. This is determined by masking
000021F4                          3000  * the last four bits of the current opcode stored in D7.
000021F4                          3001  *
000021F4                          3002  *________________________________________
000021F4                          3003  * Register Use Summary:
000021F4                          3004  *
000021F4                          3005  * D0: LOCAL VARIABLE  - Trap task designator
000021F4                          3006  * D1: LOCAL VARIABLE  - Dn Register number to display
000021F4                          3007  * D7: CONST PARAMETER - The opcode word
000021F4                          3008  *
000021F4                          3009  * A1: LOCAL VARIABLE  - String address
000021F4                          3010  *-------------------------------------------------------------------------------
000021F4                          3011  PRINT_EA_MODE_ID_DN
000021F4  43F9 00002A96           3012      LEA             STRING_D,A1     * Load "D" into A1
000021FA  103C 000E               3013      MOVE.B          #14,D0      * Set trap task to String
000021FE  4E4F                    3014      TRAP            #15         * Print "D"
00002200                          3015  
00002200  4281                    3016      CLR.L           D1
00002202  1207                    3017      MOVE.B          D7,D1       * Get the lowest byte of the opcode
00002204  C23C 0007               3018      AND.B           #$7,D1      * Get the lowest four bits (register #)
00002208  103C 0003               3019      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
0000220C  4E4F                    3020      TRAP            #15         * Print the register MISC_NUMBER
0000220E                          3021  
0000220E  6000 FBA6               3022      BRA             PRINT_OPCODE_LOOP_RETURN
00002212                          3023  
00002212                          3024  *-------------------------------------------------------------------------------
00002212                          3025  *
00002212                          3026  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - ADDRESS REGISTER
00002212                          3027  *
00002212                          3028  * Prints "Ax, " where x ranges between 0 and 7. This is determined by masking
00002212                          3029  * the last four bits of the current opcode stored in D7.
00002212                          3030  *
00002212                          3031  *________________________________________
00002212                          3032  * Register Use Summary:
00002212                          3033  *
00002212                          3034  * D0: LOCAL VARIABLE  - Trap task designator
00002212                          3035  * D1: LOCAL VARIABLE  - Dn Register number to display
00002212                          3036  * D7: CONST PARAMETER - The opcode word
00002212                          3037  *
00002212                          3038  * A1: LOCAL VARIABLE  - String address
00002212                          3039  *-------------------------------------------------------------------------------
00002212                          3040  PRINT_EA_MODE_ID_AN
00002212  43F9 00002A98           3041      LEA             STRING_A,A1
00002218  103C 000E               3042      MOVE.B          #14,D0
0000221C  4E4F                    3043      TRAP            #15
0000221E                          3044  
0000221E                          3045  
0000221E  4281                    3046      CLR.L           D1
00002220  1207                    3047      MOVE.B          D7,D1       * Get the lowest byte of the opcode
00002222  C23C 0007               3048      AND.B           #$7,D1      * Get the lowest four bits (register #)
00002226  103C 0003               3049      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
0000222A  4E4F                    3050      TRAP            #15         * Print the register MISC_NUMBER
0000222C                          3051  
0000222C  6000 FB88               3052      BRA             PRINT_OPCODE_LOOP_RETURN
00002230                          3053  
00002230                          3054  
00002230                          3055  *-------------------------------------------------------------------------------
00002230                          3056  *
00002230                          3057  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - (ADDRESS REGISTER)
00002230                          3058  *
00002230                          3059  *________________________________________
00002230                          3060  * Register Use Summary:
00002230                          3061  *
00002230                          3062  * D0: LOCAL VARIABLE  - Trap task designator
00002230                          3063  * D1: LOCAL VARIABLE  - Dn Register MISC_NUMBER to display
00002230                          3064  * D7: CONST PARAMETER - The opcode word
00002230                          3065  *
00002230                          3066  * A1: LOCAL VARIABLE  - String address
00002230                          3067  *-------------------------------------------------------------------------------
00002230                          3068  PRINT_EA_MODE_ID_AN_INDIRECT
00002230  43F9 00002A9C           3069      LEA             STRING_LEFT_PAREN,A1
00002236  103C 000E               3070      MOVE.B          #14,D0
0000223A  4E4F                    3071      TRAP            #15
0000223C                          3072  
0000223C  43F9 00002A98           3073      LEA             STRING_A,A1
00002242  103C 000E               3074      MOVE.B          #14,D0
00002246  4E4F                    3075      TRAP            #15
00002248                          3076  
00002248  4281                    3077      CLR.L           D1
0000224A  1207                    3078      MOVE.B          D7,D1       * Get the lowest byte of the opcode
0000224C  C23C 0007               3079      AND.B           #$7,D1      * Get the lowest four bits (register #)
00002250  103C 0003               3080      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
00002254  4E4F                    3081      TRAP            #15         * Print the register MISC_NUMBER
00002256                          3082  
00002256  43F9 00002A9E           3083      LEA             STRING_RIGHT_PAREN,A1
0000225C  103C 000E               3084      MOVE.B          #14,D0
00002260  4E4F                    3085      TRAP            #15
00002262                          3086  
00002262  6000 FB52               3087      BRA             PRINT_OPCODE_LOOP_RETURN
00002266                          3088  
00002266                          3089  *-------------------------------------------------------------------------------
00002266                          3090  *
00002266                          3091  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - (ADDRESS REGISTER)+
00002266                          3092  *
00002266                          3093  *________________________________________
00002266                          3094  * Register Use Summary:
00002266                          3095  *
00002266                          3096  * D0: LOCAL VARIABLE  - Trap task designator
00002266                          3097  * D1: LOCAL VARIABLE  - Dn Register number to display
00002266                          3098  * D7: CONST PARAMETER - The opcode word
00002266                          3099  *
00002266                          3100  * A1: LOCAL VARIABLE  - String address
00002266                          3101  *-------------------------------------------------------------------------------
00002266                          3102  PRINT_EA_MODE_ID_AN_POST_INC
00002266  43F9 00002A9C           3103      LEA             STRING_LEFT_PAREN,A1
0000226C  103C 000E               3104      MOVE.B          #14,D0
00002270  4E4F                    3105      TRAP            #15
00002272                          3106  
00002272  43F9 00002A98           3107      LEA             STRING_A,A1
00002278  103C 000E               3108      MOVE.B          #14,D0
0000227C  4E4F                    3109      TRAP            #15
0000227E                          3110  
0000227E  4281                    3111      CLR.L           D1
00002280  1207                    3112      MOVE.B          D7,D1       * Get the lowest byte of the opcode
00002282  C23C 0007               3113      AND.B           #$7,D1      * Get the lowest four bits (register #)
00002286  103C 0003               3114      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
0000228A  4E4F                    3115      TRAP            #15         * Print the register MISC_NUMBER
0000228C                          3116  
0000228C  43F9 00002A9E           3117      LEA             STRING_RIGHT_PAREN,A1
00002292  103C 000E               3118      MOVE.B          #14,D0
00002296  4E4F                    3119      TRAP            #15
00002298                          3120  
00002298  43F9 00002AA0           3121      LEA             STRING_PLUS,A1
0000229E  103C 000E               3122      MOVE.B          #14,D0
000022A2  4E4F                    3123      TRAP            #15
000022A4                          3124  
000022A4  6000 FB10               3125      BRA             PRINT_OPCODE_LOOP_RETURN
000022A8                          3126  
000022A8                          3127  
000022A8                          3128  
000022A8                          3129  *-------------------------------------------------------------------------------
000022A8                          3130  *
000022A8                          3131  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - -(ADDRESS REGISTER)
000022A8                          3132  *
000022A8                          3133  *________________________________________
000022A8                          3134  * Register Use Summary:
000022A8                          3135  *
000022A8                          3136  * D0: LOCAL VARIABLE  - Trap task designator
000022A8                          3137  * D1: LOCAL VARIABLE  - Dn Register number to display
000022A8                          3138  * D7: CONST PARAMETER - The opcode word
000022A8                          3139  *
000022A8                          3140  * A1: LOCAL VARIABLE  - String address
000022A8                          3141  *-------------------------------------------------------------------------------
000022A8                          3142  PRINT_EA_MODE_ID_AN_PRE_DEC
000022A8  43F9 00002AA2           3143      LEA             STRING_MINUS,A1
000022AE  103C 000E               3144      MOVE.B          #14,D0
000022B2  4E4F                    3145      TRAP            #15
000022B4                          3146  
000022B4  43F9 00002A9C           3147      LEA             STRING_LEFT_PAREN,A1
000022BA  103C 000E               3148      MOVE.B          #14,D0
000022BE  4E4F                    3149      TRAP            #15
000022C0                          3150  
000022C0  43F9 00002A98           3151      LEA             STRING_A,A1
000022C6  103C 000E               3152      MOVE.B          #14,D0
000022CA  4E4F                    3153      TRAP            #15
000022CC                          3154  
000022CC  4281                    3155      CLR.L           D1
000022CE  1207                    3156      MOVE.B          D7,D1       * Get the lowest byte of the opcode
000022D0  C23C 0007               3157      AND.B           #$7,D1      * Get the lowest four bits (register #)
000022D4  103C 0003               3158      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
000022D8  4E4F                    3159      TRAP            #15         * Print the register MISC_NUMBER
000022DA                          3160  
000022DA  43F9 00002A9E           3161      LEA             STRING_RIGHT_PAREN,A1
000022E0  103C 000E               3162      MOVE.B          #14,D0
000022E4  4E4F                    3163      TRAP            #15
000022E6                          3164  
000022E6  6000 FACE               3165      BRA             PRINT_OPCODE_LOOP_RETURN
000022EA                          3166  
000022EA                          3167  
000022EA                          3168  
000022EA                          3169  
000022EA                          3170  
000022EA                          3171  *-------------------------------------------------------------------------------
000022EA                          3172  *
000022EA                          3173  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - WORD DATA
000022EA                          3174  *
000022EA                          3175  *________________________________________
000022EA                          3176  * Register Use Summary:
000022EA                          3177  *
000022EA                          3178  * D0: LOCAL VARIABLE  - Trap task designator
000022EA                          3179  * D1: LOCAL VARIABLE  - Dn Register number to display
000022EA                          3180  * D7: CONST PARAMETER - The opcode word
000022EA                          3181  *
000022EA                          3182  * A1: LOCAL VARIABLE  - String address
000022EA                          3183  *-------------------------------------------------------------------------------
000022EA                          3184  PRINT_EA_MODE_ID_IND_SHORT
000022EA  43F9 00002AA6           3185      LEA             STRING_DOLLAR,A1
000022F0  103C 000E               3186      MOVE.B          #14,D0
000022F4  4E4F                    3187      TRAP            #15
000022F6                          3188  
000022F6  2238 1016               3189      MOVE.L          DATA1,D1
000022FA  4841                    3190      SWAP            D1              * We only want the upper word
000022FC  C27C FFFF               3191      AND             #$0000FFFF,D1   * Bit mask for upper word
00002300                          3192  
00002300  700F                    3193      MOVEQ           #15,D0
00002302  7410                    3194      MOVEQ           #16,D2
00002304  4E4F                    3195      TRAP            #15
00002306                          3196  
00002306  6000 FAAE               3197      BRA             PRINT_OPCODE_LOOP_RETURN
0000230A                          3198  
0000230A                          3199  *-------------------------------------------------------------------------------
0000230A                          3200  *
0000230A                          3201  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - WORD DATA - DATA2
0000230A                          3202  *
0000230A                          3203  *________________________________________
0000230A                          3204  * Register Use Summary:
0000230A                          3205  *
0000230A                          3206  * D0: LOCAL VARIABLE  - Trap task designator
0000230A                          3207  * D1: LOCAL VARIABLE  - Dn Register number to display
0000230A                          3208  * D7: CONST PARAMETER - The opcode word
0000230A                          3209  *
0000230A                          3210  * A1: LOCAL VARIABLE  - String address
0000230A                          3211  *-------------------------------------------------------------------------------
0000230A                          3212  PRINT_EA_MODE_ID_IND_SHORT_DATA2
0000230A  43F9 00002AA6           3213      LEA             STRING_DOLLAR,A1
00002310  103C 000E               3214      MOVE.B          #14,D0
00002314  4E4F                    3215      TRAP            #15
00002316                          3216  
00002316  2238 101C               3217      MOVE.L          DATA2,D1
0000231A  4841                    3218      SWAP            D1              * We only want the upper word
0000231C  C27C FFFF               3219      AND             #$0000FFFF,D1   * Bit mask for upper word
00002320                          3220  
00002320  700F                    3221      MOVEQ           #15,D0
00002322  7410                    3222      MOVEQ           #16,D2
00002324  4E4F                    3223      TRAP            #15
00002326                          3224  
00002326  6000 FA8E               3225      BRA             PRINT_OPCODE_LOOP_RETURN
0000232A                          3226  
0000232A                          3227  *-------------------------------------------------------------------------------
0000232A                          3228  *
0000232A                          3229  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - LONG DATA
0000232A                          3230  *
0000232A                          3231  *________________________________________
0000232A                          3232  * Register Use Summary:
0000232A                          3233  *
0000232A                          3234  * D0: LOCAL VARIABLE  - Trap task designator
0000232A                          3235  * D1: LOCAL VARIABLE  - Dn Register number to display
0000232A                          3236  * D7: CONST PARAMETER - The opcode word
0000232A                          3237  *
0000232A                          3238  * A1: LOCAL VARIABLE  - String address
0000232A                          3239  *-------------------------------------------------------------------------------
0000232A                          3240  PRINT_EA_MODE_ID_IND_LONG
0000232A  43F9 00002AA6           3241      LEA             STRING_DOLLAR,A1
00002330  103C 000E               3242      MOVE.B          #14,D0
00002334  4E4F                    3243      TRAP            #15
00002336                          3244  
00002336  2238 1016               3245      MOVE.L          DATA1,D1
0000233A  700F                    3246      MOVEQ           #15,D0
0000233C  7410                    3247      MOVEQ           #16,D2
0000233E  4E4F                    3248      TRAP            #15
00002340                          3249  
00002340  6000 FA74               3250      BRA             PRINT_OPCODE_LOOP_RETURN
00002344                          3251  
00002344                          3252  *-------------------------------------------------------------------------------
00002344                          3253  *
00002344                          3254  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - LONG DATA - DATA2
00002344                          3255  *
00002344                          3256  *________________________________________
00002344                          3257  * Register Use Summary:
00002344                          3258  *
00002344                          3259  * D0: LOCAL VARIABLE  - Trap task designator
00002344                          3260  * D1: LOCAL VARIABLE  - Dn Register number to display
00002344                          3261  * D7: CONST PARAMETER - The opcode word
00002344                          3262  *
00002344                          3263  * A1: LOCAL VARIABLE  - String address
00002344                          3264  *-------------------------------------------------------------------------------
00002344                          3265  PRINT_EA_MODE_ID_IND_LONG_DATA2
00002344  43F9 00002AA6           3266      LEA             STRING_DOLLAR,A1
0000234A  103C 000E               3267      MOVE.B          #14,D0
0000234E  4E4F                    3268      TRAP            #15
00002350                          3269  
00002350  2238 101C               3270      MOVE.L          DATA2,D1
00002354  700F                    3271      MOVEQ           #15,D0
00002356  7410                    3272      MOVEQ           #16,D2
00002358  4E4F                    3273      TRAP            #15
0000235A                          3274  
0000235A  6000 FA5A               3275      BRA             PRINT_OPCODE_LOOP_RETURN
0000235E                          3276  
0000235E                          3277  *-------------------------------------------------------------------------------
0000235E                          3278  *
0000235E                          3279  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - ABSOLUTE
0000235E                          3280  *
0000235E                          3281  *________________________________________
0000235E                          3282  * Register Use Summary:
0000235E                          3283  *
0000235E                          3284  * D0: LOCAL VARIABLE  - Trap task designator
0000235E                          3285  * D1: LOCAL VARIABLE  - Dn Register number to display
0000235E                          3286  * D7: CONST PARAMETER - The opcode word
0000235E                          3287  *
0000235E                          3288  * A1: LOCAL VARIABLE  - String address
0000235E                          3289  *-------------------------------------------------------------------------------
0000235E                          3290  PRINT_EA_MODE_ID_ABS_DATA
0000235E  43F9 00002AA4           3291      LEA             STRING_POUND,A1
00002364  103C 000E               3292      MOVE.B          #14,D0
00002368  4E4F                    3293      TRAP            #15
0000236A                          3294  
0000236A  43F9 00002AA6           3295      LEA             STRING_DOLLAR,A1
00002370  103C 000E               3296      MOVE.B          #14,D0
00002374  4E4F                    3297      TRAP            #15
00002376                          3298  
00002376  2238 1016               3299      MOVE.L          DATA1,D1
0000237A  700F                    3300      MOVEQ           #15,D0
0000237C  7410                    3301      MOVEQ           #16,D2
0000237E  4E4F                    3302      TRAP            #15
00002380                          3303  
00002380  6000 FA34               3304      BRA             PRINT_OPCODE_LOOP_RETURN
00002384                          3305  
00002384                          3306  *-------------------------------------------------------------------------------
00002384                          3307  *
00002384                          3308  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - ABSOLUTE DATA2
00002384                          3309  *
00002384                          3310  *________________________________________
00002384                          3311  * Register Use Summary:
00002384                          3312  *
00002384                          3313  * D0: LOCAL VARIABLE  - Trap task designator
00002384                          3314  * D1: LOCAL VARIABLE  - Dn Register number to display
00002384                          3315  * D7: CONST PARAMETER - The opcode word
00002384                          3316  *
00002384                          3317  * A1: LOCAL VARIABLE  - String address
00002384                          3318  *-------------------------------------------------------------------------------
00002384                          3319  PRINT_EA_MODE_ID_ABS_DATA2
00002384  43F9 00002AA4           3320      LEA             STRING_POUND,A1
0000238A  103C 000E               3321      MOVE.B          #14,D0
0000238E  4E4F                    3322      TRAP            #15
00002390                          3323  
00002390  43F9 00002AA6           3324      LEA             STRING_DOLLAR,A1
00002396  103C 000E               3325      MOVE.B          #14,D0
0000239A  4E4F                    3326      TRAP            #15
0000239C                          3327  
0000239C  2238 101C               3328      MOVE.L          DATA2,D1
000023A0  700F                    3329      MOVEQ           #15,D0
000023A2  7410                    3330      MOVEQ           #16,D2
000023A4  4E4F                    3331      TRAP            #15
000023A6                          3332  
000023A6  6000 FA0E               3333      BRA             PRINT_OPCODE_LOOP_RETURN
000023AA                          3334  
000023AA                          3335  *-------------------------------------------------------------------------------
000023AA                          3336  *
000023AA                          3337  *       PRINT JSR
000023AA                          3338  *________________________________________
000023AA                          3339  * Register Use Summary:
000023AA                          3340  *
000023AA                          3341  * D0: LOCAL VARIABLE  - Trap task designator
000023AA                          3342  *
000023AA                          3343  * A1: LOCAL VARIABLE  - String address
000023AA                          3344  *-------------------------------------------------------------------------------
000023AA                          3345  PRINT_JSR
000023AA  43F9 00002AF4           3346      LEA             STRING_JSR,A1   * Load "JSR" into A1
000023B0  103C 000E               3347      MOVE.B          #14,D0      * Set trap task to String
000023B4  4E4F                    3348      TRAP            #15
000023B6  6000 F9FE               3349      BRA             PRINT_OPCODE_LOOP_RETURN
000023BA                          3350  
000023BA                          3351  *-------------------------------------------------------------------------------
000023BA                          3352  *
000023BA                          3353  *       PRINT NOT
000023BA                          3354  *________________________________________
000023BA                          3355  * Register Use Summary:
000023BA                          3356  *
000023BA                          3357  * D0: LOCAL VARIABLE  - Trap task designator
000023BA                          3358  *
000023BA                          3359  * A1: LOCAL VARIABLE  - String address
000023BA                          3360  *-------------------------------------------------------------------------------
000023BA                          3361  PRINT_NOT
000023BA  43F9 00002B22           3362      LEA             STRING_NOT,A1   * Load "NOT" into A1
000023C0  103C 000E               3363      MOVE.B          #14,D0      * Set trap task to String
000023C4  4E4F                    3364      TRAP            #15
000023C6  6000 F9EE               3365      BRA             PRINT_OPCODE_LOOP_RETURN
000023CA                          3366  
000023CA                          3367  *-------------------------------------------------------------------------------
000023CA                          3368  *
000023CA                          3369  *       PRINT LEA
000023CA                          3370  *________________________________________
000023CA                          3371  * Register Use Summary:
000023CA                          3372  *
000023CA                          3373  * D0: LOCAL VARIABLE  - Trap task designator
000023CA                          3374  *
000023CA                          3375  * A1: LOCAL VARIABLE  - String address
000023CA                          3376  *-------------------------------------------------------------------------------
000023CA                          3377  PRINT_LEA
000023CA  43F9 00002B26           3378      LEA             STRING_LEA,A1   * Load "LEA" into A1
000023D0  103C 000E               3379      MOVE.B          #14,D0      * Set trap task to String
000023D4  4E4F                    3380      TRAP            #15
000023D6  6000 F9DE               3381      BRA             PRINT_OPCODE_LOOP_RETURN
000023DA                          3382  
000023DA                          3383  *-------------------------------------------------------------------------------
000023DA                          3384  *
000023DA                          3385  *       PRINT FOURSPACE
000023DA                          3386  *________________________________________
000023DA                          3387  * Register Use Summary:
000023DA                          3388  *
000023DA                          3389  * D0: LOCAL VARIABLE  - Trap task designator
000023DA                          3390  *
000023DA                          3391  * A1: LOCAL VARIABLE  - String address
000023DA                          3392  *-------------------------------------------------------------------------------
000023DA                          3393  PRINT_FOURSPACE
000023DA  43F9 00002AAA           3394      LEA             STRING_FOURSPACE,A1 * Load four spaces into A1
000023E0  103C 000E               3395      MOVE.B          #14,D0              * Set trap task to String
000023E4  4E4F                    3396      TRAP            #15
000023E6  6000 F9CE               3397      BRA             PRINT_OPCODE_LOOP_RETURN
000023EA                          3398  
000023EA                          3399  *-------------------------------------------------------------------------------
000023EA                          3400  *
000023EA                          3401  *       PRINT SPACE
000023EA                          3402  *________________________________________
000023EA                          3403  * Register Use Summary:
000023EA                          3404  *
000023EA                          3405  * D0: LOCAL VARIABLE  - Trap task designator
000023EA                          3406  *
000023EA                          3407  * A1: LOCAL VARIABLE  - String address
000023EA                          3408  *-------------------------------------------------------------------------------
000023EA                          3409  PRINT_SPACE
000023EA  43F9 00002AA8           3410      LEA             STRING_SPACE,A1 * Load four spaces into A1
000023F0  103C 000E               3411      MOVE.B          #14,D0              * Set trap task to String
000023F4  4E4F                    3412      TRAP            #15
000023F6  6000 F9BE               3413      BRA             PRINT_OPCODE_LOOP_RETURN
000023FA                          3414  
000023FA                          3415  
000023FA                          3416  *-------------------------------------------------------------------------------
000023FA                          3417  *
000023FA                          3418  *       PRINT COMMA
000023FA                          3419  *________________________________________
000023FA                          3420  * Register Use Summary:
000023FA                          3421  *
000023FA                          3422  * D0: LOCAL VARIABLE  - Trap task designator
000023FA                          3423  *
000023FA                          3424  * A1: LOCAL VARIABLE  - String address
000023FA                          3425  *-------------------------------------------------------------------------------
000023FA                          3426  PRINT_COMMA
000023FA  43F9 00002A9A           3427      LEA             STRING_COMMA,A1 * Load the comma into A1
00002400  103C 000E               3428      MOVE.B          #14,D0              * Set trap task to String
00002404  4E4F                    3429      TRAP            #15
00002406  6000 F9AE               3430      BRA             PRINT_OPCODE_LOOP_RETURN
0000240A                          3431  
0000240A                          3432  *-------------------------------------------------------------------------------
0000240A                          3433  *
0000240A                          3434  *       PRINT ILLEGAL
0000240A                          3435  *
0000240A                          3436  * Incomplete implementation - final version will depend on opcode logic.
0000240A                          3437  * Currently clears stack entirely, future implementation may need to keep
0000240A                          3438  * some RTS addresses
0000240A                          3439  *
0000240A                          3440  * D7: RTS address (opcode shouldn't be necessary at this point)
0000240A                          3441  *-------------------------------------------------------------------------------
0000240A                          3442  PRINT_ILLEGAL       * INCOMPLETE *
0000240A  2E78 100C               3443      MOVE.L          STACK_BASE,SP
0000240E                          3444      * SUBA.L          #4,SP
0000240E                          3445  
0000240E  43F9 00002A82           3446      LEA             STRING_ILLEGAL,A1
00002414  103C 000D               3447      MOVE.B          #13,D0
00002418  4E4F                    3448      TRAP            #15
0000241A                          3449  
0000241A                          3450  
0000241A  31FC 0002 1010          3451      MOVE.W  #2,LOOP_INC     * Increment the loop counter by 1 word
00002420                          3452  
00002420                          3453  
00002420  4E75                    3454      RTS
00002422                          3455  
00002422                          3456  *-------------------------------------------------------------------------------
00002422                          3457  *
00002422                          3458  *       PRINT NON_OPCODE_DATA
00002422                          3459  *
00002422                          3460  * Incomplete implementation - final version will depend on opcode logic.
00002422                          3461  * Currently clears stack entirely, future implementation may need to keep
00002422                          3462  * some RTS addresses
00002422                          3463  *
00002422                          3464  * D5: RTS address
00002422                          3465  *-------------------------------------------------------------------------------
00002422                          3466  PRINT_NON_OPCODE_DATA
00002422  2E78 100C               3467      MOVE.L          STACK_BASE,SP
00002426                          3468   *    SUBA.L          #4,SP
00002426                          3469  
00002426                          3470  * ------ Print "DATA: " ------
00002426  43F9 00002A7B           3471      LEA             STRING_DATA,A1
0000242C  103C 000E               3472      MOVE.B          #14,D0
00002430  4E4F                    3473      TRAP            #15
00002432                          3474  
00002432                          3475  * ------ Print D7 contents ------
00002432  2207                    3476      MOVE.L          D7,D1
00002434  700F                    3477      MOVEQ           #15,D0
00002436  7410                    3478      MOVEQ           #16,D2
00002438  4E4F                    3479      TRAP            #15
0000243A                          3480  
0000243A  4EB9 0000245E           3481      JSR             PRINT_IMMEDIATE_NEWLINE
00002440                          3482  
00002440  31FC 0002 1010          3483      MOVE.W  #2,LOOP_INC     * Increment the loop counter by 1 word
00002446                          3484  
00002446  4E75                    3485      RTS
00002448                          3486  
00002448                          3487  
00002448                          3488  *--------------------------------------------------------------------------------
00002448                          3489  * PRINTADDR SUBROUTINE
00002448                          3490  *
00002448                          3491  * Prints the memory address and some blank spaces before the disassembled
00002448                          3492  * instruction is appended.
00002448                          3493  *
00002448                          3494  * Registers Used:
00002448                          3495  *   D0: Trap task designator
00002448                          3496  *   D1: Memory address to display
00002448                          3497  * D2: Trap task numerical base (Hex = 16)
00002448                          3498  *
00002448                          3499  *
00002448                          3500  * A1: Data memory location
00002448                          3501  *
00002448                          3502  *
00002448                          3503  PRINTADDR
00002448                          3504  
00002448  2238 1012               3505      MOVE.L   LOOP_INDEX,D1 * Print the loop index (memory location)
0000244C  700F                    3506      MOVEQ    #15,D0
0000244E  7410                    3507      MOVEQ    #16,D2
00002450                          3508  
00002450  4E4F                    3509      TRAP     #15
00002452                          3510  
00002452  43F9 00002AAA           3511      LEA      STRING_FOURSPACE,A1 * Print some spaces
00002458  700E                    3512      MOVEQ      #14,D0
0000245A  4E4F                    3513      TRAP       #15
0000245C                          3514  
0000245C  4E75                    3515      RTS
0000245E                          3516  
0000245E                          3517  *--------------------------------------------------------------------------------
0000245E                          3518  * PRINT_IMMEDIATE_NEWLINE
0000245E                          3519  *
0000245E                          3520  * CANNOT PUSH TO STACK - Used to put a newline after each opcode
0000245E                          3521  *
0000245E                          3522  * Registers Used:
0000245E                          3523  *   D0: Trap task designator
0000245E                          3524  *   D1: Memory address to display
0000245E                          3525  *
0000245E                          3526  * A1: Data memory location
0000245E                          3527  *
0000245E                          3528  PRINT_IMMEDIATE_NEWLINE
0000245E                          3529  
0000245E  43F9 00002AAF           3530    LEA        STRING_NEWLINE,A1
00002464  700E                    3531      MOVEQ      #14,D0
00002466  4E4F                    3532      TRAP       #15
00002468                          3533  
00002468  4E75                    3534    RTS
0000246A                          3535  
0000246A                          3536  
0000246A                          3537  
0000246A                          3538  *--------------------------------------------------------------------------------
0000246A                          3539  * PAUSE_CONSOLE
0000246A                          3540  *
0000246A                          3541  * Takes user input and promptly throws it away
0000246A                          3542  *
0000246A                          3543  *
0000246A                          3544  PAUSE_CONSOLE
0000246A                          3545  
0000246A  7002                    3546    MOVEQ    #2,D0
0000246C  4E4F                    3547      TRAP       #15
0000246E  4241                    3548    CLR.W    D1
00002470  227C 00000000           3549    MOVEA.L  #0,A1
00002476                          3550  
00002476  4E75                    3551    RTS
00002478                          3552  
00002478                          3553  
00002478                          3554  
00002478                          3555  *--------------------------------------------------------------------------------
00002478                          3556  * PRINT_MOVEM_STANDARD
00002478                          3557  *
00002478                          3558  * Oh no
00002478                          3559  *
00002478                          3560  * Registers Used:
00002478                          3561  *   D0: Trap task designator
00002478                          3562  *   D1: Memory address to display
00002478                          3563  *
00002478                          3564  * A1: Data memory location
00002478                          3565  *
00002478                          3566  PRINT_MOVEM_STANDARD
00002478                          3567  
00002478  4282                    3568    CLR.L     D2 * D2 is where full data is stored
0000247A  3439 00002B6C           3569    MOVE.W    MISC_OPCODE,D2
00002480                          3570  
00002480  4281                    3571    CLR.L     D1 * D1 is where we'll do the masking
00002482  3202                    3572    MOVE.W    D2,D1
00002484                          3573  
00002484                          3574  PRINT_MOVEM_STANDARD_A7
00002484                          3575  
00002484  C27C 8000               3576    AND.W     #$8000,D1
00002488  B27C 8000               3577    CMP.W     #$8000,D1
0000248C  6600 000C               3578    BNE       PRINT_MOVEM_STANDARD_A6
00002490                          3579  
00002490  43F9 00002B46           3580    LEA        STRING_A7,A1
00002496  700E                    3581      MOVEQ      #14,D0
00002498  4E4F                    3582      TRAP       #15
0000249A                          3583  
0000249A                          3584  PRINT_MOVEM_STANDARD_A6
0000249A                          3585  
0000249A  3202                    3586    MOVE.W    D2,D1
0000249C  C27C 4000               3587    AND.W     #$4000,D1
000024A0  B27C 4000               3588    CMP.W     #$4000,D1
000024A4  6600 000C               3589    BNE       PRINT_MOVEM_STANDARD_A5
000024A8                          3590  
000024A8  43F9 00002B42           3591    LEA        STRING_A6,A1
000024AE  700E                    3592      MOVEQ      #14,D0
000024B0  4E4F                    3593      TRAP       #15
000024B2                          3594  
000024B2                          3595  PRINT_MOVEM_STANDARD_A5
000024B2                          3596  
000024B2  3202                    3597    MOVE.W    D2,D1
000024B4  C27C 2000               3598    AND.W     #$2000,D1
000024B8  B27C 2000               3599    CMP.W     #$2000,D1
000024BC  6600 000C               3600    BNE       PRINT_MOVEM_STANDARD_A4
000024C0                          3601  
000024C0  43F9 00002B3E           3602    LEA        STRING_A5,A1
000024C6  700E                    3603      MOVEQ      #14,D0
000024C8  4E4F                    3604      TRAP       #15
000024CA                          3605  
000024CA                          3606  PRINT_MOVEM_STANDARD_A4
000024CA                          3607  
000024CA  3202                    3608    MOVE.W    D2,D1
000024CC  C27C 1000               3609    AND.W     #$1000,D1
000024D0  B27C 1000               3610    CMP.W     #$1000,D1
000024D4  6600 000C               3611    BNE       PRINT_MOVEM_STANDARD_A3
000024D8                          3612  
000024D8  43F9 00002B3A           3613    LEA        STRING_A4,A1
000024DE  700E                    3614      MOVEQ      #14,D0
000024E0  4E4F                    3615      TRAP       #15
000024E2                          3616  
000024E2                          3617  PRINT_MOVEM_STANDARD_A3
000024E2                          3618  
000024E2  3202                    3619    MOVE.W    D2,D1
000024E4  C27C 0800               3620    AND.W     #$0800,D1
000024E8  B27C 0800               3621    CMP.W     #$0800,D1
000024EC  6600 000C               3622    BNE       PRINT_MOVEM_STANDARD_A2
000024F0                          3623  
000024F0  43F9 00002B36           3624    LEA        STRING_A3,A1
000024F6  700E                    3625      MOVEQ      #14,D0
000024F8  4E4F                    3626      TRAP       #15
000024FA                          3627  
000024FA                          3628  PRINT_MOVEM_STANDARD_A2
000024FA                          3629  
000024FA  3202                    3630    MOVE.W    D2,D1
000024FC  C27C 0400               3631    AND.W     #$0400,D1
00002500  B27C 0400               3632    CMP.W     #$0400,D1
00002504  6600 000C               3633    BNE       PRINT_MOVEM_STANDARD_A1
00002508                          3634  
00002508  43F9 00002B32           3635    LEA        STRING_A2,A1
0000250E  700E                    3636      MOVEQ      #14,D0
00002510  4E4F                    3637      TRAP       #15
00002512                          3638  
00002512                          3639  PRINT_MOVEM_STANDARD_A1
00002512                          3640  
00002512  3202                    3641    MOVE.W    D2,D1
00002514  C27C 0200               3642    AND.W     #$0200,D1
00002518  B27C 0200               3643    CMP.W     #$0200,D1
0000251C  6600 000C               3644    BNE       PRINT_MOVEM_STANDARD_A0
00002520                          3645  
00002520  43F9 00002B2E           3646    LEA        STRING_A1,A1
00002526  700E                    3647      MOVEQ      #14,D0
00002528  4E4F                    3648      TRAP       #15
0000252A                          3649  
0000252A                          3650  PRINT_MOVEM_STANDARD_A0
0000252A                          3651  
0000252A  3202                    3652    MOVE.W    D2,D1
0000252C  C27C 0100               3653    AND.W     #$0100,D1
00002530  B27C 0100               3654    CMP.W     #$0100,D1
00002534  6600 000C               3655    BNE       PRINT_MOVEM_STANDARD_D7
00002538                          3656  
00002538  43F9 00002B2A           3657    LEA        STRING_A0,A1
0000253E  700E                    3658      MOVEQ      #14,D0
00002540  4E4F                    3659      TRAP       #15
00002542                          3660  
00002542                          3661  PRINT_MOVEM_STANDARD_D7
00002542                          3662  
00002542  3202                    3663    MOVE.W    D2,D1
00002544  C27C 0080               3664    AND.W     #$0080,D1
00002548  B27C 0080               3665    CMP.W     #$0080,D1
0000254C  6600 000C               3666    BNE       PRINT_MOVEM_STANDARD_D6
00002550                          3667  
00002550  43F9 00002B66           3668    LEA        STRING_D7,A1
00002556  700E                    3669      MOVEQ      #14,D0
00002558  4E4F                    3670      TRAP       #15
0000255A                          3671  
0000255A                          3672  PRINT_MOVEM_STANDARD_D6
0000255A                          3673  
0000255A  3202                    3674    MOVE.W    D2,D1
0000255C  C27C 0040               3675    AND.W     #$0040,D1
00002560  B27C 0040               3676    CMP.W     #$0040,D1
00002564  6600 000C               3677    BNE       PRINT_MOVEM_STANDARD_D5
00002568                          3678  
00002568  43F9 00002B62           3679    LEA        STRING_D6,A1
0000256E  700E                    3680      MOVEQ      #14,D0
00002570  4E4F                    3681      TRAP       #15
00002572                          3682  
00002572                          3683  PRINT_MOVEM_STANDARD_D5
00002572                          3684  
00002572  3202                    3685    MOVE.W    D2,D1
00002574  C27C 0020               3686    AND.W     #$0020,D1
00002578  B27C 0020               3687    CMP.W     #$0020,D1
0000257C  6600 000C               3688    BNE       PRINT_MOVEM_STANDARD_D4
00002580                          3689  
00002580  43F9 00002B5E           3690    LEA        STRING_D5,A1
00002586  700E                    3691      MOVEQ      #14,D0
00002588  4E4F                    3692      TRAP       #15
0000258A                          3693  
0000258A                          3694  PRINT_MOVEM_STANDARD_D4
0000258A                          3695  
0000258A  3202                    3696    MOVE.W    D2,D1
0000258C  C27C 0010               3697    AND.W     #$0010,D1
00002590  B27C 0010               3698    CMP.W     #$0010,D1
00002594  6600 000C               3699    BNE       PRINT_MOVEM_STANDARD_D3
00002598                          3700  
00002598  43F9 00002B5A           3701    LEA        STRING_D4,A1
0000259E  700E                    3702      MOVEQ      #14,D0
000025A0  4E4F                    3703      TRAP       #15
000025A2                          3704  
000025A2                          3705  PRINT_MOVEM_STANDARD_D3
000025A2                          3706  
000025A2  3202                    3707    MOVE.W    D2,D1
000025A4  C27C 0008               3708    AND.W     #$0008,D1
000025A8  B27C 0008               3709    CMP.W     #$0008,D1
000025AC  6600 000C               3710    BNE       PRINT_MOVEM_STANDARD_D2
000025B0                          3711  
000025B0  43F9 00002B56           3712    LEA        STRING_D3,A1
000025B6  700E                    3713      MOVEQ      #14,D0
000025B8  4E4F                    3714      TRAP       #15
000025BA                          3715  
000025BA                          3716  PRINT_MOVEM_STANDARD_D2
000025BA                          3717  
000025BA  3202                    3718    MOVE.W    D2,D1
000025BC  C27C 0004               3719    AND.W     #$0004,D1
000025C0  B27C 0004               3720    CMP.W     #$0004,D1
000025C4  6600 000C               3721    BNE       PRINT_MOVEM_STANDARD_D1
000025C8                          3722  
000025C8  43F9 00002B52           3723    LEA        STRING_D2,A1
000025CE  700E                    3724      MOVEQ      #14,D0
000025D0  4E4F                    3725      TRAP       #15
000025D2                          3726  
000025D2                          3727  PRINT_MOVEM_STANDARD_D1
000025D2                          3728  
000025D2  3202                    3729    MOVE.W    D2,D1
000025D4  C27C 0002               3730    AND.W     #$0002,D1
000025D8  B27C 0002               3731    CMP.W     #$0002,D1
000025DC  6600 000C               3732    BNE       PRINT_MOVEM_STANDARD_D0
000025E0                          3733  
000025E0  43F9 00002B4E           3734    LEA        STRING_D1,A1
000025E6  700E                    3735      MOVEQ      #14,D0
000025E8  4E4F                    3736      TRAP       #15
000025EA                          3737  
000025EA                          3738  PRINT_MOVEM_STANDARD_D0
000025EA                          3739  
000025EA  3202                    3740    MOVE.W    D2,D1
000025EC  C27C 0001               3741    AND.W     #$0001,D1
000025F0  B27C 0001               3742    CMP.W     #$0001,D1
000025F4  6600 000C               3743    BNE       PRINT_MOVEM_STANDARD_END
000025F8                          3744  
000025F8  43F9 00002B4A           3745    LEA        STRING_D0,A1
000025FE  700E                    3746      MOVEQ      #14,D0
00002600  4E4F                    3747      TRAP       #15
00002602                          3748  
00002602                          3749  PRINT_MOVEM_STANDARD_END
00002602                          3750  
00002602  43F9 00002AA8           3751    LEA        STRING_SPACE,A1
00002608  700E                    3752    MOVEQ    #14,D0
0000260A  4E4F                    3753    TRAP     #15
0000260C                          3754  
0000260C                          3755  
0000260C  6000 F7A8               3756    BRA      PRINT_OPCODE_LOOP_RETURN
00002610                          3757  
00002610                          3758  
00002610                          3759  *--------------------------------------------------------------------------------
00002610                          3760  * PRINT_MOVEM_REVERSE
00002610                          3761  *
00002610                          3762  * it hurts
00002610                          3763  *
00002610                          3764  * Registers Used:
00002610                          3765  *   D0: Trap task designator
00002610                          3766  *   D1: Memory address to display
00002610                          3767  *
00002610                          3768  * A1: Data memory location
00002610                          3769  *
00002610                          3770  PRINT_MOVEM_REVERSE
00002610                          3771  
00002610                          3772  
00002610  4282                    3773    CLR.L     D2 * D2 is where full data is stored
00002612  3439 00002B6C           3774    MOVE.W    MISC_OPCODE,D2
00002618                          3775  
00002618  4281                    3776    CLR.L     D1 * D1 is where we'll do the masking
0000261A  3202                    3777    MOVE.W    D2,D1
0000261C                          3778  
0000261C                          3779  PRINT_MOVEM_REVERSE_D0
0000261C                          3780  
0000261C  C27C 8000               3781    AND.W     #$8000,D1
00002620  B27C 8000               3782    CMP.W     #$8000,D1
00002624  6600 000C               3783    BNE       PRINT_MOVEM_REVERSE_D1
00002628                          3784  
00002628  43F9 00002B4A           3785    LEA        STRING_D0,A1
0000262E  700E                    3786      MOVEQ      #14,D0
00002630  4E4F                    3787      TRAP       #15
00002632                          3788  
00002632                          3789  PRINT_MOVEM_REVERSE_D1
00002632                          3790  
00002632  3202                    3791    MOVE.W    D2,D1
00002634  C27C 4000               3792    AND.W     #$4000,D1
00002638  B27C 4000               3793    CMP.W     #$4000,D1
0000263C  6600 000C               3794    BNE       PRINT_MOVEM_REVERSE_D2
00002640                          3795  
00002640  43F9 00002B4E           3796    LEA        STRING_D1,A1
00002646  700E                    3797      MOVEQ      #14,D0
00002648  4E4F                    3798      TRAP       #15
0000264A                          3799  
0000264A                          3800  PRINT_MOVEM_REVERSE_D2
0000264A                          3801  
0000264A  3202                    3802    MOVE.W    D2,D1
0000264C  C27C 2000               3803    AND.W     #$2000,D1
00002650  B27C 2000               3804    CMP.W     #$2000,D1
00002654  6600 000C               3805    BNE       PRINT_MOVEM_REVERSE_D3
00002658                          3806  
00002658  43F9 00002B52           3807    LEA        STRING_D2,A1
0000265E  700E                    3808      MOVEQ      #14,D0
00002660  4E4F                    3809      TRAP       #15
00002662                          3810  
00002662                          3811  PRINT_MOVEM_REVERSE_D3
00002662                          3812  
00002662  3202                    3813    MOVE.W    D2,D1
00002664  C27C 1000               3814    AND.W     #$1000,D1
00002668  B27C 1000               3815    CMP.W     #$1000,D1
0000266C  6600 000C               3816    BNE       PRINT_MOVEM_REVERSE_D4
00002670                          3817  
00002670  43F9 00002B56           3818    LEA        STRING_D3,A1
00002676  700E                    3819      MOVEQ      #14,D0
00002678  4E4F                    3820      TRAP       #15
0000267A                          3821  
0000267A                          3822  PRINT_MOVEM_REVERSE_D4
0000267A                          3823  
0000267A  3202                    3824    MOVE.W    D2,D1
0000267C  C27C 0800               3825    AND.W     #$0800,D1
00002680  B27C 0800               3826    CMP.W     #$0800,D1
00002684  6600 000C               3827    BNE       PRINT_MOVEM_REVERSE_D5
00002688                          3828  
00002688  43F9 00002B5A           3829    LEA        STRING_D4,A1
0000268E  700E                    3830      MOVEQ      #14,D0
00002690  4E4F                    3831      TRAP       #15
00002692                          3832  
00002692                          3833  PRINT_MOVEM_REVERSE_D5
00002692                          3834  
00002692  3202                    3835    MOVE.W    D2,D1
00002694  C27C 0400               3836    AND.W     #$0400,D1
00002698  B27C 0400               3837    CMP.W     #$0400,D1
0000269C  6600 000C               3838    BNE       PRINT_MOVEM_REVERSE_D6
000026A0                          3839  
000026A0  43F9 00002B5E           3840    LEA        STRING_D5,A1
000026A6  700E                    3841      MOVEQ      #14,D0
000026A8  4E4F                    3842      TRAP       #15
000026AA                          3843  
000026AA                          3844  PRINT_MOVEM_REVERSE_D6
000026AA                          3845  
000026AA  3202                    3846    MOVE.W    D2,D1
000026AC  C27C 0200               3847    AND.W     #$0200,D1
000026B0  B27C 0200               3848    CMP.W     #$0200,D1
000026B4  6600 000C               3849    BNE       PRINT_MOVEM_REVERSE_D7
000026B8                          3850  
000026B8  43F9 00002B62           3851    LEA        STRING_D6,A1
000026BE  700E                    3852      MOVEQ      #14,D0
000026C0  4E4F                    3853      TRAP       #15
000026C2                          3854  
000026C2                          3855  PRINT_MOVEM_REVERSE_D7
000026C2                          3856  
000026C2  3202                    3857    MOVE.W    D2,D1
000026C4  C27C 0100               3858    AND.W     #$0100,D1
000026C8  B27C 0100               3859    CMP.W     #$0100,D1
000026CC  6600 000C               3860    BNE       PRINT_MOVEM_REVERSE_A0
000026D0                          3861  
000026D0  43F9 00002B66           3862    LEA        STRING_D7,A1
000026D6  700E                    3863      MOVEQ      #14,D0
000026D8  4E4F                    3864      TRAP       #15
000026DA                          3865  
000026DA                          3866  PRINT_MOVEM_REVERSE_A0
000026DA                          3867  
000026DA  3202                    3868    MOVE.W    D2,D1
000026DC  C27C 0080               3869    AND.W     #$0080,D1
000026E0  B27C 0080               3870    CMP.W     #$0080,D1
000026E4  6600 000C               3871    BNE       PRINT_MOVEM_REVERSE_A1
000026E8                          3872  
000026E8  43F9 00002B2A           3873    LEA        STRING_A0,A1
000026EE  700E                    3874      MOVEQ      #14,D0
000026F0  4E4F                    3875      TRAP       #15
000026F2                          3876  
000026F2                          3877  PRINT_MOVEM_REVERSE_A1
000026F2                          3878  
000026F2  3202                    3879    MOVE.W    D2,D1
000026F4  C27C 0040               3880    AND.W     #$0040,D1
000026F8  B27C 0040               3881    CMP.W     #$0040,D1
000026FC  6600 000C               3882    BNE       PRINT_MOVEM_REVERSE_A2
00002700                          3883  
00002700  43F9 00002B2E           3884    LEA        STRING_A1,A1
00002706  700E                    3885      MOVEQ      #14,D0
00002708  4E4F                    3886      TRAP       #15
0000270A                          3887  
0000270A                          3888  PRINT_MOVEM_REVERSE_A2
0000270A                          3889  
0000270A  3202                    3890    MOVE.W    D2,D1
0000270C  C27C 0020               3891    AND.W     #$0020,D1
00002710  B27C 0020               3892    CMP.W     #$0020,D1
00002714  6600 000C               3893    BNE       PRINT_MOVEM_REVERSE_A3
00002718                          3894  
00002718  43F9 00002B32           3895    LEA        STRING_A2,A1
0000271E  700E                    3896      MOVEQ      #14,D0
00002720  4E4F                    3897      TRAP       #15
00002722                          3898  
00002722                          3899  PRINT_MOVEM_REVERSE_A3
00002722                          3900  
00002722  3202                    3901    MOVE.W    D2,D1
00002724  C27C 0010               3902    AND.W     #$0010,D1
00002728  B27C 0010               3903    CMP.W     #$0010,D1
0000272C  6600 000C               3904    BNE       PRINT_MOVEM_REVERSE_A4
00002730                          3905  
00002730  43F9 00002B36           3906    LEA        STRING_A3,A1
00002736  700E                    3907      MOVEQ      #14,D0
00002738  4E4F                    3908      TRAP       #15
0000273A                          3909  
0000273A                          3910  PRINT_MOVEM_REVERSE_A4
0000273A                          3911  
0000273A  3202                    3912    MOVE.W    D2,D1
0000273C  C27C 0008               3913    AND.W     #$0008,D1
00002740  B27C 0008               3914    CMP.W     #$0008,D1
00002744  6600 000C               3915    BNE       PRINT_MOVEM_REVERSE_A5
00002748                          3916  
00002748  43F9 00002B3A           3917    LEA        STRING_A4,A1
0000274E  700E                    3918      MOVEQ      #14,D0
00002750  4E4F                    3919      TRAP       #15
00002752                          3920  
00002752                          3921  PRINT_MOVEM_REVERSE_A5
00002752                          3922  
00002752  3202                    3923    MOVE.W    D2,D1
00002754  C27C 0004               3924    AND.W     #$0004,D1
00002758  B27C 0004               3925    CMP.W     #$0004,D1
0000275C  6600 000C               3926    BNE       PRINT_MOVEM_REVERSE_A6
00002760                          3927  
00002760  43F9 00002B3E           3928    LEA        STRING_A5,A1
00002766  700E                    3929      MOVEQ      #14,D0
00002768  4E4F                    3930      TRAP       #15
0000276A                          3931  
0000276A                          3932  PRINT_MOVEM_REVERSE_A6
0000276A                          3933  
0000276A  3202                    3934    MOVE.W    D2,D1
0000276C  C27C 0002               3935    AND.W     #$0002,D1
00002770  B27C 0002               3936    CMP.W     #$0002,D1
00002774  6600 000C               3937    BNE       PRINT_MOVEM_REVERSE_A7
00002778                          3938  
00002778  43F9 00002B42           3939    LEA        STRING_A6,A1
0000277E  700E                    3940      MOVEQ      #14,D0
00002780  4E4F                    3941      TRAP       #15
00002782                          3942  
00002782                          3943  PRINT_MOVEM_REVERSE_A7
00002782                          3944  
00002782  3202                    3945    MOVE.W    D2,D1
00002784  C27C 0001               3946    AND.W     #$0001,D1
00002788  B27C 0001               3947    CMP.W     #$0001,D1
0000278C  6600 000C               3948    BNE       PRINT_MOVEM_REVERSE_END
00002790                          3949  
00002790  43F9 00002B46           3950    LEA        STRING_A7,A1
00002796  700E                    3951      MOVEQ      #14,D0
00002798  4E4F                    3952      TRAP       #15
0000279A                          3953  
0000279A                          3954  PRINT_MOVEM_REVERSE_END
0000279A                          3955  
0000279A  43F9 00002AA8           3956    LEA        STRING_SPACE,A1
000027A0  700E                    3957      MOVEQ      #14,D0
000027A2  4E4F                    3958      TRAP       #15
000027A4                          3959  
000027A4                          3960  
000027A4  6000 F610               3961    BRA   PRINT_OPCODE_LOOP_RETURN
000027A8                          3962  
000027A8                          3963  
000027A8                          3964  *-----------------------------------------------------------------
000027A8                          3965  * GET_INPUT
000027A8                          3966  *
000027A8                          3967  * Called before anything else, clears what it uses
000027A8                          3968  *-----------------------------------------------------------------
000027A8                          3969  GET_INPUT
000027A8                          3970  
000027A8  21FC 00000000 1000      3971      MOVE.L  #0,START_ADDR
000027B0  21FC 00000000 1004      3972      MOVE.L  #0,END_ADDR
000027B8                          3973  
000027B8  4283                    3974      CLR.L   D3
000027BA                          3975  
000027BA  43F9 0000296A           3976      LEA     STRING_ENTER_START,A1
000027C0  103C 000D               3977      MOVE.B  #13,D0
000027C4  4E4F                    3978      TRAP    #15
000027C6                          3979  
000027C6  327C 0000               3980      MOVEA   #0,A1
000027CA  103C 0002               3981      MOVE.B  #2,D0
000027CE  4E4F                    3982      TRAP    #15
000027D0                          3983  
000027D0  4EB9 00002820           3984      JSR     STRING_TO_HEX
000027D6  21C3 1000               3985      MOVE.L  D3,START_ADDR
000027DA                          3986  
000027DA  4283                    3987      CLR.L   D3
000027DC                          3988  
000027DC  43F9 00002991           3989      LEA     STRING_ENTER_END,A1
000027E2  103C 000D               3990      MOVE.B  #13,D0
000027E6  4E4F                    3991      TRAP    #15
000027E8                          3992  
000027E8  327C 0000               3993      MOVEA   #0,A1
000027EC  103C 0002               3994      MOVE.B  #2,D0
000027F0  4E4F                    3995      TRAP    #15
000027F2                          3996  
000027F2  4EB9 00002820           3997      JSR     STRING_TO_HEX
000027F8  21C3 1004               3998      MOVE.L  D3,END_ADDR
000027FC                          3999  
000027FC  2438 1000               4000      MOVE.L  START_ADDR,D2
00002800  B682                    4001      CMP.L   D2,D3
00002802  6D00 000C               4002      BLT     OUT_OF_ORDER
00002806                          4003  
00002806  4280                    4004      CLR.L     D0
00002808  4281                    4005      CLR.L     D1
0000280A  4282                    4006      CLR.L     D2
0000280C  4283                    4007      CLR.L     D3
0000280E                          4008  
0000280E  4E75                    4009      RTS
00002810                          4010  
00002810                          4011  OUT_OF_ORDER
00002810                          4012  
00002810  43F9 000029F8           4013      LEA     STRING_OUT_OF_ORDER,A1
00002816  103C 000D               4014      MOVE.B  #13,D0
0000281A  4E4F                    4015      TRAP    #15
0000281C                          4016  
0000281C  4EF8 27A8               4017      JMP     GET_INPUT
00002820                          4018  
00002820                          4019  STRING_TO_HEX
00002820                          4020  
00002820  4282                    4021      CLR.L   D2
00002822  B23C 0000               4022      CMP.B   #0,D1
00002826  6700 0012               4023      BEQ     STH_END
0000282A  4EB9 00002854           4024      JSR     STH_SET_VALUE
00002830  4EF8 2820               4025      JMP     STRING_TO_HEX
00002834                          4026  
00002834                          4027  STH_UPDATE
00002834                          4028  
00002834  5341                    4029      SUB.W   #1,D1
00002836  5249                    4030      ADDA.W  #1,A1
00002838  4E75                    4031      RTS
0000283A                          4032  
0000283A  4E75                    4033  STH_END     RTS
0000283C                          4034  
0000283C                          4035  STH_BAD_INPUT
0000283C                          4036  
0000283C  43F9 000029B6           4037      LEA     STRING_INVALID_INPUT,A1
00002842  103C 000D               4038      MOVE.B  #13,D0
00002846  4E4F                    4039      TRAP    #15
00002848                          4040  
00002848  327C 0000               4041      MOVEA   #0,A1
0000284C  103C 0002               4042      MOVE.B  #2,D0
00002850  4E4F                    4043      TRAP    #15
00002852                          4044  
00002852  4E75                    4045      RTS
00002854                          4046  
00002854                          4047  STH_SET_VALUE
00002854                          4048  
00002854  7400                    4049      MOVE.L  #$0,D2
00002856  0C11 0030               4050      CMP.B   #$30,(A1)
0000285A  6700 009C               4051      BEQ     STH_SHIFT_BITS
0000285E                          4052  
0000285E  7401                    4053      MOVE.L  #$1,D2
00002860  0C11 0031               4054      CMP.B   #$31,(A1)
00002864  6700 0092               4055      BEQ     STH_SHIFT_BITS
00002868                          4056  
00002868  7402                    4057      MOVE.L  #$2,D2
0000286A  0C11 0032               4058      CMP.B   #$32,(A1)
0000286E  6700 0088               4059      BEQ     STH_SHIFT_BITS
00002872                          4060  
00002872  7403                    4061      MOVE.L  #$3,D2
00002874  0C11 0033               4062      CMP.B   #$33,(A1)
00002878  6700 007E               4063      BEQ     STH_SHIFT_BITS
0000287C                          4064  
0000287C  7404                    4065      MOVE.L  #$4,D2
0000287E  0C11 0034               4066      CMP.B   #$34,(A1)
00002882  6700 0074               4067      BEQ     STH_SHIFT_BITS
00002886                          4068  
00002886  7405                    4069      MOVE.L  #$5,D2
00002888  0C11 0035               4070      CMP.B   #$35,(A1)
0000288C  6700 006A               4071      BEQ     STH_SHIFT_BITS
00002890                          4072  
00002890  7406                    4073      MOVE.L  #$6,D2
00002892  0C11 0036               4074      CMP.B   #$36,(A1)
00002896  6700 0060               4075      BEQ     STH_SHIFT_BITS
0000289A                          4076  
0000289A  7407                    4077      MOVE.L  #$7,D2
0000289C  0C11 0037               4078      CMP.B   #$37,(A1)
000028A0  6700 0056               4079      BEQ     STH_SHIFT_BITS
000028A4                          4080  
000028A4  7408                    4081      MOVE.L  #$8,D2
000028A6  0C11 0038               4082      CMP.B   #$38,(A1)
000028AA  6700 004C               4083      BEQ     STH_SHIFT_BITS
000028AE                          4084  
000028AE  7409                    4085      MOVE.L  #$9,D2
000028B0  0C11 0039               4086      CMP.B   #$39,(A1)
000028B4  6700 0042               4087      BEQ     STH_SHIFT_BITS
000028B8                          4088  
000028B8  740A                    4089      MOVE.L  #$A,D2
000028BA  0C11 0041               4090      CMP.B   #$41,(A1)
000028BE  6700 0038               4091      BEQ     STH_SHIFT_BITS
000028C2                          4092  
000028C2  740B                    4093      MOVE.L  #$B,D2
000028C4  0C11 0042               4094      CMP.B   #$42,(A1)
000028C8  6700 002E               4095      BEQ     STH_SHIFT_BITS
000028CC                          4096  
000028CC  740C                    4097      MOVE.L  #$C,D2
000028CE  0C11 0043               4098      CMP.B   #$43,(A1)
000028D2  6700 0024               4099      BEQ     STH_SHIFT_BITS
000028D6                          4100  
000028D6  740D                    4101      MOVE.L  #$D,D2
000028D8  0C11 0044               4102      CMP.B   #$44,(A1)
000028DC  6700 001A               4103      BEQ     STH_SHIFT_BITS
000028E0                          4104  
000028E0  740E                    4105      MOVE.L  #$E,D2
000028E2  0C11 0045               4106      CMP.B   #$45,(A1)
000028E6  6700 0010               4107      BEQ     STH_SHIFT_BITS
000028EA                          4108  
000028EA  740F                    4109      MOVE.L  #$F,D2
000028EC  0C11 0046               4110      CMP.B   #$46,(A1)
000028F0  6700 0006               4111      BEQ     STH_SHIFT_BITS
000028F4                          4112  
000028F4  4EF8 283C               4113      JMP     STH_BAD_INPUT
000028F8                          4114  
000028F8                          4115  STH_SHIFT_BITS
000028F8                          4116  
000028F8  B23C 0001               4117      CMP.B   #1,D1
000028FC  6700 0038               4118      BEQ     STH_INCREASE_VALUE
00002900                          4119  
00002900  E99A                    4120      ROL.L   #4,D2
00002902  B23C 0002               4121      CMP.B   #2,D1
00002906  6700 002E               4122      BEQ     STH_INCREASE_VALUE
0000290A                          4123  
0000290A  E99A                    4124      ROL.L   #4,D2
0000290C  B23C 0003               4125      CMP.B   #3,D1
00002910  6700 0024               4126      BEQ     STH_INCREASE_VALUE
00002914                          4127  
00002914  E99A                    4128      ROL.L   #4,D2
00002916  B23C 0004               4129      CMP.B   #4,D1
0000291A  6700 001A               4130      BEQ     STH_INCREASE_VALUE
0000291E                          4131  
0000291E  E99A                    4132      ROL.L   #4,D2
00002920  B23C 0005               4133      CMP.B   #5,D1
00002924  6700 0010               4134      BEQ     STH_INCREASE_VALUE
00002928                          4135  
00002928  E99A                    4136      ROL.L   #4,D2
0000292A  B23C 0006               4137      CMP.B   #6,D1
0000292E  6700 0006               4138      BEQ     STH_INCREASE_VALUE
00002932                          4139  
00002932  4EF8 283C               4140      JMP     STH_BAD_INPUT
00002936                          4141  
00002936                          4142  STH_INCREASE_VALUE
00002936                          4143  
00002936  D682                    4144      ADD.L   D2,D3
00002938  4EF8 2834               4145      JMP     STH_UPDATE
0000293C                          4146  
0000293C                          4147  * END OF GET_INPUT -----------------------------------------------
0000293C                          4148  
0000293C                          4149  *-----------------------------------------------------------------
0000293C                          4150  * QUERY_CONTINUE
0000293C                          4151  *
0000293C                          4152  * Called before anything else, clears what it uses
0000293C                          4153  *-----------------------------------------------------------------
0000293C                          4154  QUERY_CONTINUE
0000293C                          4155  
0000293C  43F9 00002A24           4156      LEA     STRING_QUERY_CONTINUE,A1
00002942  103C 000D               4157      MOVE.B  #13,D0
00002946  4E4F                    4158      TRAP    #15
00002948                          4159  
00002948  327C 0000               4160      MOVEA   #0,A1
0000294C  103C 0002               4161      MOVE.B  #2,D0
00002950  4E4F                    4162      TRAP    #15
00002952                          4163  
00002952  0C11 0079               4164      CMP.B   #$79,(A1)
00002956  6700 E6C8               4165      BEQ     INITIALIZE
0000295A                          4166  
0000295A  43F9 00002A5E           4167      LEA     STRING_EXITING,A1
00002960  103C 000D               4168      MOVE.B  #13,D0
00002964  4E4F                    4169      TRAP    #15
00002966                          4170  
00002966  FFFF FFFF               4171      SIMHALT
0000296A                          4172  
0000296A                          4173  *-------------------------------------------------------------------------------
0000296A                          4174  *                ________  ________  _________  ________
0000296A                          4175  *               |\   ___ \|\   __  \|\___   ___\\   __  \
0000296A                          4176  *               \ \  \_|\ \ \  \|\  \|___ \  \_\ \  \|\  \
0000296A                          4177  *                \ \  \ \\ \ \   __  \   \ \  \ \ \   __  \
0000296A                          4178  *                 \ \  \_\\ \ \  \ \  \   \ \  \ \ \  \ \  \
0000296A                          4179  *                  \ \_______\ \__\ \__\   \ \__\ \ \__\ \__\
0000296A                          4180  *                   \|_______|\|__|\|__|    \|__|  \|__|\|__|
0000296A                          4181  *
0000296A                          4182  *-------------------------------------------------------------------------------
0000296A                          4183  
0000296A                          4184  
0000296A                          4185  * Data for GET_INPUT and QUERY_CONTINUE ----------
0000296A= 50 6C 65 61 73 65 ...   4186  STRING_ENTER_START      DC.B    'Please enter a start address, eg. 4A6C',0
00002991= 50 6C 65 61 73 65 ...   4187  STRING_ENTER_END        DC.B    'Please enter a end address, eg. 5D3F',0
000029B6= 49 4E 56 41 4C 49 ...   4188  STRING_INVALID_INPUT    DC.B    'INVALID INPUT, must be a valid EASy68k hexidecimal memory address',0
000029F8= 53 74 61 72 74 20 ...   4189  STRING_OUT_OF_ORDER     DC.B    'Start address must be less than end address',0
00002A24= 57 6F 75 6C 64 20 ...   4190  STRING_QUERY_CONTINUE   DC.B    'Would you like to disassemble another memory image? (y/n)',0
00002A5E= 4E 6F 77 20 65 78 ...   4191  STRING_EXITING          DC.B    'Now exiting, have a nice day',0
00002A7B                          4192  * -------------------------------------------------
00002A7B                          4193  
00002A7B= 44 41 54 41 3A 20 00    4194  STRING_DATA                 DC.B    'DATA: ',0
00002A82= 49 4C 4C 45 47 41 ...   4195  STRING_ILLEGAL              DC.B    'ILLEGAL',0
00002A8A= 2E 42 20 00             4196  STRING_BYTE_DESIGNATOR      DC.B    '.B ',0
00002A8E= 2E 57 20 00             4197  STRING_WORD_DESIGNATOR      DC.B    '.W ',0
00002A92= 2E 4C 20 00             4198  STRING_LONG_DESIGNATOR      DC.B    '.L ',0
00002A96= 44 00                   4199  STRING_D                    DC.B    'D',0
00002A98= 41 00                   4200  STRING_A                    DC.B    'A',0
00002A9A= 2C 00                   4201  STRING_COMMA                DC.B    ',',0
00002A9C= 28 00                   4202  STRING_LEFT_PAREN           DC.B    '(',0
00002A9E= 29 00                   4203  STRING_RIGHT_PAREN          DC.B    ')',0
00002AA0= 2B 00                   4204  STRING_PLUS                 DC.B    '+',0
00002AA2= 2D 00                   4205  STRING_MINUS                DC.B    '-',0
00002AA4= 23 00                   4206  STRING_POUND                DC.B    '#',0
00002AA6= 24 00                   4207  STRING_DOLLAR               DC.B    '$',0
00002AA8                          4208  
00002AA8= 20 00                   4209  STRING_SPACE                DC.B    ' ',0
00002AAA= 20 20 20 20 00          4210  STRING_FOURSPACE            DC.B    '    ',0
00002AAF= 0D 0A 00                4211  STRING_NEWLINE              DC.B    '',CR,LF,0
00002AB2                          4212  
00002AB2= 41 53 52 00             4213  STRING_ASR                  DC.B    'ASR',0
00002AB6= 41 53 4C 00             4214  STRING_ASL                  DC.B    'ASL',0
00002ABA= 4C 53 52 00             4215  STRING_LSR                  DC.B    'LSR',0
00002ABE= 4C 53 4C 00             4216  STRING_LSL                  DC.B    'LSL',0
00002AC2= 52 4F 52 00             4217  STRING_ROR                  DC.B    'ROR',0
00002AC6= 52 4F 4C 00             4218  STRING_ROL                  DC.B    'ROL',0
00002ACA= 4E 4F 50 00             4219  STRING_NOP                  DC.B    'NOP',0
00002ACE= 52 54 53 00             4220  STRING_RTS                  DC.B    'RTS',0
00002AD2= 41 44 44 51 00          4221  STRING_ADDQ                 DC.B    'ADDQ',0
00002AD7= 41 44 44 00             4222  STRING_ADD                  DC.B    'ADD',0
00002ADB= 41 44 44 41 00          4223  STRING_ADDA                 DC.B    'ADDA',0
00002AE0= 42 45 51 20 00          4224  STRING_BEQ                  DC.B    'BEQ ',0
00002AE5= 42 4C 45 20 00          4225  STRING_BLE                  DC.B    'BLE ',0
00002AEA= 42 52 41 20 00          4226  STRING_BRA                  DC.B    'BRA ',0
00002AEF= 42 47 54 20 00          4227  STRING_BGT                  DC.B    'BGT ',0
00002AF4= 4A 53 52 20 20 20 ...   4228  STRING_JSR                  DC.B    'JSR    ',0
00002AFC= 4D 4F 56 45 00          4229  STRING_MOVE                 DC.B    'MOVE',0
00002B01= 4D 4F 56 45 41 00       4230  STRING_MOVEA                DC.B    'MOVEA',0
00002B07= 4D 4F 56 45 51 20 ...   4231  STRING_MOVEQ                DC.B    'MOVEQ    ',0
00002B11= 4D 4F 56 45 4D 00       4232  STRING_MOVEM                DC.B    'MOVEM',0
00002B17= 53 55 42 00             4233  STRING_SUB                  DC.B    'SUB',0
00002B1B= 41 4E 44 00             4234  STRING_AND                  DC.B    'AND',0
00002B1F= 4F 52 00                4235  STRING_OR                   DC.B    'OR',0
00002B22= 4E 4F 54 00             4236  STRING_NOT                  DC.B    'NOT',0
00002B26= 4C 45 41 00             4237  STRING_LEA                  DC.B    'LEA',0
00002B2A                          4238  
00002B2A= 41 30 2C 00             4239  STRING_A0                   DC.B    'A0,',0
00002B2E= 41 31 2C 00             4240  STRING_A1                   DC.B    'A1,',0
00002B32= 41 32 2C 00             4241  STRING_A2                   DC.B    'A2,',0
00002B36= 41 33 2C 00             4242  STRING_A3                   DC.B    'A3,',0
00002B3A= 41 34 2C 00             4243  STRING_A4                   DC.B    'A4,',0
00002B3E= 41 35 2C 00             4244  STRING_A5                   DC.B    'A5,',0
00002B42= 41 36 2C 00             4245  STRING_A6                   DC.B    'A6,',0
00002B46= 41 37 2C 00             4246  STRING_A7                   DC.B    'A7,',0
00002B4A                          4247  
00002B4A= 44 30 2C 00             4248  STRING_D0                   DC.B    'D0,',0
00002B4E= 44 31 2C 00             4249  STRING_D1                   DC.B    'D1,',0
00002B52= 44 32 2C 00             4250  STRING_D2                   DC.B    'D2,',0
00002B56= 44 33 2C 00             4251  STRING_D3                   DC.B    'D3,',0
00002B5A= 44 34 2C 00             4252  STRING_D4                   DC.B    'D4,',0
00002B5E= 44 35 2C 00             4253  STRING_D5                   DC.B    'D5,',0
00002B62= 44 36 2C 00             4254  STRING_D6                   DC.B    'D6,',0
00002B66= 44 37 2C 00             4255  STRING_D7                   DC.B    'D7,',0
00002B6A                          4256  
00002B6A                          4257  MISC_NUMBER  DS.B    1    * MISC_NUMBER to be printed
00002B6C                          4258  MISC_OPCODE  DS.W    1
00002B6E                          4259  MISC_REGISTER DS.B   1
00002B70                          4260  LINE_COUNT    DS.W    1    * How many lines are currently displayed onscreen
00002B72                          4261  
00002B72                          4262  
00002B72                          4263  
00002B72                          4264      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 1BF4
ADDA                1B74
ADDA_CONTINUE       1BBC
ADDA_L              1B9C
ADDA_W              1BAC
ADDQ                1C88
ADDQ_NOT_ZERO       1CCC
ADD_ADDA            1B5E
ADD_DN_FIRST        1C50
ADD_EA_FIRST        1C18
AND                 12A4
AND_DN_FIRST        131C
AND_EA_FIRST        12D2
ASL                 193C
ASR                 192C
ASX                 191A
BCC                 1A96
BCC_16              1B2A
BCC_32              1B44
BCC_CONTINUE        1B00
BCC_END             1B4E
BEQ                 1AF0
BGT                 1AD0
BLE                 1AE0
BRA                 1AC0
BRANCHBLOCK         10DE
BRANCHBLOCK_MOVEQ_END  1130
CR                  D
DATA1               1016
DATA1_IN_USE        101A
DATA2               101C
DONE                10D0
END_ADDR            1004
GET_INPUT           27A8
INITIALIZE          1020
JSR                 1D30
JSR_EA_MODE_ELSE    1D5A
JSR_FINISH          1D94
JSR_PUSH_EA_MODE_ID_AN_INDIRECT  1D76
JSR_PUSH_EA_MODE_ID_IND_LONG  1D8A
JSR_PUSH_EA_MODE_ID_IND_SHORT  1D80
LEA                 11EA
LF                  A
LINE_COUNT          2B70
LOOP_INC            1010
LOOP_INDEX          1012
LSL                 190A
LSR                 18FA
LSX                 18E8
LSX_ASX_ROX         18A8
LSX_ASX_ROX_CONTINUE  197E
LSX_ASX_ROX_FINISH  1A86
LSX_ASX_ROX_MEM     1A60
LSX_ASX_ROX_REGISTER  1A26
LSX_ASX_ROX_RESET_D7  1A90
LSX_ASX_ROX_SHIFT   19AC
LSX_ASX_ROX_SHIFT_8  19F6
MISC_NUMBER         2B6A
MISC_OPCODE         2B6C
MISC_REGISTER       2B6E
MOVE                16D4
MOVEA               1828
MOVEA_L             1862
MOVEA_SIZE_CONTINUE  1870
MOVEA_W             1854
MOVEM               14A2
MOVEM_MEM2REG       1526
MOVEM_MEM2REG_AN_IND  156E
MOVEM_MEM2REG_EA_FINISH  1596
MOVEM_MEM2REG_ELSE  1552
MOVEM_MEM2REG_IND_LONG  158C
MOVEM_MEM2REG_IND_SHORT  1582
MOVEM_MEM2REG_POST_INC  1578
MOVEM_REG2MEM       15C2
MOVEM_REG2MEM_AN_IND  1608
MOVEM_REG2MEM_EA_FINISH  1660
MOVEM_REG2MEM_ELSE  15EC
MOVEM_REG2MEM_IND_LONG  164A
MOVEM_REG2MEM_IND_SHORT  1634
MOVEM_REG2MEM_PRE_DEC  161E
MOVEM_SIZE_CONTINUE  150E
MOVEM_SIZE_LONG     14EE
MOVEM_SIZE_WORD     14FE
MOVEQ               1668
MOVE_B              1708
MOVE_L              1724
MOVE_MODE_AN_INDIRECT  1794
MOVE_MODE_AN_POST_INC  179E
MOVE_MODE_AN_PRE_DEC  17A8
MOVE_MODE_DN        178A
MOVE_MODE_ELSE      17B2
MOVE_MODE_FINISH    181A
MOVE_MODE_IND_LONG  17EE
MOVE_MODE_IND_LONG_DATA2  180C
MOVE_MODE_IND_SHORT  17C2
MOVE_MODE_IND_SHORT_DATA2  17E0
MOVE_MOVEA          16BE
MOVE_SIZE_CONTINUE  1732
MOVE_W              1716
NOP                 1CFC
NOT                 1264
OPCODE_LOOP         1044
OPCODE_LOOP_CONTINUE  10CC
OPCODE_LOOP_PAUSE   10BE
OR                  1354
OR_DN_FIRST         13CC
OR_EA_FIRST         1382
OUT_OF_ORDER        2810
PAUSE_CONSOLE       246A
PRINTADDR           2448
PRINT_ADD           1FA4
PRINT_ADDA          1FB4
PRINT_ADDQ          2144
PRINT_AND           21A4
PRINT_ASL           1F1A
PRINT_ASR           1F0A
PRINT_BEQ           1F84
PRINT_BGT           1F64
PRINT_BLE           1F74
PRINT_BRA           1F94
PRINT_BYTE_DESIGNATOR  21C4
PRINT_COMMA         23FA
PRINT_COUNT         1008
PRINT_DATA1_LONG    1F4A
PRINT_DATA1_WORD    1F54
PRINT_EA_MODE_ID_ABS_DATA  235E
PRINT_EA_MODE_ID_ABS_DATA2  2384
PRINT_EA_MODE_ID_AN  2212
PRINT_EA_MODE_ID_AN_INDIRECT  2230
PRINT_EA_MODE_ID_AN_POST_INC  2266
PRINT_EA_MODE_ID_AN_PRE_DEC  22A8
PRINT_EA_MODE_ID_DN  21F4
PRINT_EA_MODE_ID_IND_LONG  232A
PRINT_EA_MODE_ID_IND_LONG_DATA2  2344
PRINT_EA_MODE_ID_IND_SHORT  22EA
PRINT_EA_MODE_ID_IND_SHORT_DATA2  230A
PRINT_FOURSPACE     23DA
PRINT_ILLEGAL       240A
PRINT_IMMEDIATE_NEWLINE  245E
PRINT_JSR           23AA
PRINT_LEA           23CA
PRINT_LONG_DESIGNATOR  21E4
PRINT_LSL           1EFA
PRINT_LSR           1EEA
PRINT_MISC_ADDRESS_IND  20E0
PRINT_MISC_NUMBER   1FC4
PRINT_MISC_NUMBER_AS_ADDRESS  1FDA
PRINT_MISC_NUMBER_AS_DATA  211E
PRINT_MISC_NUMBER_AS_REGISTER  2000
PRINT_MISC_POST_INC  2096
PRINT_MISC_PRE_DEC  204C
PRINT_MISC_REGISTER  2026
PRINT_MOVE          2154
PRINT_MOVEA         2164
PRINT_MOVEM         2184
PRINT_MOVEM_REVERSE  2610
PRINT_MOVEM_REVERSE_A0  26DA
PRINT_MOVEM_REVERSE_A1  26F2
PRINT_MOVEM_REVERSE_A2  270A
PRINT_MOVEM_REVERSE_A3  2722
PRINT_MOVEM_REVERSE_A4  273A
PRINT_MOVEM_REVERSE_A5  2752
PRINT_MOVEM_REVERSE_A6  276A
PRINT_MOVEM_REVERSE_A7  2782
PRINT_MOVEM_REVERSE_D0  261C
PRINT_MOVEM_REVERSE_D1  2632
PRINT_MOVEM_REVERSE_D2  264A
PRINT_MOVEM_REVERSE_D3  2662
PRINT_MOVEM_REVERSE_D4  267A
PRINT_MOVEM_REVERSE_D5  2692
PRINT_MOVEM_REVERSE_D6  26AA
PRINT_MOVEM_REVERSE_D7  26C2
PRINT_MOVEM_REVERSE_END  279A
PRINT_MOVEM_STANDARD  2478
PRINT_MOVEM_STANDARD_A0  252A
PRINT_MOVEM_STANDARD_A1  2512
PRINT_MOVEM_STANDARD_A2  24FA
PRINT_MOVEM_STANDARD_A3  24E2
PRINT_MOVEM_STANDARD_A4  24CA
PRINT_MOVEM_STANDARD_A5  24B2
PRINT_MOVEM_STANDARD_A6  249A
PRINT_MOVEM_STANDARD_A7  2484
PRINT_MOVEM_STANDARD_D0  25EA
PRINT_MOVEM_STANDARD_D1  25D2
PRINT_MOVEM_STANDARD_D2  25BA
PRINT_MOVEM_STANDARD_D3  25A2
PRINT_MOVEM_STANDARD_D4  258A
PRINT_MOVEM_STANDARD_D5  2572
PRINT_MOVEM_STANDARD_D6  255A
PRINT_MOVEM_STANDARD_D7  2542
PRINT_MOVEM_STANDARD_END  2602
PRINT_MOVEQ         2174
PRINT_NON_OPCODE_DATA  2422
PRINT_NOT           23BA
PRINT_OPCODE        1D9C
PRINT_OPCODE_LOOP   1DA6
PRINT_OPCODE_LOOP_FINISH  1DBC
PRINT_OPCODE_LOOP_INDEX  100A
PRINT_OPCODE_LOOP_RETURN  1DB6
PRINT_OR            21B4
PRINT_ROL           1F3A
PRINT_ROR           1F2A
PRINT_SPACE         23EA
PRINT_SUB           2194
PRINT_WORD_DESIGNATOR  21D4
PUSH_BWL            1EA2
PUSH_BWL_BYTE       1EBE
PUSH_BWL_FINISH     1EDC
PUSH_BWL_LONG       1ED2
PUSH_BWL_WORD       1EC8
PUSH_EA_MODE_ID     1DC8
PUSH_EA_MODE_ID_ABS_DATA  1E80
PUSH_EA_MODE_ID_AN  1E0E
PUSH_EA_MODE_ID_AN_INDIRECT  1E18
PUSH_EA_MODE_ID_AN_POST_INC  1E22
PUSH_EA_MODE_ID_AN_PRE_DEC  1E2C
PUSH_EA_MODE_ID_DN  1E04
PUSH_EA_MODE_ID_ELSE  1E36
PUSH_EA_MODE_ID_FINISH  1E94
PUSH_EA_MODE_ID_IND_LONG  1E6C
PUSH_EA_MODE_ID_IND_SHORT  1E58
QUERY_CONTINUE      293C
ROL                 196E
ROR                 195E
ROX                 194C
RTS                 1D16
STACK_BASE          100C
START               1020
START_ADDR          1000
STH_BAD_INPUT       283C
STH_END             283A
STH_INCREASE_VALUE  2936
STH_SET_VALUE       2854
STH_SHIFT_BITS      28F8
STH_UPDATE          2834
STRING_A            2A98
STRING_A0           2B2A
STRING_A1           2B2E
STRING_A2           2B32
STRING_A3           2B36
STRING_A4           2B3A
STRING_A5           2B3E
STRING_A6           2B42
STRING_A7           2B46
STRING_ADD          2AD7
STRING_ADDA         2ADB
STRING_ADDQ         2AD2
STRING_AND          2B1B
STRING_ASL          2AB6
STRING_ASR          2AB2
STRING_BEQ          2AE0
STRING_BGT          2AEF
STRING_BLE          2AE5
STRING_BRA          2AEA
STRING_BYTE_DESIGNATOR  2A8A
STRING_COMMA        2A9A
STRING_D            2A96
STRING_D0           2B4A
STRING_D1           2B4E
STRING_D2           2B52
STRING_D3           2B56
STRING_D4           2B5A
STRING_D5           2B5E
STRING_D6           2B62
STRING_D7           2B66
STRING_DATA         2A7B
STRING_DOLLAR       2AA6
STRING_ENTER_END    2991
STRING_ENTER_START  296A
STRING_EXITING      2A5E
STRING_FOURSPACE    2AAA
STRING_ILLEGAL      2A82
STRING_INVALID_INPUT  29B6
STRING_JSR          2AF4
STRING_LEA          2B26
STRING_LEFT_PAREN   2A9C
STRING_LONG_DESIGNATOR  2A92
STRING_LSL          2ABE
STRING_LSR          2ABA
STRING_MINUS        2AA2
STRING_MOVE         2AFC
STRING_MOVEA        2B01
STRING_MOVEM        2B11
STRING_MOVEQ        2B07
STRING_NEWLINE      2AAF
STRING_NOP          2ACA
STRING_NOT          2B22
STRING_OR           2B1F
STRING_OUT_OF_ORDER  29F8
STRING_PLUS         2AA0
STRING_POUND        2AA4
STRING_QUERY_CONTINUE  2A24
STRING_RIGHT_PAREN  2A9E
STRING_ROL          2AC6
STRING_ROR          2AC2
STRING_RTS          2ACE
STRING_SPACE        2AA8
STRING_SUB          2B17
STRING_TO_HEX       2820
STRING_WORD_DESIGNATOR  2A8E
SUB                 1404
SUB_DN_FIRST        146A
SUB_EA_FIRST        1432
