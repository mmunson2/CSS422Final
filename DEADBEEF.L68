00001020 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 6/10/2020 10:53:51 PM

00000000                             1  *-------------------------------------------------------------------------------
00000000                             2  * Title      : PUSH_BWT / EA_MODE_ID Development
00000000                             3  * Written by : Ihsan Halimun, Camden Brewster, Matthew Munson
00000000                             4  * Created    : May 16th 2020
00000000                             5  * Last Edited: June 10th 2020
00000000                             6  *-------------------------------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  *-------------------------------------------------------------------------------
00001000                             9  *      ________   ___        ________   ________   ________   ___
00001000                            10  *     |\   ____\ |\  \      |\   __  \ |\   __  \ |\   __  \ |\  \
00001000                            11  *     \ \  \___| \ \  \     \ \  \|\  \\ \  \|\ /_\ \  \|\  \\ \  \
00001000                            12  *      \ \  \  ___\ \  \     \ \  \\\  \\ \   __  \\ \   __  \\ \  \
00001000                            13  *       \ \  \|\  \\ \  \____ \ \  \\\  \\ \  \|\  \\ \  \ \  \\ \  \____
00001000                            14  *        \ \_______\\ \_______\\ \_______\\ \_______\\ \__\ \__\\ \_______\
00001000                            15  *         \|_______| \|_______| \|_______| \|_______| \|__|\|__| \|_______|
00001000                            16  *-------------------------------------------------------------------------------
00001000                            17  
00001000                            18  START_ADDR   DS.L  1   *User defined memory start address
00001004                            19  END_ADDR     DS.L  1   *User defined memory end address
00001008                            20  
00001008  =0000000D                 21  CR    EQU   $0D
00001008  =0000000A                 22  LF    EQU   $0A
00001008                            23  
00001008                            24  * How many print statements are sitting in the stack:
00001008                            25  PRINT_COUNT              DS.W    1
0000100A                            26  
0000100A                            27  PRINT_OPCODE_LOOP_INDEX  DS.W    1   * The print loop index
0000100C                            28  STACK_BASE               DS.L    1   * Where the print calls start
00001010                            29  
00001010                            30  LOOP_INC       DS.W    1    * How many words to skip to find the next opcode
00001012                            31  LOOP_INDEX     DS.L    1    * The opcode loop's index
00001016                            32  
00001016                            33  
00001016                            34  DATA1          DS.L    1    * The first line of opcode data
0000101A                            35  DATA1_IN_USE   DS.W    1  * Boolean: Whether or not DATA1 is being used
0000101C                            36  
0000101C                            37  DATA2          DS.L    1    * The second line of opcode data
00001020                            38  
00001020                            39  START:
00001020                            40  
00001020                            41  *-------------------------------------------------------------------------------
00001020                            42  *                ________  ________  ________  _______
00001020                            43  *               |\   ____\|\   __  \|\   ___ \|\  ___ \
00001020                            44  *               \ \  \___|\ \  \|\  \ \  \_|\ \ \   __/|
00001020                            45  *                \ \  \    \ \  \\\  \ \  \ \\ \ \  \_|/__
00001020                            46  *                 \ \  \____\ \  \\\  \ \  \_\\ \ \  \_|\ \
00001020                            47  *                  \ \_______\ \_______\ \_______\ \_______\
00001020                            48  *                   \|_______|\|_______|\|_______|\|_______|
00001020                            49  *
00001020                            50  *-------------------------------------------------------------------------------
00001020                            51  
00001020                            52  *-------------------------------------------------------------------------------
00001020                            53  INITIALIZE
00001020                            54  
00001020  31FC E0F8 4000            55    MOVE.W    #$E0F8,$4000
00001026  31FC 0012 4002            56    MOVE.W    #$0012,$4002
0000102C  31FC E0F8 4004            57    MOVE.W    #$E0F8,$4004
00001032  31FC 1234 4006            58    MOVE.W    #$1234,$4006
00001038  31FC E0F9 4008            59    MOVE.W    #$E0F9,$4008
0000103E  21FC 12345678 400A        60    MOVE.L    #$12345678,$400A
00001046                            61    
00001046                            62  
00001046                            63  
00001046                            64  
00001046                            65  
00001046                            66  * ------ Standard Initializations ------
00001046  31FC 0000 1008            67    MOVE.W    #0, PRINT_COUNT
0000104C  13FC 0000 00002B92        68    MOVE.B    #0, MISC_NUMBER
00001054  33FC 0000 00002B98        69    MOVE.W    #0, LINE_COUNT
0000105C                            70  
0000105C                            71    * Begin the user input loop
0000105C  4EB9 000027D0             72    JSR GET_INPUT
00001062                            73  
00001062  2078 1000                 74    MOVEA.L  START_ADDR,A0
00001066  21C8 1012                 75    MOVE.L   A0,LOOP_INDEX * Both A0 and LOOP_INDEX contain the start address
0000106A                            76  
0000106A                            77  
0000106A                            78  
0000106A                            79  *-------------------------------------------------------------------------------
0000106A                            80  *    OPCODE LOOP
0000106A                            81  *
0000106A                            82  *    The disassembler's main loop. Gets the contents of a memory location,
0000106A                            83  *    sends it to BRANCHBLOCK to be decoded and printed, and checks if we're
0000106A                            84  *    at the user defined endpoint.
0000106A                            85  *
0000106A                            86  * ________________________________________
0000106A                            87  * Register Use Summary:
0000106A                            88  *
0000106A                            89  * D7: CONST - The opcode to decode. Set before BRANCHBLOCK
0000106A                            90  *
0000106A                            91  * A0: The current Loop Index, updated before and after BRANCHBLOCK
0000106A                            92  * A1: How much we should increment the loop index
0000106A                            93  * A2: Local Variable - used for retrieving DATA
0000106A                            94  *-------------------------------------------------------------------------------
0000106A                            95  OPCODE_LOOP
0000106A                            96  
0000106A  2078 1012                 97      MOVEA.L LOOP_INDEX,A0
0000106E  B1F8 1004                 98      CMP.L   END_ADDR,A0  * Check to see if we're done
00001072  6E00 0082                 99      BGT     DONE
00001076                           100  
00001076                           101  * ------ Reset Loop Variables ------
00001076  31FC 0000 1008           102      MOVE.W  #0,PRINT_COUNT  * Reset print count to zero
0000107C  31FC 0000 1010           103      MOVE.W  #0,LOOP_INC     * Reset loop index increment to zero
00001082  4287                     104      CLR.L   D7
00001084                           105  
00001084                           106  * ------ Get memory at loop index ------
00001084  3E10                     107      MOVE.W  (A0),D7
00001086                           108  
00001086                           109  * ------ Fill DATA1 and DATA2 ------
00001086  2448                     110      MOVEA.L  A0,A2
00001088  544A                     111      ADDA     #2,A2        * Increment by 1 word to get the long afterwards
0000108A  21D2 1016                112      MOVE.L  (A2),DATA1   * Fill DATA1 with the long after the opcode
0000108E  584A                     113      ADDA     #4,A2
00001090  21D2 101C                114      MOVE.L  (A2),DATA2   * Fill DATA2 with the long after DATA1
00001094                           115  
00001094  31FC 0000 101A           116      MOVE.W  #0,DATA1_IN_USE  * Reset data boolean
0000109A  13FC 0000 00002B92       117      MOVE.B  #0,MISC_NUMBER   * Reset MISC_NUMBER
000010A2  13FC 0000 00002B96       118      MOVE.B  #0,MISC_REGISTER * Reset MISC_REGISTER
000010AA                           119  
000010AA                           120  * ------ Execute Subroutines ------
000010AA  4EB9 00002470            121      JSR     PRINTADDR             * Print the memory address
000010B0  4EB9 00001104            122      JSR     BRANCHBLOCK           * Figure out what opcode this is and print
000010B6                           123  
000010B6                           124  
000010B6                           125  * ------ Increment Loop ------
000010B6  2078 1012                126      MOVEA.L     LOOP_INDEX,A0
000010BA  3278 1010                127      MOVEA.W     LOOP_INC,A1
000010BE  D0C9                     128      ADDA    A1,A0  * Move the index to the next opcode
000010C0  21C8 1012                129      MOVE.L  A0,LOOP_INDEX
000010C4                           130  
000010C4                           131  
000010C4                           132  * ------ Check for pause ------
000010C4  247C 00000000            133      MOVEA.L   #0,A2
000010CA  3479 00002B98            134      MOVEA.W   LINE_COUNT,A2
000010D0  524A                     135      ADDA.W    #1,A2
000010D2  33CA 00002B98            136      MOVE.W    A2,LINE_COUNT
000010D8                           137  
000010D8  B4FC 001E                138      CMP.W     #30,A2
000010DC  6C00 0006                139      BGE       OPCODE_LOOP_PAUSE
000010E0                           140  
000010E0                           141  
000010E0  6000 0010                142      BRA     OPCODE_LOOP_CONTINUE
000010E4                           143  
000010E4                           144  OPCODE_LOOP_PAUSE
000010E4  4EB9 00002492            145      JSR     PAUSE_CONSOLE
000010EA  33FC 0000 00002B98       146      MOVE.W  #0, LINE_COUNT
000010F2                           147  
000010F2                           148  OPCODE_LOOP_CONTINUE
000010F2  6000 FF76                149      BRA     OPCODE_LOOP
000010F6                           150  
000010F6                           151  DONE
000010F6                           152  
000010F6  4EB9 00002492            153      JSR     PAUSE_CONSOLE
000010FC  6000 1866                154      BRA     QUERY_CONTINUE
00001100                           155  
00001100  FFFF FFFF                156      SIMHALT
00001104                           157  
00001104                           158  
00001104                           159  
00001104                           160  *-------------------------------------------------------------------------------
00001104                           161  *     BRANCHBLOCK
00001104                           162  *
00001104                           163  *  Decodes the opcode in D7 and jumps to the corresponding opcode subroutine
00001104                           164  *
00001104                           165  *  Because 1 line is pulled out of memory at a time, it's possible that the
00001104                           166  *  next opcode only takes up one word, and it's in the upper word of the
00001104                           167  *  opcode long (eg.4E71FFFF is NOP then empty). We must check for single word
00001104                           168  *  opcodes before we use any of the data in the lower word of D7.
00001104                           169  *________________________________________
00001104                           170  * Register Use Summary:
00001104                           171  *
00001104                           172  * D0: General variable, cleared every use to be safe
00001104                           173  * D1:
00001104                           174  * D2:
00001104                           175  * D3:
00001104                           176  * D4: (Keep in mind this is parameter for BWL)
00001104                           177  * D5:
00001104                           178  * D6:
00001104                           179  * D7: CONST - The opcode to decode - NO TOUCH
00001104                           180  *________________________________________
00001104                           181  * A0:
00001104                           182  * A1:
00001104                           183  * A2:
00001104                           184  * A3:
00001104                           185  * A4:
00001104                           186  * A5:
00001104                           187  * A6:
00001104                           188  * A7:
00001104                           189  *-------------------------------------------------------------------------------
00001104                           190  BRANCHBLOCK
00001104                           191  
00001104  21CF 100C                192    MOVE.L  SP,STACK_BASE   * Save the position of the stack for later
00001108                           193  
00001108                           194  * ---- EMPTY MEMORY ----
00001108  BEBC 0000FFFF            195    CMP.L   #$FFFF,D7
0000110E  6700 133A                196    BEQ     PRINT_NON_OPCODE_DATA
00001112                           197  
00001112                           198  * ---- CONSTANT OPCODES ----
00001112  BE7C 4E71                199    CMP.W   #$4E71,D7
00001116  6700 0C0A                200    BEQ     NOP
0000111A                           201  
0000111A  BE7C 4E75                202    CMP.W   #$4E75,D7
0000111E  6700 0C1C                203    BEQ     RTS
00001122                           204  
00001122                           205  * ------ MOVE / MOVEA ------
00001122  4280                     206    CLR.L   D0
00001124  3007                     207    MOVE.W  D7,D0
00001126                           208  
00001126  E598                     209    ROL.L   #$02,D0 * Move the first two bits into the upper word
00001128  4840                     210    SWAP    D0      * Swap the upper word and the lower word
0000112A                           211  
0000112A  B07C 0000                212    CMP.W   #0,D0
0000112E  6700 05B4                213    BEQ     MOVE_MOVEA
00001132                           214  
00001132                           215  * ------ MOVEQ ------
00001132  4280                     216    CLR.L   D0
00001134  4281                     217    CLR.L   D1
00001136  3007                     218    MOVE.W  D7,D0
00001138                           219  
00001138  E058                     220    ROR.W   #$8,D0 * Check bit 8 to make sure it's zero
0000113A  3200                     221    MOVE.W  D0,D1 * D1 is where we'll do the mask
0000113C  0241 0001                222    ANDI.W  #1,D1 * Mask 1
00001140                           223  
00001140  B27C 0000                224    CMP.W   #0,D1
00001144  6600 0010                225    BNE     BRANCHBLOCK_MOVEQ_END
00001148                           226  
00001148  E858                     227    ROR.W   #$4,D0 * Check bits 12-15 for 0111
0000114A  C07C 000F                228    AND.W   #$F,D0
0000114E  B03C 0007                229    CMP.B   #$7,D0
00001152  6700 053A                230    BEQ     MOVEQ
00001156                           231  
00001156                           232  BRANCHBLOCK_MOVEQ_END * Go here if it's not MOVEQ
00001156                           233  
00001156                           234  * ------ MOVEM ------
00001156  4280                     235    CLR.L   D0
00001158  3007                     236    MOVE.W  D7,D0
0000115A                           237  
0000115A  C07C FB80                238    AND.W   #$FB80,D0 * Mask 1111 1011 1000 0000
0000115E  B07C 4880                239    CMP.W   #$4880,D0
00001162                           240  
00001162  6700 0364                241    BEQ     MOVEM
00001166                           242  
00001166                           243  * ---- NOT ----
00001166  4280                     244    CLR.L   D0
00001168  3007                     245    MOVE.W  D7,D0
0000116A  C07C FF00                246    AND.W   #$FF00,D0
0000116E  B07C 4600                247    CMP.W   #$4600,D0
00001172  6700 0116                248    BEQ     NOT
00001176                           249  
00001176                           250  * ---- LEA ----
00001176  4280                     251    CLR.L   D0
00001178  3007                     252    MOVE.W  D7,D0
0000117A  C07C F1C0                253    AND.W   #$F1C0,D0
0000117E  B07C 41C0                254    CMP.W   #$41C0,D0
00001182  6700 008C                255    BEQ     LEA
00001186                           256  
00001186                           257  * ---- ADDQ ----
00001186  4280                     258    CLR.L   D0
00001188  3007                     259    MOVE.W  D7,D0
0000118A  4840                     260    SWAP    D0
0000118C  E998                     261    ROL.L   #$04,D0
0000118E  C03C 000F                262    AND.B   #$F,D0
00001192  B03C 0005                263    CMP.B   #5,D0
00001196  6700 0B16                264    BEQ     ADDQ
0000119A                           265  
0000119A                           266  * ---- ADDA / ADD ----
0000119A  4280                     267    CLR.L   D0
0000119C  3007                     268    MOVE.W  D7,D0   *DXXX
0000119E  C07C F000                269    AND.W   #$F000,D0
000011A2  B07C D000                270    CMP.W   #$D000,D0
000011A6  6700 09DC                271    BEQ     ADD_ADDA
000011AA                           272  
000011AA                           273  * ---- SUB ----
000011AA  4280                     274    CLR.L   D0
000011AC  3007                     275    MOVE.W  D7,D0
000011AE  C07C F000                276    AND.W   #$F000,D0
000011B2  B07C 9000                277    CMP.W   #$9000,D0
000011B6  6700 0272                278    BEQ     SUB
000011BA                           279  
000011BA                           280  * ---- OR ----
000011BA  4280                     281    CLR.L   D0
000011BC  3007                     282    MOVE.W  D7,D0
000011BE  C07C F000                283    AND.W   #$F000,D0
000011C2  B07C 8000                284    CMP.W   #$8000,D0
000011C6  6700 01B2                285    BEQ     OR
000011CA                           286  
000011CA                           287  * ---- AND ----
000011CA  4280                     288    CLR.L   D0
000011CC  3007                     289    MOVE.W  D7,D0
000011CE  C07C F000                290    AND.W   #$F000,D0
000011D2  B07C C000                291    CMP.W   #$C000,D0
000011D6  6700 00F2                292    BEQ     AND
000011DA                           293  
000011DA                           294  * ---- BCC ----
000011DA  4280                     295    CLR.L   D0
000011DC  2007                     296    MOVE.L  D7,D0
000011DE  C07C F000                297    AND.W   #$F000,D0
000011E2  B07C 6000                298    CMP.W   #$6000,D0
000011E6  6700 08D4                299    BEQ     BCC
000011EA                           300  
000011EA                           301  * ---- LSX_ASX_ROR ----
000011EA  4280                     302    CLR.L   D0
000011EC  2007                     303    MOVE.L  D7,D0
000011EE  C07C F000                304    AND.W   #$F000,D0
000011F2  B07C E000                305    CMP.W   #$E000,D0
000011F6  6700 06D6                306    BEQ     LSX_ASX_ROX
000011FA                           307  
000011FA                           308  * ---- JSR ----
000011FA  4280                     309    CLR.L   D0
000011FC  3007                     310    MOVE.W  D7,D0
000011FE  C07C FFC0                311    AND.W   #$FFC0,D0   * Mask opcode to get first 10 bits only
00001202                           312  
00001202  EC40                     313    ASR.W   #6,D0
00001204  B07C 013A                314    CMP     #$13A,D0
00001208  6700 0B4C                315    BEQ     JSR
0000120C                           316  
0000120C                           317  * ---- Data is not recognized as opcode ----
0000120C                           318  
0000120C  6000 123C                319    BRA     PRINT_NON_OPCODE_DATA
00001210                           320  
00001210                           321  
00001210                           322  *-------------------------------------------------------------------------------
00001210                           323  * ________   ________   ________   ________   ________   _______
00001210                           324  *|\   __  \ |\   __  \ |\   ____\ |\   __  \ |\   ___ \ |\  ___ \
00001210                           325  *\ \  \|\  \\ \  \|\  \\ \  \___| \ \  \|\  \\ \  \_|\ \\ \   __/|
00001210                           326  * \ \  \\\  \\ \   ____\\ \  \     \ \  \\\  \\ \  \ \\ \\ \  \_|/__
00001210                           327  *  \ \  \\\  \\ \  \___| \ \  \____ \ \  \\\  \\ \  \_\\ \\ \  \_|\ \
00001210                           328  *   \ \_______\\ \__\     \ \_______\\ \_______\\ \_______\\ \_______\
00001210                           329  *    \|_______| \|__|      \|_______| \|_______| \|_______| \|_______|
00001210                           330  *
00001210                           331  *-------------------------------------------------------------------------------
00001210                           332  
00001210                           333  *-------------------------------------------------------------------------------
00001210                           334  * LEA
00001210                           335  *
00001210                           336  * Load Effective address
00001210                           337  *
00001210                           338  * "LEA" -> "    " -> <ea> -> "," -> An
00001210                           339  *
00001210                           340  * Effective address does not allow Dn, An, (An)+, -(An)
00001210                           341  *-------------------------------------------------------------------------------
00001210                           342  LEA
00001210                           343  
00001210                           344    * ------ Print "LEA" ------
00001210  4BF9 000023F2            345    LEA     PRINT_LEA,A5    * Load the print subroutine into intermediate address
00001216  2F0D                     346    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001218  5878 1008                347    ADD.W   #4,PRINT_COUNT
0000121C                           348  
0000121C                           349    * ------ Print some spaces ------
0000121C  4BF9 00002402            350    LEA     PRINT_FOURSPACE,A5    * Load the print subroutine into temp
00001222  2F0D                     351    MOVE.L  A5, -(SP)             * Put the print subroutine jump onto the stack
00001224  5878 1008                352    ADD.W   #4,PRINT_COUNT
00001228                           353  
00001228                           354    * ------ Dn,An,(An)+,-(An) are not allowed ------
00001228  4280                     355    CLR.L   D0
0000122A  1007                     356    MOVE.B  D7,D0 * Put opcode in D0
0000122C  C03C 0038                357    AND.B   #$38,D0   * Mask D0 with 0111000 to get MODE bits only
00001230  E600                     358    ASR.B   #3,D0 * Shift the result so D0 ranges between 000 and 111
00001232                           359  
00001232  B03C 0000                360    CMP.B   #0,D0         *000 -> Register
00001236  6700 11FA                361    BEQ     PRINT_ILLEGAL
0000123A  B03C 0001                362    CMP.B   #1,D0         *001 -> Address Register
0000123E  6700 11F2                363    BEQ     PRINT_ILLEGAL
00001242  B03C 0003                364    CMP.B   #3,D0         *011 -> Address Register  (Indirect)+
00001246  6700 11EA                365    BEQ     PRINT_ILLEGAL
0000124A  B03C 0004                366    CMP.B   #4,D0         *100 -> Address Register -(Indirect)
0000124E  6700 11E2                367    BEQ     PRINT_ILLEGAL
00001252                           368  
00001252                           369    * ------ Print the effective address ------
00001252  2C07                     370    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001254  4EB9 00001DEE            371    JSR     PUSH_EA_MODE_ID
0000125A                           372  
0000125A                           373  * ------ Print a comma ------
0000125A  4BF9 00002422            374    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001260  2F0D                     375    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001262  5878 1008                376    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001266                           377  
00001266                           378  * ------ Get Destination Address ------
00001266  2007                     379    MOVE.L    D7,D0
00001268  E058                     380    ROR.W     #$8,D0 * Get the three register bits
0000126A  E258                     381    ROR.W     #$1,D0
0000126C  C07C 0007                382    AND.W     #$7,D0 * Mask 111
00001270                           383  
00001270  13C0 00002B92            384    MOVE.B    D0,MISC_NUMBER
00001276                           385  
00001276                           386  * ------ Print Destination Address ------
00001276  4BF9 00002000            387    LEA       PRINT_MISC_NUMBER_AS_ADDRESS,A5
0000127C  2F0D                     388    MOVE.L    A5, -(SP)       * Put the print subroutine jump onto the stack
0000127E  5878 1008                389    ADD.W     #4,PRINT_COUNT
00001282                           390  
00001282                           391  
00001282  5478 1010                392    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
00001286                           393  
00001286  6000 0B3A                394    BRA   PRINT_OPCODE
0000128A                           395  
0000128A                           396  
0000128A                           397  *-------------------------------------------------------------------------------
0000128A                           398  * NOT
0000128A                           399  *
0000128A                           400  * "NOT" -> <.Size> -> <ea>
0000128A                           401  *
0000128A                           402  * Effective address does not allow An
0000128A                           403  *-------------------------------------------------------------------------------
0000128A                           404  NOT
0000128A                           405  
0000128A                           406  * ------ Print "NOT" ------
0000128A  4BF9 000023E2            407    LEA     PRINT_NOT,A5    * Load the print subroutine into intermediate address
00001290  2F0D                     408    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001292  5878 1008                409    ADD.W   #4,PRINT_COUNT
00001296                           410  
00001296                           411    * ------ Print size ------
00001296  4280                     412      CLR.L   D0
00001298  2007                     413      MOVE.L  D7,D0
0000129A                           414  
0000129A  EC58                     415      ROR.W   #06,D0     * Get bits 7,6 on end
0000129C  C03C 0003                416      AND.B   #03,D0     * Isolate bits 7,6
000012A0                           417  
000012A0  1800                     418      MOVE.B   D0,D4      * Move bits 7,6 to D4 for BWL
000012A2  4EB9 00001EC8            419      JSR      PUSH_BWL
000012A8                           420  
000012A8                           421  
000012A8                           422    * ------ An is not allowed ------
000012A8  4280                     423    CLR.L   D0
000012AA  1007                     424    MOVE.B  D7,D0 * Put opcode in D0
000012AC  C03C 0038                425    AND.B   #$38,D0   * Mask D0 with 0111000 to get MODE bits only
000012B0  E600                     426    ASR.B   #3,D0 * Shift the result so D0 ranges between 000 and 111
000012B2                           427  
000012B2  B03C 0001                428    CMP.B   #1,D0         *001 -> Address Register
000012B6  6700 117A                429    BEQ     PRINT_ILLEGAL
000012BA                           430  
000012BA                           431    * ------ Print the effective address ------
000012BA  2C07                     432    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
000012BC  4EB9 00001DEE            433    JSR     PUSH_EA_MODE_ID
000012C2                           434  
000012C2  5478 1010                435    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
000012C6                           436  
000012C6  6000 0AFA                437    BRA   PRINT_OPCODE
000012CA                           438  
000012CA                           439  
000012CA                           440  *-------------------------------------------------------------------------------
000012CA                           441  * AND
000012CA                           442  *
000012CA                           443  *-------------------------------------------------------------------------------
000012CA                           444  AND
000012CA                           445  
000012CA                           446  * ------ Print "AND" ------
000012CA  4BF9 000021CA            447    LEA     PRINT_AND,A5    * Load the print subroutine into intermediate address
000012D0  2F0D                     448    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000012D2  5878 1008                449    ADD.W   #4,PRINT_COUNT
000012D6                           450  
000012D6                           451  * ------ Print size ------
000012D6  4280                     452    CLR.L    D0
000012D8  2007                     453    MOVE.L   D7,D0
000012DA                           454  
000012DA  EC58                     455    ROR.W    #06,D0     * Get bits 7,6 on end
000012DC  C03C 0003                456    AND.B    #03,D0     * Isolate bits 7,6
000012E0                           457  
000012E0  1800                     458    MOVE.B   D0,D4     * Move bits 7,6 to D4 for BWL
000012E2  4EB9 00001EC8            459    JSR      PUSH_BWL
000012E8                           460  
000012E8                           461  * ------ Reset D0, determine order ------
000012E8  2007                     462    MOVE.L  D7,D0
000012EA  E058                     463    ROR.W   #08,D0     * Get bit 8 on the end
000012EC  C07C 0001                464    AND.W   #1,D0
000012F0                           465  
000012F0                           466    * If bit 8 == 0 the order is <ea> AND Dn
000012F0                           467    * If bit 8 == 1 the order is Dn AND <ea>
000012F0                           468  
000012F0  B03C 0001                469    CMP.B   #1,D0
000012F4  6700 004C                470    BEQ     AND_DN_FIRST
000012F8                           471  
000012F8                           472  * ------ Print order is effective address, data register ------
000012F8                           473  AND_EA_FIRST
000012F8                           474  
000012F8                           475    * ------ An is not allowed ------
000012F8  4280                     476    CLR.L   D0
000012FA  1007                     477    MOVE.B  D7,D0 * Put opcode in D0
000012FC  C03C 0038                478    AND.B   #$38,D0   * Mask D0 with 0111000 to get MODE bits only
00001300  E600                     479    ASR.B   #3,D0 * Shift the result so D0 ranges between 000 and 111
00001302                           480  
00001302  B03C 0001                481    CMP.B   #1,D0         *001 -> Address Register
00001306  6700 112A                482    BEQ     PRINT_ILLEGAL
0000130A                           483  
0000130A                           484    * ------ Print the effective address ------
0000130A  2C07                     485    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
0000130C  4EB9 00001DEE            486    JSR     PUSH_EA_MODE_ID
00001312                           487  
00001312                           488    * ------ Print a comma ------
00001312  4BF9 00002422            489    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001318  2F0D                     490    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000131A  5878 1008                491    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000131E                           492  
0000131E                           493    * ------ Determine the register number ------
0000131E  2007                     494    MOVE.L  D7,D0
00001320  E058                     495    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
00001322  E258                     496    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
00001324  C07C 0007                497    AND.W   #7,D0 * Mask against 111 to only get 3 bits
00001328                           498  
00001328                           499    * ------ Print the register number ------
00001328  13C0 00002B92            500    MOVE.B  D0,MISC_NUMBER
0000132E  4BF9 00002026            501    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
00001334  2F0D                     502    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001336  5878 1008                503    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000133A                           504  
0000133A  5478 1010                505    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
0000133E                           506  
0000133E  6000 0A82                507    BRA   PRINT_OPCODE
00001342                           508  
00001342                           509  
00001342                           510  * ------ Print order is data register, effective address ------
00001342                           511  AND_DN_FIRST
00001342                           512  
00001342                           513  
00001342                           514    * ------ Determine the register number ------
00001342  2007                     515    MOVE.L  D7,D0
00001344  E058                     516    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
00001346  E258                     517    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
00001348  C07C 0007                518    AND.W   #7,D0 * Mask against 111 to only get 3 bits
0000134C                           519  
0000134C                           520    * ------ Print the register number ------
0000134C  13C0 00002B92            521    MOVE.B  D0,MISC_NUMBER
00001352  4BF9 00002026            522    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
00001358  2F0D                     523    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000135A  5878 1008                524    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000135E                           525  
0000135E                           526    * ------ Print a comma ------
0000135E  4BF9 00002422            527    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001364  2F0D                     528    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001366  5878 1008                529    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000136A                           530  
0000136A                           531    * ------ Print the effective address ------
0000136A  2C07                     532    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
0000136C  4EB9 00001DEE            533    JSR     PUSH_EA_MODE_ID
00001372                           534  
00001372  5478 1010                535    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
00001376                           536  
00001376  6000 0A4A                537    BRA   PRINT_OPCODE
0000137A                           538  
0000137A                           539  
0000137A                           540  *-------------------------------------------------------------------------------
0000137A                           541  * OR
0000137A                           542  *
0000137A                           543  *
0000137A                           544  *-------------------------------------------------------------------------------
0000137A                           545  OR
0000137A                           546  
0000137A                           547  * ------ Print "OR" ------
0000137A  4BF9 000021DA            548    LEA     PRINT_OR,A5    * Load the print subroutine into intermediate address
00001380  2F0D                     549    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001382  5878 1008                550    ADD.W   #4,PRINT_COUNT
00001386                           551  
00001386                           552  * ------ Print size ------
00001386  4280                     553    CLR.L   D0
00001388  2007                     554    MOVE.L  D7,D0
0000138A                           555  
0000138A  EC58                     556    ROR.W   #06,D0     * Get bits 7,6 on end
0000138C  C03C 0003                557    AND.B   #03,D0     * Isolate bits 7,6
00001390                           558  
00001390  1800                     559    MOVE.B   D0,D4            * Move bits 7,6 to D4 for BWL
00001392  4EB9 00001EC8            560    JSR      PUSH_BWL
00001398                           561  
00001398                           562  * ------ Reset D0, determine order ------
00001398  2007                     563    MOVE.L  D7,D0
0000139A  E058                     564    ROR.W   #08,D0     * Get bit 8 on the end
0000139C  C07C 0001                565    AND.W   #1,D0
000013A0                           566  
000013A0                           567    * If bit 8 == 0 the order is <ea> OR Dn
000013A0                           568    * If bit 8 == 1 the order is Dn OR <ea>
000013A0                           569  
000013A0                           570  
000013A0  B03C 0001                571    CMP.B   #1,D0
000013A4  6700 004C                572    BEQ     OR_DN_FIRST
000013A8                           573  
000013A8                           574  * ------ Print order is effective address, data register ------
000013A8                           575  OR_EA_FIRST
000013A8                           576  
000013A8                           577    * ------ An is not allowed ------
000013A8  4280                     578    CLR.L   D0
000013AA  1007                     579    MOVE.B  D7,D0 * Put opcode in D0
000013AC  C03C 0038                580    AND.B   #$38,D0   * Mask D0 with 0111000 to get MODE bits only
000013B0  E600                     581    ASR.B   #3,D0 * Shift the result so D0 ranges between 000 and 111
000013B2                           582  
000013B2  B03C 0001                583    CMP.B   #1,D0         *001 -> Address Register
000013B6  6700 107A                584    BEQ     PRINT_ILLEGAL
000013BA                           585  
000013BA                           586    * ------ Print the effective address ------
000013BA  2C07                     587    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
000013BC  4EB9 00001DEE            588    JSR     PUSH_EA_MODE_ID
000013C2                           589  
000013C2                           590    * ------ Print a comma ------
000013C2  4BF9 00002422            591    LEA     PRINT_COMMA,A5   * Load the print subroutine
000013C8  2F0D                     592    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000013CA  5878 1008                593    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000013CE                           594  
000013CE                           595    * ------ Determine the register number ------
000013CE  2007                     596    MOVE.L  D7,D0
000013D0  E058                     597    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
000013D2  E258                     598    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
000013D4  C07C 0007                599    AND.W   #7,D0 * Mask against 111 to only get 3 bits
000013D8                           600  
000013D8                           601    * ------ Print the register number ------
000013D8  13C0 00002B92            602    MOVE.B  D0,MISC_NUMBER
000013DE  4BF9 00002026            603    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
000013E4  2F0D                     604    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000013E6  5878 1008                605    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000013EA                           606  
000013EA  5478 1010                607    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
000013EE                           608  
000013EE  6000 09D2                609    BRA   PRINT_OPCODE
000013F2                           610  
000013F2                           611  
000013F2                           612  * ------ Print order is data register, effective address ------
000013F2                           613  OR_DN_FIRST
000013F2                           614  
000013F2                           615  
000013F2                           616    * ------ Determine the register number ------
000013F2  2007                     617    MOVE.L  D7,D0
000013F4  E058                     618    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
000013F6  E258                     619    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
000013F8  C07C 0007                620    AND.W   #7,D0 * Mask against 111 to only get 3 bits
000013FC                           621  
000013FC                           622    * ------ Print the register number ------
000013FC  13C0 00002B92            623    MOVE.B  D0,MISC_NUMBER
00001402  4BF9 00002026            624    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
00001408  2F0D                     625    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000140A  5878 1008                626    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000140E                           627  
0000140E                           628    * ------ Print a comma ------
0000140E  4BF9 00002422            629    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001414  2F0D                     630    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001416  5878 1008                631    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000141A                           632  
0000141A                           633    * ------ Print the effective address ------
0000141A  2C07                     634    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
0000141C  4EB9 00001DEE            635    JSR     PUSH_EA_MODE_ID
00001422                           636  
00001422  5478 1010                637    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
00001426                           638  
00001426  6000 099A                639    BRA   PRINT_OPCODE
0000142A                           640  
0000142A                           641  
0000142A                           642  
0000142A                           643  
0000142A                           644  *-------------------------------------------------------------------------------
0000142A                           645  * SUB
0000142A                           646  *
0000142A                           647  *
0000142A                           648  *-------------------------------------------------------------------------------
0000142A                           649  SUB
0000142A                           650  
0000142A                           651  * ------ Print "SUB" ------
0000142A  4BF9 000021BA            652    LEA     PRINT_SUB,A5    * Load the print subroutine into intermediate address
00001430  2F0D                     653    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001432  5878 1008                654    ADD.W   #4,PRINT_COUNT
00001436                           655  
00001436                           656  * ------ Print size ------
00001436  4280                     657    CLR.L   D0
00001438  2007                     658    MOVE.L  D7,D0
0000143A                           659  
0000143A  EC58                     660    ROR.W   #06,D0     * Get bits 7,6 on end
0000143C  C07C 0003                661    AND.W   #03,D0     * Isolate bits 7,6
00001440                           662  
00001440  1800                     663    MOVE.B   D0,D4            * Move bits 7,6 to D4 for BWL
00001442  4EB9 00001EC8            664    JSR      PUSH_BWL
00001448                           665  
00001448                           666  * ------ Reset D0, determine order ------
00001448  2007                     667    MOVE.L  D7,D0
0000144A  E058                     668    ROR.W   #08,D0     * Get bit 8 on the end
0000144C  C07C 0001                669    AND.W   #1,D0
00001450                           670  
00001450                           671    * If bit 8 == 0 the order is Dn - <ea>
00001450                           672    * If bit 8 == 1 the order is <ea> - Dn
00001450                           673  
00001450  B03C 0000                674    CMP.B   #0,D0
00001454  6700 003A                675    BEQ     SUB_DN_FIRST
00001458                           676  
00001458                           677  * ------ Print order is effective address, data register ------
00001458                           678  SUB_EA_FIRST
00001458                           679  
00001458                           680  
00001458                           681    * ------ Print the effective address ------
00001458  2C07                     682    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
0000145A  4EB9 00001DEE            683    JSR     PUSH_EA_MODE_ID
00001460                           684  
00001460                           685    * ------ Print a comma ------
00001460  4BF9 00002422            686    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001466  2F0D                     687    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001468  5878 1008                688    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000146C                           689  
0000146C                           690    * ------ Determine the register number ------
0000146C  2007                     691    MOVE.L  D7,D0
0000146E  E058                     692    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
00001470  E258                     693    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
00001472  C07C 0007                694    AND.W   #7,D0 * Mask against 111 to only get 3 bits
00001476                           695  
00001476                           696    * ------ Print the register number ------
00001476  13C0 00002B92            697    MOVE.B  D0,MISC_NUMBER
0000147C  4BF9 00002026            698    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
00001482  2F0D                     699    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001484  5878 1008                700    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001488                           701  
00001488  5478 1010                702    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
0000148C                           703  
0000148C  6000 0934                704    BRA   PRINT_OPCODE
00001490                           705  
00001490                           706  
00001490                           707  * ------ Print order is data register, effective address ------
00001490                           708  SUB_DN_FIRST
00001490                           709  
00001490                           710  
00001490                           711    * ------ Determine the register number ------
00001490  2007                     712    MOVE.L  D7,D0
00001492  E058                     713    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
00001494  E258                     714    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
00001496  C07C 0007                715    AND.W   #7,D0 * Mask against 111 to only get 3 bits
0000149A                           716  
0000149A                           717    * ------ Print the register number ------
0000149A  13C0 00002B92            718    MOVE.B  D0,MISC_NUMBER
000014A0  4BF9 00002026            719    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
000014A6  2F0D                     720    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000014A8  5878 1008                721    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000014AC                           722  
000014AC                           723    * ------ Print a comma ------
000014AC  4BF9 00002422            724    LEA     PRINT_COMMA,A5   * Load the print subroutine
000014B2  2F0D                     725    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000014B4  5878 1008                726    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000014B8                           727  
000014B8                           728    * ------ Print the effective address ------
000014B8  2C07                     729    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
000014BA  4EB9 00001DEE            730    JSR     PUSH_EA_MODE_ID
000014C0                           731  
000014C0  5478 1010                732    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
000014C4                           733  
000014C4  6000 08FC                734    BRA   PRINT_OPCODE
000014C8                           735  
000014C8                           736  
000014C8                           737  
000014C8                           738  
000014C8                           739  
000014C8                           740  
000014C8                           741  *-------------------------------------------------------------------------------
000014C8                           742  * MOVEM
000014C8                           743  *
000014C8                           744  *
000014C8                           745  *-------------------------------------------------------------------------------
000014C8                           746  MOVEM
000014C8                           747  
000014C8                           748  * ------ Check for ILLEGAL ------
000014C8                           749  * Bits 7-9 must equal 001
000014C8  4280                     750    CLR.L   D0
000014CA  3007                     751    MOVE.W  D7,D0
000014CC                           752  
000014CC  EE58                     753    ROR.W   #7,D0 * Shift to bit 7
000014CE  C07C 0007                754    AND.W   #7,D0 * Mask 111
000014D2                           755  
000014D2  B03C 0001                756    CMP.B   #1,D0
000014D6  6600 0F5A                757    BNE     PRINT_ILLEGAL
000014DA                           758  
000014DA                           759  
000014DA                           760  * ------ Put List Mask in MISC_OPCODE ------
000014DA  2038 1016                761    MOVE.L    DATA1,D0
000014DE  4840                     762    SWAP      D0
000014E0  33C0 00002B94            763    MOVE.W    D0,MISC_OPCODE
000014E6                           764  
000014E6                           765  * ------ Shift so DATA1 is standard ------
000014E6                           766  * The Effective Address Subroutine expects data in DATA1
000014E6                           767  * So we've moved the List Mask to MISC_OPCODE
000014E6                           768  * and shifted everything back 1 word so it fits nicely
000014E6                           769  
000014E6  2238 101C                770    MOVE.L    DATA2,D1
000014EA  4841                     771    SWAP      D1
000014EC                           772  
000014EC  3001                     773    MOVE.W    D1,D0
000014EE  21C0 1016                774    MOVE.L    D0,DATA1
000014F2                           775  
000014F2                           776  * ------ Print "MOVEM" ------
000014F2                           777  
000014F2  4BF9 000021AA            778    LEA     PRINT_MOVEM,A5
000014F8  2F0D                     779    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000014FA  5878 1008                780    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000014FE                           781  
000014FE                           782  * ------ Get Size Bit ------
000014FE  4280                     783    CLR.L   D0
00001500  3007                     784    MOVE.W  D7,D0
00001502                           785  
00001502  EC58                     786    ROR.W   #6,D0 * Bit 6 is size bit
00001504  C07C 0001                787    AND.W   #1,D0 * Mask 0001
00001508                           788  
00001508                           789  * ------ Size Branching ------
00001508  B03C 0000                790    CMP.B   #0,D0 * 0 = Word
0000150C  6700 0016                791    BEQ     MOVEM_SIZE_WORD
00001510  6600 0002                792    BNE     MOVEM_SIZE_LONG
00001514                           793  
00001514                           794  * ------ Print ".L" ------
00001514                           795  MOVEM_SIZE_LONG
00001514                           796  
00001514  4BF9 0000220A            797    LEA     PRINT_LONG_DESIGNATOR,A5 * Load the ".L" print subroutine
0000151A  2F0D                     798    MOVE.L  A5, -(SP)       * Put the subroutine onto the stack
0000151C  5878 1008                799    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001520                           800  
00001520  6000 0012                801    BRA   MOVEM_SIZE_CONTINUE
00001524                           802  
00001524                           803  * ------ Print ".W" ------
00001524                           804  MOVEM_SIZE_WORD
00001524                           805  
00001524  4BF9 000021FA            806    LEA     PRINT_WORD_DESIGNATOR,A5 * Load the ".W" print subroutine
0000152A  2F0D                     807    MOVE.L  A5, -(SP)         * Put the subroutine onto the stack
0000152C  5878 1008                808    ADD.W   #4,PRINT_COUNT    * Increment Print Count by 1 long
00001530                           809  
00001530  6000 0002                810    BRA   MOVEM_SIZE_CONTINUE
00001534                           811  
00001534                           812  MOVEM_SIZE_CONTINUE
00001534                           813  
00001534                           814  * ------ Get the direction bit ------
00001534  4280                     815    CLR.L   D0
00001536  3007                     816    MOVE.W  D7,D0
00001538                           817  
00001538  E058                     818    ROR.W   #8,D0   * Get bit 10
0000153A  E458                     819    ROR.W   #2,D0
0000153C                           820  
0000153C  C07C 0001                821    AND.W   #1,D0   * Mask 0000 0001
00001540                           822  
00001540  B03C 0001                823    CMP.B   #1,D0
00001544  6700 0006                824    BEQ     MOVEM_MEM2REG * If direction bit is 1, do memory -> register(s)
00001548                           825  
00001548  6000 009E                826    BRA     MOVEM_REG2MEM * else, do register(s) -> memory
0000154C                           827  
0000154C                           828  
0000154C                           829  *-------------------------------------------------------------------------------
0000154C                           830  * MOVEM_MEM2REG
0000154C                           831  *
0000154C                           832  * • Do modified EA_MODE first
0000154C                           833  *   • (An), (An)+, (xxx).W, (xxx).L only!
0000154C                           834  * • Then push MOVEM register print
0000154C                           835  *-------------------------------------------------------------------------------
0000154C                           836  MOVEM_MEM2REG
0000154C                           837  
0000154C                           838  
0000154C                           839  * ---- Custom Branching Block ----
0000154C  4280                     840    CLR.L     D0
0000154E  4286                     841    CLR.L     D6
00001550  1007                     842    MOVE.B    D7,D0 * Copy opcode into local variable
00001552  3C07                     843    MOVE.W    D7,D6
00001554                           844  
00001554  C03C 0038                845    AND.B     #$38,D0 * Mask D0 with 0111000 to get MODE bits only
00001558  E600                     846    ASR.B     #3,D0   * Shift the result so D0 ranges between 000 and 111
0000155A  1200                     847    MOVE.B    D0,D1 * Save result for later.
0000155C                           848  
0000155C  B03C 0002                849    CMP.B     #2,D0
00001560  6700 0032                850    BEQ       MOVEM_MEM2REG_AN_IND
00001564  B03C 0003                851    CMP.B     #3,D0
00001568  6700 0034                852    BEQ       MOVEM_MEM2REG_POST_INC
0000156C  B03C 0007                853    CMP.B     #7,D0
00001570  6700 0006                854    BEQ       MOVEM_MEM2REG_ELSE
00001574                           855  
00001574  6000 0EBC                856    BRA       PRINT_ILLEGAL
00001578                           857  
00001578                           858  MOVEM_MEM2REG_ELSE
00001578                           859  
00001578  4280                     860    CLR.L   D0
0000157A  1007                     861    MOVE.B  D7,D0
0000157C  C03C 0007                862    AND.B   #7,D0
00001580                           863  
00001580  B03C 0000                864    CMP.B   #0,D0
00001584  6700 0022                865    BEQ     MOVEM_MEM2REG_IND_SHORT
00001588  B03C 0001                866    CMP.B   #1,D0
0000158C  6700 0024                867    BEQ     MOVEM_MEM2REG_IND_LONG
00001590                           868  
00001590  6000 0EA0                869    BRA     PRINT_ILLEGAL
00001594                           870  
00001594                           871  *________________________________________
00001594                           872  * Jump directly into the middle of
00001594                           873  * the PUSH_EA_MODE subroutine
00001594                           874  *----------------------------------------
00001594                           875  MOVEM_MEM2REG_AN_IND
00001594                           876  
00001594  4EB9 00001E3E            877    JSR     PUSH_EA_MODE_ID_AN_INDIRECT
0000159A  6000 0020                878    BRA     MOVEM_MEM2REG_EA_FINISH
0000159E                           879  *________________________________________
0000159E                           880  * Jump directly into the middle of
0000159E                           881  * the PUSH_EA_MODE subroutine
0000159E                           882  *----------------------------------------
0000159E                           883  MOVEM_MEM2REG_POST_INC
0000159E                           884  
0000159E  4EB9 00001E48            885    JSR     PUSH_EA_MODE_ID_AN_POST_INC
000015A4  6000 0016                886    BRA     MOVEM_MEM2REG_EA_FINISH
000015A8                           887  
000015A8                           888  *________________________________________
000015A8                           889  * Jump directly into the middle of
000015A8                           890  * the PUSH_EA_MODE subroutine
000015A8                           891  *----------------------------------------
000015A8                           892  MOVEM_MEM2REG_IND_SHORT
000015A8                           893  
000015A8  4EB9 00001E7E            894    JSR   PUSH_EA_MODE_ID_IND_SHORT
000015AE  6000 000C                895    BRA   MOVEM_MEM2REG_EA_FINISH
000015B2                           896  
000015B2                           897  *________________________________________
000015B2                           898  * Jump directly into the middle of
000015B2                           899  * the PUSH_EA_MODE subroutine
000015B2                           900  *----------------------------------------
000015B2                           901  MOVEM_MEM2REG_IND_LONG
000015B2                           902  
000015B2  4EB9 00001E92            903    JSR   PUSH_EA_MODE_ID_IND_LONG
000015B8  6000 0002                904    BRA     MOVEM_MEM2REG_EA_FINISH
000015BC                           905  
000015BC                           906  *________________________________________
000015BC                           907  * Jump directly into the middle of
000015BC                           908  * the PUSH_EA_MODE subroutine
000015BC                           909  *----------------------------------------
000015BC                           910  MOVEM_MEM2REG_EA_FINISH
000015BC                           911  
000015BC  4BF9 00002422            912    LEA     PRINT_COMMA,A5   * Load the print subroutine
000015C2  2F0D                     913    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000015C4  5878 1008                914    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000015C8                           915  
000015C8  4BF9 00002412            916    LEA     PRINT_SPACE,A5   * Load the print subroutine
000015CE  2F0D                     917    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000015D0  5878 1008                918    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000015D4                           919  
000015D4  4BF9 000024A0            920    LEA     PRINT_MOVEM_STANDARD,A5   * Load the print subroutine
000015DA  2F0D                     921    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000015DC  5878 1008                922    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000015E0                           923  
000015E0                           924  
000015E0  5878 1010                925    ADD.W  #4,LOOP_INC     * Increment the loop counter by 2 bytes
000015E4                           926  
000015E4  6000 07DC                927    BRA   PRINT_OPCODE
000015E8                           928  
000015E8                           929  
000015E8                           930  *-------------------------------------------------------------------------------
000015E8                           931  * MOVEM_REG2MEM
000015E8                           932  *
000015E8                           933  * • Push MOVEM register print first
000015E8                           934  * • Then do modified EA_MODE
000015E8                           935  *     • (An), -(An), (xxx).W, (xxx.L) only!
000015E8                           936  *
000015E8                           937  *-------------------------------------------------------------------------------
000015E8                           938  MOVEM_REG2MEM
000015E8                           939  
000015E8                           940  
000015E8                           941    * ---- Custom Branching Block ----
000015E8  4280                     942      CLR.L     D0
000015EA  4286                     943      CLR.L     D6
000015EC  1007                     944      MOVE.B    D7,D0 * Copy opcode into local variable
000015EE  3C07                     945      MOVE.W    D7,D6
000015F0                           946  
000015F0  C03C 0038                947      AND.B     #$38,D0 * Mask D0 with 0111000 to get MODE bits only
000015F4  E600                     948      ASR.B     #3,D0 * Shift the result so D0 ranges between 000 and 111
000015F6                           949  
000015F6  B03C 0002                950      CMP.B     #2,D0
000015FA  6700 0032                951      BEQ       MOVEM_REG2MEM_AN_IND
000015FE  B03C 0004                952      CMP.B     #4,D0
00001602  6700 0040                953      BEQ       MOVEM_REG2MEM_PRE_DEC
00001606  B03C 0007                954      CMP.B     #7,D0
0000160A  6700 0006                955      BEQ       MOVEM_REG2MEM_ELSE
0000160E                           956  
0000160E  6000 0E22                957      BRA       PRINT_ILLEGAL
00001612                           958  
00001612                           959  MOVEM_REG2MEM_ELSE
00001612                           960  
00001612  4280                     961      CLR.L   D0
00001614  1007                     962      MOVE.B  D7,D0
00001616  C03C 0007                963      AND.B   #7,D0
0000161A                           964  
0000161A  B03C 0000                965      CMP.B   #0,D0
0000161E  6700 003A                966      BEQ     MOVEM_REG2MEM_IND_SHORT
00001622  B03C 0001                967      CMP.B   #1,D0
00001626  6700 0048                968      BEQ     MOVEM_REG2MEM_IND_LONG
0000162A                           969  
0000162A  6000 0E06                970      BRA     PRINT_ILLEGAL
0000162E                           971  
0000162E                           972  *________________________________________
0000162E                           973  * Jump directly into the middle of
0000162E                           974  * the PUSH_EA_MODE subroutine
0000162E                           975  *----------------------------------------
0000162E                           976  MOVEM_REG2MEM_AN_IND
0000162E                           977  
0000162E  4BF9 000024A0            978      LEA     PRINT_MOVEM_STANDARD,A5   * Load the print subroutine
00001634  2F0D                     979      MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001636  5878 1008                980      ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000163A                           981  
0000163A  4EB9 00001E3E            982      JSR     PUSH_EA_MODE_ID_AN_INDIRECT
00001640  6000 0044                983      BRA     MOVEM_REG2MEM_EA_FINISH
00001644                           984  *________________________________________
00001644                           985  * Jump directly into the middle of
00001644                           986  * the PUSH_EA_MODE subroutine
00001644                           987  *----------------------------------------
00001644                           988  MOVEM_REG2MEM_PRE_DEC
00001644                           989  
00001644  4BF9 00002638            990      LEA     PRINT_MOVEM_REVERSE,A5   * Load the print subroutine
0000164A  2F0D                     991      MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000164C  5878 1008                992      ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001650                           993  
00001650  4EB9 00001E52            994      JSR     PUSH_EA_MODE_ID_AN_PRE_DEC
00001656  6000 002E                995      BRA     MOVEM_REG2MEM_EA_FINISH
0000165A                           996  
0000165A                           997  *________________________________________
0000165A                           998  * Jump directly into the middle of
0000165A                           999  * the PUSH_EA_MODE subroutine
0000165A                          1000  *----------------------------------------
0000165A                          1001  MOVEM_REG2MEM_IND_SHORT
0000165A                          1002  
0000165A  4BF9 000024A0           1003      LEA     PRINT_MOVEM_STANDARD,A5   * Load the print subroutine
00001660  2F0D                    1004      MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001662  5878 1008               1005      ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001666                          1006  
00001666                          1007  
00001666  4EB9 00001E7E           1008      JSR   PUSH_EA_MODE_ID_IND_SHORT
0000166C  6000 0018               1009      BRA   MOVEM_REG2MEM_EA_FINISH
00001670                          1010  
00001670                          1011  *________________________________________
00001670                          1012  * Jump directly into the middle of
00001670                          1013  * the PUSH_EA_MODE subroutine
00001670                          1014  *----------------------------------------
00001670                          1015  MOVEM_REG2MEM_IND_LONG
00001670                          1016  
00001670  4BF9 000024A0           1017      LEA     PRINT_MOVEM_STANDARD,A5   * Load the print subroutine
00001676  2F0D                    1018      MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001678  5878 1008               1019      ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000167C                          1020  
0000167C  4EB9 00001E92           1021      JSR   PUSH_EA_MODE_ID_IND_LONG
00001682  6000 0002               1022      BRA     MOVEM_REG2MEM_EA_FINISH
00001686                          1023  
00001686                          1024  *________________________________________
00001686                          1025  * Jump directly into the middle of
00001686                          1026  * the PUSH_EA_MODE subroutine
00001686                          1027  *----------------------------------------
00001686                          1028  MOVEM_REG2MEM_EA_FINISH
00001686                          1029  
00001686  5878 1010               1030    ADD.W  #4,LOOP_INC     * Increment the loop counter by 2 bytes
0000168A                          1031  
0000168A  6000 0736               1032    BRA   PRINT_OPCODE
0000168E                          1033  
0000168E                          1034  
0000168E                          1035  *-------------------------------------------------------------------------------
0000168E                          1036  * MOVEQ
0000168E                          1037  * Assumption: Bit 8 is checked for zero so this subroutine is always valid
0000168E                          1038  *
0000168E                          1039  *-------------------------------------------------------------------------------
0000168E                          1040  MOVEQ
0000168E                          1041  
0000168E  4280                    1042    CLR.L   D0
00001690  3007                    1043    MOVE.W  D7,D0
00001692                          1044  
00001692                          1045  * ------ Print "MOVEQ" ------
00001692                          1046  
00001692  4BF9 0000219A           1047    LEA     PRINT_MOVEQ,A5
00001698  2F0D                    1048    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000169A  5878 1008               1049    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000169E                          1050  
0000169E                          1051  * ------ Print Data ------
0000169E                          1052  
0000169E  C07C 00FF               1053    AND.W   #$FF,D0 * Get bits 0-7
000016A2  13C0 00002B92           1054    MOVE.B  D0,MISC_NUMBER
000016A8                          1055  
000016A8  4BF9 00002144           1056    LEA     PRINT_MISC_NUMBER_AS_DATA,A5   * Load the print subroutine
000016AE  2F0D                    1057    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000016B0  5878 1008               1058    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000016B4                          1059  
000016B4                          1060  * ------ Print a comma ------
000016B4  4BF9 00002422           1061    LEA     PRINT_COMMA,A5   * Load the print subroutine
000016BA  2F0D                    1062    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000016BC  5878 1008               1063    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000016C0                          1064  
000016C0                          1065  * ------ Print Register ------
000016C0                          1066  
000016C0  3007                    1067    MOVE.W  D7,D0
000016C2  E058                    1068    ROR.W   #8,D0 *Shift to get bits 9 - 11
000016C4  E258                    1069    ROR.W   #1,D0
000016C6                          1070  
000016C6  C07C 0007               1071    AND.W   #7,D0 * Mask 111
000016CA  13C0 00002B96           1072    MOVE.B  D0,MISC_REGISTER
000016D0                          1073  
000016D0  4BF9 0000204C           1074    LEA     PRINT_MISC_REGISTER,A5   * Load the print subroutine
000016D6  2F0D                    1075    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000016D8  5878 1008               1076    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000016DC                          1077  
000016DC  5478 1010               1078    ADD.W  #2,LOOP_INC     * Increment the loop counter by 2 bytes
000016E0                          1079  
000016E0  6000 06E0               1080    BRA   PRINT_OPCODE
000016E4                          1081  
000016E4                          1082  
000016E4                          1083  
000016E4                          1084  
000016E4                          1085  *-------------------------------------------------------------------------------
000016E4                          1086  * MOVE_MOVEA
000016E4                          1087  *
000016E4                          1088  * Both opcodes start with 00 so we need to figure out which is which
000016E4                          1089  *-------------------------------------------------------------------------------
000016E4                          1090  MOVE_MOVEA
000016E4  4280                    1091      CLR.L   D0
000016E6  3007                    1092      MOVE.W  D7,D0
000016E8                          1093  
000016E8  EC58                    1094      ROR     #$6,D0    *Get bits 6, 7, and 8
000016EA  0200 0007               1095      ANDI.B  #$07,D0   * Mask against 111
000016EE                          1096  
000016EE  0C00 0001               1097      CMPI.B  #1,D0     * If bits equal 001, it's MOVEA
000016F2  6700 015A               1098      BEQ     MOVEA
000016F6                          1099  
000016F6  6000 0002               1100      BRA     MOVE      * Else it's MOVE
000016FA                          1101  
000016FA                          1102  *-------------------------------------------------------------------------------
000016FA                          1103  * MOVE
000016FA                          1104  *
000016FA                          1105  * This hurts me
000016FA                          1106  *
000016FA                          1107  *-------------------------------------------------------------------------------
000016FA                          1108  MOVE
000016FA                          1109  
000016FA  2007                    1110    MOVE.L    D7,D0 * Load the print subroutine into intermediate address
000016FC                          1111  
000016FC                          1112  * ------ Print "MOVE" ------
000016FC                          1113  
000016FC  4BF9 0000217A           1114    LEA       PRINT_MOVE,A5
00001702  2F0D                    1115    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001704  5878 1008               1116    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001708                          1117  
00001708                          1118  * ------ Determine Size ------
00001708  E058                    1119    ROR.W   #$8,D0 * Shift a total of 12 bits to retrieve SIZE designator
0000170A  E858                    1120    ROR.W   #$4,D0
0000170C  C07C 0007               1121    AND.W   #$7,D0 * Mask 111
00001710                          1122  
00001710  4284                    1123    CLR.L   D4 * Clear D4 for use as BWL parameter
00001712                          1124  
00001712  B03C 0001               1125    CMP.B   #1,D0
00001716  6700 0016               1126    BEQ     MOVE_B
0000171A  B03C 0003               1127    CMP.B   #3,D0
0000171E  6700 001C               1128    BEQ     MOVE_W
00001722  B03C 0002               1129    CMP.B   #2,D0
00001726  6700 0022               1130    BEQ     MOVE_L
0000172A                          1131  
0000172A  6000 0D06               1132    BRA     PRINT_ILLEGAL
0000172E                          1133  
0000172E                          1134  * ------ Size Branching ------
0000172E                          1135  * MOVE uses a nonstandard size code. We convert it to the standard so we can
0000172E                          1136  * easily use the existing PUSH_BWL subroutine
0000172E                          1137  MOVE_B
0000172E  183C 0000               1138    MOVE.B  #0,D4
00001732  4EB9 00001EC8           1139    JSR     PUSH_BWL
00001738  6000 001E               1140    BRA     MOVE_SIZE_CONTINUE
0000173C                          1141  
0000173C                          1142  MOVE_W
0000173C  183C 0001               1143    MOVE.B  #1,D4
00001740  4EB9 00001EC8           1144    JSR     PUSH_BWL
00001746  6000 0010               1145    BRA     MOVE_SIZE_CONTINUE
0000174A                          1146  
0000174A                          1147  MOVE_L
0000174A  183C 0002               1148    MOVE.B  #2,D4
0000174E  4EB9 00001EC8           1149    JSR     PUSH_BWL
00001754  6000 0002               1150    BRA     MOVE_SIZE_CONTINUE
00001758                          1151  
00001758                          1152  MOVE_SIZE_CONTINUE
00001758                          1153  
00001758                          1154  * ------ Print Source ------
00001758  2C07                    1155    MOVE.L    D7,D6
0000175A  4EB9 00001DEE           1156    JSR       PUSH_EA_MODE_ID
00001760                          1157  
00001760                          1158  * ------ Print a comma ------
00001760  4BF9 00002422           1159    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001766  2F0D                    1160    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001768  5878 1008               1161    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000176C                          1162  
0000176C                          1163  * ------ Print Destination ------
0000176C                          1164  * Unfortunately our PUSH_EA_MODE_ID wasn't designed for this :/
0000176C                          1165  
0000176C  2007                    1166    MOVE.L    D7,D0 * D0 holds MODE bits
0000176E  2207                    1167    MOVE.L    D7,D1 * D1 holds REGISTER bits
00001770                          1168  
00001770  EC58                    1169    ROR.W     #$6,D0 * Get the three mode bits
00001772  C07C 0007               1170    AND.W     #$7,D0 * Mask 111
00001776                          1171  
00001776  E059                    1172    ROR.W     #$8,D1 * Get the three register bits
00001778  E259                    1173    ROR.W     #$1,D1
0000177A  C27C 0007               1174    AND.W     #$7,D1 * Mask 111
0000177E                          1175  
0000177E                          1176  * ---- Branching Block ----
0000177E                          1177  
0000177E                          1178  
0000177E  13C1 00002B92           1179    MOVE.B  D1,MISC_NUMBER * For modes that print the register bits as a number
00001784                          1180  
00001784  B03C 0000               1181    CMP.B   #0,D0         *000 -> Register
00001788  6700 0026               1182    BEQ     MOVE_MODE_DN
0000178C  B03C 0002               1183    CMP.B   #2,D0         *010 -> Address Register   Indirect
00001790  6700 0028               1184    BEQ     MOVE_MODE_AN_INDIRECT
00001794  B03C 0003               1185    CMP.B   #3,D0         *011 -> Address Register  (Indirect)+
00001798  6700 002A               1186    BEQ     MOVE_MODE_AN_POST_INC
0000179C  B03C 0004               1187    CMP.B   #4,D0         *100 -> Address Register -(Indirect)
000017A0  6700 002C               1188    BEQ     MOVE_MODE_AN_PRE_DEC
000017A4  B03C 0007               1189    CMP.B   #7,D0         *111 -> All Data Operations
000017A8  6700 002E               1190    BEQ     MOVE_MODE_ELSE
000017AC                          1191  
000017AC  6000 0C84               1192    BRA     PRINT_ILLEGAL
000017B0                          1193  
000017B0                          1194  *________________________________________
000017B0                          1195  * Load Register Print Label
000017B0                          1196  *----------------------------------------
000017B0                          1197  MOVE_MODE_DN
000017B0  4BF9 00002026           1198    LEA   PRINT_MISC_NUMBER_AS_REGISTER,A5
000017B6  6000 0088               1199    BRA   MOVE_MODE_FINISH
000017BA                          1200  *________________________________________
000017BA                          1201  * Load (Address Register) Print Label
000017BA                          1202  *----------------------------------------
000017BA                          1203  MOVE_MODE_AN_INDIRECT
000017BA  4BF9 00002106           1204    LEA   PRINT_MISC_ADDRESS_IND,A5
000017C0  6000 007E               1205    BRA   MOVE_MODE_FINISH
000017C4                          1206  *________________________________________
000017C4                          1207  * Load (Address Register)+ Print Label
000017C4                          1208  *----------------------------------------
000017C4                          1209  MOVE_MODE_AN_POST_INC
000017C4  4BF9 000020BC           1210    LEA   PRINT_MISC_POST_INC,A5
000017CA  6000 0074               1211    BRA   MOVE_MODE_FINISH
000017CE                          1212  *________________________________________
000017CE                          1213  * Load -(Address Register) Print Label
000017CE                          1214  *----------------------------------------
000017CE                          1215  MOVE_MODE_AN_PRE_DEC
000017CE  4BF9 00002072           1216    LEA   PRINT_MISC_PRE_DEC,A5
000017D4  6000 006A               1217    BRA   MOVE_MODE_FINISH
000017D8                          1218  
000017D8                          1219  *________________________________________
000017D8                          1220  * Handle Data Branching Logic
000017D8                          1221  *----------------------------------------
000017D8                          1222  MOVE_MODE_ELSE
000017D8                          1223  
000017D8  B23C 0000               1224      CMP.B   #0,D1
000017DC  6700 000A               1225      BEQ     MOVE_MODE_IND_SHORT
000017E0                          1226  
000017E0  B23C 0001               1227      CMP.B   #1,D1
000017E4  6700 002E               1228      BEQ     MOVE_MODE_IND_LONG
000017E8                          1229  
000017E8                          1230  * ------ Data is short ------
000017E8                          1231  MOVE_MODE_IND_SHORT
000017E8  0C78 0001 101A          1232      CMP.W  #1,DATA1_IN_USE
000017EE  6700 0016               1233      BEQ     MOVE_MODE_IND_SHORT_DATA2
000017F2  5478 1010               1234      ADD.W           #2, LOOP_INC * Adjust the Loop increment to skip the data
000017F6  31FC 0001 101A          1235      MOVE.W  #1,DATA1_IN_USE
000017FC                          1236  
000017FC  4BF9 00002310           1237      LEA     PRINT_EA_MODE_ID_IND_SHORT,A5
00001802  6000 003C               1238      BRA     MOVE_MODE_FINISH
00001806                          1239  
00001806                          1240  * ------ Data is short, DATA1 is in use ------
00001806                          1241  MOVE_MODE_IND_SHORT_DATA2
00001806  5478 1010               1242      ADD.W           #2, LOOP_INC * Adjust the Loop increment to skip the data
0000180A                          1243  
0000180A  4BF9 00002332           1244      LEA     PRINT_EA_MODE_ID_IND_SHORT_DATA2,A5
00001810  6000 002E               1245      BRA     MOVE_MODE_FINISH
00001814                          1246  
00001814                          1247  * ------ Data is Long ------
00001814                          1248  MOVE_MODE_IND_LONG
00001814  0C78 0001 101A          1249      CMP.W  #1,DATA1_IN_USE
0000181A  6700 0016               1250      BEQ     MOVE_MODE_IND_LONG_DATA2
0000181E                          1251  
0000181E  4BF9 00002352           1252      LEA     PRINT_EA_MODE_ID_IND_LONG,A5
00001824  5878 1010               1253      ADD.W           #4,LOOP_INC * Adjust the Loop increment to skip the data
00001828  31FC 0001 101A          1254      MOVE.W  #1,DATA1_IN_USE
0000182E  6000 0010               1255      BRA     MOVE_MODE_FINISH
00001832                          1256  
00001832                          1257  
00001832                          1258  * ------ Data is Long, DATA1 is in use ------
00001832                          1259  MOVE_MODE_IND_LONG_DATA2
00001832                          1260  
00001832  4BF9 0000236C           1261      LEA     PRINT_EA_MODE_ID_IND_LONG_DATA2,A5
00001838  5878 1010               1262      ADD.W           #4,LOOP_INC * Adjust the Loop increment to skip the data
0000183C  6000 0002               1263      BRA     MOVE_MODE_FINISH
00001840                          1264  
00001840                          1265  
00001840                          1266  MOVE_MODE_FINISH
00001840                          1267  
00001840  2F0D                    1268    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001842  5878 1008               1269    ADD.W           #4,PRINT_COUNT
00001846                          1270  
00001846  5478 1010               1271    ADD.W  #2,LOOP_INC     * Increment the loop counter by 2 bytes
0000184A                          1272  
0000184A  6000 0576               1273    BRA   PRINT_OPCODE
0000184E                          1274  
0000184E                          1275  
0000184E                          1276  *-------------------------------------------------------------------------------
0000184E                          1277  * MOVEA
0000184E                          1278  *
0000184E                          1279  *
0000184E                          1280  *-------------------------------------------------------------------------------
0000184E                          1281  MOVEA
0000184E                          1282  
0000184E  2007                    1283    MOVE.L    D7,D0 * Load the print subroutine into intermediate address
00001850                          1284  
00001850                          1285  * ------ Print "MOVEA" ------
00001850                          1286  
00001850  4BF9 0000218A           1287    LEA     PRINT_MOVEA,A5
00001856  2F0D                    1288    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001858  5878 1008               1289    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000185C                          1290  
0000185C                          1291  * ------ Determine Size ------
0000185C  E058                    1292    ROR.W   #$8,D0 * Shift a total of 12 bits to retrieve SIZE designator
0000185E  E858                    1293    ROR.W   #$4,D0
00001860  C07C 0007               1294    AND.W   #$7,D0 * Mask 111
00001864                          1295  
00001864  4284                    1296    CLR.L   D4 * Clear D4 for use as BWL parameter
00001866                          1297  
00001866  B03C 0003               1298    CMP.B   #3,D0
0000186A  6700 000E               1299    BEQ     MOVEA_W
0000186E  B03C 0002               1300    CMP.B   #2,D0
00001872  6700 0014               1301    BEQ     MOVEA_L
00001876                          1302  
00001876  6000 0BBA               1303    BRA     PRINT_ILLEGAL
0000187A                          1304  
0000187A                          1305  
0000187A                          1306  * ------ Size Branching ------
0000187A                          1307  * MOVEA uses a nonstandard size code. We convert it to the standard so we can
0000187A                          1308  * easily use the existing PUSH_BWL subroutine
0000187A                          1309  MOVEA_W
0000187A  183C 0001               1310    MOVE.B  #1,D4
0000187E  4EB9 00001EC8           1311    JSR     PUSH_BWL
00001884  6000 0010               1312    BRA     MOVEA_SIZE_CONTINUE
00001888                          1313  
00001888                          1314  MOVEA_L
00001888  183C 0002               1315    MOVE.B  #2,D4
0000188C  4EB9 00001EC8           1316    JSR     PUSH_BWL
00001892  6000 0002               1317    BRA     MOVEA_SIZE_CONTINUE
00001896                          1318  
00001896                          1319  MOVEA_SIZE_CONTINUE
00001896                          1320  
00001896                          1321  * ------ Print Source ------
00001896  2C07                    1322    MOVE.L    D7,D6
00001898  4EB9 00001DEE           1323    JSR       PUSH_EA_MODE_ID
0000189E                          1324  
0000189E                          1325  * ------ Print a comma ------
0000189E  4BF9 00002422           1326    LEA     PRINT_COMMA,A5   * Load the print subroutine
000018A4  2F0D                    1327    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000018A6  5878 1008               1328    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000018AA                          1329  
000018AA                          1330  * ------ Get Destination Address ------
000018AA  2007                    1331    MOVE.L    D7,D0
000018AC  E058                    1332    ROR.W     #$8,D0 * Get the three register bits
000018AE  E258                    1333    ROR.W     #$1,D0
000018B0  C07C 0007               1334    AND.W     #$7,D0 * Mask 111
000018B4                          1335  
000018B4  13C0 00002B92           1336    MOVE.B    D0,MISC_NUMBER
000018BA                          1337  
000018BA                          1338  * ------ Print Destination Address ------
000018BA  4BF9 00002000           1339    LEA       PRINT_MISC_NUMBER_AS_ADDRESS,A5
000018C0  2F0D                    1340    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000018C2  5878 1008               1341    ADD.W           #4,PRINT_COUNT
000018C6                          1342  
000018C6  5478 1010               1343    ADD.W  #2,LOOP_INC     * Increment the loop counter by 2 bytes
000018CA                          1344  
000018CA  6000 04F6               1345    BRA   PRINT_OPCODE
000018CE                          1346  
000018CE                          1347  *-------------------------------------------------------------------------------
000018CE                          1348  *   LSX_ASX_ROX
000018CE                          1349  *
000018CE                          1350  *
000018CE                          1351  *-------------------------------------------------------------------------------
000018CE                          1352  LSX_ASX_ROX
000018CE  2007                    1353    MOVE.L    D7,D0      * Reset D0
000018D0  C07C FEC0               1354    AND.W     #$FEC0,D0
000018D4                          1355  
000018D4                          1356  * ------ Arithmetic Shift MEM ------
000018D4  B07C E0C0               1357    CMP.W #$E0C0,D0
000018D8  6700 0066               1358    BEQ   ASX
000018DC                          1359  
000018DC                          1360  * ------ Logical Shift MEM -----
000018DC  B07C E2C0               1361    CMP.W #$E2C0,D0
000018E0  6700 002C               1362    BEQ   LSX
000018E4                          1363  
000018E4                          1364  * ------ Rotate MEM ------
000018E4  B07C E6C0               1365    CMP.W #$E6C0,D0
000018E8  6700 0088               1366    BEQ   ROX
000018EC                          1367  
000018EC  2007                    1368    MOVE.L    D7,D0      * Reset D0
000018EE  C07C 0018               1369    AND.W     #$18,D0  * Isolate bits 4,3
000018F2                          1370  
000018F2                          1371  * ------ Arithmetic Shift ------
000018F2  B07C 0000               1372    CMP.W #0,D0
000018F6  6700 0048               1373    BEQ   ASX
000018FA                          1374  
000018FA                          1375  * ------ Logical Shift ------
000018FA  B07C 0008               1376    CMP.W #8,D0
000018FE  6700 000E               1377    BEQ   LSX
00001902                          1378  
00001902                          1379  * ------ Rotate ------
00001902  B07C 0018               1380    CMP.W #$18,D0
00001906  6700 006A               1381    BEQ   ROX
0000190A                          1382  
0000190A  6000 0B26               1383    BRA   PRINT_ILLEGAL
0000190E                          1384  *______________________________
0000190E                          1385  *Determine Logical Shift Direction
0000190E                          1386  *------------------------------
0000190E                          1387  LSX
0000190E  2007                    1388    MOVE.L    D7,D0      * Reset D0
00001910  C07C 0100               1389    AND.W     #$100,D0   * Isolate bit 8
00001914  B07C 0000               1390    CMP.W     #0,D0
00001918  6700 0006               1391    BEQ       LSR
0000191C  6000 0012               1392    BRA       LSL
00001920                          1393  
00001920                          1394  *______________________________
00001920                          1395  * Logical Shift Right
00001920                          1396  *------------------------------
00001920                          1397  LSR
00001920  4BF9 00001F10           1398    LEA     PRINT_LSR,A5    * Load the print subroutine into intermediate address
00001926  2F0D                    1399    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001928  5878 1008               1400    ADD.W   #4,PRINT_COUNT
0000192C                          1401  
0000192C  6000 0076               1402    BRA     LSX_ASX_ROX_CONTINUE
00001930                          1403  
00001930                          1404  *______________________________
00001930                          1405  * Logical Shift Left
00001930                          1406  *------------------------------
00001930                          1407  LSL
00001930  4BF9 00001F20           1408    LEA     PRINT_LSL,A5    * Load the print subroutine into intermediate address
00001936  2F0D                    1409    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001938  5878 1008               1410    ADD.W   #4,PRINT_COUNT
0000193C                          1411  
0000193C  6000 0066               1412    BRA     LSX_ASX_ROX_CONTINUE
00001940                          1413  
00001940                          1414  *______________________________
00001940                          1415  *Determine Arithmetic Shift Direction
00001940                          1416  *------------------------------
00001940                          1417  ASX
00001940  2007                    1418    MOVE.L    D7,D0      * Reset D0
00001942  C07C 0100               1419    AND.W     #$100,D0   * Isolate bit 8
00001946  B07C 0000               1420    CMP.W     #0,D0
0000194A  6700 0006               1421    BEQ       ASR
0000194E  6000 0012               1422    BRA       ASL
00001952                          1423  
00001952                          1424  *______________________________
00001952                          1425  * Arithmetic Shift Right
00001952                          1426  *------------------------------
00001952                          1427  ASR
00001952  4BF9 00001F30           1428    LEA     PRINT_ASR,A5    * Load the print subroutine into intermediate address
00001958  2F0D                    1429    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000195A  5878 1008               1430    ADD.W   #4,PRINT_COUNT
0000195E                          1431  
0000195E  6000 0044               1432    BRA     LSX_ASX_ROX_CONTINUE
00001962                          1433  
00001962                          1434  *______________________________
00001962                          1435  * Arithmetic Shift Left
00001962                          1436  *------------------------------
00001962                          1437  ASL
00001962  4BF9 00001F40           1438    LEA     PRINT_ASL,A5    * Load the print subroutine into intermediate address
00001968  2F0D                    1439    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000196A  5878 1008               1440    ADD.W   #4,PRINT_COUNT
0000196E                          1441  
0000196E  6000 0034               1442    BRA     LSX_ASX_ROX_CONTINUE
00001972                          1443  
00001972                          1444  *______________________________
00001972                          1445  * Determine Rotate Direction
00001972                          1446  *------------------------------
00001972                          1447  ROX
00001972  2007                    1448    MOVE.L    D7,D0      * Reset D0
00001974  C07C 0100               1449    AND.W     #$100,D0   * Isolate bit 8
00001978  B07C 0000               1450    CMP.W     #0,D0
0000197C  6700 0006               1451    BEQ       ROR
00001980  6000 0012               1452    BRA       ROL
00001984                          1453  
00001984                          1454  *______________________________
00001984                          1455  * Rotate Right
00001984                          1456  *------------------------------
00001984                          1457  ROR
00001984  4BF9 00001F50           1458    LEA     PRINT_ROR,A5    * Load the print subroutine into intermediate address
0000198A  2F0D                    1459    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000198C  5878 1008               1460    ADD.W   #4,PRINT_COUNT
00001990                          1461  
00001990  6000 0012               1462    BRA     LSX_ASX_ROX_CONTINUE
00001994                          1463  
00001994                          1464  *______________________________
00001994                          1465  * Rotate Left
00001994                          1466  *------------------------------
00001994                          1467  ROL
00001994  4BF9 00001F60           1468    LEA     PRINT_ROL,A5    * Load the print subroutine into intermediate address
0000199A  2F0D                    1469    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000199C  5878 1008               1470    ADD.W   #4,PRINT_COUNT
000019A0                          1471  
000019A0  6000 0002               1472    BRA     LSX_ASX_ROX_CONTINUE
000019A4                          1473  
000019A4                          1474  *______________________________
000019A4                          1475  * All Subroutine Continue
000019A4                          1476  *------------------------------
000019A4                          1477  LSX_ASX_ROX_CONTINUE
000019A4  2007                    1478    MOVE.L    D7,D0      * Reset D0
000019A6  EC98                    1479    ROR.L     #$06,D0    * Isolate bits 7,6
000019A8  C0BC 00000003           1480    AND.L     #3,D0
000019AE  4284                    1481    CLR.L     D4
000019B0  1800                    1482    MOVE.B    D0,D4      * Move bits 7,6 to D4 for BWL
000019B2                          1483  
000019B2  B03C 0003               1484    CMP.B     #3,D0
000019B6  6700 00CE               1485    BEQ       LSX_ASX_ROX_MEM
000019BA                          1486  
000019BA  4EB9 00001EC8           1487    JSR PUSH_BWL
000019C0                          1488  
000019C0  2007                    1489    MOVE.L    D7,D0      * Reset D0
000019C2  C07C 0020               1490    AND.W     #$20,D0    * Isolate bit 5
000019C6  B07C 0000               1491    CMP.W     #0,D0
000019CA  6700 0006               1492    BEQ       LSX_ASX_ROX_SHIFT
000019CE  6000 007C               1493    BRA       LSX_ASX_ROX_REGISTER
000019D2                          1494  
000019D2                          1495  *__________________________________
000019D2                          1496  * Print the number of bits to shift
000019D2                          1497  *----------------------------------
000019D2                          1498  LSX_ASX_ROX_SHIFT
000019D2  2007                    1499    MOVE.L  D7,D0             * Reset D0
000019D4  C0BC 00000E00           1500    AND.L   #$E00,D0           * Get bits 11 - 9
000019DA  B0BC 00000000           1501    CMP.L   #0,D0
000019E0  6700 003A               1502    BEQ     LSX_ASX_ROX_SHIFT_8  * If 0, shift count is 8
000019E4                          1503  
000019E4  21FC 00000000 1016      1504    MOVE.L  #0,DATA1
000019EC  E080                    1505    ASR.L   #$8,D0
000019EE  E280                    1506    ASR.L   #$1,D0
000019F0  21C0 1016               1507    MOVE.L  D0,DATA1
000019F4                          1508  
000019F4  4BF9 00002386           1509    LEA PRINT_EA_MODE_ID_ABS_DATA,A5 * Print shift count
000019FA  2F0D                    1510    MOVE.L    A5, -(SP)
000019FC  5878 1008               1511    ADD.W     #4, PRINT_COUNT
00001A00                          1512  
00001A00  4BF9 00002422           1513    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001A06  2F0D                    1514    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001A08  5878 1008               1515    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001A0C                          1516  
00001A0C  4BF9 0000221A           1517    LEA   PRINT_EA_MODE_ID_DN,A5  * Print data register
00001A12  2F0D                    1518    MOVE.L    A5, -(SP)
00001A14  5878 1008               1519    ADD.W     #4, PRINT_COUNT
00001A18                          1520  
00001A18  6000 0094               1521    BRA LSX_ASX_ROX_FINISH
00001A1C                          1522  
00001A1C                          1523  *__________________________________
00001A1C                          1524  * Convert 0 to 8 (Special case)
00001A1C                          1525  *----------------------------------
00001A1C                          1526  LSX_ASX_ROX_SHIFT_8
00001A1C  21FC 00000008 1016      1527    MOVE.L  #8,DATA1
00001A24  4BF9 00002386           1528    LEA PRINT_EA_MODE_ID_ABS_DATA,A5  * Print shift count 8
00001A2A  2F0D                    1529    MOVE.L    A5, -(SP)
00001A2C  5878 1008               1530    ADD.W     #4, PRINT_COUNT
00001A30                          1531  
00001A30  4BF9 00002422           1532    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001A36  2F0D                    1533    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001A38  5878 1008               1534    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001A3C                          1535  
00001A3C                          1536  
00001A3C  4BF9 0000221A           1537    LEA   PRINT_EA_MODE_ID_DN,A5  * Print data register
00001A42  2F0D                    1538    MOVE.L    A5, -(SP)
00001A44  5878 1008               1539    ADD.W     #4, PRINT_COUNT
00001A48                          1540  
00001A48  6000 0064               1541    BRA LSX_ASX_ROX_FINISH
00001A4C                          1542  
00001A4C                          1543  *__________________________________
00001A4C                          1544  * Print the register that contains the number of bits to shift
00001A4C                          1545  *----------------------------------
00001A4C                          1546  LSX_ASX_ROX_REGISTER
00001A4C  2007                    1547    MOVE.L    D7,D0      * Reset D0
00001A4E  C0BC 00000E00           1548    AND.L   #$E00,D0
00001A54                          1549  
00001A54  E080                    1550    ASR.L   #$8,D0
00001A56  E280                    1551    ASR.L   #$1,D0
00001A58                          1552  
00001A58  13C0 00002B92           1553    MOVE.B  D0,MISC_NUMBER
00001A5E  4BF9 00002026           1554    LEA   PRINT_MISC_NUMBER_AS_REGISTER,A5  * Print data register
00001A64  2F0D                    1555    MOVE.L    A5, -(SP)
00001A66  5878 1008               1556    ADD.W     #4, PRINT_COUNT
00001A6A                          1557  
00001A6A  4BF9 00002422           1558    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001A70  2F0D                    1559    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001A72  5878 1008               1560    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001A76                          1561  
00001A76  4BF9 0000221A           1562    LEA   PRINT_EA_MODE_ID_DN,A5  * Print data register
00001A7C  2F0D                    1563    MOVE.L    A5, -(SP)
00001A7E  5878 1008               1564    ADD.W     #4, PRINT_COUNT
00001A82                          1565  
00001A82  6000 002A               1566    BRA LSX_ASX_ROX_FINISH
00001A86                          1567  
00001A86                          1568  *__________________________________
00001A86                          1569  * Memory Shift mode
00001A86                          1570  *----------------------------------
00001A86                          1571  LSX_ASX_ROX_MEM
00001A86  2C07                    1572    MOVE.L D7,D6
00001A88  CCBC 00000038           1573    AND.L #$38,D6
00001A8E  BC7C 0008               1574    CMP.W #8,D6
00001A92  6F00 099E               1575    BLE   PRINT_ILLEGAL
00001A96                          1576  
00001A96  4BF9 00002402           1577    LEA PRINT_FOURSPACE,A5
00001A9C  2F0D                    1578    MOVE.L    A5,-(SP)
00001A9E  5878 1008               1579    ADD.W    #4,PRINT_COUNT
00001AA2                          1580  
00001AA2  2C07                    1581    MOVE.L D7,D6 * Restore D6
00001AA4  4EB9 00001DEE           1582    JSR     PUSH_EA_MODE_ID
00001AAA                          1583  
00001AAA  6000 0002               1584    BRA LSX_ASX_ROX_FINISH
00001AAE                          1585  
00001AAE                          1586  
00001AAE                          1587  *__________________________________
00001AAE                          1588  * Finish
00001AAE                          1589  *----------------------------------
00001AAE                          1590  LSX_ASX_ROX_FINISH
00001AAE  5478 1010               1591    ADD.W  #2,LOOP_INC
00001AB2  6000 030E               1592    BRA   PRINT_OPCODE
00001AB6                          1593  
00001AB6                          1594  LSX_ASX_ROX_RESET_D7
00001AB6  2007                    1595      MOVE.L    D7,D0
00001AB8  6000 0322               1596      BRA   PRINT_OPCODE_LOOP_RETURN
00001ABC                          1597  
00001ABC                          1598  *-------------------------------------------------------------------------------
00001ABC                          1599  *   BCC
00001ABC                          1600  *
00001ABC                          1601  *
00001ABC                          1602  *-------------------------------------------------------------------------------
00001ABC                          1603  BCC
00001ABC  2007                    1604    MOVE.L    D7,D0      * Reset D0
00001ABE  C07C 0F00               1605    AND.W     #$0F00,D0  * Isolate bits 11-8
00001AC2  B07C 0000               1606    CMP.W     #0,D0
00001AC6  6700 001E               1607    BEQ       BRA
00001ACA                          1608  
00001ACA  B07C 0E00               1609    CMP.W     #$E00,D0
00001ACE  6700 0026               1610    BEQ       BGT
00001AD2                          1611  
00001AD2  B07C 0F00               1612    CMP.W     #$F00,D0
00001AD6  6700 002E               1613    BEQ       BLE
00001ADA                          1614  
00001ADA  B07C 0700               1615    CMP.W     #$700,D0
00001ADE  6700 0036               1616    BEQ       BEQ
00001AE2                          1617  
00001AE2  6000 094E               1618    BRA       PRINT_ILLEGAL
00001AE6                          1619  
00001AE6                          1620  BRA
00001AE6  4BF9 00001FBA           1621    LEA     PRINT_BRA,A5    * Load the print subroutine into intermediate address
00001AEC  2F0D                    1622    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001AEE  5878 1008               1623    ADD.W   #4,PRINT_COUNT
00001AF2                          1624  
00001AF2  6000 0032               1625    BRA   BCC_CONTINUE
00001AF6                          1626  
00001AF6                          1627  BGT
00001AF6  4BF9 00001F8A           1628    LEA     PRINT_BGT,A5    * Load the print subroutine into intermediate address
00001AFC  2F0D                    1629    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001AFE  5878 1008               1630    ADD.W   #4,PRINT_COUNT
00001B02                          1631  
00001B02  6000 0022               1632    BRA   BCC_CONTINUE
00001B06                          1633  
00001B06                          1634  BLE
00001B06  4BF9 00001F9A           1635    LEA     PRINT_BLE,A5    * Load the print subroutine into intermediate address
00001B0C  2F0D                    1636    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001B0E  5878 1008               1637    ADD.W   #4,PRINT_COUNT
00001B12                          1638  
00001B12  6000 0012               1639    BRA   BCC_CONTINUE
00001B16                          1640  
00001B16                          1641  BEQ
00001B16  4BF9 00001FAA           1642    LEA     PRINT_BEQ,A5    * Load the print subroutine into intermediate address
00001B1C  2F0D                    1643    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001B1E  5878 1008               1644    ADD.W   #4,PRINT_COUNT
00001B22                          1645  
00001B22  6000 0002               1646    BRA   BCC_CONTINUE
00001B26                          1647  
00001B26                          1648  BCC_CONTINUE
00001B26  7000                    1649    MOVE.L    #0,D0
00001B28  1007                    1650    MOVE.B    D7,D0      * Reset D0
00001B2A  B03C 0000               1651    CMP.B     #0,D0
00001B2E  6700 0020               1652    BEQ       BCC_16     * if 16 bit displacement, print the following short
00001B32                          1653  
00001B32  B03C 00FF               1654    CMP.B     #$FF,D0    * if 32 bit displacement, print the following long
00001B36  6700 0032               1655    BEQ       BCC_32
00001B3A                          1656  
00001B3A  21FC 00000000 1016      1657    MOVE.L    #0,DATA1
00001B42                          1658    *ROR.L     #4,D0
00001B42  21C0 1016               1659    MOVE.L    D0,DATA1
00001B46                          1660  
00001B46  31FC 0002 1010          1661    MOVE.W  #2,LOOP_INC
00001B4C                          1662  
00001B4C  6000 0026               1663    BRA     BCC_END
00001B50                          1664  
00001B50                          1665  BCC_16
00001B50  2238 1016               1666    MOVE.L          DATA1,D1
00001B54  4841                    1667    SWAP            D1              * We only want the upper word
00001B56  C2BC 0000FFFF           1668    AND.L           #$0000FFFF,D1   * Bit mask for upper word
00001B5C  21C1 1016               1669    MOVE.L          D1,DATA1
00001B60                          1670  
00001B60  31FC 0004 1010          1671    MOVE.W  #4,LOOP_INC
00001B66                          1672  
00001B66  6000 000C               1673    BRA     BCC_END
00001B6A                          1674  
00001B6A                          1675  BCC_32
00001B6A  31FC 0006 1010          1676    MOVE.W  #6,LOOP_INC
00001B70  6000 0002               1677    BRA     BCC_END
00001B74                          1678  
00001B74                          1679  BCC_END
00001B74  4BF9 00002386           1680    LEA     PRINT_EA_MODE_ID_ABS_DATA,A5
00001B7A  2F0D                    1681    MOVE.L  A5, -(SP)
00001B7C  5878 1008               1682    ADD.W   #4, PRINT_COUNT
00001B80                          1683  
00001B80  6000 0240               1684    BRA   PRINT_OPCODE
00001B84                          1685  
00001B84                          1686  
00001B84                          1687  *-------------------------------------------------------------------------------
00001B84                          1688  *   ADD ADDA
00001B84                          1689  *
00001B84                          1690  * Because ADD and ADDA have the same first four bits (1101), we need to do
00001B84                          1691  * some additional branching to differentiate them.
00001B84                          1692  *________________________________________
00001B84                          1693  * Register Use Summary:
00001B84                          1694  *
00001B84                          1695  * D0: General variable, cleared every use to be safe
00001B84                          1696  * D7: CONST - The opcode to decode - NO TOUCH
00001B84                          1697  *
00001B84                          1698  *-------------------------------------------------------------------------------
00001B84                          1699  ADD_ADDA
00001B84                          1700  
00001B84  4280                    1701    CLR.L   D0
00001B86  2007                    1702    MOVE.L  D7,D0
00001B88                          1703  
00001B88  EC58                    1704    ROR.W   #06,D0     * Get bits 7,6 on end
00001B8A  C03C 0003               1705    AND.B   #03,D0     * Isolate bits 7,6
00001B8E  B03C 0003               1706    CMP.B   #03,D0
00001B92  6700 0006               1707    BEQ   ADDA
00001B96                          1708  
00001B96  6000 0082               1709    BRA   ADD          * Else it's ADD
00001B9A                          1710  *-------------------------------------------------------------------------------
00001B9A                          1711  
00001B9A                          1712  
00001B9A                          1713  *-------------------------------------------------------------------------------
00001B9A                          1714  *   ADDA
00001B9A                          1715  *
00001B9A                          1716  *
00001B9A                          1717  *-------------------------------------------------------------------------------
00001B9A                          1718  ADDA
00001B9A                          1719  
00001B9A  2007                    1720    MOVE.L  D7,D0         * Reset D0
00001B9C                          1721  
00001B9C  4BF9 00001FDA           1722    LEA     PRINT_ADDA,A5    * Load the print subroutine into intermediate address
00001BA2  2F0D                    1723    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001BA4  5878 1008               1724    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001BA8                          1725  
00001BA8  EC58                    1726    ROR.W   #$6,D0        * Get bits 9,8,7,6 on end byte
00001BAA  C03C 0007               1727    AND.B   #7,D0         * Isolate bits 8,7,6
00001BAE                          1728  
00001BAE  B03C 0003               1729    CMP.B   #3,D0         * If 8,7,6 == 011
00001BB2  6700 001E               1730    BEQ     ADDA_W
00001BB6                          1731  
00001BB6  B03C 0007               1732    CMP.B   #7,D0         * If 8,7,6 == 111
00001BBA  6700 0006               1733    BEQ     ADDA_L
00001BBE                          1734  
00001BBE  6000 0872               1735    BRA     PRINT_ILLEGAL
00001BC2                          1736  
00001BC2                          1737  * ------ Long Opmode ------
00001BC2                          1738  ADDA_L
00001BC2                          1739  
00001BC2  4BF9 0000220A           1740    LEA     PRINT_LONG_DESIGNATOR,A5 * Load the ".L" print subroutine
00001BC8  2F0D                    1741    MOVE.L  A5, -(SP)       * Put the subroutine onto the stack
00001BCA  5878 1008               1742    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001BCE                          1743  
00001BCE  6000 0012               1744    BRA     ADDA_CONTINUE
00001BD2                          1745  
00001BD2                          1746  * ------ Word Opmode ------
00001BD2                          1747  ADDA_W
00001BD2                          1748  
00001BD2  4BF9 000021FA           1749    LEA     PRINT_WORD_DESIGNATOR,A5 * Load the ".W" print subroutine
00001BD8  2F0D                    1750    MOVE.L  A5, -(SP)         * Put the subroutine onto the stack
00001BDA  5878 1008               1751    ADD.W   #4,PRINT_COUNT    * Increment Print Count by 1 long
00001BDE                          1752  
00001BDE  6000 0002               1753    BRA     ADDA_CONTINUE
00001BE2                          1754  
00001BE2                          1755  * ------ Continue ------
00001BE2                          1756  ADDA_CONTINUE
00001BE2                          1757  
00001BE2                          1758  * Push the effective address print subroutine onto the stack
00001BE2  2C07                    1759    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001BE4  4EB9 00001DEE           1760    JSR     PUSH_EA_MODE_ID
00001BEA                          1761  
00001BEA                          1762  
00001BEA  4BF9 00002422           1763    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001BF0  2F0D                    1764    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001BF2  5878 1008               1765    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001BF6                          1766  
00001BF6                          1767  
00001BF6                          1768  
00001BF6                          1769  * Reset and push the address register print subroutine onto the stack
00001BF6  2007                    1770    MOVE.L D7,D0    * Reset D0
00001BF8                          1771  
00001BF8  E080                    1772    ASR.L   #$8,D0
00001BFA  E280                    1773    ASR.L   #$1,D0
00001BFC  C03C 0007               1774    AND.B   #$7,D0
00001C00                          1775  
00001C00  13C0 00002B92           1776    MOVE.B  D0,MISC_NUMBER
00001C06                          1777  
00001C06  4BF9 00002000           1778    LEA     PRINT_MISC_NUMBER_AS_ADDRESS,A5   * Load the print subroutine
00001C0C  2F0D                    1779    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001C0E  5878 1008               1780    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001C12                          1781  
00001C12  5478 1010               1782    ADD.W  #2,LOOP_INC     * Increment the loop counter by 2 bytes
00001C16                          1783  
00001C16  6000 01AA               1784    BRA   PRINT_OPCODE
00001C1A                          1785  
00001C1A                          1786  *-------------------------------------------------------------------------------
00001C1A                          1787  *   ADD
00001C1A                          1788  *
00001C1A                          1789  *
00001C1A                          1790  *-------------------------------------------------------------------------------
00001C1A                          1791  ADD
00001C1A                          1792  
00001C1A                          1793  * ------ Print "ADD" ------
00001C1A  4BF9 00001FCA           1794    LEA     PRINT_ADD,A5    * Load the print subroutine into intermediate address
00001C20  2F0D                    1795    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001C22  5878 1008               1796    ADD.W   #4,PRINT_COUNT
00001C26                          1797  
00001C26                          1798  * ------ Print size ------
00001C26  1800                    1799    MOVE.B   D0,D4            * Move bits 7,6 to D4 for BWL
00001C28  4EB9 00001EC8           1800    JSR      PUSH_BWL
00001C2E                          1801  
00001C2E                          1802  * ------ Reset D0, determine order ------
00001C2E  2007                    1803    MOVE.L  D7,D0
00001C30  E058                    1804    ROR.W   #08,D0     * Get bit 8 on the end
00001C32  C07C 0001               1805    AND.W   #1,D0
00001C36                          1806  
00001C36                          1807    * If bit 8 == 0 the order is <ea> + Dn
00001C36                          1808    * If bit 8 == 1 the order is Dn + <ea>
00001C36                          1809  
00001C36  B03C 0001               1810    CMP.B   #1,D0
00001C3A  6700 003A               1811    BEQ     ADD_DN_FIRST
00001C3E                          1812  
00001C3E                          1813  * ------ Print order is effective address, data register ------
00001C3E                          1814  ADD_EA_FIRST
00001C3E                          1815  
00001C3E                          1816  
00001C3E                          1817    * ------ Print the effective address ------
00001C3E  2C07                    1818    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001C40  4EB9 00001DEE           1819    JSR     PUSH_EA_MODE_ID
00001C46                          1820  
00001C46                          1821    * ------ Print a comma ------
00001C46  4BF9 00002422           1822    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001C4C  2F0D                    1823    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001C4E  5878 1008               1824    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001C52                          1825  
00001C52                          1826    * ------ Determine the register number ------
00001C52  2007                    1827    MOVE.L  D7,D0
00001C54  E058                    1828    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
00001C56  E258                    1829    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
00001C58  C07C 0007               1830    AND.W   #7,D0 * Mask against 111 to only get 3 bits
00001C5C                          1831  
00001C5C                          1832    * ------ Print the register number ------
00001C5C  13C0 00002B92           1833    MOVE.B  D0,MISC_NUMBER
00001C62  4BF9 00002026           1834    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
00001C68  2F0D                    1835    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001C6A  5878 1008               1836    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001C6E                          1837  
00001C6E  5478 1010               1838    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
00001C72                          1839  
00001C72  6000 014E               1840    BRA   PRINT_OPCODE
00001C76                          1841  
00001C76                          1842  
00001C76                          1843  * ------ Print order is data register, effective address ------
00001C76                          1844  ADD_DN_FIRST
00001C76                          1845  
00001C76                          1846  
00001C76                          1847    * ------ Determine the register number ------
00001C76  2007                    1848    MOVE.L  D7,D0
00001C78  E058                    1849    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
00001C7A  E258                    1850    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
00001C7C  C07C 0007               1851    AND.W   #7,D0 * Mask against 111 to only get 3 bits
00001C80                          1852  
00001C80                          1853    * ------ Print the register number ------
00001C80  13C0 00002B92           1854    MOVE.B  D0,MISC_NUMBER
00001C86  4BF9 00002026           1855    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
00001C8C  2F0D                    1856    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001C8E  5878 1008               1857    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001C92                          1858  
00001C92                          1859    * ------ Print a comma ------
00001C92  4BF9 00002422           1860    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001C98  2F0D                    1861    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001C9A  5878 1008               1862    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001C9E                          1863  
00001C9E                          1864    * ------ Print the effective address ------
00001C9E  2C07                    1865    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001CA0  4EB9 00001DEE           1866    JSR     PUSH_EA_MODE_ID
00001CA6                          1867  
00001CA6  5478 1010               1868    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
00001CAA                          1869  
00001CAA  6000 0116               1870    BRA   PRINT_OPCODE
00001CAE                          1871  
00001CAE                          1872  
00001CAE                          1873  *-------------------------------------------------------------------------------
00001CAE                          1874  *   ADDQ
00001CAE                          1875  *
00001CAE                          1876  *
00001CAE                          1877  *-------------------------------------------------------------------------------
00001CAE                          1878  ADDQ
00001CAE                          1879  
00001CAE                          1880  
00001CAE                          1881  * ------ Ensure that opcode is valid ------
00001CAE  2007                    1882    MOVE.L  D7,D0
00001CB0  E058                    1883    ROR.W   #$08,D0
00001CB2  C03C 0001               1884    AND.B   #1,D0
00001CB6  B03C 0000               1885    CMP.B   #0,D0             * Check for 0 in 8th bit
00001CBA  6600 0776               1886    BNE     PRINT_ILLEGAL
00001CBE                          1887  
00001CBE                          1888  * ------ Print "ADDQ" ------
00001CBE  4BF9 0000216A           1889    LEA     PRINT_ADDQ,A5    * Load the print subroutine into intermediate address
00001CC4  2F0D                    1890    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001CC6  5878 1008               1891    ADD.W   #4,PRINT_COUNT
00001CCA                          1892  
00001CCA                          1893  * ------ Print Size ------
00001CCA  2007                    1894    MOVE.L  D7,D0
00001CCC  EC58                    1895    ROR.W   #6,D0
00001CCE  C07C 0003               1896    AND.W   #3,D0
00001CD2                          1897  
00001CD2  4284                    1898    CLR.L   D4
00001CD4  1800                    1899    MOVE.B  D0,D4            * Move bits 7,6 to D4 for BWL
00001CD6  4EB9 00001EC8           1900    JSR     PUSH_BWL
00001CDC                          1901  
00001CDC                          1902  * ------ Retrieve Data ------
00001CDC  2007                    1903    MOVE.L  D7,D0             * Reset D0
00001CDE  E058                    1904    ROR.W   #$8, D0           * Get bits 11 - 9
00001CE0  E258                    1905    ROR.W   #$1, D0           * Get bits 11 - 9
00001CE2  C03C 0007               1906    AND.B   #$7, D0           * Clear bit 11
00001CE6                          1907  
00001CE6                          1908  
00001CE6                          1909  * ADDQ converts 000 to 8 since nobody wants to add 0 to their number
00001CE6  0C00 0000               1910    CMPI.B   #0,D0
00001CEA  6600 0006               1911    BNE      ADDQ_NOT_ZERO
00001CEE                          1912  
00001CEE                          1913  *Else: D0 is 0, so we convert to 8
00001CEE  103C 0008               1914    MOVE.B   #8,D0
00001CF2                          1915  
00001CF2                          1916  ADDQ_NOT_ZERO
00001CF2                          1917  
00001CF2  13C0 00002B92           1918    MOVE.B  D0,MISC_NUMBER
00001CF8                          1919  
00001CF8                          1920  * ------ Print Data ------
00001CF8  4BF9 00002144           1921    LEA     PRINT_MISC_NUMBER_AS_DATA,A5
00001CFE  2F0D                    1922    MOVE.L  A5, -(SP)
00001D00  5878 1008               1923    ADD.W   #4, PRINT_COUNT
00001D04                          1924  
00001D04                          1925  * ------ Print a comma ------
00001D04  4BF9 00002422           1926    LEA     PRINT_COMMA,A5  * Load the print subroutine
00001D0A  2F0D                    1927    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001D0C  5878 1008               1928    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001D10                          1929  
00001D10                          1930  * ------ Print Effective Address ------
00001D10  2C07                    1931    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001D12  4EB9 00001DEE           1932    JSR     PUSH_EA_MODE_ID
00001D18                          1933  
00001D18                          1934  
00001D18  31FC 0002 1010          1935    MOVE.W  #2,LOOP_INC     * Increment the loop counter by 2 bytes
00001D1E  6000 00A2               1936    BRA     PRINT_OPCODE    * Always put this at the end
00001D22                          1937  
00001D22                          1938  
00001D22                          1939  
00001D22                          1940  *-------------------------------------------------------------------------------
00001D22                          1941  *   NOP
00001D22                          1942  *
00001D22                          1943  *   NONSTANDARD OPCODE! Don't base your design off of this :)
00001D22                          1944  *
00001D22                          1945  *-------------------------------------------------------------------------------
00001D22                          1946  NOP
00001D22                          1947  
00001D22  43F9 00002AF2           1948    LEA     STRING_NOP,A1
00001D28  103C 000E               1949    MOVE.B  #14,D0
00001D2C  4E4F                    1950    TRAP    #15
00001D2E                          1951  
00001D2E  31FC 0002 1010          1952    MOVE.W  #2,LOOP_INC   * Increment the loop counter by 2 bytes
00001D34                          1953  
00001D34  4EB9 00002486           1954    JSR     PRINT_IMMEDIATE_NEWLINE
00001D3A                          1955  
00001D3A  4E75                    1956    RTS
00001D3C                          1957  
00001D3C                          1958  *-------------------------------------------------------------------------------
00001D3C                          1959  *   RTS
00001D3C                          1960  *
00001D3C                          1961  *   NONSTANDARD OPCODE! Don't base your design off of this :)
00001D3C                          1962  *
00001D3C                          1963  *-------------------------------------------------------------------------------
00001D3C                          1964  RTS
00001D3C                          1965  
00001D3C  43F9 00002AF6           1966    LEA     STRING_RTS,A1
00001D42  103C 000E               1967    MOVE.B  #14,D0
00001D46  4E4F                    1968    TRAP    #15
00001D48                          1969  
00001D48  31FC 0002 1010          1970    MOVE.W  #2,LOOP_INC   * Increment the loop counter by 2 bytes
00001D4E                          1971  
00001D4E  4EB9 00002486           1972    JSR     PRINT_IMMEDIATE_NEWLINE
00001D54                          1973  
00001D54  4E75                    1974    RTS
00001D56                          1975  
00001D56                          1976  
00001D56                          1977  *-------------------------------------------------------------------------------
00001D56                          1978  *   JSR
00001D56                          1979  *
00001D56                          1980  *
00001D56                          1981  *-------------------------------------------------------------------------------
00001D56                          1982  JSR
00001D56                          1983  
00001D56  4BF9 000023D2           1984    LEA     PRINT_JSR,A5    * Load the print subroutine into intermediate address
00001D5C  2F0D                    1985    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001D5E  5878 1008               1986    ADD.W           #4,PRINT_COUNT
00001D62                          1987  
00001D62                          1988  * ---- Custom Branching Block ----
00001D62                          1989  * Supported Modes: (An), Indirect short, Indirect Long
00001D62                          1990  
00001D62  4280                    1991    CLR.L     D0
00001D64  1007                    1992    MOVE.B    D7,D0 * Copy opcode into local variable
00001D66  C03C 0038               1993    AND.B     #$38,D0 * Mask D0 with 0111000 to get MODE bits only
00001D6A  E600                    1994    ASR.B   #3,D0 * Shift the result so D0 ranges between 000 and 111
00001D6C                          1995  
00001D6C  B03C 0002               1996    CMP.B   #2,D0         *010 -> Address Register   Indirect
00001D70  6700 002A               1997    BEQ   JSR_PUSH_EA_MODE_ID_AN_INDIRECT
00001D74  B03C 0007               1998    CMP.B   #7,D0         *111 -> All Data Operations
00001D78  6700 0006               1999    BEQ     JSR_EA_MODE_ELSE
00001D7C                          2000  
00001D7C  6000 06B4               2001    BRA     PRINT_ILLEGAL
00001D80                          2002  
00001D80                          2003  
00001D80                          2004  *________________________________________
00001D80                          2005  * Handle Data Branching Logic
00001D80                          2006  * Only short and long indirect allowed
00001D80                          2007  *----------------------------------------
00001D80                          2008  JSR_EA_MODE_ELSE
00001D80                          2009  
00001D80  4280                    2010    CLR.L   D0
00001D82  1007                    2011    MOVE.B  D7,D0
00001D84  C03C 0007               2012    AND.B   #7,D0
00001D88                          2013  
00001D88  B03C 0000               2014    CMP.B   #0,D0
00001D8C  6700 0018               2015    BEQ     JSR_PUSH_EA_MODE_ID_IND_SHORT
00001D90                          2016  
00001D90  B03C 0001               2017    CMP.B   #1,D0
00001D94  6700 001A               2018    BEQ     JSR_PUSH_EA_MODE_ID_IND_LONG
00001D98                          2019  
00001D98  6000 0698               2020    BRA     PRINT_ILLEGAL
00001D9C                          2021  
00001D9C                          2022  *________________________________________
00001D9C                          2023  * Jump directly into the middle of
00001D9C                          2024  * the PUSH_EA_MODE subroutine
00001D9C                          2025  *----------------------------------------
00001D9C                          2026  JSR_PUSH_EA_MODE_ID_AN_INDIRECT
00001D9C  4EB9 00001E3E           2027    JSR   PUSH_EA_MODE_ID_AN_INDIRECT
00001DA2  6000 0016               2028    BRA   JSR_FINISH
00001DA6                          2029  
00001DA6                          2030  *________________________________________
00001DA6                          2031  * Jump directly into the middle of
00001DA6                          2032  * the PUSH_EA_MODE subroutine
00001DA6                          2033  *----------------------------------------
00001DA6                          2034  JSR_PUSH_EA_MODE_ID_IND_SHORT
00001DA6  4EB9 00001E7E           2035    JSR   PUSH_EA_MODE_ID_IND_SHORT
00001DAC  6000 000C               2036    BRA   JSR_FINISH
00001DB0                          2037  
00001DB0                          2038  *________________________________________
00001DB0                          2039  * Jump directly into the middle of
00001DB0                          2040  * the PUSH_EA_MODE subroutine
00001DB0                          2041  *----------------------------------------
00001DB0                          2042  JSR_PUSH_EA_MODE_ID_IND_LONG
00001DB0  4EB9 00001E92           2043    JSR   PUSH_EA_MODE_ID_IND_LONG
00001DB6  6000 0002               2044    BRA   JSR_FINISH
00001DBA                          2045  
00001DBA                          2046  JSR_FINISH
00001DBA                          2047  
00001DBA  5478 1010               2048    ADD.W   #2,LOOP_INC     * Increment the loop counter by 1 word
00001DBE                          2049  
00001DBE  6000 0002               2050    BRA     PRINT_OPCODE    * Always put this at the end
00001DC2                          2051  
00001DC2                          2052  *-------------------------------------------------------------------------------
00001DC2                          2053  *   PRINT OPCODE
00001DC2                          2054  *-------------------------------------------------------------------------------
00001DC2                          2055  
00001DC2                          2056  PRINT_OPCODE
00001DC2                          2057  
00001DC2  2E78 100C               2058    MOVE.L  STACK_BASE,SP * Put the stack back to where it was when we started
00001DC6  31FC 0000 100A          2059    MOVE.W  #0,PRINT_OPCODE_LOOP_INDEX
00001DCC                          2060  
00001DCC                          2061  PRINT_OPCODE_LOOP
00001DCC                          2062  
00001DCC  3278 100A               2063    MOVEA.W   PRINT_OPCODE_LOOP_INDEX,A1
00001DD0                          2064  
00001DD0  B2F8 1008               2065    CMP.W   PRINT_COUNT,A1 * Check if we're done
00001DD4  6C00 000C               2066    BGE     PRINT_OPCODE_LOOP_FINISH
00001DD8                          2067  
00001DD8  2467                    2068    MOVE.L  -(SP),A2  * Pop the next item on the stack and put it in A1
00001DDA  4ED2                    2069    JMP     (A2)        * Jump to the routine we stored on the stack
00001DDC                          2070  
00001DDC                          2071  PRINT_OPCODE_LOOP_RETURN * Print methods come back here
00001DDC                          2072  
00001DDC  5878 100A               2073    ADD.W    #4,PRINT_OPCODE_LOOP_INDEX
00001DE0                          2074  
00001DE0  60EA                    2075    BRA     PRINT_OPCODE_LOOP
00001DE2                          2076  
00001DE2                          2077  PRINT_OPCODE_LOOP_FINISH
00001DE2                          2078  
00001DE2  2E78 100C               2079    MOVE.L  STACK_BASE,SP  * Return the stack to normal so we can RTS
00001DE6                          2080  
00001DE6  4EB9 00002486           2081    JSR     PRINT_IMMEDIATE_NEWLINE
00001DEC  4E75                    2082    RTS
00001DEE                          2083  
00001DEE                          2084  *-------------------------------------------------------------------------------
00001DEE                          2085  
00001DEE                          2086  
00001DEE                          2087  
00001DEE                          2088  
00001DEE                          2089  
00001DEE                          2090  
00001DEE                          2091  
00001DEE                          2092  
00001DEE                          2093  
00001DEE                          2094  
00001DEE                          2095  *-------------------------------------------------------------------------------
00001DEE                          2096  *     _______    ________
00001DEE                          2097  *    |\  ___ \  |\   __  \
00001DEE                          2098  *    \ \   __/| \ \  \|\  \
00001DEE                          2099  *     \ \  \_|/__\ \   __  \
00001DEE                          2100  *      \ \  \_|\ \\ \  \ \  \
00001DEE                          2101  *       \ \_______\\ \__\ \__\
00001DEE                          2102  *        \|_______| \|__|\|__|
00001DEE                          2103  *
00001DEE                          2104  *-------------------------------------------------------------------------------
00001DEE                          2105  
00001DEE                          2106  *-------------------------------------------------------------------------------
00001DEE                          2107  *
00001DEE                          2108  *       PUSH EFFECTIVE ADDRESS MODE IDENTIFIER
00001DEE                          2109  *
00001DEE                          2110  * Determines the addressing mode of the effective address. Used for opcodes
00001DEE                          2111  * with the last five bits dedicated to the effective address.
00001DEE                          2112  *
00001DEE                          2113  * TODO: Implement a counter for how many prints we've made
00001DEE                          2114  *
00001DEE                          2115  *________________________________________
00001DEE                          2116  * Register Use Summary:
00001DEE                          2117  *
00001DEE                          2118  * D0: LOCAL VARIABLE - low byte of opcode
00001DEE                          2119  * D6: PARAMETER - The effective address bits. Assumes bits are shifted into
00001DEE                          2120  *                 the lowest 6 bits of the register.
00001DEE                          2121  *
00001DEE                          2122  * A4: LOCAL VARIABLE - RTS value temporary storage - must be swapped
00001DEE                          2123  * A5: LOCAL VARIABLE - Print Label to be pushed to stack
00001DEE                          2124  *
00001DEE                          2125  *-------------------------------------------------------------------------------
00001DEE                          2126  PUSH_EA_MODE_ID
00001DEE                          2127  
00001DEE                          2128  
00001DEE                          2129  * ---- Input Processing ----
00001DEE                          2130  
00001DEE  1006                    2131      MOVE.B  D6,D0   * Put opcode in D0
00001DF0  C03C 0038               2132      AND.B   #$38,D0 * Mask D0 with 0111000 to get MODE bits only
00001DF4  E600                    2133      ASR.B   #3,D0   * Shift the result so D0 ranges between 000 and 111
00001DF6                          2134  
00001DF6                          2135  
00001DF6                          2136  * ---- Branching Block ----
00001DF6                          2137  
00001DF6  B03C 0000               2138      CMP.B   #0,D0           *000 -> Register
00001DFA  6700 002E               2139      BEQ     PUSH_EA_MODE_ID_DN
00001DFE  B03C 0001               2140      CMP.B   #1,D0           *001 -> Address Register
00001E02  6700 0030               2141      BEQ     PUSH_EA_MODE_ID_AN
00001E06  B03C 0002               2142      CMP.B   #2,D0           *010 -> Address Register   Indirect
00001E0A  6700 0032               2143      BEQ     PUSH_EA_MODE_ID_AN_INDIRECT
00001E0E  B03C 0003               2144      CMP.B   #3,D0           *011 -> Address Register  (Indirect)+
00001E12  6700 0034               2145      BEQ     PUSH_EA_MODE_ID_AN_POST_INC
00001E16  B03C 0004               2146      CMP.B   #4,D0           *100 -> Address Register -(Indirect)
00001E1A  6700 0036               2147      BEQ     PUSH_EA_MODE_ID_AN_PRE_DEC
00001E1E  B03C 0007               2148      CMP.B   #7,D0           *111 -> All Data Operations
00001E22  6700 0038               2149      BEQ     PUSH_EA_MODE_ID_ELSE
00001E26                          2150  
00001E26  6000 060A               2151      BRA     PRINT_ILLEGAL
00001E2A                          2152  
00001E2A                          2153  *________________________________________
00001E2A                          2154  * Load Register Print Label
00001E2A                          2155  *----------------------------------------
00001E2A                          2156  PUSH_EA_MODE_ID_DN
00001E2A  4BF9 0000221A           2157      LEA     PRINT_EA_MODE_ID_DN,A5
00001E30  6000 0088               2158      BRA     PUSH_EA_MODE_ID_FINISH
00001E34                          2159  
00001E34                          2160  *________________________________________
00001E34                          2161  * Load Address Register Print Label
00001E34                          2162  *----------------------------------------
00001E34                          2163  PUSH_EA_MODE_ID_AN
00001E34  4BF9 00002238           2164      LEA     PRINT_EA_MODE_ID_AN,A5
00001E3A  6000 007E               2165      BRA     PUSH_EA_MODE_ID_FINISH
00001E3E                          2166  
00001E3E                          2167  *________________________________________
00001E3E                          2168  * Load (Address Register) Print Label
00001E3E                          2169  *----------------------------------------
00001E3E                          2170  PUSH_EA_MODE_ID_AN_INDIRECT
00001E3E  4BF9 00002256           2171      LEA     PRINT_EA_MODE_ID_AN_INDIRECT,A5
00001E44  6000 0074               2172      BRA     PUSH_EA_MODE_ID_FINISH
00001E48                          2173  
00001E48                          2174  *________________________________________
00001E48                          2175  * Load (Address Register)+ Print Label
00001E48                          2176  *----------------------------------------
00001E48                          2177  PUSH_EA_MODE_ID_AN_POST_INC
00001E48  4BF9 0000228C           2178      LEA     PRINT_EA_MODE_ID_AN_POST_INC,A5
00001E4E  6000 006A               2179      BRA     PUSH_EA_MODE_ID_FINISH
00001E52                          2180  
00001E52                          2181  *________________________________________
00001E52                          2182  * Load -(Address Register) Print Label
00001E52                          2183  *----------------------------------------
00001E52                          2184  PUSH_EA_MODE_ID_AN_PRE_DEC
00001E52  4BF9 000022CE           2185      LEA     PRINT_EA_MODE_ID_AN_PRE_DEC,A5
00001E58  6000 0060               2186      BRA     PUSH_EA_MODE_ID_FINISH
00001E5C                          2187  
00001E5C                          2188  *________________________________________
00001E5C                          2189  * Handle Data Branching Logic
00001E5C                          2190  *----------------------------------------
00001E5C                          2191  PUSH_EA_MODE_ID_ELSE
00001E5C  1006                    2192      MOVE.B  D6,D0
00001E5E  C03C 0007               2193      AND.B   #7,D0
00001E62                          2194  
00001E62  B03C 0000               2195      CMP.B   #0,D0
00001E66  6700 0016               2196      BEQ     PUSH_EA_MODE_ID_IND_SHORT
00001E6A                          2197  
00001E6A  B03C 0001               2198      CMP.B   #1,D0
00001E6E  6700 0022               2199      BEQ     PUSH_EA_MODE_ID_IND_LONG
00001E72                          2200  
00001E72  B03C 0004               2201      CMP.B   #4,D0
00001E76  6700 002E               2202      BEQ     PUSH_EA_MODE_ID_ABS_DATA
00001E7A                          2203  
00001E7A  6000 05B6               2204      BRA     PRINT_ILLEGAL
00001E7E                          2205  
00001E7E                          2206  PUSH_EA_MODE_ID_IND_SHORT
00001E7E  4BF9 00002310           2207      LEA     PRINT_EA_MODE_ID_IND_SHORT,A5
00001E84  5478 1010               2208      ADD.W           #2, LOOP_INC * Adjust the Loop increment to skip the data
00001E88  31FC 0001 101A          2209      MOVE.W  #1,DATA1_IN_USE
00001E8E  6000 002A               2210      BRA     PUSH_EA_MODE_ID_FINISH
00001E92                          2211  
00001E92                          2212  PUSH_EA_MODE_ID_IND_LONG
00001E92  4BF9 00002352           2213      LEA     PRINT_EA_MODE_ID_IND_LONG,A5
00001E98  5878 1010               2214      ADD.W           #4,LOOP_INC * Adjust the Loop increment to skip the data
00001E9C  31FC 0001 101A          2215      MOVE.W  #1,DATA1_IN_USE
00001EA2  6000 0016               2216      BRA     PUSH_EA_MODE_ID_FINISH
00001EA6                          2217  
00001EA6                          2218  PUSH_EA_MODE_ID_ABS_DATA
00001EA6  4BF9 00002386           2219      LEA     PRINT_EA_MODE_ID_ABS_DATA,A5
00001EAC  5878 1010               2220      ADD.W           #4,LOOP_INC * Adjust the Loop increment to skip the data
00001EB0  31FC 0001 101A          2221          MOVE.W  #1,DATA1_IN_USE
00001EB6  6000 0002               2222      BRA     PUSH_EA_MODE_ID_FINISH
00001EBA                          2223  
00001EBA                          2224  *________________________________________
00001EBA                          2225  PUSH_EA_MODE_ID_FINISH
00001EBA  2857                    2226      MOVEA.L         (SP),A4 * Store the value we're going to RTS to
00001EBC  588F                    2227      ADD.L           #4,SP   * Move the stack pointer down to the RTS value
00001EBE  2F0D                    2228      MOVE.L          A5,-(SP)    * Overwrite the RTS value with the print label
00001EC0  2F0C                    2229      MOVE.L          A4,-(SP)    * Push the RTS so we can return like normal
00001EC2                          2230  
00001EC2  5878 1008               2231      ADD.W           #4,PRINT_COUNT
00001EC6                          2232  
00001EC6  4E75                    2233      RTS
00001EC8                          2234  
00001EC8                          2235  *-------------------------------------------------------------------------------
00001EC8                          2236  *                 ________  ___       __   ___
00001EC8                          2237  *                |\   __  \|\  \     |\  \|\  \
00001EC8                          2238  *                \ \  \|\ /\ \  \    \ \  \ \  \
00001EC8                          2239  *                 \ \   __  \ \  \  __\ \  \ \  \
00001EC8                          2240  *                  \ \  \|\  \ \  \|\__\_\  \ \  \____
00001EC8                          2241  *                   \ \_______\ \____________\ \_______\
00001EC8                          2242  *                    \|_______|\|____________|\|_______|
00001EC8                          2243  *
00001EC8                          2244  
00001EC8                          2245  *-------------------------------------------------------------------------------
00001EC8                          2246  
00001EC8                          2247  *-------------------------------------------------------------------------------
00001EC8                          2248  *
00001EC8                          2249  *       PUSH BYTE, WORD, OR LONG
00001EC8                          2250  *
00001EC8                          2251  * TODO: Implement a counter for how many prints we've made
00001EC8                          2252  *________________________________________
00001EC8                          2253  * Register Use Summary:
00001EC8                          2254  *
00001EC8                          2255  * D4: PARAMETER       - The size bits to print
00001EC8                          2256  * D7: CONST PARAMETER - The opcode word
00001EC8                          2257  *
00001EC8                          2258  * A4: LOCAL VARIABLE  - Temp RTS location
00001EC8                          2259  * A5: LOCAL VARIABLE  - Label for the print routine to store on the stack
00001EC8                          2260  *-------------------------------------------------------------------------------
00001EC8                          2261  PUSH_BWL
00001EC8                          2262  
00001EC8                          2263  * ---- Branching Block ----
00001EC8                          2264  
00001EC8  B83C 0000               2265      CMP.B           #0,D4       *00 -> Byte
00001ECC  6700 0016               2266      BEQ             PUSH_BWL_BYTE
00001ED0  B83C 0001               2267      CMP.B           #1,D4       *01 -> Word
00001ED4  6700 0018               2268      BEQ             PUSH_BWL_WORD
00001ED8  B83C 0002               2269      CMP.B           #2,D4       *10 -> Long
00001EDC  6700 001A               2270      BEQ             PUSH_BWL_LONG
00001EE0                          2271  
00001EE0  6000 0550               2272      BRA             PRINT_ILLEGAL
00001EE4                          2273  
00001EE4                          2274  *________________________________________
00001EE4                          2275  * Load Byte Print Label
00001EE4                          2276  *----------------------------------------
00001EE4                          2277  PUSH_BWL_BYTE
00001EE4  4BF9 000021EA           2278      LEA             PRINT_BYTE_DESIGNATOR,A5
00001EEA  6000 0016               2279      BRA             PUSH_BWL_FINISH
00001EEE                          2280  *________________________________________
00001EEE                          2281  * Load Word Print Label
00001EEE                          2282  *----------------------------------------
00001EEE                          2283  PUSH_BWL_WORD
00001EEE  4BF9 000021FA           2284      LEA             PRINT_WORD_DESIGNATOR,A5
00001EF4  6000 000C               2285      BRA             PUSH_BWL_FINISH
00001EF8                          2286  
00001EF8                          2287  *________________________________________
00001EF8                          2288  * Load Long Print Label
00001EF8                          2289  *----------------------------------------
00001EF8                          2290  PUSH_BWL_LONG
00001EF8  4BF9 0000220A           2291      LEA             PRINT_LONG_DESIGNATOR,A5
00001EFE  6000 0002               2292      BRA             PUSH_BWL_FINISH
00001F02                          2293  
00001F02                          2294  *________________________________________
00001F02                          2295  PUSH_BWL_FINISH
00001F02                          2296  
00001F02  2857                    2297      MOVEA.L         (SP),A4 * Store the value we're going to RTS to
00001F04  588F                    2298      ADD.L           #4,SP   * Move the stack pointer down to the RTS value
00001F06  2F0D                    2299      MOVE.L          A5,-(SP)    * Overwrite the RTS value with the print label
00001F08  2F0C                    2300      MOVE.L          A4,-(SP)    * Push the RTS so we can return like normal
00001F0A                          2301  
00001F0A  5878 1008               2302      ADD.W           #4,PRINT_COUNT
00001F0E                          2303  
00001F0E  4E75                    2304      RTS
00001F10                          2305  
00001F10                          2306  
00001F10                          2307  *-------------------------------------------------------------------------------
00001F10                          2308  *     ________   ________   ___   ________    _________
00001F10                          2309  *    |\   __  \ |\   __  \ |\  \ |\   ___  \ |\___   ___\
00001F10                          2310  *    \ \  \|\  \\ \  \|\  \\ \  \\ \  \\ \  \\|___ \  \_|
00001F10                          2311  *     \ \   ____\\ \   _  _\\ \  \\ \  \\ \  \    \ \  \
00001F10                          2312  *      \ \  \___| \ \  \\  \|\ \  \\ \  \\ \  \    \ \  \
00001F10                          2313  *       \ \__\     \ \__\\ _\ \ \__\\ \__\\ \__\    \ \__\
00001F10                          2314  *        \|__|      \|__|\|__| \|__| \|__| \|__|     \|__|
00001F10                          2315  *
00001F10                          2316  * May god have mercy on your soul
00001F10                          2317  *-------------------------------------------------------------------------------
00001F10                          2318  *-------------------------------------------------------------------------------
00001F10                          2319  *
00001F10                          2320  *       PRINT LSR
00001F10                          2321  *________________________________________
00001F10                          2322  * Register Use Summary:
00001F10                          2323  *
00001F10                          2324  * D0: LOCAL VARIABLE  - Trap task designator
00001F10                          2325  *
00001F10                          2326  * A1: LOCAL VARIABLE  - String address
00001F10                          2327  *-------------------------------------------------------------------------------
00001F10                          2328  PRINT_LSR
00001F10  43F9 00002AE2           2329      LEA             STRING_LSR,A1   * Load "LSR" into A1
00001F16  103C 000E               2330      MOVE.B          #14,D0      * Set trap task to String
00001F1A  4E4F                    2331      TRAP            #15         * Print "LSR "
00001F1C  6000 FEBE               2332      BRA             PRINT_OPCODE_LOOP_RETURN
00001F20                          2333  
00001F20                          2334  *-------------------------------------------------------------------------------
00001F20                          2335  *
00001F20                          2336  *       PRINT LSL
00001F20                          2337  *________________________________________
00001F20                          2338  * Register Use Summary:
00001F20                          2339  *
00001F20                          2340  * D0: LOCAL VARIABLE  - Trap task designator
00001F20                          2341  *
00001F20                          2342  * A1: LOCAL VARIABLE  - String address
00001F20                          2343  *-------------------------------------------------------------------------------
00001F20                          2344  PRINT_LSL
00001F20  43F9 00002AE6           2345      LEA             STRING_LSL,A1   * Load "LSL" into A1
00001F26  103C 000E               2346      MOVE.B          #14,D0      * Set trap task to String
00001F2A  4E4F                    2347      TRAP            #15         * Print "LSL "
00001F2C  6000 FEAE               2348      BRA             PRINT_OPCODE_LOOP_RETURN
00001F30                          2349  
00001F30                          2350  *-------------------------------------------------------------------------------
00001F30                          2351  *
00001F30                          2352  *       PRINT ASR
00001F30                          2353  *________________________________________
00001F30                          2354  * Register Use Summary:
00001F30                          2355  *
00001F30                          2356  * D0: LOCAL VARIABLE  - Trap task designator
00001F30                          2357  *
00001F30                          2358  * A1: LOCAL VARIABLE  - String address
00001F30                          2359  *-------------------------------------------------------------------------------
00001F30                          2360  PRINT_ASR
00001F30  43F9 00002ADA           2361      LEA             STRING_ASR,A1   * Load "ASR" into A1
00001F36  103C 000E               2362      MOVE.B          #14,D0      * Set trap task to String
00001F3A  4E4F                    2363      TRAP            #15         * Print "ASR "
00001F3C  6000 FE9E               2364      BRA             PRINT_OPCODE_LOOP_RETURN
00001F40                          2365  
00001F40                          2366  *-------------------------------------------------------------------------------
00001F40                          2367  *
00001F40                          2368  *       PRINT ASL
00001F40                          2369  *________________________________________
00001F40                          2370  * Register Use Summary:
00001F40                          2371  *
00001F40                          2372  * D0: LOCAL VARIABLE  - Trap task designator
00001F40                          2373  *
00001F40                          2374  * A1: LOCAL VARIABLE  - String address
00001F40                          2375  *-------------------------------------------------------------------------------
00001F40                          2376  PRINT_ASL
00001F40  43F9 00002ADE           2377      LEA             STRING_ASL,A1   * Load "ASL" into A1
00001F46  103C 000E               2378      MOVE.B          #14,D0      * Set trap task to String
00001F4A  4E4F                    2379      TRAP            #15         * Print "ASL "
00001F4C  6000 FE8E               2380      BRA             PRINT_OPCODE_LOOP_RETURN
00001F50                          2381  
00001F50                          2382  *-------------------------------------------------------------------------------
00001F50                          2383  *
00001F50                          2384  *       PRINT ROR
00001F50                          2385  *________________________________________
00001F50                          2386  * Register Use Summary:
00001F50                          2387  *
00001F50                          2388  * D0: LOCAL VARIABLE  - Trap task designator
00001F50                          2389  *
00001F50                          2390  * A1: LOCAL VARIABLE  - String address
00001F50                          2391  *-------------------------------------------------------------------------------
00001F50                          2392  PRINT_ROR
00001F50  43F9 00002AEA           2393      LEA             STRING_ROR,A1   * Load "ROR" into A1
00001F56  103C 000E               2394      MOVE.B          #14,D0      * Set trap task to String
00001F5A  4E4F                    2395      TRAP            #15         * Print "ROR "
00001F5C  6000 FE7E               2396      BRA             PRINT_OPCODE_LOOP_RETURN
00001F60                          2397  
00001F60                          2398  *-------------------------------------------------------------------------------
00001F60                          2399  *
00001F60                          2400  *       PRINT ROL
00001F60                          2401  *________________________________________
00001F60                          2402  * Register Use Summary:
00001F60                          2403  *
00001F60                          2404  * D0: LOCAL VARIABLE  - Trap task designator
00001F60                          2405  *
00001F60                          2406  * A1: LOCAL VARIABLE  - String address
00001F60                          2407  *-------------------------------------------------------------------------------
00001F60                          2408  PRINT_ROL
00001F60  43F9 00002AEE           2409      LEA             STRING_ROL,A1   * Load "ROL" into A1
00001F66  103C 000E               2410      MOVE.B          #14,D0      * Set trap task to String
00001F6A  4E4F                    2411      TRAP            #15         * Print "ROL"
00001F6C  6000 FE6E               2412      BRA             PRINT_OPCODE_LOOP_RETURN
00001F70                          2413  
00001F70                          2414  *-------------------------------------------------------------------------------
00001F70                          2415  *
00001F70                          2416  *       PRINT DATA1_WORD
00001F70                          2417  *________________________________________
00001F70                          2418  * Register Use Summary:
00001F70                          2419  *
00001F70                          2420  * D0: LOCAL VARIABLE  - Trap task designator
00001F70                          2421  *
00001F70                          2422  * D1: LOCAL VARIABLE  - DATA1 local copy
00001F70                          2423  *
00001F70                          2424  * D2: LOCAL VARIABLE  - Base in which to print
00001F70                          2425  *
00001F70                          2426  * A1: LOCAL VARIABLE  - String address
00001F70                          2427  *-------------------------------------------------------------------------------
00001F70                          2428  PRINT_DATA1_LONG
00001F70  2238 1016               2429      MOVE.L          DATA1,D1
00001F74  700F                    2430      MOVEQ           #15,D0
00001F76  7410                    2431      MOVEQ           #16,D2
00001F78  4E4F                    2432      TRAP            #15
00001F7A                          2433  
00001F7A                          2434  *-------------------------------------------------------------------------------
00001F7A                          2435  *
00001F7A                          2436  *       PRINT DATA1_WORD
00001F7A                          2437  *________________________________________
00001F7A                          2438  * Register Use Summary:
00001F7A                          2439  *
00001F7A                          2440  * D0: LOCAL VARIABLE  - Trap task designator
00001F7A                          2441  *
00001F7A                          2442  * D1: LOCAL VARIABLE  - DATA1 local copy
00001F7A                          2443  *
00001F7A                          2444  * D2: LOCAL VARIABLE  - Base in which to print
00001F7A                          2445  *
00001F7A                          2446  * A1: LOCAL VARIABLE  - String address
00001F7A                          2447  *-------------------------------------------------------------------------------
00001F7A                          2448  PRINT_DATA1_WORD
00001F7A  2238 1016               2449      MOVE.L          DATA1,D1
00001F7E  4841                    2450      SWAP            D1              * We only want the upper word
00001F80  C27C FFFF               2451      AND             #$0000FFFF,D1   * Bit mask for upper word
00001F84  700F                    2452      MOVEQ           #15,D0
00001F86  7410                    2453      MOVEQ           #16,D2
00001F88  4E4F                    2454      TRAP            #15
00001F8A                          2455  
00001F8A                          2456  *-------------------------------------------------------------------------------
00001F8A                          2457  *
00001F8A                          2458  *       PRINT BGT
00001F8A                          2459  *________________________________________
00001F8A                          2460  * Register Use Summary:
00001F8A                          2461  *
00001F8A                          2462  * D0: LOCAL VARIABLE  - Trap task designator
00001F8A                          2463  *
00001F8A                          2464  * A1: LOCAL VARIABLE  - String address
00001F8A                          2465  *-------------------------------------------------------------------------------
00001F8A                          2466  PRINT_BGT
00001F8A  43F9 00002B17           2467      LEA             STRING_BGT,A1   * Load "BGT" into A1
00001F90  103C 000E               2468      MOVE.B          #14,D0      * Set trap task to String
00001F94  4E4F                    2469      TRAP            #15         * Print "BGT "
00001F96  6000 FE44               2470      BRA             PRINT_OPCODE_LOOP_RETURN
00001F9A                          2471  
00001F9A                          2472  *-------------------------------------------------------------------------------
00001F9A                          2473  *
00001F9A                          2474  *       PRINT BLE
00001F9A                          2475  *________________________________________
00001F9A                          2476  * Register Use Summary:
00001F9A                          2477  *
00001F9A                          2478  * D0: LOCAL VARIABLE  - Trap task designator
00001F9A                          2479  *
00001F9A                          2480  * A1: LOCAL VARIABLE  - String address
00001F9A                          2481  *-------------------------------------------------------------------------------
00001F9A                          2482  PRINT_BLE
00001F9A  43F9 00002B0D           2483      LEA             STRING_BLE,A1   * Load "BLE" into A1
00001FA0  103C 000E               2484      MOVE.B          #14,D0      * Set trap task to String
00001FA4  4E4F                    2485      TRAP            #15         * Print "BLE "
00001FA6  6000 FE34               2486      BRA             PRINT_OPCODE_LOOP_RETURN
00001FAA                          2487  
00001FAA                          2488  *-------------------------------------------------------------------------------
00001FAA                          2489  *
00001FAA                          2490  *       PRINT BEQ
00001FAA                          2491  *________________________________________
00001FAA                          2492  * Register Use Summary:
00001FAA                          2493  *
00001FAA                          2494  * D0: LOCAL VARIABLE  - Trap task designator
00001FAA                          2495  *
00001FAA                          2496  * A1: LOCAL VARIABLE  - String address
00001FAA                          2497  *-------------------------------------------------------------------------------
00001FAA                          2498  PRINT_BEQ
00001FAA  43F9 00002B08           2499      LEA             STRING_BEQ,A1   * Load "BEQ" into A1
00001FB0  103C 000E               2500      MOVE.B          #14,D0      * Set trap task to String
00001FB4  4E4F                    2501      TRAP            #15         * Print "BEQ "
00001FB6  6000 FE24               2502      BRA             PRINT_OPCODE_LOOP_RETURN
00001FBA                          2503  
00001FBA                          2504  
00001FBA                          2505  *-------------------------------------------------------------------------------
00001FBA                          2506  *
00001FBA                          2507  *       PRINT BRA
00001FBA                          2508  *________________________________________
00001FBA                          2509  * Register Use Summary:
00001FBA                          2510  *
00001FBA                          2511  * D0: LOCAL VARIABLE  - Trap task designator
00001FBA                          2512  *
00001FBA                          2513  * A1: LOCAL VARIABLE  - String address
00001FBA                          2514  *-------------------------------------------------------------------------------
00001FBA                          2515  PRINT_BRA
00001FBA  43F9 00002B12           2516      LEA             STRING_BRA,A1   * Load "BRA" into A1
00001FC0  103C 000E               2517      MOVE.B          #14,D0      * Set trap task to String
00001FC4  4E4F                    2518      TRAP            #15         * Print "BRA "
00001FC6  6000 FE14               2519      BRA             PRINT_OPCODE_LOOP_RETURN
00001FCA                          2520  
00001FCA                          2521  
00001FCA                          2522  *-------------------------------------------------------------------------------
00001FCA                          2523  *
00001FCA                          2524  *       PRINT ADD
00001FCA                          2525  *________________________________________
00001FCA                          2526  * Register Use Summary:
00001FCA                          2527  *
00001FCA                          2528  * D0: LOCAL VARIABLE  - Trap task designator
00001FCA                          2529  *
00001FCA                          2530  * A1: LOCAL VARIABLE  - String address
00001FCA                          2531  *-------------------------------------------------------------------------------
00001FCA                          2532  PRINT_ADD
00001FCA  43F9 00002AFF           2533      LEA             STRING_ADD,A1   * Load "ADD" into A1
00001FD0  103C 000E               2534      MOVE.B          #14,D0      * Set trap task to String
00001FD4  4E4F                    2535      TRAP            #15         * Print "ADD "
00001FD6  6000 FE04               2536      BRA             PRINT_OPCODE_LOOP_RETURN
00001FDA                          2537  
00001FDA                          2538  
00001FDA                          2539  *-------------------------------------------------------------------------------
00001FDA                          2540  *
00001FDA                          2541  *       PRINT ADDA
00001FDA                          2542  *________________________________________
00001FDA                          2543  * Register Use Summary:
00001FDA                          2544  *
00001FDA                          2545  * D0: LOCAL VARIABLE  - Trap task designator
00001FDA                          2546  *
00001FDA                          2547  * A1: LOCAL VARIABLE  - String address
00001FDA                          2548  *-------------------------------------------------------------------------------
00001FDA                          2549  PRINT_ADDA
00001FDA  43F9 00002B03           2550      LEA             STRING_ADDA,A1  * Load "ADDA" into A1
00001FE0  103C 000E               2551      MOVE.B          #14,D0      * Set trap task to String
00001FE4  4E4F                    2552      TRAP            #15         * Print "ADDA "
00001FE6  6000 FDF4               2553      BRA             PRINT_OPCODE_LOOP_RETURN
00001FEA                          2554  
00001FEA                          2555  
00001FEA                          2556  *-------------------------------------------------------------------------------
00001FEA                          2557  *
00001FEA                          2558  *       PRINT MISC_NUMBER
00001FEA                          2559  *________________________________________
00001FEA                          2560  * Register Use Summary:
00001FEA                          2561  *
00001FEA                          2562  * D0: LOCAL VARIABLE  - Trap task designator
00001FEA                          2563  *
00001FEA                          2564  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
00001FEA                          2565  *
00001FEA                          2566  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
00001FEA                          2567  *
00001FEA                          2568  * A1: LOCAL VARIABLE  - String address
00001FEA                          2569  *-------------------------------------------------------------------------------
00001FEA                          2570  PRINT_MISC_NUMBER
00001FEA  4281                    2571      CLR.L   D1
00001FEC                          2572  
00001FEC  103C 000F               2573      MOVE.B  #15,D0
00001FF0  1239 00002B92           2574      MOVE.B  MISC_NUMBER,D1
00001FF6  143C 000A               2575      MOVE.B  #10,D2
00001FFA  4E4F                    2576      TRAP #15
00001FFC                          2577  
00001FFC  6000 FDDE               2578      BRA     PRINT_OPCODE_LOOP_RETURN
00002000                          2579  
00002000                          2580  *-------------------------------------------------------------------------------
00002000                          2581  *
00002000                          2582  *       PRINT MISC_NUMBER_AS_ADDRESS
00002000                          2583  *________________________________________
00002000                          2584  * Register Use Summary:
00002000                          2585  *
00002000                          2586  * D0: LOCAL VARIABLE  - Trap task designator
00002000                          2587  *
00002000                          2588  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
00002000                          2589  *
00002000                          2590  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
00002000                          2591  *
00002000                          2592  * A1: LOCAL VARIABLE  - String address
00002000                          2593  *-------------------------------------------------------------------------------
00002000                          2594  PRINT_MISC_NUMBER_AS_ADDRESS
00002000                          2595  
00002000  43F9 00002AC0           2596      LEA             STRING_A,A1
00002006  103C 000E               2597      MOVE.B          #14,D0
0000200A  4E4F                    2598      TRAP            #15
0000200C                          2599  
0000200C  4280                    2600      CLR.L   D0
0000200E  4281                    2601      CLR.L   D1
00002010  4282                    2602      CLR.L   D2
00002012                          2603  
00002012  103C 000F               2604      MOVE.B  #15,D0
00002016  1239 00002B92           2605      MOVE.B  MISC_NUMBER,D1
0000201C  143C 000A               2606      MOVE.B  #10,D2
00002020  4E4F                    2607      TRAP #15
00002022                          2608  
00002022  6000 FDB8               2609      BRA     PRINT_OPCODE_LOOP_RETURN
00002026                          2610  
00002026                          2611  *-------------------------------------------------------------------------------
00002026                          2612  *
00002026                          2613  *       PRINT MISC_NUMBER_AS_REGISTER
00002026                          2614  *________________________________________
00002026                          2615  * Register Use Summary:
00002026                          2616  *
00002026                          2617  * D0: LOCAL VARIABLE  - Trap task designator
00002026                          2618  *
00002026                          2619  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
00002026                          2620  *
00002026                          2621  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
00002026                          2622  *
00002026                          2623  * A1: LOCAL VARIABLE  - String address
00002026                          2624  *-------------------------------------------------------------------------------
00002026                          2625  PRINT_MISC_NUMBER_AS_REGISTER
00002026                          2626  
00002026  43F9 00002ABE           2627      LEA             STRING_D,A1
0000202C  103C 000E               2628      MOVE.B          #14,D0
00002030  4E4F                    2629      TRAP            #15
00002032                          2630  
00002032  4280                    2631      CLR.L   D0
00002034  4281                    2632      CLR.L   D1
00002036  4282                    2633      CLR.L   D2
00002038                          2634  
00002038  103C 000F               2635      MOVE.B  #15,D0
0000203C  1239 00002B92           2636      MOVE.B  MISC_NUMBER,D1
00002042  143C 000A               2637      MOVE.B  #10,D2
00002046  4E4F                    2638      TRAP #15
00002048                          2639  
00002048  6000 FD92               2640      BRA     PRINT_OPCODE_LOOP_RETURN
0000204C                          2641  
0000204C                          2642  *-------------------------------------------------------------------------------
0000204C                          2643  *
0000204C                          2644  *       PRINT MISC_REGISTER
0000204C                          2645  *________________________________________
0000204C                          2646  * Register Use Summary:
0000204C                          2647  *
0000204C                          2648  * D0: LOCAL VARIABLE  - Trap task designator
0000204C                          2649  *
0000204C                          2650  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
0000204C                          2651  *
0000204C                          2652  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
0000204C                          2653  *
0000204C                          2654  * A1: LOCAL VARIABLE  - String address
0000204C                          2655  *-------------------------------------------------------------------------------
0000204C                          2656  PRINT_MISC_REGISTER
0000204C                          2657  
0000204C  43F9 00002ABE           2658      LEA             STRING_D,A1
00002052  103C 000E               2659      MOVE.B          #14,D0
00002056  4E4F                    2660      TRAP            #15
00002058                          2661  
00002058  4280                    2662      CLR.L   D0
0000205A  4281                    2663      CLR.L   D1
0000205C  4282                    2664      CLR.L   D2
0000205E                          2665  
0000205E  103C 000F               2666      MOVE.B  #15,D0
00002062  1239 00002B96           2667      MOVE.B  MISC_REGISTER,D1
00002068  143C 000A               2668      MOVE.B  #10,D2
0000206C  4E4F                    2669      TRAP #15
0000206E                          2670  
0000206E  6000 FD6C               2671      BRA     PRINT_OPCODE_LOOP_RETURN
00002072                          2672  
00002072                          2673  
00002072                          2674  
00002072                          2675  *-------------------------------------------------------------------------------
00002072                          2676  *
00002072                          2677  *       PRINT_MISC_PRE_DEC
00002072                          2678  *________________________________________
00002072                          2679  * Register Use Summary:
00002072                          2680  *
00002072                          2681  * D0: LOCAL VARIABLE  - Trap task designator
00002072                          2682  *
00002072                          2683  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
00002072                          2684  *
00002072                          2685  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
00002072                          2686  *
00002072                          2687  * A1: LOCAL VARIABLE  - String address
00002072                          2688  *-------------------------------------------------------------------------------
00002072                          2689  PRINT_MISC_PRE_DEC
00002072                          2690  
00002072  43F9 00002ACA           2691      LEA             STRING_MINUS,A1
00002078  103C 000E               2692      MOVE.B          #14,D0
0000207C  4E4F                    2693      TRAP            #15
0000207E                          2694  
0000207E  43F9 00002AC4           2695      LEA             STRING_LEFT_PAREN,A1
00002084  103C 000E               2696      MOVE.B          #14,D0
00002088  4E4F                    2697      TRAP            #15
0000208A                          2698  
0000208A  43F9 00002AC0           2699      LEA             STRING_A,A1
00002090  103C 000E               2700      MOVE.B          #14,D0
00002094  4E4F                    2701      TRAP            #15
00002096                          2702  
00002096  4280                    2703      CLR.L   D0
00002098  4281                    2704      CLR.L   D1
0000209A  4282                    2705      CLR.L   D2
0000209C                          2706  
0000209C  103C 000F               2707      MOVE.B  #15,D0
000020A0  1239 00002B92           2708      MOVE.B  MISC_NUMBER,D1
000020A6  143C 000A               2709      MOVE.B  #10,D2
000020AA  4E4F                    2710      TRAP #15
000020AC                          2711  
000020AC  43F9 00002AC6           2712      LEA             STRING_RIGHT_PAREN,A1
000020B2  103C 000E               2713      MOVE.B          #14,D0
000020B6  4E4F                    2714      TRAP            #15
000020B8                          2715  
000020B8  6000 FD22               2716      BRA     PRINT_OPCODE_LOOP_RETURN
000020BC                          2717  
000020BC                          2718  *-------------------------------------------------------------------------------
000020BC                          2719  *
000020BC                          2720  *       PRINT_MISC_POST_INC
000020BC                          2721  *________________________________________
000020BC                          2722  * Register Use Summary:
000020BC                          2723  *
000020BC                          2724  * D0: LOCAL VARIABLE  - Trap task designator
000020BC                          2725  *
000020BC                          2726  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
000020BC                          2727  *
000020BC                          2728  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
000020BC                          2729  *
000020BC                          2730  * A1: LOCAL VARIABLE  - String address
000020BC                          2731  *-------------------------------------------------------------------------------
000020BC                          2732  PRINT_MISC_POST_INC
000020BC                          2733  
000020BC  43F9 00002AC4           2734      LEA             STRING_LEFT_PAREN,A1
000020C2  103C 000E               2735      MOVE.B          #14,D0
000020C6  4E4F                    2736      TRAP            #15
000020C8                          2737  
000020C8  43F9 00002AC0           2738      LEA             STRING_A,A1
000020CE  103C 000E               2739      MOVE.B          #14,D0
000020D2  4E4F                    2740      TRAP            #15
000020D4                          2741  
000020D4  4280                    2742      CLR.L   D0
000020D6  4281                    2743      CLR.L   D1
000020D8  4282                    2744      CLR.L   D2
000020DA                          2745  
000020DA  103C 000F               2746      MOVE.B  #15,D0
000020DE  1239 00002B92           2747      MOVE.B  MISC_NUMBER,D1
000020E4  143C 000A               2748      MOVE.B  #10,D2
000020E8  4E4F                    2749      TRAP #15
000020EA                          2750  
000020EA  43F9 00002AC6           2751      LEA             STRING_RIGHT_PAREN,A1
000020F0  103C 000E               2752      MOVE.B          #14,D0
000020F4  4E4F                    2753      TRAP            #15
000020F6                          2754  
000020F6  43F9 00002AC8           2755      LEA             STRING_PLUS,A1
000020FC  103C 000E               2756      MOVE.B          #14,D0
00002100  4E4F                    2757      TRAP            #15
00002102                          2758  
00002102  6000 FCD8               2759      BRA     PRINT_OPCODE_LOOP_RETURN
00002106                          2760  
00002106                          2761  *-------------------------------------------------------------------------------
00002106                          2762  *
00002106                          2763  *       PRINT_MISC_ADDRESS_IND
00002106                          2764  *________________________________________
00002106                          2765  * Register Use Summary:
00002106                          2766  *
00002106                          2767  * D0: LOCAL VARIABLE  - Trap task designator
00002106                          2768  *
00002106                          2769  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
00002106                          2770  *
00002106                          2771  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
00002106                          2772  *
00002106                          2773  * A1: LOCAL VARIABLE  - String address
00002106                          2774  *-------------------------------------------------------------------------------
00002106                          2775  PRINT_MISC_ADDRESS_IND
00002106                          2776  
00002106  43F9 00002AC4           2777      LEA             STRING_LEFT_PAREN,A1
0000210C  103C 000E               2778      MOVE.B          #14,D0
00002110  4E4F                    2779      TRAP            #15
00002112                          2780  
00002112  43F9 00002AC0           2781      LEA             STRING_A,A1
00002118  103C 000E               2782      MOVE.B          #14,D0
0000211C  4E4F                    2783      TRAP            #15
0000211E                          2784  
0000211E  4280                    2785      CLR.L   D0
00002120  4281                    2786      CLR.L   D1
00002122  4282                    2787      CLR.L   D2
00002124                          2788  
00002124  103C 000F               2789      MOVE.B  #15,D0
00002128  1239 00002B92           2790      MOVE.B  MISC_NUMBER,D1
0000212E  143C 000A               2791      MOVE.B  #10,D2
00002132  4E4F                    2792      TRAP #15
00002134                          2793  
00002134  43F9 00002AC6           2794      LEA             STRING_RIGHT_PAREN,A1
0000213A  103C 000E               2795      MOVE.B          #14,D0
0000213E  4E4F                    2796      TRAP            #15
00002140                          2797  
00002140  6000 FC9A               2798      BRA     PRINT_OPCODE_LOOP_RETURN
00002144                          2799  
00002144                          2800  
00002144                          2801  *-------------------------------------------------------------------------------
00002144                          2802  *
00002144                          2803  *       PRINT MISC_NUMBER_AS_DATA
00002144                          2804  *________________________________________
00002144                          2805  * Register Use Summary:
00002144                          2806  *
00002144                          2807  * D0: LOCAL VARIABLE  - Trap task designator
00002144                          2808  *
00002144                          2809  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
00002144                          2810  *
00002144                          2811  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
00002144                          2812  *
00002144                          2813  * A1: LOCAL VARIABLE  - String address
00002144                          2814  *-------------------------------------------------------------------------------
00002144                          2815  PRINT_MISC_NUMBER_AS_DATA
00002144                          2816  
00002144  43F9 00002ACC           2817      LEA             STRING_POUND,A1
0000214A  103C 000E               2818      MOVE.B          #14,D0
0000214E  4E4F                    2819      TRAP            #15
00002150                          2820  
00002150  4280                    2821      CLR.L   D0
00002152  4281                    2822      CLR.L   D1
00002154  4282                    2823      CLR.L   D2
00002156                          2824  
00002156  103C 000F               2825      MOVE.B  #15,D0
0000215A  1239 00002B92           2826      MOVE.B  MISC_NUMBER,D1
00002160  143C 000A               2827      MOVE.B  #10,D2
00002164  4E4F                    2828      TRAP #15
00002166                          2829  
00002166  6000 FC74               2830      BRA     PRINT_OPCODE_LOOP_RETURN
0000216A                          2831  
0000216A                          2832  
0000216A                          2833  *-------------------------------------------------------------------------------
0000216A                          2834  *
0000216A                          2835  *       PRINT ADDQ
0000216A                          2836  *________________________________________
0000216A                          2837  * Register Use Summary:
0000216A                          2838  *
0000216A                          2839  * D0: LOCAL VARIABLE  - Trap task designator
0000216A                          2840  *
0000216A                          2841  * A1: LOCAL VARIABLE  - String address
0000216A                          2842  *-------------------------------------------------------------------------------
0000216A                          2843  PRINT_ADDQ
0000216A  43F9 00002AFA           2844      LEA             STRING_ADDQ,A1  * Load "ADDQ" into A1
00002170  103C 000E               2845      MOVE.B          #14,D0      * Set trap task to String
00002174  4E4F                    2846      TRAP            #15         * Print ", "
00002176  6000 FC64               2847      BRA             PRINT_OPCODE_LOOP_RETURN
0000217A                          2848  
0000217A                          2849  *-------------------------------------------------------------------------------
0000217A                          2850  *
0000217A                          2851  *       PRINT MOVE
0000217A                          2852  *________________________________________
0000217A                          2853  * Register Use Summary:
0000217A                          2854  *
0000217A                          2855  * D0: LOCAL VARIABLE  - Trap task designator
0000217A                          2856  *
0000217A                          2857  * A1: LOCAL VARIABLE  - String address
0000217A                          2858  *-------------------------------------------------------------------------------
0000217A                          2859  PRINT_MOVE
0000217A  43F9 00002B24           2860      LEA             STRING_MOVE,A1  * Load "MOVE" into A1
00002180  103C 000E               2861      MOVE.B          #14,D0      * Set trap task to String
00002184  4E4F                    2862      TRAP            #15         * Print ", "
00002186  6000 FC54               2863      BRA             PRINT_OPCODE_LOOP_RETURN
0000218A                          2864  
0000218A                          2865  *-------------------------------------------------------------------------------
0000218A                          2866  *
0000218A                          2867  *       PRINT MOVEA
0000218A                          2868  *________________________________________
0000218A                          2869  * Register Use Summary:
0000218A                          2870  *
0000218A                          2871  * D0: LOCAL VARIABLE  - Trap task designator
0000218A                          2872  *
0000218A                          2873  * A1: LOCAL VARIABLE  - String address
0000218A                          2874  *-------------------------------------------------------------------------------
0000218A                          2875  PRINT_MOVEA
0000218A  43F9 00002B29           2876      LEA             STRING_MOVEA,A1 * Load "MOVEA" into A1
00002190  103C 000E               2877      MOVE.B          #14,D0      * Set trap task to String
00002194  4E4F                    2878      TRAP            #15         * Print ", "
00002196  6000 FC44               2879      BRA             PRINT_OPCODE_LOOP_RETURN
0000219A                          2880  
0000219A                          2881  
0000219A                          2882  *-------------------------------------------------------------------------------
0000219A                          2883  *
0000219A                          2884  *       PRINT MOVEQ
0000219A                          2885  *________________________________________
0000219A                          2886  * Register Use Summary:
0000219A                          2887  *
0000219A                          2888  * D0: LOCAL VARIABLE  - Trap task designator
0000219A                          2889  *
0000219A                          2890  * A1: LOCAL VARIABLE  - String address
0000219A                          2891  *-------------------------------------------------------------------------------
0000219A                          2892  PRINT_MOVEQ
0000219A  43F9 00002B2F           2893      LEA             STRING_MOVEQ,A1 * Load "MOVEQ" into A1
000021A0  103C 000E               2894      MOVE.B          #14,D0      * Set trap task to String
000021A4  4E4F                    2895      TRAP            #15         * Print ", "
000021A6  6000 FC34               2896      BRA             PRINT_OPCODE_LOOP_RETURN
000021AA                          2897  
000021AA                          2898  
000021AA                          2899  *-------------------------------------------------------------------------------
000021AA                          2900  *
000021AA                          2901  *       PRINT MOVEM
000021AA                          2902  *________________________________________
000021AA                          2903  * Register Use Summary:
000021AA                          2904  *
000021AA                          2905  * D0: LOCAL VARIABLE  - Trap task designator
000021AA                          2906  *
000021AA                          2907  * A1: LOCAL VARIABLE  - String address
000021AA                          2908  *-------------------------------------------------------------------------------
000021AA                          2909  PRINT_MOVEM
000021AA  43F9 00002B39           2910      LEA             STRING_MOVEM,A1 * Load "MOVEM" into A1
000021B0  103C 000E               2911      MOVE.B          #14,D0      * Set trap task to String
000021B4  4E4F                    2912      TRAP            #15         * Print ", "
000021B6  6000 FC24               2913      BRA             PRINT_OPCODE_LOOP_RETURN
000021BA                          2914  
000021BA                          2915  *-------------------------------------------------------------------------------
000021BA                          2916  *
000021BA                          2917  *       PRINT SUB
000021BA                          2918  *________________________________________
000021BA                          2919  * Register Use Summary:
000021BA                          2920  *
000021BA                          2921  * D0: LOCAL VARIABLE  - Trap task designator
000021BA                          2922  *
000021BA                          2923  * A1: LOCAL VARIABLE  - String address
000021BA                          2924  *-------------------------------------------------------------------------------
000021BA                          2925  PRINT_SUB
000021BA  43F9 00002B3F           2926      LEA             STRING_SUB,A1   * Load "SUB" into A1
000021C0  103C 000E               2927      MOVE.B          #14,D0      * Set trap task to String
000021C4  4E4F                    2928      TRAP            #15         * Print ", "
000021C6  6000 FC14               2929      BRA             PRINT_OPCODE_LOOP_RETURN
000021CA                          2930  
000021CA                          2931  *-------------------------------------------------------------------------------
000021CA                          2932  *
000021CA                          2933  *       PRINT AND
000021CA                          2934  *________________________________________
000021CA                          2935  * Register Use Summary:
000021CA                          2936  *
000021CA                          2937  * D0: LOCAL VARIABLE  - Trap task designator
000021CA                          2938  *
000021CA                          2939  * A1: LOCAL VARIABLE  - String address
000021CA                          2940  *-------------------------------------------------------------------------------
000021CA                          2941  PRINT_AND
000021CA  43F9 00002B43           2942      LEA             STRING_AND,A1   * Load "AND" into A1
000021D0  103C 000E               2943      MOVE.B          #14,D0      * Set trap task to String
000021D4  4E4F                    2944      TRAP            #15         * Print ", "
000021D6  6000 FC04               2945      BRA             PRINT_OPCODE_LOOP_RETURN
000021DA                          2946  
000021DA                          2947  *-------------------------------------------------------------------------------
000021DA                          2948  *
000021DA                          2949  *       PRINT OR
000021DA                          2950  *________________________________________
000021DA                          2951  * Register Use Summary:
000021DA                          2952  *
000021DA                          2953  * D0: LOCAL VARIABLE  - Trap task designator
000021DA                          2954  *
000021DA                          2955  * A1: LOCAL VARIABLE  - String address
000021DA                          2956  *-------------------------------------------------------------------------------
000021DA                          2957  PRINT_OR
000021DA  43F9 00002B47           2958      LEA             STRING_OR,A1    * Load "OR" into A1
000021E0  103C 000E               2959      MOVE.B          #14,D0      * Set trap task to String
000021E4  4E4F                    2960      TRAP            #15         * Print ", "
000021E6  6000 FBF4               2961      BRA             PRINT_OPCODE_LOOP_RETURN
000021EA                          2962  
000021EA                          2963  
000021EA                          2964  *-------------------------------------------------------------------------------
000021EA                          2965  *
000021EA                          2966  *       PRINT BYTE DESIGNATOR
000021EA                          2967  *________________________________________
000021EA                          2968  * Register Use Summary:
000021EA                          2969  *
000021EA                          2970  * D0: LOCAL VARIABLE  - low byte of opcode
000021EA                          2971  * A1: LOCAL VARIABLE  - String address
000021EA                          2972  *-------------------------------------------------------------------------------
000021EA                          2973  PRINT_BYTE_DESIGNATOR
000021EA  43F9 00002AB2           2974      LEA             STRING_BYTE_DESIGNATOR,A1
000021F0  103C 000E               2975      MOVE.B          #14,D0
000021F4  4E4F                    2976      TRAP            #15
000021F6  6000 FBE4               2977      BRA             PRINT_OPCODE_LOOP_RETURN
000021FA                          2978  
000021FA                          2979  *-------------------------------------------------------------------------------
000021FA                          2980  *
000021FA                          2981  *       PRINT WORD DESIGNATOR
000021FA                          2982  *________________________________________
000021FA                          2983  * Register Use Summary:
000021FA                          2984  *
000021FA                          2985  * D0: LOCAL VARIABLE  - low byte of opcode
000021FA                          2986  * A1: LOCAL VARIABLE  - String address
000021FA                          2987  *-------------------------------------------------------------------------------
000021FA                          2988  PRINT_WORD_DESIGNATOR
000021FA  43F9 00002AB6           2989      LEA             STRING_WORD_DESIGNATOR,A1
00002200  103C 000E               2990      MOVE.B          #14,D0
00002204  4E4F                    2991      TRAP            #15
00002206  6000 FBD4               2992      BRA             PRINT_OPCODE_LOOP_RETURN
0000220A                          2993  
0000220A                          2994  *-------------------------------------------------------------------------------
0000220A                          2995  *
0000220A                          2996  *       PRINT LONG DESIGNATOR
0000220A                          2997  *________________________________________
0000220A                          2998  * Register Use Summary:
0000220A                          2999  *
0000220A                          3000  * D0: LOCAL VARIABLE  - low byte of opcode
0000220A                          3001  * A1: LOCAL VARIABLE  - String address
0000220A                          3002  *-------------------------------------------------------------------------------
0000220A                          3003  PRINT_LONG_DESIGNATOR
0000220A  43F9 00002ABA           3004      LEA             STRING_LONG_DESIGNATOR,A1
00002210  103C 000E               3005      MOVE.B          #14,D0
00002214  4E4F                    3006      TRAP            #15
00002216  6000 FBC4               3007      BRA             PRINT_OPCODE_LOOP_RETURN
0000221A                          3008  
0000221A                          3009  *-------------------------------------------------------------------------------
0000221A                          3010  *
0000221A                          3011  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - Dn REGISTER
0000221A                          3012  *
0000221A                          3013  * Prints "Dx, " where x ranges between 0 and 7. This is determined by masking
0000221A                          3014  * the last four bits of the current opcode stored in D7.
0000221A                          3015  *
0000221A                          3016  *________________________________________
0000221A                          3017  * Register Use Summary:
0000221A                          3018  *
0000221A                          3019  * D0: LOCAL VARIABLE  - Trap task designator
0000221A                          3020  * D1: LOCAL VARIABLE  - Dn Register number to display
0000221A                          3021  * D7: CONST PARAMETER - The opcode word
0000221A                          3022  *
0000221A                          3023  * A1: LOCAL VARIABLE  - String address
0000221A                          3024  *-------------------------------------------------------------------------------
0000221A                          3025  PRINT_EA_MODE_ID_DN
0000221A  43F9 00002ABE           3026      LEA             STRING_D,A1     * Load "D" into A1
00002220  103C 000E               3027      MOVE.B          #14,D0      * Set trap task to String
00002224  4E4F                    3028      TRAP            #15         * Print "D"
00002226                          3029  
00002226  4281                    3030      CLR.L           D1
00002228  1207                    3031      MOVE.B          D7,D1       * Get the lowest byte of the opcode
0000222A  C23C 0007               3032      AND.B           #$7,D1      * Get the lowest four bits (register #)
0000222E  103C 0003               3033      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
00002232  4E4F                    3034      TRAP            #15         * Print the register MISC_NUMBER
00002234                          3035  
00002234  6000 FBA6               3036      BRA             PRINT_OPCODE_LOOP_RETURN
00002238                          3037  
00002238                          3038  *-------------------------------------------------------------------------------
00002238                          3039  *
00002238                          3040  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - ADDRESS REGISTER
00002238                          3041  *
00002238                          3042  * Prints "Ax, " where x ranges between 0 and 7. This is determined by masking
00002238                          3043  * the last four bits of the current opcode stored in D7.
00002238                          3044  *
00002238                          3045  *________________________________________
00002238                          3046  * Register Use Summary:
00002238                          3047  *
00002238                          3048  * D0: LOCAL VARIABLE  - Trap task designator
00002238                          3049  * D1: LOCAL VARIABLE  - Dn Register number to display
00002238                          3050  * D7: CONST PARAMETER - The opcode word
00002238                          3051  *
00002238                          3052  * A1: LOCAL VARIABLE  - String address
00002238                          3053  *-------------------------------------------------------------------------------
00002238                          3054  PRINT_EA_MODE_ID_AN
00002238  43F9 00002AC0           3055      LEA             STRING_A,A1
0000223E  103C 000E               3056      MOVE.B          #14,D0
00002242  4E4F                    3057      TRAP            #15
00002244                          3058  
00002244                          3059  
00002244  4281                    3060      CLR.L           D1
00002246  1207                    3061      MOVE.B          D7,D1       * Get the lowest byte of the opcode
00002248  C23C 0007               3062      AND.B           #$7,D1      * Get the lowest four bits (register #)
0000224C  103C 0003               3063      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
00002250  4E4F                    3064      TRAP            #15         * Print the register MISC_NUMBER
00002252                          3065  
00002252  6000 FB88               3066      BRA             PRINT_OPCODE_LOOP_RETURN
00002256                          3067  
00002256                          3068  
00002256                          3069  *-------------------------------------------------------------------------------
00002256                          3070  *
00002256                          3071  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - (ADDRESS REGISTER)
00002256                          3072  *
00002256                          3073  *________________________________________
00002256                          3074  * Register Use Summary:
00002256                          3075  *
00002256                          3076  * D0: LOCAL VARIABLE  - Trap task designator
00002256                          3077  * D1: LOCAL VARIABLE  - Dn Register MISC_NUMBER to display
00002256                          3078  * D7: CONST PARAMETER - The opcode word
00002256                          3079  *
00002256                          3080  * A1: LOCAL VARIABLE  - String address
00002256                          3081  *-------------------------------------------------------------------------------
00002256                          3082  PRINT_EA_MODE_ID_AN_INDIRECT
00002256  43F9 00002AC4           3083      LEA             STRING_LEFT_PAREN,A1
0000225C  103C 000E               3084      MOVE.B          #14,D0
00002260  4E4F                    3085      TRAP            #15
00002262                          3086  
00002262  43F9 00002AC0           3087      LEA             STRING_A,A1
00002268  103C 000E               3088      MOVE.B          #14,D0
0000226C  4E4F                    3089      TRAP            #15
0000226E                          3090  
0000226E  4281                    3091      CLR.L           D1
00002270  1207                    3092      MOVE.B          D7,D1       * Get the lowest byte of the opcode
00002272  C23C 0007               3093      AND.B           #$7,D1      * Get the lowest four bits (register #)
00002276  103C 0003               3094      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
0000227A  4E4F                    3095      TRAP            #15         * Print the register MISC_NUMBER
0000227C                          3096  
0000227C  43F9 00002AC6           3097      LEA             STRING_RIGHT_PAREN,A1
00002282  103C 000E               3098      MOVE.B          #14,D0
00002286  4E4F                    3099      TRAP            #15
00002288                          3100  
00002288  6000 FB52               3101      BRA             PRINT_OPCODE_LOOP_RETURN
0000228C                          3102  
0000228C                          3103  *-------------------------------------------------------------------------------
0000228C                          3104  *
0000228C                          3105  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - (ADDRESS REGISTER)+
0000228C                          3106  *
0000228C                          3107  *________________________________________
0000228C                          3108  * Register Use Summary:
0000228C                          3109  *
0000228C                          3110  * D0: LOCAL VARIABLE  - Trap task designator
0000228C                          3111  * D1: LOCAL VARIABLE  - Dn Register number to display
0000228C                          3112  * D7: CONST PARAMETER - The opcode word
0000228C                          3113  *
0000228C                          3114  * A1: LOCAL VARIABLE  - String address
0000228C                          3115  *-------------------------------------------------------------------------------
0000228C                          3116  PRINT_EA_MODE_ID_AN_POST_INC
0000228C  43F9 00002AC4           3117      LEA             STRING_LEFT_PAREN,A1
00002292  103C 000E               3118      MOVE.B          #14,D0
00002296  4E4F                    3119      TRAP            #15
00002298                          3120  
00002298  43F9 00002AC0           3121      LEA             STRING_A,A1
0000229E  103C 000E               3122      MOVE.B          #14,D0
000022A2  4E4F                    3123      TRAP            #15
000022A4                          3124  
000022A4  4281                    3125      CLR.L           D1
000022A6  1207                    3126      MOVE.B          D7,D1       * Get the lowest byte of the opcode
000022A8  C23C 0007               3127      AND.B           #$7,D1      * Get the lowest four bits (register #)
000022AC  103C 0003               3128      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
000022B0  4E4F                    3129      TRAP            #15         * Print the register MISC_NUMBER
000022B2                          3130  
000022B2  43F9 00002AC6           3131      LEA             STRING_RIGHT_PAREN,A1
000022B8  103C 000E               3132      MOVE.B          #14,D0
000022BC  4E4F                    3133      TRAP            #15
000022BE                          3134  
000022BE  43F9 00002AC8           3135      LEA             STRING_PLUS,A1
000022C4  103C 000E               3136      MOVE.B          #14,D0
000022C8  4E4F                    3137      TRAP            #15
000022CA                          3138  
000022CA  6000 FB10               3139      BRA             PRINT_OPCODE_LOOP_RETURN
000022CE                          3140  
000022CE                          3141  
000022CE                          3142  
000022CE                          3143  *-------------------------------------------------------------------------------
000022CE                          3144  *
000022CE                          3145  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - -(ADDRESS REGISTER)
000022CE                          3146  *
000022CE                          3147  *________________________________________
000022CE                          3148  * Register Use Summary:
000022CE                          3149  *
000022CE                          3150  * D0: LOCAL VARIABLE  - Trap task designator
000022CE                          3151  * D1: LOCAL VARIABLE  - Dn Register number to display
000022CE                          3152  * D7: CONST PARAMETER - The opcode word
000022CE                          3153  *
000022CE                          3154  * A1: LOCAL VARIABLE  - String address
000022CE                          3155  *-------------------------------------------------------------------------------
000022CE                          3156  PRINT_EA_MODE_ID_AN_PRE_DEC
000022CE  43F9 00002ACA           3157      LEA             STRING_MINUS,A1
000022D4  103C 000E               3158      MOVE.B          #14,D0
000022D8  4E4F                    3159      TRAP            #15
000022DA                          3160  
000022DA  43F9 00002AC4           3161      LEA             STRING_LEFT_PAREN,A1
000022E0  103C 000E               3162      MOVE.B          #14,D0
000022E4  4E4F                    3163      TRAP            #15
000022E6                          3164  
000022E6  43F9 00002AC0           3165      LEA             STRING_A,A1
000022EC  103C 000E               3166      MOVE.B          #14,D0
000022F0  4E4F                    3167      TRAP            #15
000022F2                          3168  
000022F2  4281                    3169      CLR.L           D1
000022F4  1207                    3170      MOVE.B          D7,D1       * Get the lowest byte of the opcode
000022F6  C23C 0007               3171      AND.B           #$7,D1      * Get the lowest four bits (register #)
000022FA  103C 0003               3172      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
000022FE  4E4F                    3173      TRAP            #15         * Print the register MISC_NUMBER
00002300                          3174  
00002300  43F9 00002AC6           3175      LEA             STRING_RIGHT_PAREN,A1
00002306  103C 000E               3176      MOVE.B          #14,D0
0000230A  4E4F                    3177      TRAP            #15
0000230C                          3178  
0000230C  6000 FACE               3179      BRA             PRINT_OPCODE_LOOP_RETURN
00002310                          3180  
00002310                          3181  
00002310                          3182  
00002310                          3183  
00002310                          3184  
00002310                          3185  *-------------------------------------------------------------------------------
00002310                          3186  *
00002310                          3187  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - WORD DATA
00002310                          3188  *
00002310                          3189  *________________________________________
00002310                          3190  * Register Use Summary:
00002310                          3191  *
00002310                          3192  * D0: LOCAL VARIABLE  - Trap task designator
00002310                          3193  * D1: LOCAL VARIABLE  - Dn Register number to display
00002310                          3194  * D7: CONST PARAMETER - The opcode word
00002310                          3195  *
00002310                          3196  * A1: LOCAL VARIABLE  - String address
00002310                          3197  *-------------------------------------------------------------------------------
00002310                          3198  PRINT_EA_MODE_ID_IND_SHORT
00002310  43F9 00002ACE           3199      LEA             STRING_DOLLAR,A1
00002316  103C 000E               3200      MOVE.B          #14,D0
0000231A  4E4F                    3201      TRAP            #15
0000231C                          3202  
0000231C  2238 1016               3203      MOVE.L          DATA1,D1
00002320  4841                    3204      SWAP            D1              * We only want the upper word
00002322  C2BC 0000FFFF           3205      AND.L           #$0000FFFF,D1   * Bit mask for upper word
00002328                          3206  
00002328  700F                    3207      MOVEQ           #15,D0
0000232A  7410                    3208      MOVEQ           #16,D2
0000232C  4E4F                    3209      TRAP            #15
0000232E                          3210  
0000232E  6000 FAAC               3211      BRA             PRINT_OPCODE_LOOP_RETURN
00002332                          3212  
00002332                          3213  *-------------------------------------------------------------------------------
00002332                          3214  *
00002332                          3215  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - WORD DATA - DATA2
00002332                          3216  *
00002332                          3217  *________________________________________
00002332                          3218  * Register Use Summary:
00002332                          3219  *
00002332                          3220  * D0: LOCAL VARIABLE  - Trap task designator
00002332                          3221  * D1: LOCAL VARIABLE  - Dn Register number to display
00002332                          3222  * D7: CONST PARAMETER - The opcode word
00002332                          3223  *
00002332                          3224  * A1: LOCAL VARIABLE  - String address
00002332                          3225  *-------------------------------------------------------------------------------
00002332                          3226  PRINT_EA_MODE_ID_IND_SHORT_DATA2
00002332  43F9 00002ACE           3227      LEA             STRING_DOLLAR,A1
00002338  103C 000E               3228      MOVE.B          #14,D0
0000233C  4E4F                    3229      TRAP            #15
0000233E                          3230  
0000233E  2238 101C               3231      MOVE.L          DATA2,D1
00002342  4841                    3232      SWAP            D1              * We only want the upper word
00002344  C27C FFFF               3233      AND             #$0000FFFF,D1   * Bit mask for upper word
00002348                          3234  
00002348  700F                    3235      MOVEQ           #15,D0
0000234A  7410                    3236      MOVEQ           #16,D2
0000234C  4E4F                    3237      TRAP            #15
0000234E                          3238  
0000234E  6000 FA8C               3239      BRA             PRINT_OPCODE_LOOP_RETURN
00002352                          3240  
00002352                          3241  *-------------------------------------------------------------------------------
00002352                          3242  *
00002352                          3243  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - LONG DATA
00002352                          3244  *
00002352                          3245  *________________________________________
00002352                          3246  * Register Use Summary:
00002352                          3247  *
00002352                          3248  * D0: LOCAL VARIABLE  - Trap task designator
00002352                          3249  * D1: LOCAL VARIABLE  - Dn Register number to display
00002352                          3250  * D7: CONST PARAMETER - The opcode word
00002352                          3251  *
00002352                          3252  * A1: LOCAL VARIABLE  - String address
00002352                          3253  *-------------------------------------------------------------------------------
00002352                          3254  PRINT_EA_MODE_ID_IND_LONG
00002352  43F9 00002ACE           3255      LEA             STRING_DOLLAR,A1
00002358  103C 000E               3256      MOVE.B          #14,D0
0000235C  4E4F                    3257      TRAP            #15
0000235E                          3258  
0000235E  2238 1016               3259      MOVE.L          DATA1,D1
00002362  700F                    3260      MOVEQ           #15,D0
00002364  7410                    3261      MOVEQ           #16,D2
00002366  4E4F                    3262      TRAP            #15
00002368                          3263  
00002368  6000 FA72               3264      BRA             PRINT_OPCODE_LOOP_RETURN
0000236C                          3265  
0000236C                          3266  *-------------------------------------------------------------------------------
0000236C                          3267  *
0000236C                          3268  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - LONG DATA - DATA2
0000236C                          3269  *
0000236C                          3270  *________________________________________
0000236C                          3271  * Register Use Summary:
0000236C                          3272  *
0000236C                          3273  * D0: LOCAL VARIABLE  - Trap task designator
0000236C                          3274  * D1: LOCAL VARIABLE  - Dn Register number to display
0000236C                          3275  * D7: CONST PARAMETER - The opcode word
0000236C                          3276  *
0000236C                          3277  * A1: LOCAL VARIABLE  - String address
0000236C                          3278  *-------------------------------------------------------------------------------
0000236C                          3279  PRINT_EA_MODE_ID_IND_LONG_DATA2
0000236C  43F9 00002ACE           3280      LEA             STRING_DOLLAR,A1
00002372  103C 000E               3281      MOVE.B          #14,D0
00002376  4E4F                    3282      TRAP            #15
00002378                          3283  
00002378  2238 101C               3284      MOVE.L          DATA2,D1
0000237C  700F                    3285      MOVEQ           #15,D0
0000237E  7410                    3286      MOVEQ           #16,D2
00002380  4E4F                    3287      TRAP            #15
00002382                          3288  
00002382  6000 FA58               3289      BRA             PRINT_OPCODE_LOOP_RETURN
00002386                          3290  
00002386                          3291  *-------------------------------------------------------------------------------
00002386                          3292  *
00002386                          3293  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - ABSOLUTE
00002386                          3294  *
00002386                          3295  *________________________________________
00002386                          3296  * Register Use Summary:
00002386                          3297  *
00002386                          3298  * D0: LOCAL VARIABLE  - Trap task designator
00002386                          3299  * D1: LOCAL VARIABLE  - Dn Register number to display
00002386                          3300  * D7: CONST PARAMETER - The opcode word
00002386                          3301  *
00002386                          3302  * A1: LOCAL VARIABLE  - String address
00002386                          3303  *-------------------------------------------------------------------------------
00002386                          3304  PRINT_EA_MODE_ID_ABS_DATA
00002386  43F9 00002ACC           3305      LEA             STRING_POUND,A1
0000238C  103C 000E               3306      MOVE.B          #14,D0
00002390  4E4F                    3307      TRAP            #15
00002392                          3308  
00002392  43F9 00002ACE           3309      LEA             STRING_DOLLAR,A1
00002398  103C 000E               3310      MOVE.B          #14,D0
0000239C  4E4F                    3311      TRAP            #15
0000239E                          3312  
0000239E  2238 1016               3313      MOVE.L          DATA1,D1
000023A2  700F                    3314      MOVEQ           #15,D0
000023A4  7410                    3315      MOVEQ           #16,D2
000023A6  4E4F                    3316      TRAP            #15
000023A8                          3317  
000023A8  6000 FA32               3318      BRA             PRINT_OPCODE_LOOP_RETURN
000023AC                          3319  
000023AC                          3320  *-------------------------------------------------------------------------------
000023AC                          3321  *
000023AC                          3322  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - ABSOLUTE DATA2
000023AC                          3323  *
000023AC                          3324  *________________________________________
000023AC                          3325  * Register Use Summary:
000023AC                          3326  *
000023AC                          3327  * D0: LOCAL VARIABLE  - Trap task designator
000023AC                          3328  * D1: LOCAL VARIABLE  - Dn Register number to display
000023AC                          3329  * D7: CONST PARAMETER - The opcode word
000023AC                          3330  *
000023AC                          3331  * A1: LOCAL VARIABLE  - String address
000023AC                          3332  *-------------------------------------------------------------------------------
000023AC                          3333  PRINT_EA_MODE_ID_ABS_DATA2
000023AC  43F9 00002ACC           3334      LEA             STRING_POUND,A1
000023B2  103C 000E               3335      MOVE.B          #14,D0
000023B6  4E4F                    3336      TRAP            #15
000023B8                          3337  
000023B8  43F9 00002ACE           3338      LEA             STRING_DOLLAR,A1
000023BE  103C 000E               3339      MOVE.B          #14,D0
000023C2  4E4F                    3340      TRAP            #15
000023C4                          3341  
000023C4  2238 101C               3342      MOVE.L          DATA2,D1
000023C8  700F                    3343      MOVEQ           #15,D0
000023CA  7410                    3344      MOVEQ           #16,D2
000023CC  4E4F                    3345      TRAP            #15
000023CE                          3346  
000023CE  6000 FA0C               3347      BRA             PRINT_OPCODE_LOOP_RETURN
000023D2                          3348  
000023D2                          3349  *-------------------------------------------------------------------------------
000023D2                          3350  *
000023D2                          3351  *       PRINT JSR
000023D2                          3352  *________________________________________
000023D2                          3353  * Register Use Summary:
000023D2                          3354  *
000023D2                          3355  * D0: LOCAL VARIABLE  - Trap task designator
000023D2                          3356  *
000023D2                          3357  * A1: LOCAL VARIABLE  - String address
000023D2                          3358  *-------------------------------------------------------------------------------
000023D2                          3359  PRINT_JSR
000023D2  43F9 00002B1C           3360      LEA             STRING_JSR,A1   * Load "JSR" into A1
000023D8  103C 000E               3361      MOVE.B          #14,D0      * Set trap task to String
000023DC  4E4F                    3362      TRAP            #15
000023DE  6000 F9FC               3363      BRA             PRINT_OPCODE_LOOP_RETURN
000023E2                          3364  
000023E2                          3365  *-------------------------------------------------------------------------------
000023E2                          3366  *
000023E2                          3367  *       PRINT NOT
000023E2                          3368  *________________________________________
000023E2                          3369  * Register Use Summary:
000023E2                          3370  *
000023E2                          3371  * D0: LOCAL VARIABLE  - Trap task designator
000023E2                          3372  *
000023E2                          3373  * A1: LOCAL VARIABLE  - String address
000023E2                          3374  *-------------------------------------------------------------------------------
000023E2                          3375  PRINT_NOT
000023E2  43F9 00002B4A           3376      LEA             STRING_NOT,A1   * Load "NOT" into A1
000023E8  103C 000E               3377      MOVE.B          #14,D0      * Set trap task to String
000023EC  4E4F                    3378      TRAP            #15
000023EE  6000 F9EC               3379      BRA             PRINT_OPCODE_LOOP_RETURN
000023F2                          3380  
000023F2                          3381  *-------------------------------------------------------------------------------
000023F2                          3382  *
000023F2                          3383  *       PRINT LEA
000023F2                          3384  *________________________________________
000023F2                          3385  * Register Use Summary:
000023F2                          3386  *
000023F2                          3387  * D0: LOCAL VARIABLE  - Trap task designator
000023F2                          3388  *
000023F2                          3389  * A1: LOCAL VARIABLE  - String address
000023F2                          3390  *-------------------------------------------------------------------------------
000023F2                          3391  PRINT_LEA
000023F2  43F9 00002B4E           3392      LEA             STRING_LEA,A1   * Load "LEA" into A1
000023F8  103C 000E               3393      MOVE.B          #14,D0      * Set trap task to String
000023FC  4E4F                    3394      TRAP            #15
000023FE  6000 F9DC               3395      BRA             PRINT_OPCODE_LOOP_RETURN
00002402                          3396  
00002402                          3397  *-------------------------------------------------------------------------------
00002402                          3398  *
00002402                          3399  *       PRINT FOURSPACE
00002402                          3400  *________________________________________
00002402                          3401  * Register Use Summary:
00002402                          3402  *
00002402                          3403  * D0: LOCAL VARIABLE  - Trap task designator
00002402                          3404  *
00002402                          3405  * A1: LOCAL VARIABLE  - String address
00002402                          3406  *-------------------------------------------------------------------------------
00002402                          3407  PRINT_FOURSPACE
00002402  43F9 00002AD2           3408      LEA             STRING_FOURSPACE,A1 * Load four spaces into A1
00002408  103C 000E               3409      MOVE.B          #14,D0              * Set trap task to String
0000240C  4E4F                    3410      TRAP            #15
0000240E  6000 F9CC               3411      BRA             PRINT_OPCODE_LOOP_RETURN
00002412                          3412  
00002412                          3413  *-------------------------------------------------------------------------------
00002412                          3414  *
00002412                          3415  *       PRINT SPACE
00002412                          3416  *________________________________________
00002412                          3417  * Register Use Summary:
00002412                          3418  *
00002412                          3419  * D0: LOCAL VARIABLE  - Trap task designator
00002412                          3420  *
00002412                          3421  * A1: LOCAL VARIABLE  - String address
00002412                          3422  *-------------------------------------------------------------------------------
00002412                          3423  PRINT_SPACE
00002412  43F9 00002AD0           3424      LEA             STRING_SPACE,A1 * Load four spaces into A1
00002418  103C 000E               3425      MOVE.B          #14,D0              * Set trap task to String
0000241C  4E4F                    3426      TRAP            #15
0000241E  6000 F9BC               3427      BRA             PRINT_OPCODE_LOOP_RETURN
00002422                          3428  
00002422                          3429  
00002422                          3430  *-------------------------------------------------------------------------------
00002422                          3431  *
00002422                          3432  *       PRINT COMMA
00002422                          3433  *________________________________________
00002422                          3434  * Register Use Summary:
00002422                          3435  *
00002422                          3436  * D0: LOCAL VARIABLE  - Trap task designator
00002422                          3437  *
00002422                          3438  * A1: LOCAL VARIABLE  - String address
00002422                          3439  *-------------------------------------------------------------------------------
00002422                          3440  PRINT_COMMA
00002422  43F9 00002AC2           3441      LEA             STRING_COMMA,A1 * Load the comma into A1
00002428  103C 000E               3442      MOVE.B          #14,D0              * Set trap task to String
0000242C  4E4F                    3443      TRAP            #15
0000242E  6000 F9AC               3444      BRA             PRINT_OPCODE_LOOP_RETURN
00002432                          3445  
00002432                          3446  *-------------------------------------------------------------------------------
00002432                          3447  *
00002432                          3448  *       PRINT ILLEGAL
00002432                          3449  *
00002432                          3450  * Incomplete implementation - final version will depend on opcode logic.
00002432                          3451  * Currently clears stack entirely, future implementation may need to keep
00002432                          3452  * some RTS addresses
00002432                          3453  *
00002432                          3454  * D7: RTS address (opcode shouldn't be necessary at this point)
00002432                          3455  *-------------------------------------------------------------------------------
00002432                          3456  PRINT_ILLEGAL       * INCOMPLETE *
00002432  2E78 100C               3457      MOVE.L          STACK_BASE,SP
00002436                          3458      * SUBA.L          #4,SP
00002436                          3459  
00002436  43F9 00002AAA           3460      LEA             STRING_ILLEGAL,A1
0000243C  103C 000D               3461      MOVE.B          #13,D0
00002440  4E4F                    3462      TRAP            #15
00002442                          3463  
00002442                          3464  
00002442  31FC 0002 1010          3465      MOVE.W  #2,LOOP_INC     * Increment the loop counter by 1 word
00002448                          3466  
00002448                          3467  
00002448  4E75                    3468      RTS
0000244A                          3469  
0000244A                          3470  *-------------------------------------------------------------------------------
0000244A                          3471  *
0000244A                          3472  *       PRINT NON_OPCODE_DATA
0000244A                          3473  *
0000244A                          3474  * Incomplete implementation - final version will depend on opcode logic.
0000244A                          3475  * Currently clears stack entirely, future implementation may need to keep
0000244A                          3476  * some RTS addresses
0000244A                          3477  *
0000244A                          3478  * D5: RTS address
0000244A                          3479  *-------------------------------------------------------------------------------
0000244A                          3480  PRINT_NON_OPCODE_DATA
0000244A  2E78 100C               3481      MOVE.L          STACK_BASE,SP
0000244E                          3482   *    SUBA.L          #4,SP
0000244E                          3483  
0000244E                          3484  * ------ Print "DATA: " ------
0000244E  43F9 00002AA3           3485      LEA             STRING_DATA,A1
00002454  103C 000E               3486      MOVE.B          #14,D0
00002458  4E4F                    3487      TRAP            #15
0000245A                          3488  
0000245A                          3489  * ------ Print D7 contents ------
0000245A  2207                    3490      MOVE.L          D7,D1
0000245C  700F                    3491      MOVEQ           #15,D0
0000245E  7410                    3492      MOVEQ           #16,D2
00002460  4E4F                    3493      TRAP            #15
00002462                          3494  
00002462  4EB9 00002486           3495      JSR             PRINT_IMMEDIATE_NEWLINE
00002468                          3496  
00002468  31FC 0002 1010          3497      MOVE.W  #2,LOOP_INC     * Increment the loop counter by 1 word
0000246E                          3498  
0000246E  4E75                    3499      RTS
00002470                          3500  
00002470                          3501  
00002470                          3502  *--------------------------------------------------------------------------------
00002470                          3503  * PRINTADDR SUBROUTINE
00002470                          3504  *
00002470                          3505  * Prints the memory address and some blank spaces before the disassembled
00002470                          3506  * instruction is appended.
00002470                          3507  *
00002470                          3508  * Registers Used:
00002470                          3509  *   D0: Trap task designator
00002470                          3510  *   D1: Memory address to display
00002470                          3511  * D2: Trap task numerical base (Hex = 16)
00002470                          3512  *
00002470                          3513  *
00002470                          3514  * A1: Data memory location
00002470                          3515  *
00002470                          3516  *
00002470                          3517  PRINTADDR
00002470                          3518  
00002470  2238 1012               3519      MOVE.L   LOOP_INDEX,D1 * Print the loop index (memory location)
00002474  700F                    3520      MOVEQ    #15,D0
00002476  7410                    3521      MOVEQ    #16,D2
00002478                          3522  
00002478  4E4F                    3523      TRAP     #15
0000247A                          3524  
0000247A  43F9 00002AD2           3525      LEA      STRING_FOURSPACE,A1 * Print some spaces
00002480  700E                    3526      MOVEQ      #14,D0
00002482  4E4F                    3527      TRAP       #15
00002484                          3528  
00002484  4E75                    3529      RTS
00002486                          3530  
00002486                          3531  *--------------------------------------------------------------------------------
00002486                          3532  * PRINT_IMMEDIATE_NEWLINE
00002486                          3533  *
00002486                          3534  * CANNOT PUSH TO STACK - Used to put a newline after each opcode
00002486                          3535  *
00002486                          3536  * Registers Used:
00002486                          3537  *   D0: Trap task designator
00002486                          3538  *   D1: Memory address to display
00002486                          3539  *
00002486                          3540  * A1: Data memory location
00002486                          3541  *
00002486                          3542  PRINT_IMMEDIATE_NEWLINE
00002486                          3543  
00002486  43F9 00002AD7           3544    LEA        STRING_NEWLINE,A1
0000248C  700E                    3545      MOVEQ      #14,D0
0000248E  4E4F                    3546      TRAP       #15
00002490                          3547  
00002490  4E75                    3548    RTS
00002492                          3549  
00002492                          3550  
00002492                          3551  
00002492                          3552  *--------------------------------------------------------------------------------
00002492                          3553  * PAUSE_CONSOLE
00002492                          3554  *
00002492                          3555  * Takes user input and promptly throws it away
00002492                          3556  *
00002492                          3557  *
00002492                          3558  PAUSE_CONSOLE
00002492                          3559  
00002492  7002                    3560    MOVEQ    #2,D0
00002494  4E4F                    3561      TRAP       #15
00002496  4241                    3562    CLR.W    D1
00002498  227C 00000000           3563    MOVEA.L  #0,A1
0000249E                          3564  
0000249E  4E75                    3565    RTS
000024A0                          3566  
000024A0                          3567  
000024A0                          3568  
000024A0                          3569  *--------------------------------------------------------------------------------
000024A0                          3570  * PRINT_MOVEM_STANDARD
000024A0                          3571  *
000024A0                          3572  * Oh no
000024A0                          3573  *
000024A0                          3574  * Registers Used:
000024A0                          3575  *   D0: Trap task designator
000024A0                          3576  *   D1: Memory address to display
000024A0                          3577  *
000024A0                          3578  * A1: Data memory location
000024A0                          3579  *
000024A0                          3580  PRINT_MOVEM_STANDARD
000024A0                          3581  
000024A0  4282                    3582    CLR.L     D2 * D2 is where full data is stored
000024A2  3439 00002B94           3583    MOVE.W    MISC_OPCODE,D2
000024A8                          3584  
000024A8  4281                    3585    CLR.L     D1 * D1 is where we'll do the masking
000024AA  3202                    3586    MOVE.W    D2,D1
000024AC                          3587  
000024AC                          3588  PRINT_MOVEM_STANDARD_A7
000024AC                          3589  
000024AC  C27C 8000               3590    AND.W     #$8000,D1
000024B0  B27C 8000               3591    CMP.W     #$8000,D1
000024B4  6600 000C               3592    BNE       PRINT_MOVEM_STANDARD_A6
000024B8                          3593  
000024B8  43F9 00002B6E           3594    LEA        STRING_A7,A1
000024BE  700E                    3595      MOVEQ      #14,D0
000024C0  4E4F                    3596      TRAP       #15
000024C2                          3597  
000024C2                          3598  PRINT_MOVEM_STANDARD_A6
000024C2                          3599  
000024C2  3202                    3600    MOVE.W    D2,D1
000024C4  C27C 4000               3601    AND.W     #$4000,D1
000024C8  B27C 4000               3602    CMP.W     #$4000,D1
000024CC  6600 000C               3603    BNE       PRINT_MOVEM_STANDARD_A5
000024D0                          3604  
000024D0  43F9 00002B6A           3605    LEA        STRING_A6,A1
000024D6  700E                    3606      MOVEQ      #14,D0
000024D8  4E4F                    3607      TRAP       #15
000024DA                          3608  
000024DA                          3609  PRINT_MOVEM_STANDARD_A5
000024DA                          3610  
000024DA  3202                    3611    MOVE.W    D2,D1
000024DC  C27C 2000               3612    AND.W     #$2000,D1
000024E0  B27C 2000               3613    CMP.W     #$2000,D1
000024E4  6600 000C               3614    BNE       PRINT_MOVEM_STANDARD_A4
000024E8                          3615  
000024E8  43F9 00002B66           3616    LEA        STRING_A5,A1
000024EE  700E                    3617      MOVEQ      #14,D0
000024F0  4E4F                    3618      TRAP       #15
000024F2                          3619  
000024F2                          3620  PRINT_MOVEM_STANDARD_A4
000024F2                          3621  
000024F2  3202                    3622    MOVE.W    D2,D1
000024F4  C27C 1000               3623    AND.W     #$1000,D1
000024F8  B27C 1000               3624    CMP.W     #$1000,D1
000024FC  6600 000C               3625    BNE       PRINT_MOVEM_STANDARD_A3
00002500                          3626  
00002500  43F9 00002B62           3627    LEA        STRING_A4,A1
00002506  700E                    3628      MOVEQ      #14,D0
00002508  4E4F                    3629      TRAP       #15
0000250A                          3630  
0000250A                          3631  PRINT_MOVEM_STANDARD_A3
0000250A                          3632  
0000250A  3202                    3633    MOVE.W    D2,D1
0000250C  C27C 0800               3634    AND.W     #$0800,D1
00002510  B27C 0800               3635    CMP.W     #$0800,D1
00002514  6600 000C               3636    BNE       PRINT_MOVEM_STANDARD_A2
00002518                          3637  
00002518  43F9 00002B5E           3638    LEA        STRING_A3,A1
0000251E  700E                    3639      MOVEQ      #14,D0
00002520  4E4F                    3640      TRAP       #15
00002522                          3641  
00002522                          3642  PRINT_MOVEM_STANDARD_A2
00002522                          3643  
00002522  3202                    3644    MOVE.W    D2,D1
00002524  C27C 0400               3645    AND.W     #$0400,D1
00002528  B27C 0400               3646    CMP.W     #$0400,D1
0000252C  6600 000C               3647    BNE       PRINT_MOVEM_STANDARD_A1
00002530                          3648  
00002530  43F9 00002B5A           3649    LEA        STRING_A2,A1
00002536  700E                    3650      MOVEQ      #14,D0
00002538  4E4F                    3651      TRAP       #15
0000253A                          3652  
0000253A                          3653  PRINT_MOVEM_STANDARD_A1
0000253A                          3654  
0000253A  3202                    3655    MOVE.W    D2,D1
0000253C  C27C 0200               3656    AND.W     #$0200,D1
00002540  B27C 0200               3657    CMP.W     #$0200,D1
00002544  6600 000C               3658    BNE       PRINT_MOVEM_STANDARD_A0
00002548                          3659  
00002548  43F9 00002B56           3660    LEA        STRING_A1,A1
0000254E  700E                    3661      MOVEQ      #14,D0
00002550  4E4F                    3662      TRAP       #15
00002552                          3663  
00002552                          3664  PRINT_MOVEM_STANDARD_A0
00002552                          3665  
00002552  3202                    3666    MOVE.W    D2,D1
00002554  C27C 0100               3667    AND.W     #$0100,D1
00002558  B27C 0100               3668    CMP.W     #$0100,D1
0000255C  6600 000C               3669    BNE       PRINT_MOVEM_STANDARD_D7
00002560                          3670  
00002560  43F9 00002B52           3671    LEA        STRING_A0,A1
00002566  700E                    3672      MOVEQ      #14,D0
00002568  4E4F                    3673      TRAP       #15
0000256A                          3674  
0000256A                          3675  PRINT_MOVEM_STANDARD_D7
0000256A                          3676  
0000256A  3202                    3677    MOVE.W    D2,D1
0000256C  C27C 0080               3678    AND.W     #$0080,D1
00002570  B27C 0080               3679    CMP.W     #$0080,D1
00002574  6600 000C               3680    BNE       PRINT_MOVEM_STANDARD_D6
00002578                          3681  
00002578  43F9 00002B8E           3682    LEA        STRING_D7,A1
0000257E  700E                    3683      MOVEQ      #14,D0
00002580  4E4F                    3684      TRAP       #15
00002582                          3685  
00002582                          3686  PRINT_MOVEM_STANDARD_D6
00002582                          3687  
00002582  3202                    3688    MOVE.W    D2,D1
00002584  C27C 0040               3689    AND.W     #$0040,D1
00002588  B27C 0040               3690    CMP.W     #$0040,D1
0000258C  6600 000C               3691    BNE       PRINT_MOVEM_STANDARD_D5
00002590                          3692  
00002590  43F9 00002B8A           3693    LEA        STRING_D6,A1
00002596  700E                    3694      MOVEQ      #14,D0
00002598  4E4F                    3695      TRAP       #15
0000259A                          3696  
0000259A                          3697  PRINT_MOVEM_STANDARD_D5
0000259A                          3698  
0000259A  3202                    3699    MOVE.W    D2,D1
0000259C  C27C 0020               3700    AND.W     #$0020,D1
000025A0  B27C 0020               3701    CMP.W     #$0020,D1
000025A4  6600 000C               3702    BNE       PRINT_MOVEM_STANDARD_D4
000025A8                          3703  
000025A8  43F9 00002B86           3704    LEA        STRING_D5,A1
000025AE  700E                    3705      MOVEQ      #14,D0
000025B0  4E4F                    3706      TRAP       #15
000025B2                          3707  
000025B2                          3708  PRINT_MOVEM_STANDARD_D4
000025B2                          3709  
000025B2  3202                    3710    MOVE.W    D2,D1
000025B4  C27C 0010               3711    AND.W     #$0010,D1
000025B8  B27C 0010               3712    CMP.W     #$0010,D1
000025BC  6600 000C               3713    BNE       PRINT_MOVEM_STANDARD_D3
000025C0                          3714  
000025C0  43F9 00002B82           3715    LEA        STRING_D4,A1
000025C6  700E                    3716      MOVEQ      #14,D0
000025C8  4E4F                    3717      TRAP       #15
000025CA                          3718  
000025CA                          3719  PRINT_MOVEM_STANDARD_D3
000025CA                          3720  
000025CA  3202                    3721    MOVE.W    D2,D1
000025CC  C27C 0008               3722    AND.W     #$0008,D1
000025D0  B27C 0008               3723    CMP.W     #$0008,D1
000025D4  6600 000C               3724    BNE       PRINT_MOVEM_STANDARD_D2
000025D8                          3725  
000025D8  43F9 00002B7E           3726    LEA        STRING_D3,A1
000025DE  700E                    3727      MOVEQ      #14,D0
000025E0  4E4F                    3728      TRAP       #15
000025E2                          3729  
000025E2                          3730  PRINT_MOVEM_STANDARD_D2
000025E2                          3731  
000025E2  3202                    3732    MOVE.W    D2,D1
000025E4  C27C 0004               3733    AND.W     #$0004,D1
000025E8  B27C 0004               3734    CMP.W     #$0004,D1
000025EC  6600 000C               3735    BNE       PRINT_MOVEM_STANDARD_D1
000025F0                          3736  
000025F0  43F9 00002B7A           3737    LEA        STRING_D2,A1
000025F6  700E                    3738      MOVEQ      #14,D0
000025F8  4E4F                    3739      TRAP       #15
000025FA                          3740  
000025FA                          3741  PRINT_MOVEM_STANDARD_D1
000025FA                          3742  
000025FA  3202                    3743    MOVE.W    D2,D1
000025FC  C27C 0002               3744    AND.W     #$0002,D1
00002600  B27C 0002               3745    CMP.W     #$0002,D1
00002604  6600 000C               3746    BNE       PRINT_MOVEM_STANDARD_D0
00002608                          3747  
00002608  43F9 00002B76           3748    LEA        STRING_D1,A1
0000260E  700E                    3749      MOVEQ      #14,D0
00002610  4E4F                    3750      TRAP       #15
00002612                          3751  
00002612                          3752  PRINT_MOVEM_STANDARD_D0
00002612                          3753  
00002612  3202                    3754    MOVE.W    D2,D1
00002614  C27C 0001               3755    AND.W     #$0001,D1
00002618  B27C 0001               3756    CMP.W     #$0001,D1
0000261C  6600 000C               3757    BNE       PRINT_MOVEM_STANDARD_END
00002620                          3758  
00002620  43F9 00002B72           3759    LEA        STRING_D0,A1
00002626  700E                    3760      MOVEQ      #14,D0
00002628  4E4F                    3761      TRAP       #15
0000262A                          3762  
0000262A                          3763  PRINT_MOVEM_STANDARD_END
0000262A                          3764  
0000262A  43F9 00002AD0           3765    LEA        STRING_SPACE,A1
00002630  700E                    3766    MOVEQ    #14,D0
00002632  4E4F                    3767    TRAP     #15
00002634                          3768  
00002634                          3769  
00002634  6000 F7A6               3770    BRA      PRINT_OPCODE_LOOP_RETURN
00002638                          3771  
00002638                          3772  
00002638                          3773  *--------------------------------------------------------------------------------
00002638                          3774  * PRINT_MOVEM_REVERSE
00002638                          3775  *
00002638                          3776  * it hurts
00002638                          3777  *
00002638                          3778  * Registers Used:
00002638                          3779  *   D0: Trap task designator
00002638                          3780  *   D1: Memory address to display
00002638                          3781  *
00002638                          3782  * A1: Data memory location
00002638                          3783  *
00002638                          3784  PRINT_MOVEM_REVERSE
00002638                          3785  
00002638                          3786  
00002638  4282                    3787    CLR.L     D2 * D2 is where full data is stored
0000263A  3439 00002B94           3788    MOVE.W    MISC_OPCODE,D2
00002640                          3789  
00002640  4281                    3790    CLR.L     D1 * D1 is where we'll do the masking
00002642  3202                    3791    MOVE.W    D2,D1
00002644                          3792  
00002644                          3793  PRINT_MOVEM_REVERSE_D0
00002644                          3794  
00002644  C27C 8000               3795    AND.W     #$8000,D1
00002648  B27C 8000               3796    CMP.W     #$8000,D1
0000264C  6600 000C               3797    BNE       PRINT_MOVEM_REVERSE_D1
00002650                          3798  
00002650  43F9 00002B72           3799    LEA        STRING_D0,A1
00002656  700E                    3800      MOVEQ      #14,D0
00002658  4E4F                    3801      TRAP       #15
0000265A                          3802  
0000265A                          3803  PRINT_MOVEM_REVERSE_D1
0000265A                          3804  
0000265A  3202                    3805    MOVE.W    D2,D1
0000265C  C27C 4000               3806    AND.W     #$4000,D1
00002660  B27C 4000               3807    CMP.W     #$4000,D1
00002664  6600 000C               3808    BNE       PRINT_MOVEM_REVERSE_D2
00002668                          3809  
00002668  43F9 00002B76           3810    LEA        STRING_D1,A1
0000266E  700E                    3811      MOVEQ      #14,D0
00002670  4E4F                    3812      TRAP       #15
00002672                          3813  
00002672                          3814  PRINT_MOVEM_REVERSE_D2
00002672                          3815  
00002672  3202                    3816    MOVE.W    D2,D1
00002674  C27C 2000               3817    AND.W     #$2000,D1
00002678  B27C 2000               3818    CMP.W     #$2000,D1
0000267C  6600 000C               3819    BNE       PRINT_MOVEM_REVERSE_D3
00002680                          3820  
00002680  43F9 00002B7A           3821    LEA        STRING_D2,A1
00002686  700E                    3822      MOVEQ      #14,D0
00002688  4E4F                    3823      TRAP       #15
0000268A                          3824  
0000268A                          3825  PRINT_MOVEM_REVERSE_D3
0000268A                          3826  
0000268A  3202                    3827    MOVE.W    D2,D1
0000268C  C27C 1000               3828    AND.W     #$1000,D1
00002690  B27C 1000               3829    CMP.W     #$1000,D1
00002694  6600 000C               3830    BNE       PRINT_MOVEM_REVERSE_D4
00002698                          3831  
00002698  43F9 00002B7E           3832    LEA        STRING_D3,A1
0000269E  700E                    3833      MOVEQ      #14,D0
000026A0  4E4F                    3834      TRAP       #15
000026A2                          3835  
000026A2                          3836  PRINT_MOVEM_REVERSE_D4
000026A2                          3837  
000026A2  3202                    3838    MOVE.W    D2,D1
000026A4  C27C 0800               3839    AND.W     #$0800,D1
000026A8  B27C 0800               3840    CMP.W     #$0800,D1
000026AC  6600 000C               3841    BNE       PRINT_MOVEM_REVERSE_D5
000026B0                          3842  
000026B0  43F9 00002B82           3843    LEA        STRING_D4,A1
000026B6  700E                    3844      MOVEQ      #14,D0
000026B8  4E4F                    3845      TRAP       #15
000026BA                          3846  
000026BA                          3847  PRINT_MOVEM_REVERSE_D5
000026BA                          3848  
000026BA  3202                    3849    MOVE.W    D2,D1
000026BC  C27C 0400               3850    AND.W     #$0400,D1
000026C0  B27C 0400               3851    CMP.W     #$0400,D1
000026C4  6600 000C               3852    BNE       PRINT_MOVEM_REVERSE_D6
000026C8                          3853  
000026C8  43F9 00002B86           3854    LEA        STRING_D5,A1
000026CE  700E                    3855      MOVEQ      #14,D0
000026D0  4E4F                    3856      TRAP       #15
000026D2                          3857  
000026D2                          3858  PRINT_MOVEM_REVERSE_D6
000026D2                          3859  
000026D2  3202                    3860    MOVE.W    D2,D1
000026D4  C27C 0200               3861    AND.W     #$0200,D1
000026D8  B27C 0200               3862    CMP.W     #$0200,D1
000026DC  6600 000C               3863    BNE       PRINT_MOVEM_REVERSE_D7
000026E0                          3864  
000026E0  43F9 00002B8A           3865    LEA        STRING_D6,A1
000026E6  700E                    3866      MOVEQ      #14,D0
000026E8  4E4F                    3867      TRAP       #15
000026EA                          3868  
000026EA                          3869  PRINT_MOVEM_REVERSE_D7
000026EA                          3870  
000026EA  3202                    3871    MOVE.W    D2,D1
000026EC  C27C 0100               3872    AND.W     #$0100,D1
000026F0  B27C 0100               3873    CMP.W     #$0100,D1
000026F4  6600 000C               3874    BNE       PRINT_MOVEM_REVERSE_A0
000026F8                          3875  
000026F8  43F9 00002B8E           3876    LEA        STRING_D7,A1
000026FE  700E                    3877      MOVEQ      #14,D0
00002700  4E4F                    3878      TRAP       #15
00002702                          3879  
00002702                          3880  PRINT_MOVEM_REVERSE_A0
00002702                          3881  
00002702  3202                    3882    MOVE.W    D2,D1
00002704  C27C 0080               3883    AND.W     #$0080,D1
00002708  B27C 0080               3884    CMP.W     #$0080,D1
0000270C  6600 000C               3885    BNE       PRINT_MOVEM_REVERSE_A1
00002710                          3886  
00002710  43F9 00002B52           3887    LEA        STRING_A0,A1
00002716  700E                    3888      MOVEQ      #14,D0
00002718  4E4F                    3889      TRAP       #15
0000271A                          3890  
0000271A                          3891  PRINT_MOVEM_REVERSE_A1
0000271A                          3892  
0000271A  3202                    3893    MOVE.W    D2,D1
0000271C  C27C 0040               3894    AND.W     #$0040,D1
00002720  B27C 0040               3895    CMP.W     #$0040,D1
00002724  6600 000C               3896    BNE       PRINT_MOVEM_REVERSE_A2
00002728                          3897  
00002728  43F9 00002B56           3898    LEA        STRING_A1,A1
0000272E  700E                    3899      MOVEQ      #14,D0
00002730  4E4F                    3900      TRAP       #15
00002732                          3901  
00002732                          3902  PRINT_MOVEM_REVERSE_A2
00002732                          3903  
00002732  3202                    3904    MOVE.W    D2,D1
00002734  C27C 0020               3905    AND.W     #$0020,D1
00002738  B27C 0020               3906    CMP.W     #$0020,D1
0000273C  6600 000C               3907    BNE       PRINT_MOVEM_REVERSE_A3
00002740                          3908  
00002740  43F9 00002B5A           3909    LEA        STRING_A2,A1
00002746  700E                    3910      MOVEQ      #14,D0
00002748  4E4F                    3911      TRAP       #15
0000274A                          3912  
0000274A                          3913  PRINT_MOVEM_REVERSE_A3
0000274A                          3914  
0000274A  3202                    3915    MOVE.W    D2,D1
0000274C  C27C 0010               3916    AND.W     #$0010,D1
00002750  B27C 0010               3917    CMP.W     #$0010,D1
00002754  6600 000C               3918    BNE       PRINT_MOVEM_REVERSE_A4
00002758                          3919  
00002758  43F9 00002B5E           3920    LEA        STRING_A3,A1
0000275E  700E                    3921      MOVEQ      #14,D0
00002760  4E4F                    3922      TRAP       #15
00002762                          3923  
00002762                          3924  PRINT_MOVEM_REVERSE_A4
00002762                          3925  
00002762  3202                    3926    MOVE.W    D2,D1
00002764  C27C 0008               3927    AND.W     #$0008,D1
00002768  B27C 0008               3928    CMP.W     #$0008,D1
0000276C  6600 000C               3929    BNE       PRINT_MOVEM_REVERSE_A5
00002770                          3930  
00002770  43F9 00002B62           3931    LEA        STRING_A4,A1
00002776  700E                    3932      MOVEQ      #14,D0
00002778  4E4F                    3933      TRAP       #15
0000277A                          3934  
0000277A                          3935  PRINT_MOVEM_REVERSE_A5
0000277A                          3936  
0000277A  3202                    3937    MOVE.W    D2,D1
0000277C  C27C 0004               3938    AND.W     #$0004,D1
00002780  B27C 0004               3939    CMP.W     #$0004,D1
00002784  6600 000C               3940    BNE       PRINT_MOVEM_REVERSE_A6
00002788                          3941  
00002788  43F9 00002B66           3942    LEA        STRING_A5,A1
0000278E  700E                    3943      MOVEQ      #14,D0
00002790  4E4F                    3944      TRAP       #15
00002792                          3945  
00002792                          3946  PRINT_MOVEM_REVERSE_A6
00002792                          3947  
00002792  3202                    3948    MOVE.W    D2,D1
00002794  C27C 0002               3949    AND.W     #$0002,D1
00002798  B27C 0002               3950    CMP.W     #$0002,D1
0000279C  6600 000C               3951    BNE       PRINT_MOVEM_REVERSE_A7
000027A0                          3952  
000027A0  43F9 00002B6A           3953    LEA        STRING_A6,A1
000027A6  700E                    3954      MOVEQ      #14,D0
000027A8  4E4F                    3955      TRAP       #15
000027AA                          3956  
000027AA                          3957  PRINT_MOVEM_REVERSE_A7
000027AA                          3958  
000027AA  3202                    3959    MOVE.W    D2,D1
000027AC  C27C 0001               3960    AND.W     #$0001,D1
000027B0  B27C 0001               3961    CMP.W     #$0001,D1
000027B4  6600 000C               3962    BNE       PRINT_MOVEM_REVERSE_END
000027B8                          3963  
000027B8  43F9 00002B6E           3964    LEA        STRING_A7,A1
000027BE  700E                    3965      MOVEQ      #14,D0
000027C0  4E4F                    3966      TRAP       #15
000027C2                          3967  
000027C2                          3968  PRINT_MOVEM_REVERSE_END
000027C2                          3969  
000027C2  43F9 00002AD0           3970    LEA        STRING_SPACE,A1
000027C8  700E                    3971      MOVEQ      #14,D0
000027CA  4E4F                    3972      TRAP       #15
000027CC                          3973  
000027CC                          3974  
000027CC  6000 F60E               3975    BRA   PRINT_OPCODE_LOOP_RETURN
000027D0                          3976  
000027D0                          3977  
000027D0                          3978  *-----------------------------------------------------------------
000027D0                          3979  * GET_INPUT
000027D0                          3980  *
000027D0                          3981  * Called before anything else, clears what it uses
000027D0                          3982  *-----------------------------------------------------------------
000027D0                          3983  GET_INPUT
000027D0                          3984  
000027D0  21FC 00000000 1000      3985      MOVE.L  #0,START_ADDR
000027D8  21FC 00000000 1004      3986      MOVE.L  #0,END_ADDR
000027E0                          3987  
000027E0  4283                    3988      CLR.L   D3
000027E2                          3989  
000027E2  43F9 00002992           3990      LEA     STRING_ENTER_START,A1
000027E8  103C 000D               3991      MOVE.B  #13,D0
000027EC  4E4F                    3992      TRAP    #15
000027EE                          3993  
000027EE  327C 0000               3994      MOVEA   #0,A1
000027F2  103C 0002               3995      MOVE.B  #2,D0
000027F6  4E4F                    3996      TRAP    #15
000027F8                          3997  
000027F8  4EB9 00002848           3998      JSR     STRING_TO_HEX
000027FE  21C3 1000               3999      MOVE.L  D3,START_ADDR
00002802                          4000  
00002802  4283                    4001      CLR.L   D3
00002804                          4002  
00002804  43F9 000029B9           4003      LEA     STRING_ENTER_END,A1
0000280A  103C 000D               4004      MOVE.B  #13,D0
0000280E  4E4F                    4005      TRAP    #15
00002810                          4006  
00002810  327C 0000               4007      MOVEA   #0,A1
00002814  103C 0002               4008      MOVE.B  #2,D0
00002818  4E4F                    4009      TRAP    #15
0000281A                          4010  
0000281A  4EB9 00002848           4011      JSR     STRING_TO_HEX
00002820  21C3 1004               4012      MOVE.L  D3,END_ADDR
00002824                          4013  
00002824  2438 1000               4014      MOVE.L  START_ADDR,D2
00002828  B682                    4015      CMP.L   D2,D3
0000282A  6D00 000C               4016      BLT     OUT_OF_ORDER
0000282E                          4017  
0000282E  4280                    4018      CLR.L     D0
00002830  4281                    4019      CLR.L     D1
00002832  4282                    4020      CLR.L     D2
00002834  4283                    4021      CLR.L     D3
00002836                          4022  
00002836  4E75                    4023      RTS
00002838                          4024  
00002838                          4025  OUT_OF_ORDER
00002838                          4026  
00002838  43F9 00002A20           4027      LEA     STRING_OUT_OF_ORDER,A1
0000283E  103C 000D               4028      MOVE.B  #13,D0
00002842  4E4F                    4029      TRAP    #15
00002844                          4030  
00002844  4EF8 27D0               4031      JMP     GET_INPUT
00002848                          4032  
00002848                          4033  STRING_TO_HEX
00002848                          4034  
00002848  4282                    4035      CLR.L   D2
0000284A  B23C 0000               4036      CMP.B   #0,D1
0000284E  6700 0012               4037      BEQ     STH_END
00002852  4EB9 0000287C           4038      JSR     STH_SET_VALUE
00002858  4EF8 2848               4039      JMP     STRING_TO_HEX
0000285C                          4040  
0000285C                          4041  STH_UPDATE
0000285C                          4042  
0000285C  5341                    4043      SUB.W   #1,D1
0000285E  5249                    4044      ADDA.W  #1,A1
00002860  4E75                    4045      RTS
00002862                          4046  
00002862  4E75                    4047  STH_END     RTS
00002864                          4048  
00002864                          4049  STH_BAD_INPUT
00002864                          4050  
00002864  43F9 000029DE           4051      LEA     STRING_INVALID_INPUT,A1
0000286A  103C 000D               4052      MOVE.B  #13,D0
0000286E  4E4F                    4053      TRAP    #15
00002870                          4054  
00002870  327C 0000               4055      MOVEA   #0,A1
00002874  103C 0002               4056      MOVE.B  #2,D0
00002878  4E4F                    4057      TRAP    #15
0000287A                          4058  
0000287A  4E75                    4059      RTS
0000287C                          4060  
0000287C                          4061  STH_SET_VALUE
0000287C                          4062  
0000287C  7400                    4063      MOVE.L  #$0,D2
0000287E  0C11 0030               4064      CMP.B   #$30,(A1)
00002882  6700 009C               4065      BEQ     STH_SHIFT_BITS
00002886                          4066  
00002886  7401                    4067      MOVE.L  #$1,D2
00002888  0C11 0031               4068      CMP.B   #$31,(A1)
0000288C  6700 0092               4069      BEQ     STH_SHIFT_BITS
00002890                          4070  
00002890  7402                    4071      MOVE.L  #$2,D2
00002892  0C11 0032               4072      CMP.B   #$32,(A1)
00002896  6700 0088               4073      BEQ     STH_SHIFT_BITS
0000289A                          4074  
0000289A  7403                    4075      MOVE.L  #$3,D2
0000289C  0C11 0033               4076      CMP.B   #$33,(A1)
000028A0  6700 007E               4077      BEQ     STH_SHIFT_BITS
000028A4                          4078  
000028A4  7404                    4079      MOVE.L  #$4,D2
000028A6  0C11 0034               4080      CMP.B   #$34,(A1)
000028AA  6700 0074               4081      BEQ     STH_SHIFT_BITS
000028AE                          4082  
000028AE  7405                    4083      MOVE.L  #$5,D2
000028B0  0C11 0035               4084      CMP.B   #$35,(A1)
000028B4  6700 006A               4085      BEQ     STH_SHIFT_BITS
000028B8                          4086  
000028B8  7406                    4087      MOVE.L  #$6,D2
000028BA  0C11 0036               4088      CMP.B   #$36,(A1)
000028BE  6700 0060               4089      BEQ     STH_SHIFT_BITS
000028C2                          4090  
000028C2  7407                    4091      MOVE.L  #$7,D2
000028C4  0C11 0037               4092      CMP.B   #$37,(A1)
000028C8  6700 0056               4093      BEQ     STH_SHIFT_BITS
000028CC                          4094  
000028CC  7408                    4095      MOVE.L  #$8,D2
000028CE  0C11 0038               4096      CMP.B   #$38,(A1)
000028D2  6700 004C               4097      BEQ     STH_SHIFT_BITS
000028D6                          4098  
000028D6  7409                    4099      MOVE.L  #$9,D2
000028D8  0C11 0039               4100      CMP.B   #$39,(A1)
000028DC  6700 0042               4101      BEQ     STH_SHIFT_BITS
000028E0                          4102  
000028E0  740A                    4103      MOVE.L  #$A,D2
000028E2  0C11 0041               4104      CMP.B   #$41,(A1)
000028E6  6700 0038               4105      BEQ     STH_SHIFT_BITS
000028EA                          4106  
000028EA  740B                    4107      MOVE.L  #$B,D2
000028EC  0C11 0042               4108      CMP.B   #$42,(A1)
000028F0  6700 002E               4109      BEQ     STH_SHIFT_BITS
000028F4                          4110  
000028F4  740C                    4111      MOVE.L  #$C,D2
000028F6  0C11 0043               4112      CMP.B   #$43,(A1)
000028FA  6700 0024               4113      BEQ     STH_SHIFT_BITS
000028FE                          4114  
000028FE  740D                    4115      MOVE.L  #$D,D2
00002900  0C11 0044               4116      CMP.B   #$44,(A1)
00002904  6700 001A               4117      BEQ     STH_SHIFT_BITS
00002908                          4118  
00002908  740E                    4119      MOVE.L  #$E,D2
0000290A  0C11 0045               4120      CMP.B   #$45,(A1)
0000290E  6700 0010               4121      BEQ     STH_SHIFT_BITS
00002912                          4122  
00002912  740F                    4123      MOVE.L  #$F,D2
00002914  0C11 0046               4124      CMP.B   #$46,(A1)
00002918  6700 0006               4125      BEQ     STH_SHIFT_BITS
0000291C                          4126  
0000291C  4EF8 2864               4127      JMP     STH_BAD_INPUT
00002920                          4128  
00002920                          4129  STH_SHIFT_BITS
00002920                          4130  
00002920  B23C 0001               4131      CMP.B   #1,D1
00002924  6700 0038               4132      BEQ     STH_INCREASE_VALUE
00002928                          4133  
00002928  E99A                    4134      ROL.L   #4,D2
0000292A  B23C 0002               4135      CMP.B   #2,D1
0000292E  6700 002E               4136      BEQ     STH_INCREASE_VALUE
00002932                          4137  
00002932  E99A                    4138      ROL.L   #4,D2
00002934  B23C 0003               4139      CMP.B   #3,D1
00002938  6700 0024               4140      BEQ     STH_INCREASE_VALUE
0000293C                          4141  
0000293C  E99A                    4142      ROL.L   #4,D2
0000293E  B23C 0004               4143      CMP.B   #4,D1
00002942  6700 001A               4144      BEQ     STH_INCREASE_VALUE
00002946                          4145  
00002946  E99A                    4146      ROL.L   #4,D2
00002948  B23C 0005               4147      CMP.B   #5,D1
0000294C  6700 0010               4148      BEQ     STH_INCREASE_VALUE
00002950                          4149  
00002950  E99A                    4150      ROL.L   #4,D2
00002952  B23C 0006               4151      CMP.B   #6,D1
00002956  6700 0006               4152      BEQ     STH_INCREASE_VALUE
0000295A                          4153  
0000295A  4EF8 2864               4154      JMP     STH_BAD_INPUT
0000295E                          4155  
0000295E                          4156  STH_INCREASE_VALUE
0000295E                          4157  
0000295E  D682                    4158      ADD.L   D2,D3
00002960  4EF8 285C               4159      JMP     STH_UPDATE
00002964                          4160  
00002964                          4161  * END OF GET_INPUT -----------------------------------------------
00002964                          4162  
00002964                          4163  *-----------------------------------------------------------------
00002964                          4164  * QUERY_CONTINUE
00002964                          4165  *
00002964                          4166  * Called before anything else, clears what it uses
00002964                          4167  *-----------------------------------------------------------------
00002964                          4168  QUERY_CONTINUE
00002964                          4169  
00002964  43F9 00002A4C           4170      LEA     STRING_QUERY_CONTINUE,A1
0000296A  103C 000D               4171      MOVE.B  #13,D0
0000296E  4E4F                    4172      TRAP    #15
00002970                          4173  
00002970  327C 0000               4174      MOVEA   #0,A1
00002974  103C 0002               4175      MOVE.B  #2,D0
00002978  4E4F                    4176      TRAP    #15
0000297A                          4177  
0000297A  0C11 0079               4178      CMP.B   #$79,(A1)
0000297E  6700 E6A0               4179      BEQ     INITIALIZE
00002982                          4180  
00002982  43F9 00002A86           4181      LEA     STRING_EXITING,A1
00002988  103C 000D               4182      MOVE.B  #13,D0
0000298C  4E4F                    4183      TRAP    #15
0000298E                          4184  
0000298E  FFFF FFFF               4185      SIMHALT
00002992                          4186  
00002992                          4187  *-------------------------------------------------------------------------------
00002992                          4188  *                ________  ________  _________  ________
00002992                          4189  *               |\   ___ \|\   __  \|\___   ___\\   __  \
00002992                          4190  *               \ \  \_|\ \ \  \|\  \|___ \  \_\ \  \|\  \
00002992                          4191  *                \ \  \ \\ \ \   __  \   \ \  \ \ \   __  \
00002992                          4192  *                 \ \  \_\\ \ \  \ \  \   \ \  \ \ \  \ \  \
00002992                          4193  *                  \ \_______\ \__\ \__\   \ \__\ \ \__\ \__\
00002992                          4194  *                   \|_______|\|__|\|__|    \|__|  \|__|\|__|
00002992                          4195  *
00002992                          4196  *-------------------------------------------------------------------------------
00002992                          4197  
00002992                          4198  
00002992                          4199  * Data for GET_INPUT and QUERY_CONTINUE ----------
00002992= 50 6C 65 61 73 65 ...   4200  STRING_ENTER_START      DC.B    'Please enter a start address, eg. 4A6C',0
000029B9= 50 6C 65 61 73 65 ...   4201  STRING_ENTER_END        DC.B    'Please enter a end address, eg. 5D3F',0
000029DE= 49 4E 56 41 4C 49 ...   4202  STRING_INVALID_INPUT    DC.B    'INVALID INPUT, must be a valid EASy68k hexidecimal memory address',0
00002A20= 53 74 61 72 74 20 ...   4203  STRING_OUT_OF_ORDER     DC.B    'Start address must be less than end address',0
00002A4C= 57 6F 75 6C 64 20 ...   4204  STRING_QUERY_CONTINUE   DC.B    'Would you like to disassemble another memory image? (y/n)',0
00002A86= 4E 6F 77 20 65 78 ...   4205  STRING_EXITING          DC.B    'Now exiting, have a nice day',0
00002AA3                          4206  * -------------------------------------------------
00002AA3                          4207  
00002AA3= 44 41 54 41 3A 20 00    4208  STRING_DATA                 DC.B    'DATA: ',0
00002AAA= 49 4C 4C 45 47 41 ...   4209  STRING_ILLEGAL              DC.B    'ILLEGAL',0
00002AB2= 2E 42 20 00             4210  STRING_BYTE_DESIGNATOR      DC.B    '.B ',0
00002AB6= 2E 57 20 00             4211  STRING_WORD_DESIGNATOR      DC.B    '.W ',0
00002ABA= 2E 4C 20 00             4212  STRING_LONG_DESIGNATOR      DC.B    '.L ',0
00002ABE= 44 00                   4213  STRING_D                    DC.B    'D',0
00002AC0= 41 00                   4214  STRING_A                    DC.B    'A',0
00002AC2= 2C 00                   4215  STRING_COMMA                DC.B    ',',0
00002AC4= 28 00                   4216  STRING_LEFT_PAREN           DC.B    '(',0
00002AC6= 29 00                   4217  STRING_RIGHT_PAREN          DC.B    ')',0
00002AC8= 2B 00                   4218  STRING_PLUS                 DC.B    '+',0
00002ACA= 2D 00                   4219  STRING_MINUS                DC.B    '-',0
00002ACC= 23 00                   4220  STRING_POUND                DC.B    '#',0
00002ACE= 24 00                   4221  STRING_DOLLAR               DC.B    '$',0
00002AD0                          4222  
00002AD0= 20 00                   4223  STRING_SPACE                DC.B    ' ',0
00002AD2= 20 20 20 20 00          4224  STRING_FOURSPACE            DC.B    '    ',0
00002AD7= 0D 0A 00                4225  STRING_NEWLINE              DC.B    '',CR,LF,0
00002ADA                          4226  
00002ADA= 41 53 52 00             4227  STRING_ASR                  DC.B    'ASR',0
00002ADE= 41 53 4C 00             4228  STRING_ASL                  DC.B    'ASL',0
00002AE2= 4C 53 52 00             4229  STRING_LSR                  DC.B    'LSR',0
00002AE6= 4C 53 4C 00             4230  STRING_LSL                  DC.B    'LSL',0
00002AEA= 52 4F 52 00             4231  STRING_ROR                  DC.B    'ROR',0
00002AEE= 52 4F 4C 00             4232  STRING_ROL                  DC.B    'ROL',0
00002AF2= 4E 4F 50 00             4233  STRING_NOP                  DC.B    'NOP',0
00002AF6= 52 54 53 00             4234  STRING_RTS                  DC.B    'RTS',0
00002AFA= 41 44 44 51 00          4235  STRING_ADDQ                 DC.B    'ADDQ',0
00002AFF= 41 44 44 00             4236  STRING_ADD                  DC.B    'ADD',0
00002B03= 41 44 44 41 00          4237  STRING_ADDA                 DC.B    'ADDA',0
00002B08= 42 45 51 20 00          4238  STRING_BEQ                  DC.B    'BEQ ',0
00002B0D= 42 4C 45 20 00          4239  STRING_BLE                  DC.B    'BLE ',0
00002B12= 42 52 41 20 00          4240  STRING_BRA                  DC.B    'BRA ',0
00002B17= 42 47 54 20 00          4241  STRING_BGT                  DC.B    'BGT ',0
00002B1C= 4A 53 52 20 20 20 ...   4242  STRING_JSR                  DC.B    'JSR    ',0
00002B24= 4D 4F 56 45 00          4243  STRING_MOVE                 DC.B    'MOVE',0
00002B29= 4D 4F 56 45 41 00       4244  STRING_MOVEA                DC.B    'MOVEA',0
00002B2F= 4D 4F 56 45 51 20 ...   4245  STRING_MOVEQ                DC.B    'MOVEQ    ',0
00002B39= 4D 4F 56 45 4D 00       4246  STRING_MOVEM                DC.B    'MOVEM',0
00002B3F= 53 55 42 00             4247  STRING_SUB                  DC.B    'SUB',0
00002B43= 41 4E 44 00             4248  STRING_AND                  DC.B    'AND',0
00002B47= 4F 52 00                4249  STRING_OR                   DC.B    'OR',0
00002B4A= 4E 4F 54 00             4250  STRING_NOT                  DC.B    'NOT',0
00002B4E= 4C 45 41 00             4251  STRING_LEA                  DC.B    'LEA',0
00002B52                          4252  
00002B52= 41 30 2C 00             4253  STRING_A0                   DC.B    'A0,',0
00002B56= 41 31 2C 00             4254  STRING_A1                   DC.B    'A1,',0
00002B5A= 41 32 2C 00             4255  STRING_A2                   DC.B    'A2,',0
00002B5E= 41 33 2C 00             4256  STRING_A3                   DC.B    'A3,',0
00002B62= 41 34 2C 00             4257  STRING_A4                   DC.B    'A4,',0
00002B66= 41 35 2C 00             4258  STRING_A5                   DC.B    'A5,',0
00002B6A= 41 36 2C 00             4259  STRING_A6                   DC.B    'A6,',0
00002B6E= 41 37 2C 00             4260  STRING_A7                   DC.B    'A7,',0
00002B72                          4261  
00002B72= 44 30 2C 00             4262  STRING_D0                   DC.B    'D0,',0
00002B76= 44 31 2C 00             4263  STRING_D1                   DC.B    'D1,',0
00002B7A= 44 32 2C 00             4264  STRING_D2                   DC.B    'D2,',0
00002B7E= 44 33 2C 00             4265  STRING_D3                   DC.B    'D3,',0
00002B82= 44 34 2C 00             4266  STRING_D4                   DC.B    'D4,',0
00002B86= 44 35 2C 00             4267  STRING_D5                   DC.B    'D5,',0
00002B8A= 44 36 2C 00             4268  STRING_D6                   DC.B    'D6,',0
00002B8E= 44 37 2C 00             4269  STRING_D7                   DC.B    'D7,',0
00002B92                          4270  
00002B92                          4271  MISC_NUMBER  DS.B    1    * MISC_NUMBER to be printed
00002B94                          4272  MISC_OPCODE  DS.W    1
00002B96                          4273  MISC_REGISTER DS.B   1
00002B98                          4274  LINE_COUNT    DS.W    1    * How many lines are currently displayed onscreen
00002B9A                          4275  
00002B9A                          4276  
00002B9A                          4277  
00002B9A                          4278      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 1C1A
ADDA                1B9A
ADDA_CONTINUE       1BE2
ADDA_L              1BC2
ADDA_W              1BD2
ADDQ                1CAE
ADDQ_NOT_ZERO       1CF2
ADD_ADDA            1B84
ADD_DN_FIRST        1C76
ADD_EA_FIRST        1C3E
AND                 12CA
AND_DN_FIRST        1342
AND_EA_FIRST        12F8
ASL                 1962
ASR                 1952
ASX                 1940
BCC                 1ABC
BCC_16              1B50
BCC_32              1B6A
BCC_CONTINUE        1B26
BCC_END             1B74
BEQ                 1B16
BGT                 1AF6
BLE                 1B06
BRA                 1AE6
BRANCHBLOCK         1104
BRANCHBLOCK_MOVEQ_END  1156
CR                  D
DATA1               1016
DATA1_IN_USE        101A
DATA2               101C
DONE                10F6
END_ADDR            1004
GET_INPUT           27D0
INITIALIZE          1020
JSR                 1D56
JSR_EA_MODE_ELSE    1D80
JSR_FINISH          1DBA
JSR_PUSH_EA_MODE_ID_AN_INDIRECT  1D9C
JSR_PUSH_EA_MODE_ID_IND_LONG  1DB0
JSR_PUSH_EA_MODE_ID_IND_SHORT  1DA6
LEA                 1210
LF                  A
LINE_COUNT          2B98
LOOP_INC            1010
LOOP_INDEX          1012
LSL                 1930
LSR                 1920
LSX                 190E
LSX_ASX_ROX         18CE
LSX_ASX_ROX_CONTINUE  19A4
LSX_ASX_ROX_FINISH  1AAE
LSX_ASX_ROX_MEM     1A86
LSX_ASX_ROX_REGISTER  1A4C
LSX_ASX_ROX_RESET_D7  1AB6
LSX_ASX_ROX_SHIFT   19D2
LSX_ASX_ROX_SHIFT_8  1A1C
MISC_NUMBER         2B92
MISC_OPCODE         2B94
MISC_REGISTER       2B96
MOVE                16FA
MOVEA               184E
MOVEA_L             1888
MOVEA_SIZE_CONTINUE  1896
MOVEA_W             187A
MOVEM               14C8
MOVEM_MEM2REG       154C
MOVEM_MEM2REG_AN_IND  1594
MOVEM_MEM2REG_EA_FINISH  15BC
MOVEM_MEM2REG_ELSE  1578
MOVEM_MEM2REG_IND_LONG  15B2
MOVEM_MEM2REG_IND_SHORT  15A8
MOVEM_MEM2REG_POST_INC  159E
MOVEM_REG2MEM       15E8
MOVEM_REG2MEM_AN_IND  162E
MOVEM_REG2MEM_EA_FINISH  1686
MOVEM_REG2MEM_ELSE  1612
MOVEM_REG2MEM_IND_LONG  1670
MOVEM_REG2MEM_IND_SHORT  165A
MOVEM_REG2MEM_PRE_DEC  1644
MOVEM_SIZE_CONTINUE  1534
MOVEM_SIZE_LONG     1514
MOVEM_SIZE_WORD     1524
MOVEQ               168E
MOVE_B              172E
MOVE_L              174A
MOVE_MODE_AN_INDIRECT  17BA
MOVE_MODE_AN_POST_INC  17C4
MOVE_MODE_AN_PRE_DEC  17CE
MOVE_MODE_DN        17B0
MOVE_MODE_ELSE      17D8
MOVE_MODE_FINISH    1840
MOVE_MODE_IND_LONG  1814
MOVE_MODE_IND_LONG_DATA2  1832
MOVE_MODE_IND_SHORT  17E8
MOVE_MODE_IND_SHORT_DATA2  1806
MOVE_MOVEA          16E4
MOVE_SIZE_CONTINUE  1758
MOVE_W              173C
NOP                 1D22
NOT                 128A
OPCODE_LOOP         106A
OPCODE_LOOP_CONTINUE  10F2
OPCODE_LOOP_PAUSE   10E4
OR                  137A
OR_DN_FIRST         13F2
OR_EA_FIRST         13A8
OUT_OF_ORDER        2838
PAUSE_CONSOLE       2492
PRINTADDR           2470
PRINT_ADD           1FCA
PRINT_ADDA          1FDA
PRINT_ADDQ          216A
PRINT_AND           21CA
PRINT_ASL           1F40
PRINT_ASR           1F30
PRINT_BEQ           1FAA
PRINT_BGT           1F8A
PRINT_BLE           1F9A
PRINT_BRA           1FBA
PRINT_BYTE_DESIGNATOR  21EA
PRINT_COMMA         2422
PRINT_COUNT         1008
PRINT_DATA1_LONG    1F70
PRINT_DATA1_WORD    1F7A
PRINT_EA_MODE_ID_ABS_DATA  2386
PRINT_EA_MODE_ID_ABS_DATA2  23AC
PRINT_EA_MODE_ID_AN  2238
PRINT_EA_MODE_ID_AN_INDIRECT  2256
PRINT_EA_MODE_ID_AN_POST_INC  228C
PRINT_EA_MODE_ID_AN_PRE_DEC  22CE
PRINT_EA_MODE_ID_DN  221A
PRINT_EA_MODE_ID_IND_LONG  2352
PRINT_EA_MODE_ID_IND_LONG_DATA2  236C
PRINT_EA_MODE_ID_IND_SHORT  2310
PRINT_EA_MODE_ID_IND_SHORT_DATA2  2332
PRINT_FOURSPACE     2402
PRINT_ILLEGAL       2432
PRINT_IMMEDIATE_NEWLINE  2486
PRINT_JSR           23D2
PRINT_LEA           23F2
PRINT_LONG_DESIGNATOR  220A
PRINT_LSL           1F20
PRINT_LSR           1F10
PRINT_MISC_ADDRESS_IND  2106
PRINT_MISC_NUMBER   1FEA
PRINT_MISC_NUMBER_AS_ADDRESS  2000
PRINT_MISC_NUMBER_AS_DATA  2144
PRINT_MISC_NUMBER_AS_REGISTER  2026
PRINT_MISC_POST_INC  20BC
PRINT_MISC_PRE_DEC  2072
PRINT_MISC_REGISTER  204C
PRINT_MOVE          217A
PRINT_MOVEA         218A
PRINT_MOVEM         21AA
PRINT_MOVEM_REVERSE  2638
PRINT_MOVEM_REVERSE_A0  2702
PRINT_MOVEM_REVERSE_A1  271A
PRINT_MOVEM_REVERSE_A2  2732
PRINT_MOVEM_REVERSE_A3  274A
PRINT_MOVEM_REVERSE_A4  2762
PRINT_MOVEM_REVERSE_A5  277A
PRINT_MOVEM_REVERSE_A6  2792
PRINT_MOVEM_REVERSE_A7  27AA
PRINT_MOVEM_REVERSE_D0  2644
PRINT_MOVEM_REVERSE_D1  265A
PRINT_MOVEM_REVERSE_D2  2672
PRINT_MOVEM_REVERSE_D3  268A
PRINT_MOVEM_REVERSE_D4  26A2
PRINT_MOVEM_REVERSE_D5  26BA
PRINT_MOVEM_REVERSE_D6  26D2
PRINT_MOVEM_REVERSE_D7  26EA
PRINT_MOVEM_REVERSE_END  27C2
PRINT_MOVEM_STANDARD  24A0
PRINT_MOVEM_STANDARD_A0  2552
PRINT_MOVEM_STANDARD_A1  253A
PRINT_MOVEM_STANDARD_A2  2522
PRINT_MOVEM_STANDARD_A3  250A
PRINT_MOVEM_STANDARD_A4  24F2
PRINT_MOVEM_STANDARD_A5  24DA
PRINT_MOVEM_STANDARD_A6  24C2
PRINT_MOVEM_STANDARD_A7  24AC
PRINT_MOVEM_STANDARD_D0  2612
PRINT_MOVEM_STANDARD_D1  25FA
PRINT_MOVEM_STANDARD_D2  25E2
PRINT_MOVEM_STANDARD_D3  25CA
PRINT_MOVEM_STANDARD_D4  25B2
PRINT_MOVEM_STANDARD_D5  259A
PRINT_MOVEM_STANDARD_D6  2582
PRINT_MOVEM_STANDARD_D7  256A
PRINT_MOVEM_STANDARD_END  262A
PRINT_MOVEQ         219A
PRINT_NON_OPCODE_DATA  244A
PRINT_NOT           23E2
PRINT_OPCODE        1DC2
PRINT_OPCODE_LOOP   1DCC
PRINT_OPCODE_LOOP_FINISH  1DE2
PRINT_OPCODE_LOOP_INDEX  100A
PRINT_OPCODE_LOOP_RETURN  1DDC
PRINT_OR            21DA
PRINT_ROL           1F60
PRINT_ROR           1F50
PRINT_SPACE         2412
PRINT_SUB           21BA
PRINT_WORD_DESIGNATOR  21FA
PUSH_BWL            1EC8
PUSH_BWL_BYTE       1EE4
PUSH_BWL_FINISH     1F02
PUSH_BWL_LONG       1EF8
PUSH_BWL_WORD       1EEE
PUSH_EA_MODE_ID     1DEE
PUSH_EA_MODE_ID_ABS_DATA  1EA6
PUSH_EA_MODE_ID_AN  1E34
PUSH_EA_MODE_ID_AN_INDIRECT  1E3E
PUSH_EA_MODE_ID_AN_POST_INC  1E48
PUSH_EA_MODE_ID_AN_PRE_DEC  1E52
PUSH_EA_MODE_ID_DN  1E2A
PUSH_EA_MODE_ID_ELSE  1E5C
PUSH_EA_MODE_ID_FINISH  1EBA
PUSH_EA_MODE_ID_IND_LONG  1E92
PUSH_EA_MODE_ID_IND_SHORT  1E7E
QUERY_CONTINUE      2964
ROL                 1994
ROR                 1984
ROX                 1972
RTS                 1D3C
STACK_BASE          100C
START               1020
START_ADDR          1000
STH_BAD_INPUT       2864
STH_END             2862
STH_INCREASE_VALUE  295E
STH_SET_VALUE       287C
STH_SHIFT_BITS      2920
STH_UPDATE          285C
STRING_A            2AC0
STRING_A0           2B52
STRING_A1           2B56
STRING_A2           2B5A
STRING_A3           2B5E
STRING_A4           2B62
STRING_A5           2B66
STRING_A6           2B6A
STRING_A7           2B6E
STRING_ADD          2AFF
STRING_ADDA         2B03
STRING_ADDQ         2AFA
STRING_AND          2B43
STRING_ASL          2ADE
STRING_ASR          2ADA
STRING_BEQ          2B08
STRING_BGT          2B17
STRING_BLE          2B0D
STRING_BRA          2B12
STRING_BYTE_DESIGNATOR  2AB2
STRING_COMMA        2AC2
STRING_D            2ABE
STRING_D0           2B72
STRING_D1           2B76
STRING_D2           2B7A
STRING_D3           2B7E
STRING_D4           2B82
STRING_D5           2B86
STRING_D6           2B8A
STRING_D7           2B8E
STRING_DATA         2AA3
STRING_DOLLAR       2ACE
STRING_ENTER_END    29B9
STRING_ENTER_START  2992
STRING_EXITING      2A86
STRING_FOURSPACE    2AD2
STRING_ILLEGAL      2AAA
STRING_INVALID_INPUT  29DE
STRING_JSR          2B1C
STRING_LEA          2B4E
STRING_LEFT_PAREN   2AC4
STRING_LONG_DESIGNATOR  2ABA
STRING_LSL          2AE6
STRING_LSR          2AE2
STRING_MINUS        2ACA
STRING_MOVE         2B24
STRING_MOVEA        2B29
STRING_MOVEM        2B39
STRING_MOVEQ        2B2F
STRING_NEWLINE      2AD7
STRING_NOP          2AF2
STRING_NOT          2B4A
STRING_OR           2B47
STRING_OUT_OF_ORDER  2A20
STRING_PLUS         2AC8
STRING_POUND        2ACC
STRING_QUERY_CONTINUE  2A4C
STRING_RIGHT_PAREN  2AC6
STRING_ROL          2AEE
STRING_ROR          2AEA
STRING_RTS          2AF6
STRING_SPACE        2AD0
STRING_SUB          2B3F
STRING_TO_HEX       2848
STRING_WORD_DESIGNATOR  2AB6
SUB                 142A
SUB_DN_FIRST        1490
SUB_EA_FIRST        1458
