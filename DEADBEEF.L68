0000101E Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 6/6/2020 11:03:12 PM

00000000                             1  *-------------------------------------------------------------------------------
00000000                             2  * Title      : PUSH_BWT / EA_MODE_ID Development
00000000                             3  * Written by : Ihsan Halimun, Camden Brewster, Matthew Munson
00000000                             4  * Date       : May 16th 2020
00000000                             5  * Description: It's the whole damn thing!
00000000                             6  *-------------------------------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  *-------------------------------------------------------------------------------
00001000                             9  *      ________   ___        ________   ________   ________   ___
00001000                            10  *     |\   ____\ |\  \      |\   __  \ |\   __  \ |\   __  \ |\  \
00001000                            11  *     \ \  \___| \ \  \     \ \  \|\  \\ \  \|\ /_\ \  \|\  \\ \  \
00001000                            12  *      \ \  \  ___\ \  \     \ \  \\\  \\ \   __  \\ \   __  \\ \  \
00001000                            13  *       \ \  \|\  \\ \  \____ \ \  \\\  \\ \  \|\  \\ \  \ \  \\ \  \____
00001000                            14  *        \ \_______\\ \_______\\ \_______\\ \_______\\ \__\ \__\\ \_______\
00001000                            15  *         \|_______| \|_______| \|_______| \|_______| \|__|\|__| \|_______|
00001000                            16  *-------------------------------------------------------------------------------
00001000                            17  
00001000                            18  START_ADDR   DS.L  1   *User defined memory start address
00001004                            19  END_ADDR     DS.L  1   *User defined memory end address
00001008                            20  
00001008  =0000000D                 21  CR    EQU   $0D
00001008  =0000000A                 22  LF    EQU   $0A
00001008                            23  
00001008                            24  PRINT_COUNT    DS.W    1    *How many print statements are sitting in the stack
0000100A                            25  PRINT_OPCODE_LOOP_INDEX  DS.W  1   * The print loop index
0000100C                            26  STACK_BASE     DS.L    1    *Where we begin putting print calls into stack
00001010                            27  
00001010                            28  LOOP_INC       DS.W    1    * How many words to skip to find the next opcode
00001012                            29  LOOP_INDEX     DS.L    1    * The opcode loop's index
00001016                            30  
00001016                            31  DATA1          DS.L    1    * The first line of opcode data
0000101A                            32  DATA2          DS.L    1    * The second line of opcode data
0000101E                            33  
0000101E                            34  START:
0000101E                            35  
0000101E                            36  *-------------------------------------------------------------------------------
0000101E                            37  *                ________  ________  ________  _______
0000101E                            38  *               |\   ____\|\   __  \|\   ___ \|\  ___ \
0000101E                            39  *               \ \  \___|\ \  \|\  \ \  \_|\ \ \   __/|
0000101E                            40  *                \ \  \    \ \  \\\  \ \  \ \\ \ \  \_|/__
0000101E                            41  *                 \ \  \____\ \  \\\  \ \  \_\\ \ \  \_|\ \
0000101E                            42  *                  \ \_______\ \_______\ \_______\ \_______\
0000101E                            43  *                   \|_______|\|_______|\|_______|\|_______|
0000101E                            44  *
0000101E                            45  *-------------------------------------------------------------------------------
0000101E                            46  
0000101E                            47  *-------------------------------------------------------------------------------
0000101E                            48  INITIALIZE
0000101E                            49  
0000101E                            50  * ------ Test Initializations ------
0000101E                            51  
0000101E                            52  
0000101E                            53  *  MOVE.W    #$4E91, $4000   * JSR Opcode
0000101E                            54  *  MOVE.W    #$4EB9,$4000      * JSR 1016 (1)
0000101E                            55  *  MOVE.L    #$00001016, $4002 * JSR 1016 (2)
0000101E                            56  *  (^ Add 8 to memory address if you want something after this ^)
0000101E                            57  
0000101E                            58  *  MOVE.W    #$4E71, $4002   * NOP Opcode
0000101E                            59  *  MOVE.W    #$4E75, $4004   * RTS Opcode
0000101E                            60  *  MOVE.W    #$5241, $4000   * ADDQ Opcode
0000101E                            61  *  MOVE.W    #$D240, $4000   * ADD Opcode
0000101E                            62  *  MOVE.W    #$D5C9, $4000   * ADDA Opcode (ADDA.L A1,A2)
0000101E                            63  *   MOVE.L    #$60000002, $4000   * BRA Opcode
0000101E                            64  *   MOVE.L    #$6E000018, $4004   * BRA Opcode
0000101E                            65  *   MOVE.W    #$6FE6, $4008
0000101E                            66  *   MOVE.W    #$67E2, $400A
0000101E                            67  
0000101E                            68  * ------ ASL TEST ------
0000101E  31FC E140 4000            69     MOVE.W     #$E140,$4000  * ASL   #8,D0
00001024  31FC E1D1 4004            70     MOVE.W     #$E1D1,$4004  * ASL   (A1) 
0000102A  31FC E1C9 4008            71     MOVE.W     #$E1C9,$4008  * ASL   A1 (ILLEGAL) 
00001030                            72  
00001030                            73  * ------ ASR TEST ------
00001030  31FC E061 400C            74     MOVE.W     #$E061,$400C  * ASR   D0,D1
00001036  31FC E0D2 4010            75     MOVE.W     #$E0D2,$4010  * ASR   (A2)
0000103C  31FC E0CA 4014            76     MOVE.W     #$E0CA,$4014  * ASR   A2 (ILLEGAL)
00001042                            77  
00001042                            78  * ------ LSL TEST ------
00001042  31FC EB49 4018            79     MOVE.W     #$EB49,$4018  * LSL   #5,D1
00001048  31FC E3E3 401C            80     MOVE.W     #$E3E3,$401C  * LSL   -(A3)
0000104E  31FC E3CB 4020            81     MOVE.W     #$E3CB,$4020  * LSL   A3 (ILLEGAL)
00001054                            82  
00001054                            83  * ------ LSR TEST ------
00001054  31FC E26A 4024            84     MOVE.W     #$E26A,$4024  * LSR   D1,D2
0000105A  31FC E2DC 4028            85     MOVE.W     #$E2DC,$4028  * LSR   (A4)+
00001060  31FC E2D2 402C            86     MOVE.W     #$E2D2,$402C  * LSR   A4 (ILLEGAL)
00001066                            87  
00001066                            88  * ------ ROL TEST ------
00001066  31FC E31B 4030            89     MOVE.W     #$E31B,$4030  * ROL.B #1,D3
0000106C  31FC E55C 4034            90     MOVE.W     #$E55C,$4034  * ROL.W #2,D4
00001072  31FC E79D 4038            91     MOVE.W     #$E79D,$4038  * ROL.L #3,D5
00001078  31FC E7D5 403C            92     MOVE.W     #$E7D5,$403C  * ROL   (A5)
0000107E  31FC E7C0 4040            93     MOVE.W     #$E7C0,$4040  * ROL   D0 (ILLEGAL)    
00001084                            94  
00001084                            95  * ------ ROR TEST ------
00001084  31FC E21B 4044            96     MOVE.W     #$E21B,$4044  * ROR.B #1,D3
0000108A  31FC E45C 4048            97     MOVE.W     #$E45C,$4048  * ROR.W #2,D4
00001090  31FC E69D 404C            98     MOVE.W     #$E69D,$404C  * ROR.L #3,D5
00001096  31FC E6D6 4050            99     MOVE.W     #$E6D6,$4050  * ROR   (A6)
0000109C  31FC E6C0 4054           100     MOVE.W     #$E6C0,$4054  * ROL   (D0) (ILLEGAL)
000010A2  21FC 00004000 1000       101    MOVE.L    #$4000, START_ADDR
000010AA  21FC 00005000 1004       102    MOVE.L    #$5000, END_ADDR
000010B2                           103  
000010B2                           104  
000010B2                           105  * ------ Standard Initializations ------
000010B2  31FC 0000 1008           106    MOVE.W    #0, PRINT_COUNT
000010B8  13FC 0000 00001E06       107    MOVE.B    #0, MISC_NUMBER
000010C0                           108  
000010C0                           109    * JSR GET_INPUT
000010C0                           110  
000010C0  2078 1000                111    MOVEA.L  START_ADDR,A0
000010C4  21C8 1012                112    MOVE.L   A0,LOOP_INDEX * Both A0 and LOOP_INDEX contain the start address
000010C8                           113  
000010C8                           114  
000010C8                           115  
000010C8                           116  *-------------------------------------------------------------------------------
000010C8                           117  *    OPCODE LOOP
000010C8                           118  *
000010C8                           119  *    The disassembler's main loop. Gets the contents of a memory location,
000010C8                           120  *    sends it to BRANCHBLOCK to be decoded and printed, and checks if we're
000010C8                           121  *    at the user defined endpoint.
000010C8                           122  *
000010C8                           123  * ________________________________________
000010C8                           124  * Register Use Summary:
000010C8                           125  *
000010C8                           126  * D7: CONST - The opcode to decode. Set before BRANCHBLOCK
000010C8                           127  *
000010C8                           128  * A0: The current Loop Index, updated before and after BRANCHBLOCK
000010C8                           129  * A1: How much we should increment the loop index
000010C8                           130  * A2: Local Variable - used for retrieving DATA
000010C8                           131  *-------------------------------------------------------------------------------
000010C8                           132  OPCODE_LOOP
000010C8                           133  
000010C8  2078 1012                134      MOVEA.L LOOP_INDEX,A0
000010CC  B1F8 1004                135      CMPA.L  END_ADDR, A0  * Check to see if we're done
000010D0  6E00 003C                136      BGT     DONE
000010D4                           137  
000010D4                           138  * ------ Reset Loop Variables ------
000010D4  31FC 0000 1008           139      MOVE.W  #0,PRINT_COUNT  * Reset print count to zero
000010DA  31FC 0000 1010           140      MOVE.W  #0,LOOP_INC     * Reset loop index increment to zero
000010E0  4287                     141      CLR.L   D7
000010E2                           142  
000010E2                           143  * ------ Get memory at loop index ------
000010E2  3E10                     144      MOVE.W  (A0),D7
000010E4                           145  
000010E4                           146  * ------ Fill DATA1 and DATA2 ------
000010E4  2448                     147      MOVEA.L  A0,A2
000010E6  544A                     148      ADDA     #2,A2        * Increment by 1 word to get the long afterwards
000010E8  21D2 1016                149      MOVE.L  (A2),DATA1   * Fill DATA1 with the long after the opcode
000010EC  584A                     150      ADDA     #4,A2
000010EE  21D2 101A                151      MOVE.L  (A2),DATA2   * Fill DATA2 with the long after DATA1
000010F2                           152  
000010F2                           153  
000010F2                           154  * ------ Execute Subroutines ------
000010F2  4EB9 00001B1A            155      JSR     PRINTADDR             * Print the memory address
000010F8  4EB9 00001112            156      JSR     BRANCHBLOCK           * Figure out what opcode this is and print
000010FE                           157  
000010FE                           158  
000010FE                           159  * ------ Increment Loop ------
000010FE  2078 1012                160      MOVEA.L     LOOP_INDEX,A0
00001102  3278 1010                161      MOVEA.W     LOOP_INC,A1
00001106  D0C9                     162      ADDA    A1,A0  * Move the index to the next opcode
00001108  21C8 1012                163      MOVE.L  A0,LOOP_INDEX
0000110C                           164  
0000110C  60BA                     165      BRA     OPCODE_LOOP
0000110E                           166  
0000110E                           167  DONE
0000110E                           168  
0000110E                           169      * This will eventually RTE to the user input section
0000110E                           170  
0000110E  FFFF FFFF                171      SIMHALT
00001112                           172  
00001112                           173  
00001112                           174  
00001112                           175  *-------------------------------------------------------------------------------
00001112                           176  *     BRANCHBLOCK
00001112                           177  *
00001112                           178  *  Decodes the opcode in D7 and jumps to the corresponding opcode subroutine
00001112                           179  *
00001112                           180  *  Because 1 line is pulled out of memory at a time, it's possible that the
00001112                           181  *  next opcode only takes up one word, and it's in the upper word of the
00001112                           182  *  opcode long (eg.4E71FFFF is NOP then empty). We must check for single word
00001112                           183  *  opcodes before we use any of the data in the lower word of D7.
00001112                           184  *________________________________________
00001112                           185  * Register Use Summary:
00001112                           186  *
00001112                           187  * D0: General variable, cleared every use to be safe
00001112                           188  * D1:
00001112                           189  * D2:
00001112                           190  * D3:
00001112                           191  * D4: (Keep in mind this is parameter for BWL)
00001112                           192  * D5:
00001112                           193  * D6:
00001112                           194  * D7: CONST - The opcode to decode - NO TOUCH
00001112                           195  *________________________________________
00001112                           196  * A0:
00001112                           197  * A1:
00001112                           198  * A2:
00001112                           199  * A3:
00001112                           200  * A4:
00001112                           201  * A5:
00001112                           202  * A6:
00001112                           203  * A7:
00001112                           204  *-------------------------------------------------------------------------------
00001112                           205  BRANCHBLOCK
00001112                           206  
00001112  21CF 100C                207    MOVE.L  SP,STACK_BASE   * Save the position of the stack for later
00001116                           208  
00001116                           209  * ---- DEBUG ----
00001116  BEBC 0000FFFF            210    CMP.L   #$FFFF,D7
0000111C  67F0                     211    BEQ   DONE * For debug only! Exit if memory is unset
0000111E                           212  
0000111E                           213  * ---- CONSTANT OPCODES ----
0000111E  BE7C 4E71                214    CMP.W   #$4E71,D7
00001122  6700 04C8                215    BEQ   NOP
00001126                           216  
00001126  BE7C 4E75                217    CMP.W   #$4E75,D7
0000112A  6700 04DA                218    BEQ   RTS
0000112E                           219  
0000112E                           220  * ---- ADDQ ----
0000112E  4280                     221    CLR.L   D0
00001130  3007                     222    MOVE.W  D7,D0
00001132  4840                     223    SWAP    D0
00001134  E998                     224    ROL.L   #$04,D0
00001136  C03C 000F                225    AND.B   #$F,D0
0000113A  B03C 0005                226    CMP.B   #5,D0
0000113E  6700 0438                227    BEQ     ADDQ
00001142                           228  
00001142                           229  * ---- ADDA ----
00001142  4280                     230    CLR.L   D0
00001144  2007                     231    MOVE.L  D7,D0   *DXXX
00001146  C07C F000                232    AND.W   #$F000,D0
0000114A  B07C D000                233    CMP.W   #$D000,D0
0000114E  6700 02FE                234    BEQ     ADD_ADDA
00001152                           235  
00001152                           236  * ---- BCC ----
00001152  4280                     237    CLR.L   D0
00001154  2007                     238    MOVE.L  D7,D0
00001156  C07C F000                239    AND.W   #$F000,D0
0000115A  B07C 6000                240    CMP.W   #$6000,D0
0000115E  6700 0226                241    BEQ     BCC
00001162                           242  
00001162                           243  * ---- LSX_ASX_ROR ----
00001162  4280                     244    CLR.L   D0
00001164  2007                     245    MOVE.L  D7,D0
00001166  C07C F000                246    AND.W   #$F000,D0
0000116A  B07C E000                247    CMP.W   #$E000,D0
0000116E  6700 0018                248    BEQ     LSX_ASX_ROX
00001172                           249  
00001172                           250  * ---- 10 BIT OPCODES ----
00001172  4280                     251    CLR.L   D0
00001174  3007                     252    MOVE.W  D7,D0
00001176  C07C FFC0                253    AND.W   #$FFC0,D0   * Mask opcode to get first 10 bits only
0000117A                           254  
0000117A  EC40                     255    ASR.W   #6,D0
0000117C  B07C 013A                256    CMP     #$13A,D0
00001180  6700 049E                257    BEQ     JSR
00001184                           258  
00001184                           259  
00001184                           260  * ---- UH OH ----
00001184                           261  
00001184  6000 0976                262    BRA     PRINT_ILLEGAL
00001188                           263  
00001188                           264  
00001188                           265  *-------------------------------------------------------------------------------
00001188                           266  * ________   ________   ________   ________   ________   _______
00001188                           267  *|\   __  \ |\   __  \ |\   ____\ |\   __  \ |\   ___ \ |\  ___ \
00001188                           268  *\ \  \|\  \\ \  \|\  \\ \  \___| \ \  \|\  \\ \  \_|\ \\ \   __/|
00001188                           269  * \ \  \\\  \\ \   ____\\ \  \     \ \  \\\  \\ \  \ \\ \\ \  \_|/__
00001188                           270  *  \ \  \\\  \\ \  \___| \ \  \____ \ \  \\\  \\ \  \_\\ \\ \  \_|\ \
00001188                           271  *   \ \_______\\ \__\     \ \_______\\ \_______\\ \_______\\ \_______\
00001188                           272  *    \|_______| \|__|      \|_______| \|_______| \|_______| \|_______|
00001188                           273  *
00001188                           274  *-------------------------------------------------------------------------------
00001188                           275  *-------------------------------------------------------------------------------
00001188                           276  *   LSX_ASX_ROX
00001188                           277  *
00001188                           278  *
00001188                           279  *-------------------------------------------------------------------------------
00001188                           280  LSX_ASX_ROX
00001188  2007                     281    MOVE.L    D7,D0      * Reset D0
0000118A  C07C FEC0                282    AND.W     #$FEC0,D0
0000118E                           283    
0000118E  B07C E0C0                284    CMP.W #$E0C0,D0
00001192  6700 0062                285    BEQ   ASX
00001196                           286  
00001196  B07C E2C0                287    CMP.W #$E2C0,D0
0000119A  6700 0028                288    BEQ   LSX
0000119E                           289  
0000119E  B07C E6C0                290    CMP.W #$E6C0,D0
000011A2  6700 0084                291    BEQ   ROX
000011A6                           292  
000011A6  2007                     293    MOVE.L    D7,D0      * Reset D0  
000011A8  C07C 0018                294    AND.W     #$18,D0  * Isolate bits 4,3
000011AC                           295  
000011AC  B07C 0000                296    CMP.W #0,D0
000011B0  6700 0044                297    BEQ   ASX
000011B4                           298  
000011B4  B07C 0008                299    CMP.W #8,D0
000011B8  6700 000A                300    BEQ   LSX
000011BC                           301  
000011BC  B07C 0018                302    CMP.W #$18,D0
000011C0  6700 0066                303    BEQ   ROX
000011C4                           304  
000011C4                           305  LSX
000011C4  2007                     306    MOVE.L    D7,D0      * Reset D0
000011C6  C07C 0100                307    AND.W     #$100,D0   * Isolate bit 8
000011CA  B07C 0000                308    CMP.W     #0,D0
000011CE  6700 0006                309    BEQ       LSR
000011D2  6000 0012                310    BRA       LSL
000011D6                           311  
000011D6                           312  LSR
000011D6  4BF9 000017C8            313    LEA     PRINT_LSR,A5    * Load the print subroutine into intermediate address
000011DC  2F0D                     314    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000011DE  5878 1008                315    ADD.W   #4,PRINT_COUNT
000011E2                           316  
000011E2  6000 0076                317    BRA     LSX_ASX_ROX_CONTINUE
000011E6                           318  
000011E6                           319  LSL
000011E6  4BF9 000017D8            320    LEA     PRINT_LSL,A5    * Load the print subroutine into intermediate address
000011EC  2F0D                     321    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000011EE  5878 1008                322    ADD.W   #4,PRINT_COUNT
000011F2                           323  
000011F2  6000 0066                324    BRA     LSX_ASX_ROX_CONTINUE
000011F6                           325  
000011F6                           326  ASX
000011F6  2007                     327    MOVE.L    D7,D0      * Reset D0
000011F8  C07C 0100                328    AND.W     #$100,D0   * Isolate bit 8
000011FC  B07C 0000                329    CMP.W     #0,D0
00001200  6700 0006                330    BEQ       ASR
00001204  6000 0012                331    BRA       ASL
00001208                           332  
00001208                           333  ASR
00001208  4BF9 000017E8            334    LEA     PRINT_ASR,A5    * Load the print subroutine into intermediate address
0000120E  2F0D                     335    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001210  5878 1008                336    ADD.W   #4,PRINT_COUNT
00001214                           337  
00001214  6000 0044                338    BRA     LSX_ASX_ROX_CONTINUE
00001218                           339  
00001218                           340  ASL
00001218  4BF9 000017F8            341    LEA     PRINT_ASL,A5    * Load the print subroutine into intermediate address
0000121E  2F0D                     342    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001220  5878 1008                343    ADD.W   #4,PRINT_COUNT
00001224                           344  
00001224  6000 0034                345    BRA     LSX_ASX_ROX_CONTINUE
00001228                           346  
00001228                           347  ROX
00001228  2007                     348    MOVE.L    D7,D0      * Reset D0
0000122A  C07C 0100                349    AND.W     #$100,D0   * Isolate bit 8
0000122E  B07C 0000                350    CMP.W     #0,D0
00001232  6700 0006                351    BEQ       ROR
00001236  6000 0012                352    BRA       ROL
0000123A                           353  
0000123A                           354  ROR
0000123A  4BF9 00001808            355    LEA     PRINT_ROR,A5    * Load the print subroutine into intermediate address
00001240  2F0D                     356    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001242  5878 1008                357    ADD.W   #4,PRINT_COUNT
00001246                           358  
00001246  6000 0012                359    BRA     LSX_ASX_ROX_CONTINUE
0000124A                           360  
0000124A                           361  ROL
0000124A  4BF9 00001818            362    LEA     PRINT_ROL,A5    * Load the print subroutine into intermediate address
00001250  2F0D                     363    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001252  5878 1008                364    ADD.W   #4,PRINT_COUNT
00001256                           365  
00001256  6000 0002                366    BRA     LSX_ASX_ROX_CONTINUE
0000125A                           367  
0000125A                           368  LSX_ASX_ROX_CONTINUE
0000125A  2007                     369    MOVE.L    D7,D0      * Reset D0
0000125C  EC98                     370    ROR.L     #$06,D0    * Isolate bits 7,6
0000125E  C0BC 00000003            371    AND.L     #3,D0
00001264  4284                     372    CLR.L     D4
00001266  1800                     373    MOVE.B    D0,D4      * Move bits 7,6 to D4 for BWL
00001268                           374  
00001268  B03C 0003                375    CMP.B     #3,D0
0000126C  6700 00DC                376    BEQ       LSX_ASX_ROX_MEM
00001270                           377  
00001270  4EB9 00001780            378    JSR PUSH_BWL
00001276                           379  
00001276  2007                     380    MOVE.L    D7,D0      * Reset D0
00001278  C07C 0020                381    AND.W     #$20,D0    * Isolate bit 5
0000127C  B07C 0000                382    CMP.W     #0,D0
00001280  6700 0006                383    BEQ       LSX_ASX_ROX_SHIFT
00001284  6000 007C                384    BRA       LSX_ASX_ROX_REGISTER
00001288                           385  
00001288                           386  LSX_ASX_ROX_SHIFT
00001288  2007                     387    MOVE.L  D7,D0             * Reset D0
0000128A  C0BC 00000E00            388    AND.L   #$E00,D0           * Get bits 11 - 9
00001290  B0BC 00000000            389    CMP.L   #0,D0
00001296  6700 003A                390    BEQ     LSX_ASX_ROX_SHIFT_8  * If 0, shift count is 8
0000129A                           391  
0000129A  21FC 00000000 1016       392    MOVE.L  #0,DATA1
000012A2  E080                     393    ASR.L   #$8,D0
000012A4  E280                     394    ASR.L   #$1,D0
000012A6  21C0 1016                395    MOVE.L  D0,DATA1
000012AA                           396  
000012AA  4BF9 00001AA6            397    LEA PRINT_EA_MODE_ID_ABS_DATA,A5 * Print shift count
000012B0  2F0D                     398    MOVE.L    A5, -(SP)
000012B2  5878 1008                399    ADD.W     #4, PRINT_COUNT
000012B6                           400  
000012B6  4BF9 00001AEC            401    LEA     PRINT_COMMA,A5   * Load the print subroutine
000012BC  2F0D                     402    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000012BE  5878 1008                403    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000012C2                           404  
000012C2  4BF9 00001976            405    LEA   PRINT_EA_MODE_ID_DN,A5  * Print data register
000012C8  2F0D                     406    MOVE.L    A5, -(SP)
000012CA  5878 1008                407    ADD.W     #4, PRINT_COUNT
000012CE                           408  
000012CE  6000 00A6                409    BRA LSX_ASX_ROX_CONTINUE2
000012D2                           410  
000012D2                           411  LSX_ASX_ROX_SHIFT_8
000012D2  21FC 00000008 1016       412    MOVE.L  #8,DATA1
000012DA  4BF9 00001AA6            413    LEA PRINT_EA_MODE_ID_ABS_DATA,A5  * Print shift count 8
000012E0  2F0D                     414    MOVE.L    A5, -(SP)
000012E2  5878 1008                415    ADD.W     #4, PRINT_COUNT
000012E6                           416  
000012E6  4BF9 00001AEC            417    LEA     PRINT_COMMA,A5   * Load the print subroutine
000012EC  2F0D                     418    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000012EE  5878 1008                419    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000012F2                           420  
000012F2                           421  
000012F2  4BF9 00001976            422    LEA   PRINT_EA_MODE_ID_DN,A5  * Print data register
000012F8  2F0D                     423    MOVE.L    A5, -(SP)
000012FA  5878 1008                424    ADD.W     #4, PRINT_COUNT
000012FE                           425  
000012FE  6000 0076                426    BRA LSX_ASX_ROX_CONTINUE2
00001302                           427  
00001302                           428  LSX_ASX_ROX_REGISTER
00001302  2007                     429    MOVE.L    D7,D0      * Reset D0
00001304  C0BC 00000E00            430    AND.L   #$E00,D0           * Get bits 11 - 9  LEA PRINT_FOURSPACE,A5
0000130A  2F0D                     431    MOVE.L    A5,-(SP)
0000130C  5878 1008                432    ADD.W    #4,PRINT_COUNT
00001310  E080                     433    ASR.L   #$8,D0
00001312  E280                     434    ASR.L   #$1,D0
00001314                           435  
00001314  2E00                     436    MOVE.L  D0,D7
00001316  4BF9 00001976            437    LEA   PRINT_EA_MODE_ID_DN,A5  * Print data register
0000131C  2F0D                     438    MOVE.L    A5, -(SP)
0000131E  5878 1008                439    ADD.W     #4, PRINT_COUNT
00001322                           440  
00001322  4BF9 00001380            441    LEA LSX_ASX_ROX_RESET_D7,A5
00001328  2F0D                     442    MOVE.L    A5, -(SP)
0000132A  5878 1008                443    ADD.W     #4, PRINT_COUNT
0000132E                           444  
0000132E  4BF9 00001AEC            445    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001334  2F0D                     446    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001336  5878 1008                447    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000133A                           448  
0000133A  4BF9 00001976            449    LEA   PRINT_EA_MODE_ID_DN,A5  * Print data register
00001340  2F0D                     450    MOVE.L    A5, -(SP)
00001342  5878 1008                451    ADD.W     #4, PRINT_COUNT
00001346                           452  
00001346  6000 002E                453    BRA LSX_ASX_ROX_CONTINUE2
0000134A                           454  
0000134A                           455  LSX_ASX_ROX_MEM
0000134A  2C07                     456    MOVE.L D7,D6
0000134C  CCBC 00000038            457    AND.L #$38,D6
00001352  BC7C 0008                458    CMP.W #8,D6
00001356  6F00 0018                459    BLE   LSX_ASX_ROX_PRINT_ILLEGAL
0000135A                           460  
0000135A  4BF9 00001ADC            461    LEA PRINT_FOURSPACE,A5
00001360  2F0D                     462    MOVE.L    A5,-(SP)
00001362  5878 1008                463    ADD.W    #4,PRINT_COUNT
00001366                           464  
00001366  4EB9 000016B8            465    JSR     PUSH_EA_MODE_ID
0000136C  6000 0008                466    BRA LSX_ASX_ROX_CONTINUE2
00001370                           467    
00001370                           468  LSX_ASX_ROX_PRINT_ILLEGAL
00001370  584F                     469    ADD #4,SP
00001372  6000 0788                470    BRA PRINT_ILLEGAL
00001376                           471  
00001376                           472  LSX_ASX_ROX_CONTINUE2
00001376  31FC 0004 1010           473    MOVE.W  #4,LOOP_INC
0000137C  6000 030E                474    BRA   PRINT_OPCODE
00001380                           475  
00001380                           476  LSX_ASX_ROX_RESET_D7
00001380  2007                     477    MOVE.L    D7,D0
00001382  6000 0322                478    BRA   PRINT_OPCODE_LOOP_RETURN
00001386                           479  
00001386                           480  *-------------------------------------------------------------------------------
00001386                           481  *   BCC
00001386                           482  *
00001386                           483  *
00001386                           484  *-------------------------------------------------------------------------------
00001386                           485  BCC
00001386  2007                     486    MOVE.L    D7,D0      * Reset D0
00001388  C07C 0F00                487    AND.W     #$0F00,D0  * Isolate bits 11-8
0000138C  B07C 0000                488    CMP.W     #0,D0
00001390  6700 001E                489    BEQ       BRA
00001394                           490  
00001394  B07C 0E00                491    CMP.W     #$E00,D0
00001398  6700 0026                492    BEQ       BGT
0000139C                           493  
0000139C  B07C 0F00                494    CMP.W     #$F00,D0
000013A0  6700 002E                495    BEQ       BLE
000013A4                           496  
000013A4  B07C 0700                497    CMP.W     #$700,D0
000013A8  6700 0036                498    BEQ       BEQ
000013AC                           499  
000013AC  6000 074E                500    BRA       PRINT_ILLEGAL
000013B0                           501  
000013B0                           502  BRA
000013B0  4BF9 00001872            503    LEA     PRINT_BRA,A5    * Load the print subroutine into intermediate address
000013B6  2F0D                     504    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000013B8  5878 1008                505    ADD.W   #4,PRINT_COUNT
000013BC                           506  
000013BC  6000 0032                507    BRA   BCC_CONTINUE
000013C0                           508  
000013C0                           509  BGT
000013C0  4BF9 00001842            510    LEA     PRINT_BGT,A5    * Load the print subroutine into intermediate address
000013C6  2F0D                     511    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000013C8  5878 1008                512    ADD.W   #4,PRINT_COUNT
000013CC                           513  
000013CC  6000 0022                514    BRA   BCC_CONTINUE
000013D0                           515  
000013D0                           516  BLE
000013D0  4BF9 00001852            517    LEA     PRINT_BLE,A5    * Load the print subroutine into intermediate address
000013D6  2F0D                     518    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000013D8  5878 1008                519    ADD.W   #4,PRINT_COUNT
000013DC                           520  
000013DC  6000 0012                521    BRA   BCC_CONTINUE
000013E0                           522  
000013E0                           523  BEQ
000013E0  4BF9 00001862            524    LEA     PRINT_BEQ,A5    * Load the print subroutine into intermediate address
000013E6  2F0D                     525    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000013E8  5878 1008                526    ADD.W   #4,PRINT_COUNT
000013EC                           527  
000013EC  6000 0002                528    BRA   BCC_CONTINUE
000013F0                           529  
000013F0                           530  BCC_CONTINUE
000013F0  7000                     531    MOVE.L    #0,D0
000013F2  1007                     532    MOVE.B    D7,D0      * Reset D0
000013F4  B03C 0000                533    CMP.B     #0,D0
000013F8  6700 0020                534    BEQ       BCC_16     * if 16 bit displacement, print the following short
000013FC                           535  
000013FC  B03C 00FF                536    CMP.B     #$FF,D0    * if 32 bit displacement, print the following long
00001400  6700 0032                537    BEQ       BCC_32
00001404                           538  
00001404  21FC 00000000 1016       539    MOVE.L    #0,DATA1
0000140C                           540    *ROR.L     #4,D0
0000140C  21C0 1016                541    MOVE.L    D0,DATA1
00001410                           542  
00001410  31FC 0002 1010           543    MOVE.W  #2,LOOP_INC
00001416                           544  
00001416  6000 0026                545    BRA     BCC_END
0000141A                           546  
0000141A                           547  BCC_16
0000141A  2238 1016                548    MOVE.L          DATA1,D1
0000141E  4841                     549    SWAP            D1              * We only want the upper word
00001420  C2BC 0000FFFF            550    AND.L           #$0000FFFF,D1   * Bit mask for upper word
00001426  21C1 1016                551    MOVE.L          D1,DATA1
0000142A                           552  
0000142A  31FC 0004 1010           553    MOVE.W  #4,LOOP_INC
00001430                           554  
00001430  6000 000C                555    BRA     BCC_END
00001434                           556  
00001434                           557  BCC_32
00001434  31FC 0006 1010           558    MOVE.W  #6,LOOP_INC
0000143A  6000 0002                559    BRA     BCC_END
0000143E                           560  
0000143E                           561  BCC_END
0000143E  4BF9 00001AA6            562    LEA     PRINT_EA_MODE_ID_ABS_DATA,A5
00001444  2F0D                     563    MOVE.L  A5, -(SP)
00001446  5878 1008                564    ADD.W   #4, PRINT_COUNT
0000144A                           565  
0000144A  6000 0240                566    BRA   PRINT_OPCODE
0000144E                           567  
0000144E                           568  
0000144E                           569  *-------------------------------------------------------------------------------
0000144E                           570  *   ADD ADDA
0000144E                           571  *
0000144E                           572  * Because ADD and ADDA have the same first four bits (1101), we need to do
0000144E                           573  * some additional branching to differentiate them.
0000144E                           574  *________________________________________
0000144E                           575  * Register Use Summary:
0000144E                           576  *
0000144E                           577  * D0: General variable, cleared every use to be safe
0000144E                           578  * D7: CONST - The opcode to decode - NO TOUCH
0000144E                           579  *
0000144E                           580  *-------------------------------------------------------------------------------
0000144E                           581  ADD_ADDA
0000144E                           582  
0000144E  4280                     583    CLR.L   D0
00001450  2007                     584    MOVE.L  D7,D0
00001452                           585  
00001452  EC58                     586    ROR.W   #06,D0     * Get bits 7,6 on end
00001454  C03C 0003                587    AND.B   #03,D0     * Isolate bits 7,6
00001458  B03C 0003                588    CMP.B   #03,D0
0000145C  6700 0006                589    BEQ   ADDA
00001460                           590  
00001460  6000 0082                591    BRA   ADD          * Else it's ADD
00001464                           592  *-------------------------------------------------------------------------------
00001464                           593  
00001464                           594  
00001464                           595  *-------------------------------------------------------------------------------
00001464                           596  *   ADDA
00001464                           597  *
00001464                           598  *
00001464                           599  *-------------------------------------------------------------------------------
00001464                           600  ADDA
00001464                           601  
00001464  2007                     602    MOVE.L  D7,D0         * Reset D0
00001466                           603  
00001466  4BF9 00001892            604    LEA     PRINT_ADDA,A5    * Load the print subroutine into intermediate address
0000146C  2F0D                     605    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000146E  5878 1008                606    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001472                           607  
00001472  EC58                     608    ROR.W   #$6,D0        * Get bits 9,8,7,6 on end byte
00001474  C03C 0007                609    AND.B   #7,D0         * Isolate bits 8,7,6
00001478                           610  
00001478  B03C 0003                611    CMP.B   #3,D0         * If 8,7,6 == 011
0000147C  6700 001E                612    BEQ     ADDA_W
00001480                           613  
00001480  B03C 0007                614    CMP.B   #7,D0         * If 8,7,6 == 111
00001484  6700 0006                615    BEQ     ADDA_L
00001488                           616  
00001488  6000 0672                617    BRA     PRINT_ILLEGAL
0000148C                           618  
0000148C                           619  * ------ Long Opmode ------
0000148C                           620  ADDA_L
0000148C                           621  
0000148C  4BF9 00001966            622    LEA     PRINT_LONG_DESIGNATOR,A5 * Load the ".L" print subroutine
00001492  2F0D                     623    MOVE.L  A5, -(SP)       * Put the subroutine onto the stack
00001494  5878 1008                624    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001498                           625  
00001498  6000 0012                626    BRA     ADDA_CONTINUE
0000149C                           627  
0000149C                           628  * ------ Word Opmode ------
0000149C                           629  ADDA_W
0000149C                           630  
0000149C  4BF9 00001956            631    LEA     PRINT_WORD_DESIGNATOR,A5 * Load the ".W" print subroutine
000014A2  2F0D                     632    MOVE.L  A5, -(SP)         * Put the subroutine onto the stack
000014A4  5878 1008                633    ADD.W   #4,PRINT_COUNT    * Increment Print Count by 1 long
000014A8                           634  
000014A8  6000 0002                635    BRA     ADDA_CONTINUE
000014AC                           636  
000014AC                           637  * ------ Continue ------
000014AC                           638  ADDA_CONTINUE
000014AC                           639  
000014AC                           640  * Push the effective address print subroutine onto the stack
000014AC  2C07                     641    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
000014AE  4EB9 000016B8            642    JSR     PUSH_EA_MODE_ID
000014B4                           643  
000014B4                           644  
000014B4  4BF9 00001AEC            645    LEA     PRINT_COMMA,A5   * Load the print subroutine
000014BA  2F0D                     646    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000014BC  5878 1008                647    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000014C0                           648  
000014C0                           649  
000014C0                           650  
000014C0                           651  * Reset and push the address register print subroutine onto the stack
000014C0  2007                     652    MOVE.L D7,D0    * Reset D0
000014C2                           653  
000014C2  E080                     654    ASR.L   #$8,D0
000014C4  E280                     655    ASR.L   #$1,D0
000014C6  C03C 0007                656    AND.B   #$7,D0
000014CA                           657  
000014CA  13C0 00001E06            658    MOVE.B  D0,MISC_NUMBER
000014D0                           659  
000014D0  4BF9 000018B8            660    LEA     PRINT_MISC_NUMBER_AS_ADDRESS,A5   * Load the print subroutine
000014D6  2F0D                     661    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000014D8  5878 1008                662    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000014DC                           663  
000014DC  5478 1010                664    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
000014E0                           665  
000014E0  6000 01AA                666    BRA   PRINT_OPCODE
000014E4                           667  
000014E4                           668  *-------------------------------------------------------------------------------
000014E4                           669  *   ADD
000014E4                           670  *
000014E4                           671  *
000014E4                           672  *-------------------------------------------------------------------------------
000014E4                           673  ADD
000014E4                           674  
000014E4                           675  * ------ Print "ADD" ------
000014E4  4BF9 00001882            676    LEA     PRINT_ADD,A5    * Load the print subroutine into intermediate address
000014EA  2F0D                     677    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000014EC  5878 1008                678    ADD.W   #4,PRINT_COUNT
000014F0                           679  
000014F0                           680  * ------ Print size ------
000014F0  1800                     681    MOVE.B   D0,D4            * Move bits 7,6 to D4 for BWL
000014F2  4EB9 00001780            682    JSR      PUSH_BWL
000014F8                           683  
000014F8                           684  * ------ Reset D0, determine order ------
000014F8  2007                     685    MOVE.L  D7,D0
000014FA  E058                     686    ROR.W   #08,D0     * Get bit 8 on the end
000014FC  C07C 0001                687    AND.W   #1,D0
00001500                           688  
00001500                           689    * If bit 8 == 0 the order is <ea> + Dn
00001500                           690    * If bit 8 == 1 the order is Dn + <ea>
00001500                           691  
00001500  B03C 0001                692    CMP.B   #1,D0
00001504  6700 003A                693    BEQ     ADD_DN_FIRST
00001508                           694  
00001508                           695  * ------ Print order is effective address, data register ------
00001508                           696  ADD_EA_FIRST
00001508                           697  
00001508                           698  
00001508                           699    * ------ Print the effective address ------
00001508  2C07                     700    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
0000150A  4EB9 000016B8            701    JSR     PUSH_EA_MODE_ID
00001510                           702  
00001510                           703    * ------ Print a comma ------
00001510  4BF9 00001AEC            704    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001516  2F0D                     705    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001518  5878 1008                706    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000151C                           707  
0000151C                           708    * ------ Determine the register number ------
0000151C  2007                     709    MOVE.L  D7,D0
0000151E  E058                     710    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
00001520  E258                     711    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
00001522  C07C 0007                712    AND.W   #7,D0 * Mask against 111 to only get 3 bits
00001526                           713  
00001526                           714    * ------ Print the register number ------
00001526  13C0 00001E06            715    MOVE.B  D0,MISC_NUMBER
0000152C  4BF9 000018DE            716    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
00001532  2F0D                     717    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001534  5878 1008                718    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001538                           719  
00001538  5478 1010                720    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
0000153C                           721  
0000153C  6000 014E                722    BRA   PRINT_OPCODE
00001540                           723  
00001540                           724  
00001540                           725  * ------ Print order is data register, effective address ------
00001540                           726  ADD_DN_FIRST
00001540                           727  
00001540                           728  
00001540                           729    * ------ Determine the register number ------
00001540  2007                     730    MOVE.L  D7,D0
00001542  E058                     731    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
00001544  E258                     732    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
00001546  C07C 0007                733    AND.W   #7,D0 * Mask against 111 to only get 3 bits
0000154A                           734  
0000154A                           735    * ------ Print the register number ------
0000154A  13C0 00001E06            736    MOVE.B  D0,MISC_NUMBER
00001550  4BF9 000018DE            737    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
00001556  2F0D                     738    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001558  5878 1008                739    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000155C                           740  
0000155C                           741    * ------ Print a comma ------
0000155C  4BF9 00001AEC            742    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001562  2F0D                     743    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001564  5878 1008                744    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001568                           745  
00001568                           746    * ------ Print the effective address ------
00001568  2C07                     747    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
0000156A  4EB9 000016B8            748    JSR     PUSH_EA_MODE_ID
00001570                           749  
00001570  5478 1010                750    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
00001574                           751  
00001574  6000 0116                752    BRA   PRINT_OPCODE
00001578                           753  
00001578                           754  
00001578                           755  *-------------------------------------------------------------------------------
00001578                           756  *   ADDQ
00001578                           757  *
00001578                           758  *
00001578                           759  *-------------------------------------------------------------------------------
00001578                           760  ADDQ
00001578                           761  
00001578                           762  
00001578                           763  * ------ Ensure that opcode is valid ------
00001578  2007                     764    MOVE.L  D7,D0
0000157A  E058                     765    ROR.W   #$08,D0
0000157C  C03C 0001                766    AND.B   #1,D0
00001580  B03C 0000                767    CMP.B   #0,D0             * Check for 0 in 8th bit
00001584  6600 0576                768    BNE     PRINT_ILLEGAL
00001588                           769  
00001588                           770  * ------ Print "ADDQ" ------
00001588  4BF9 00001936            771    LEA     PRINT_ADDQ,A5    * Load the print subroutine into intermediate address
0000158E  2F0D                     772    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001590  5878 1008                773    ADD.W   #4,PRINT_COUNT
00001594                           774  
00001594                           775  * ------ Print Size ------
00001594  2007                     776    MOVE.L  D7,D0
00001596  EC58                     777    ROR.W   #6,D0
00001598  C07C 0003                778    AND.W   #3,D0
0000159C                           779  
0000159C  4284                     780    CLR.L   D4
0000159E  1800                     781    MOVE.B  D0,D4            * Move bits 7,6 to D4 for BWL
000015A0  4EB9 00001780            782    JSR     PUSH_BWL
000015A6                           783  
000015A6                           784  * ------ Retrieve Data ------
000015A6  2007                     785    MOVE.L  D7,D0             * Reset D0
000015A8  E058                     786    ROR.W   #$8, D0           * Get bits 11 - 9
000015AA  E258                     787    ROR.W   #$1, D0           * Get bits 11 - 9
000015AC  C03C 0007                788    AND.B   #$7, D0           * Clear bit 11
000015B0                           789  
000015B0                           790  
000015B0                           791  * ADDQ converts 000 to 8 since nobody wants to add 0 to their number
000015B0  0C00 0000                792    CMPI.B   #0,D0
000015B4  6600 0006                793    BNE      ADDQ_NOT_ZERO
000015B8                           794  
000015B8                           795  *Else: D0 is 0, so we convert to 8
000015B8  103C 0008                796    MOVE.B   #8,D0
000015BC                           797  
000015BC                           798  ADDQ_NOT_ZERO
000015BC                           799  
000015BC  13C0 00001E06            800    MOVE.B  D0,MISC_NUMBER
000015C2                           801  
000015C2                           802  * ------ Print Data ------
000015C2  4BF9 00001904            803    LEA     PRINT_MISC_NUMBER_AS_DATA,A5
000015C8  2F0D                     804    MOVE.L  A5, -(SP)
000015CA  5878 1008                805    ADD.W   #4, PRINT_COUNT
000015CE                           806  
000015CE                           807  * ------ Print a comma ------
000015CE  4BF9 00001AEC            808    LEA     PRINT_COMMA,A5  * Load the print subroutine
000015D4  2F0D                     809    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000015D6  5878 1008                810    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000015DA                           811  
000015DA                           812  * ------ Print Effective Address ------
000015DA  2C07                     813    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
000015DC  4EB9 000016B8            814    JSR     PUSH_EA_MODE_ID
000015E2                           815  
000015E2                           816  
000015E2  31FC 0002 1010           817    MOVE.W  #2,LOOP_INC     * Increment the loop counter by 2 bytes
000015E8  6000 00A2                818    BRA     PRINT_OPCODE    * Always put this at the end
000015EC                           819  
000015EC                           820  
000015EC                           821  
000015EC                           822  *-------------------------------------------------------------------------------
000015EC                           823  *   NOP
000015EC                           824  *
000015EC                           825  *   NONSTANDARD OPCODE! Don't base your design off of this :)
000015EC                           826  *
000015EC                           827  *-------------------------------------------------------------------------------
000015EC                           828  NOP
000015EC                           829  
000015EC  43F9 00001DD4            830    LEA     STRING_NOP,A1
000015F2  103C 000E                831    MOVE.B  #14,D0
000015F6  4E4F                     832    TRAP    #15
000015F8                           833  
000015F8  31FC 0002 1010           834    MOVE.W  #2,LOOP_INC   * Increment the loop counter by 2 bytes
000015FE                           835  
000015FE  4EB9 00001B30            836    JSR     PRINT_IMMEDIATE_NEWLINE
00001604                           837  
00001604  4E75                     838    RTS
00001606                           839  
00001606                           840  *-------------------------------------------------------------------------------
00001606                           841  *   RTS
00001606                           842  *
00001606                           843  *   NONSTANDARD OPCODE! Don't base your design off of this :)
00001606                           844  *
00001606                           845  *-------------------------------------------------------------------------------
00001606                           846  RTS
00001606                           847  
00001606  43F9 00001DD8            848    LEA     STRING_RTS,A1
0000160C  103C 000E                849    MOVE.B  #14,D0
00001610  4E4F                     850    TRAP    #15
00001612                           851  
00001612  31FC 0002 1010           852    MOVE.W  #2,LOOP_INC   * Increment the loop counter by 2 bytes
00001618                           853  
00001618  4EB9 00001B30            854    JSR     PRINT_IMMEDIATE_NEWLINE
0000161E                           855  
0000161E  4E75                     856    RTS
00001620                           857  
00001620                           858  
00001620                           859  *-------------------------------------------------------------------------------
00001620                           860  *   JSR
00001620                           861  *
00001620                           862  *
00001620                           863  *-------------------------------------------------------------------------------
00001620                           864  JSR
00001620                           865  
00001620  4BF9 00001ACC            866    LEA     PRINT_JSR,A5    * Load the print subroutine into intermediate address
00001626  2F0D                     867    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001628  5878 1008                868    ADD.W           #4,PRINT_COUNT
0000162C                           869  
0000162C                           870  * ---- Custom Branching Block ----
0000162C                           871  * Supported Modes: (An), Indirect short, Indirect Long
0000162C                           872  
0000162C  4280                     873    CLR.L     D0
0000162E  1007                     874    MOVE.B    D7,D0 * Copy opcode into local variable
00001630  C03C 0038                875    AND.B     #$38,D0 * Mask D0 with 0111000 to get MODE bits only
00001634  E600                     876    ASR.B   #3,D0 * Shift the result so D0 ranges between 000 and 111
00001636                           877  
00001636  B03C 0002                878    CMP.B   #2,D0         *010 -> Address Register   Indirect
0000163A  6700 002A                879    BEQ   JSR_PUSH_EA_MODE_ID_AN_INDIRECT
0000163E  B03C 0007                880    CMP.B   #7,D0         *111 -> All Data Operations
00001642  6700 0006                881    BEQ     JSR_EA_MODE_ELSE
00001646                           882  
00001646  6000 04B4                883    BRA     PRINT_ILLEGAL
0000164A                           884  
0000164A                           885  
0000164A                           886  *________________________________________
0000164A                           887  * Handle Data Branching Logic
0000164A                           888  * Only short and long indirect allowed
0000164A                           889  *----------------------------------------
0000164A                           890  JSR_EA_MODE_ELSE
0000164A                           891  
0000164A  4280                     892    CLR.L   D0
0000164C  1007                     893    MOVE.B  D7,D0
0000164E  C03C 0007                894    AND.B   #7,D0
00001652                           895  
00001652  B03C 0000                896    CMP.B   #0,D0
00001656  6700 0018                897    BEQ     JSR_PUSH_EA_MODE_ID_IND_SHORT
0000165A                           898  
0000165A  B03C 0001                899    CMP.B   #1,D0
0000165E  6700 001A                900    BEQ     JSR_PUSH_EA_MODE_ID_IND_LONG
00001662                           901  
00001662  6000 0498                902    BRA     PRINT_ILLEGAL
00001666                           903  
00001666                           904  *________________________________________
00001666                           905  * Jump directly into the middle of
00001666                           906  * the PUSH_EA_MODE subroutine
00001666                           907  *----------------------------------------
00001666                           908  JSR_PUSH_EA_MODE_ID_AN_INDIRECT
00001666  4EB9 00001708            909    JSR   PUSH_EA_MODE_ID_AN_INDIRECT
0000166C  6000 0016                910    BRA   JSR_FINISH
00001670                           911  
00001670                           912  *________________________________________
00001670                           913  * Jump directly into the middle of
00001670                           914  * the PUSH_EA_MODE subroutine
00001670                           915  *----------------------------------------
00001670                           916  JSR_PUSH_EA_MODE_ID_IND_SHORT
00001670  4EB9 00001748            917    JSR   PUSH_EA_MODE_ID_IND_SHORT
00001676  6000 000C                918    BRA   JSR_FINISH
0000167A                           919  
0000167A                           920  *________________________________________
0000167A                           921  * Jump directly into the middle of
0000167A                           922  * the PUSH_EA_MODE subroutine
0000167A                           923  *----------------------------------------
0000167A                           924  JSR_PUSH_EA_MODE_ID_IND_LONG
0000167A  4EB9 00001756            925    JSR   PUSH_EA_MODE_ID_IND_LONG
00001680  6000 0002                926    BRA   JSR_FINISH
00001684                           927  
00001684                           928  JSR_FINISH
00001684                           929  
00001684  5478 1010                930    ADD.W   #2,LOOP_INC     * Increment the loop counter by 1 word
00001688                           931  
00001688  6000 0002                932    BRA     PRINT_OPCODE    * Always put this at the end
0000168C                           933  
0000168C                           934  *-------------------------------------------------------------------------------
0000168C                           935  *   PRINT OPCODE
0000168C                           936  *-------------------------------------------------------------------------------
0000168C                           937  
0000168C                           938  PRINT_OPCODE
0000168C                           939  
0000168C  2E78 100C                940    MOVE.L  STACK_BASE,SP * Put the stack back to where it was when we started
00001690  31FC 0000 100A           941    MOVE.W  #0,PRINT_OPCODE_LOOP_INDEX
00001696                           942  
00001696                           943  PRINT_OPCODE_LOOP
00001696                           944  
00001696  3278 100A                945    MOVEA.W   PRINT_OPCODE_LOOP_INDEX,A1
0000169A                           946  
0000169A  B2F8 1008                947    CMPA.W   PRINT_COUNT,A1 * Check if we're done
0000169E  6C00 000C                948    BGE     PRINT_OPCODE_LOOP_FINISH
000016A2                           949  
000016A2  2467                     950    MOVE.L  -(SP),A2  * Pop the next item on the stack and put it in A1
000016A4  4ED2                     951    JMP     (A2)        * Jump to the routine we stored on the stack
000016A6                           952  
000016A6                           953  PRINT_OPCODE_LOOP_RETURN * Print methods come back here
000016A6                           954  
000016A6  5878 100A                955    ADD.W    #4,PRINT_OPCODE_LOOP_INDEX
000016AA                           956  
000016AA  60EA                     957    BRA     PRINT_OPCODE_LOOP
000016AC                           958  
000016AC                           959  PRINT_OPCODE_LOOP_FINISH
000016AC                           960  
000016AC  2E78 100C                961    MOVE.L  STACK_BASE,SP  * Return the stack to normal so we can RTS
000016B0                           962  
000016B0  4EB9 00001B30            963    JSR     PRINT_IMMEDIATE_NEWLINE
000016B6  4E75                     964    RTS
000016B8                           965  
000016B8                           966  *-------------------------------------------------------------------------------
000016B8                           967  
000016B8                           968  
000016B8                           969  
000016B8                           970  
000016B8                           971  
000016B8                           972  
000016B8                           973  
000016B8                           974  
000016B8                           975  
000016B8                           976  
000016B8                           977  *-------------------------------------------------------------------------------
000016B8                           978  *     _______    ________
000016B8                           979  *    |\  ___ \  |\   __  \
000016B8                           980  *    \ \   __/| \ \  \|\  \
000016B8                           981  *     \ \  \_|/__\ \   __  \
000016B8                           982  *      \ \  \_|\ \\ \  \ \  \
000016B8                           983  *       \ \_______\\ \__\ \__\
000016B8                           984  *        \|_______| \|__|\|__|
000016B8                           985  *
000016B8                           986  *-------------------------------------------------------------------------------
000016B8                           987  
000016B8                           988  *-------------------------------------------------------------------------------
000016B8                           989  *
000016B8                           990  *       PUSH EFFECTIVE ADDRESS MODE IDENTIFIER
000016B8                           991  *
000016B8                           992  * Determines the addressing mode of the effective address. Used for opcodes
000016B8                           993  * with the last five bits dedicated to the effective address.
000016B8                           994  *
000016B8                           995  * TODO: Implement a counter for how many prints we've made
000016B8                           996  *
000016B8                           997  *________________________________________
000016B8                           998  * Register Use Summary:
000016B8                           999  *
000016B8                          1000  * D0: LOCAL VARIABLE - low byte of opcode
000016B8                          1001  * D6: PARAMETER - The effective address bits. Assumes bits are shifted into
000016B8                          1002  *                 the lowest 6 bits of the register.
000016B8                          1003  *
000016B8                          1004  * A4: LOCAL VARIABLE - RTS value temporary storage - must be swapped
000016B8                          1005  * A5: LOCAL VARIABLE - Print Label to be pushed to stack
000016B8                          1006  *
000016B8                          1007  *-------------------------------------------------------------------------------
000016B8                          1008  PUSH_EA_MODE_ID
000016B8                          1009  
000016B8                          1010  
000016B8                          1011  * ---- Input Processing ----
000016B8                          1012  
000016B8  1006                    1013      MOVE.B  D6,D0   * Put opcode in D0
000016BA  C03C 0038               1014      AND.B   #$38,D0 * Mask D0 with 0111000 to get MODE bits only
000016BE  E600                    1015      ASR.B   #3,D0   * Shift the result so D0 ranges between 000 and 111
000016C0                          1016  
000016C0                          1017  
000016C0                          1018  * ---- Branching Block ----
000016C0                          1019  
000016C0  B03C 0000               1020      CMP.B   #0,D0           *000 -> Register
000016C4  6700 002E               1021      BEQ     PUSH_EA_MODE_ID_DN
000016C8  B03C 0001               1022      CMP.B   #1,D0           *001 -> Address Register
000016CC  6700 0030               1023      BEQ     PUSH_EA_MODE_ID_AN
000016D0  B03C 0002               1024      CMP.B   #2,D0           *010 -> Address Register   Indirect
000016D4  6700 0032               1025      BEQ     PUSH_EA_MODE_ID_AN_INDIRECT
000016D8  B03C 0003               1026      CMP.B   #3,D0           *011 -> Address Register  (Indirect)+
000016DC  6700 0034               1027      BEQ     PUSH_EA_MODE_ID_AN_POST_INC
000016E0  B03C 0004               1028      CMP.B   #4,D0           *100 -> Address Register -(Indirect)
000016E4  6700 0036               1029      BEQ     PUSH_EA_MODE_ID_AN_PRE_DEC
000016E8  B03C 0007               1030      CMP.B   #7,D0           *111 -> All Data Operations
000016EC  6700 0038               1031      BEQ     PUSH_EA_MODE_ID_ELSE
000016F0                          1032  
000016F0  6000 040A               1033      BRA     PRINT_ILLEGAL
000016F4                          1034  
000016F4                          1035  *________________________________________
000016F4                          1036  * Load Register Print Label
000016F4                          1037  *----------------------------------------
000016F4                          1038  PUSH_EA_MODE_ID_DN
000016F4  4BF9 00001976           1039      LEA     PRINT_EA_MODE_ID_DN,A5
000016FA  6000 0076               1040      BRA     PUSH_EA_MODE_ID_FINISH
000016FE                          1041  
000016FE                          1042  *________________________________________
000016FE                          1043  * Load Address Register Print Label
000016FE                          1044  *----------------------------------------
000016FE                          1045  PUSH_EA_MODE_ID_AN
000016FE  4BF9 00001994           1046      LEA     PRINT_EA_MODE_ID_AN,A5
00001704  6000 006C               1047      BRA     PUSH_EA_MODE_ID_FINISH
00001708                          1048  
00001708                          1049  *________________________________________
00001708                          1050  * Load (Address Register) Print Label
00001708                          1051  *----------------------------------------
00001708                          1052  PUSH_EA_MODE_ID_AN_INDIRECT
00001708  4BF9 000019B2           1053      LEA     PRINT_EA_MODE_ID_AN_INDIRECT,A5
0000170E  6000 0062               1054      BRA     PUSH_EA_MODE_ID_FINISH
00001712                          1055  
00001712                          1056  *________________________________________
00001712                          1057  * Load (Address Register)+ Print Label
00001712                          1058  *----------------------------------------
00001712                          1059  PUSH_EA_MODE_ID_AN_POST_INC
00001712  4BF9 000019E8           1060      LEA     PRINT_EA_MODE_ID_AN_POST_INC,A5
00001718  6000 0058               1061      BRA     PUSH_EA_MODE_ID_FINISH
0000171C                          1062  
0000171C                          1063  *________________________________________
0000171C                          1064  * Load -(Address Register) Print Label
0000171C                          1065  *----------------------------------------
0000171C                          1066  PUSH_EA_MODE_ID_AN_PRE_DEC
0000171C  4BF9 00001A2A           1067      LEA     PRINT_EA_MODE_ID_AN_PRE_DEC,A5
00001722  6000 004E               1068      BRA     PUSH_EA_MODE_ID_FINISH
00001726                          1069  
00001726                          1070  *________________________________________
00001726                          1071  * Handle Data Branching Logic
00001726                          1072  *----------------------------------------
00001726                          1073  PUSH_EA_MODE_ID_ELSE
00001726  1006                    1074      MOVE.B  D6,D0
00001728  C03C 0007               1075      AND.B   #7,D0
0000172C                          1076  
0000172C  B03C 0000               1077      CMP.B   #0,D0
00001730  6700 0016               1078      BEQ     PUSH_EA_MODE_ID_IND_SHORT
00001734                          1079  
00001734  B03C 0001               1080      CMP.B   #1,D0
00001738  6700 001C               1081      BEQ     PUSH_EA_MODE_ID_IND_LONG
0000173C                          1082  
0000173C  B03C 0004               1083      CMP.B   #4,D0
00001740  6700 0022               1084      BEQ     PUSH_EA_MODE_ID_ABS_DATA
00001744                          1085  
00001744  6000 03B6               1086      BRA     PRINT_ILLEGAL
00001748                          1087  
00001748                          1088  PUSH_EA_MODE_ID_IND_SHORT
00001748  4BF9 00001A6C           1089      LEA     PRINT_EA_MODE_ID_IND_SHORT,A5
0000174E  5878 1010               1090      ADD.W           #4, LOOP_INC * Adjust the Loop increment to skip the data
00001752  6000 001E               1091      BRA     PUSH_EA_MODE_ID_FINISH
00001756                          1092  
00001756                          1093  PUSH_EA_MODE_ID_IND_LONG
00001756  4BF9 00001A8C           1094      LEA     PRINT_EA_MODE_ID_IND_LONG,A5
0000175C  5078 1010               1095      ADD.W           #8,LOOP_INC * Adjust the Loop increment to skip the data
00001760  6000 0010               1096      BRA     PUSH_EA_MODE_ID_FINISH
00001764                          1097  
00001764                          1098  PUSH_EA_MODE_ID_ABS_DATA
00001764  4BF9 00001AA6           1099      LEA     PRINT_EA_MODE_ID_ABS_DATA,A5
0000176A  5078 1010               1100      ADD.W           #8,LOOP_INC * Adjust the Loop increment to skip the data
0000176E  6000 0002               1101      BRA     PUSH_EA_MODE_ID_FINISH
00001772                          1102  
00001772                          1103  *________________________________________
00001772                          1104  PUSH_EA_MODE_ID_FINISH
00001772  2857                    1105      MOVEA.L         (SP),A4 * Store the value we're going to RTS to
00001774  588F                    1106      ADD.L           #4,SP   * Move the stack pointer down to the RTS value
00001776  2F0D                    1107      MOVE.L          A5,-(SP)    * Overwrite the RTS value with the print label
00001778  2F0C                    1108      MOVE.L          A4,-(SP)    * Push the RTS so we can return like normal
0000177A                          1109  
0000177A  5878 1008               1110      ADD.W           #4,PRINT_COUNT
0000177E                          1111  
0000177E  4E75                    1112      RTS
00001780                          1113  
00001780                          1114  *-------------------------------------------------------------------------------
00001780                          1115  *                 ________  ___       __   ___
00001780                          1116  *                |\   __  \|\  \     |\  \|\  \
00001780                          1117  *                \ \  \|\ /\ \  \    \ \  \ \  \
00001780                          1118  *                 \ \   __  \ \  \  __\ \  \ \  \
00001780                          1119  *                  \ \  \|\  \ \  \|\__\_\  \ \  \____
00001780                          1120  *                   \ \_______\ \____________\ \_______\
00001780                          1121  *                    \|_______|\|____________|\|_______|
00001780                          1122  *
00001780                          1123  
00001780                          1124  *-------------------------------------------------------------------------------
00001780                          1125  
00001780                          1126  *-------------------------------------------------------------------------------
00001780                          1127  *
00001780                          1128  *       PUSH BYTE, WORD, OR LONG
00001780                          1129  *
00001780                          1130  * TODO: Implement a counter for how many prints we've made
00001780                          1131  *________________________________________
00001780                          1132  * Register Use Summary:
00001780                          1133  *
00001780                          1134  * D4: PARAMETER       - The size bits to print
00001780                          1135  * D7: CONST PARAMETER - The opcode word
00001780                          1136  *
00001780                          1137  * A4: LOCAL VARIABLE  - Temp RTS location
00001780                          1138  * A5: LOCAL VARIABLE  - Label for the print routine to store on the stack
00001780                          1139  *-------------------------------------------------------------------------------
00001780                          1140  PUSH_BWL
00001780                          1141  
00001780                          1142  * ---- Branching Block ----
00001780                          1143  
00001780  B83C 0000               1144      CMP.B           #0,D4       *00 -> Byte
00001784  6700 0016               1145      BEQ             PUSH_BWL_BYTE
00001788  B83C 0001               1146      CMP.B           #1,D4       *01 -> Word
0000178C  6700 0018               1147      BEQ             PUSH_BWL_WORD
00001790  B83C 0002               1148      CMP.B           #2,D4       *10 -> Long
00001794  6700 001A               1149      BEQ             PUSH_BWL_LONG
00001798                          1150  
00001798  6000 0362               1151      BRA             PRINT_ILLEGAL
0000179C                          1152  
0000179C                          1153  *________________________________________
0000179C                          1154  * Load Byte Print Label
0000179C                          1155  *----------------------------------------
0000179C                          1156  PUSH_BWL_BYTE
0000179C  4BF9 00001946           1157      LEA             PRINT_BYTE_DESIGNATOR,A5
000017A2  6000 0016               1158      BRA             PUSH_BWL_FINISH
000017A6                          1159  *________________________________________
000017A6                          1160  * Load Word Print Label
000017A6                          1161  *----------------------------------------
000017A6                          1162  PUSH_BWL_WORD
000017A6  4BF9 00001956           1163      LEA             PRINT_WORD_DESIGNATOR,A5
000017AC  6000 000C               1164      BRA             PUSH_BWL_FINISH
000017B0                          1165  
000017B0                          1166  *________________________________________
000017B0                          1167  * Load Long Print Label
000017B0                          1168  *----------------------------------------
000017B0                          1169  PUSH_BWL_LONG
000017B0  4BF9 00001966           1170      LEA             PRINT_LONG_DESIGNATOR,A5
000017B6  6000 0002               1171      BRA             PUSH_BWL_FINISH
000017BA                          1172  
000017BA                          1173  *________________________________________
000017BA                          1174  PUSH_BWL_FINISH
000017BA                          1175  
000017BA  2857                    1176      MOVEA.L         (SP),A4 * Store the value we're going to RTS to
000017BC  588F                    1177      ADD.L           #4,SP   * Move the stack pointer down to the RTS value
000017BE  2F0D                    1178      MOVE.L          A5,-(SP)    * Overwrite the RTS value with the print label
000017C0  2F0C                    1179      MOVE.L          A4,-(SP)    * Push the RTS so we can return like normal
000017C2                          1180  
000017C2  5878 1008               1181      ADD.W           #4,PRINT_COUNT
000017C6                          1182  
000017C6  4E75                    1183      RTS
000017C8                          1184  
000017C8                          1185  
000017C8                          1186  *-------------------------------------------------------------------------------
000017C8                          1187  *     ________   ________   ___   ________    _________
000017C8                          1188  *    |\   __  \ |\   __  \ |\  \ |\   ___  \ |\___   ___\
000017C8                          1189  *    \ \  \|\  \\ \  \|\  \\ \  \\ \  \\ \  \\|___ \  \_|
000017C8                          1190  *     \ \   ____\\ \   _  _\\ \  \\ \  \\ \  \    \ \  \
000017C8                          1191  *      \ \  \___| \ \  \\  \|\ \  \\ \  \\ \  \    \ \  \
000017C8                          1192  *       \ \__\     \ \__\\ _\ \ \__\\ \__\\ \__\    \ \__\
000017C8                          1193  *        \|__|      \|__|\|__| \|__| \|__| \|__|     \|__|
000017C8                          1194  *
000017C8                          1195  *-------------------------------------------------------------------------------
000017C8                          1196  *-------------------------------------------------------------------------------
000017C8                          1197  *
000017C8                          1198  *       PRINT LSR
000017C8                          1199  *________________________________________
000017C8                          1200  * Register Use Summary:
000017C8                          1201  *
000017C8                          1202  * D0: LOCAL VARIABLE  - Trap task designator
000017C8                          1203  *
000017C8                          1204  * A1: LOCAL VARIABLE  - String address
000017C8                          1205  *-------------------------------------------------------------------------------
000017C8                          1206  PRINT_LSR
000017C8  43F9 00001DC4           1207      LEA             STRING_LSR,A1   * Load "LSR" into A1
000017CE  103C 000E               1208      MOVE.B          #14,D0      * Set trap task to String
000017D2  4E4F                    1209      TRAP            #15         * Print "LSR "
000017D4  6000 FED0               1210      BRA             PRINT_OPCODE_LOOP_RETURN
000017D8                          1211  
000017D8                          1212  *-------------------------------------------------------------------------------
000017D8                          1213  *
000017D8                          1214  *       PRINT LSL
000017D8                          1215  *________________________________________
000017D8                          1216  * Register Use Summary:
000017D8                          1217  *
000017D8                          1218  * D0: LOCAL VARIABLE  - Trap task designator
000017D8                          1219  *
000017D8                          1220  * A1: LOCAL VARIABLE  - String address
000017D8                          1221  *-------------------------------------------------------------------------------
000017D8                          1222  PRINT_LSL
000017D8  43F9 00001DC8           1223      LEA             STRING_LSL,A1   * Load "LSL" into A1
000017DE  103C 000E               1224      MOVE.B          #14,D0      * Set trap task to String
000017E2  4E4F                    1225      TRAP            #15         * Print "LSL "
000017E4  6000 FEC0               1226      BRA             PRINT_OPCODE_LOOP_RETURN
000017E8                          1227  
000017E8                          1228  *-------------------------------------------------------------------------------
000017E8                          1229  *
000017E8                          1230  *       PRINT ASR
000017E8                          1231  *________________________________________
000017E8                          1232  * Register Use Summary:
000017E8                          1233  *
000017E8                          1234  * D0: LOCAL VARIABLE  - Trap task designator
000017E8                          1235  *
000017E8                          1236  * A1: LOCAL VARIABLE  - String address
000017E8                          1237  *-------------------------------------------------------------------------------
000017E8                          1238  PRINT_ASR
000017E8  43F9 00001DBC           1239      LEA             STRING_ASR,A1   * Load "ASR" into A1
000017EE  103C 000E               1240      MOVE.B          #14,D0      * Set trap task to String
000017F2  4E4F                    1241      TRAP            #15         * Print "ASR "
000017F4  6000 FEB0               1242      BRA             PRINT_OPCODE_LOOP_RETURN
000017F8                          1243  
000017F8                          1244  *-------------------------------------------------------------------------------
000017F8                          1245  *
000017F8                          1246  *       PRINT ASL
000017F8                          1247  *________________________________________
000017F8                          1248  * Register Use Summary:
000017F8                          1249  *
000017F8                          1250  * D0: LOCAL VARIABLE  - Trap task designator
000017F8                          1251  *
000017F8                          1252  * A1: LOCAL VARIABLE  - String address
000017F8                          1253  *-------------------------------------------------------------------------------
000017F8                          1254  PRINT_ASL
000017F8  43F9 00001DC0           1255      LEA             STRING_ASL,A1   * Load "ASL" into A1
000017FE  103C 000E               1256      MOVE.B          #14,D0      * Set trap task to String
00001802  4E4F                    1257      TRAP            #15         * Print "ASL "
00001804  6000 FEA0               1258      BRA             PRINT_OPCODE_LOOP_RETURN
00001808                          1259  
00001808                          1260  *-------------------------------------------------------------------------------
00001808                          1261  *
00001808                          1262  *       PRINT ROR
00001808                          1263  *________________________________________
00001808                          1264  * Register Use Summary:
00001808                          1265  *
00001808                          1266  * D0: LOCAL VARIABLE  - Trap task designator
00001808                          1267  *
00001808                          1268  * A1: LOCAL VARIABLE  - String address
00001808                          1269  *-------------------------------------------------------------------------------
00001808                          1270  PRINT_ROR
00001808  43F9 00001DCC           1271      LEA             STRING_ROR,A1   * Load "ROR" into A1
0000180E  103C 000E               1272      MOVE.B          #14,D0      * Set trap task to String
00001812  4E4F                    1273      TRAP            #15         * Print "ROR "
00001814  6000 FE90               1274      BRA             PRINT_OPCODE_LOOP_RETURN
00001818                          1275  
00001818                          1276  *-------------------------------------------------------------------------------
00001818                          1277  *
00001818                          1278  *       PRINT ROL
00001818                          1279  *________________________________________
00001818                          1280  * Register Use Summary:
00001818                          1281  *
00001818                          1282  * D0: LOCAL VARIABLE  - Trap task designator
00001818                          1283  *
00001818                          1284  * A1: LOCAL VARIABLE  - String address
00001818                          1285  *-------------------------------------------------------------------------------
00001818                          1286  PRINT_ROL
00001818  43F9 00001DD0           1287      LEA             STRING_ROL,A1   * Load "ROL" into A1
0000181E  103C 000E               1288      MOVE.B          #14,D0      * Set trap task to String
00001822  4E4F                    1289      TRAP            #15         * Print "ROL"
00001824  6000 FE80               1290      BRA             PRINT_OPCODE_LOOP_RETURN
00001828                          1291  
00001828                          1292  *-------------------------------------------------------------------------------
00001828                          1293  *
00001828                          1294  *       PRINT DATA1_WORD
00001828                          1295  *________________________________________
00001828                          1296  * Register Use Summary:
00001828                          1297  *
00001828                          1298  * D0: LOCAL VARIABLE  - Trap task designator
00001828                          1299  *
00001828                          1300  * D1: LOCAL VARIABLE  - DATA1 local copy
00001828                          1301  *
00001828                          1302  * D2: LOCAL VARIABLE  - Base in which to print
00001828                          1303  *
00001828                          1304  * A1: LOCAL VARIABLE  - String address
00001828                          1305  *-------------------------------------------------------------------------------
00001828                          1306  PRINT_DATA1_LONG
00001828  2238 1016               1307      MOVE.L          DATA1,D1
0000182C  700F                    1308      MOVEQ           #15,D0
0000182E  7410                    1309      MOVEQ           #16,D2
00001830  4E4F                    1310      TRAP            #15
00001832                          1311  
00001832                          1312  *-------------------------------------------------------------------------------
00001832                          1313  *
00001832                          1314  *       PRINT DATA1_WORD
00001832                          1315  *________________________________________
00001832                          1316  * Register Use Summary:
00001832                          1317  *
00001832                          1318  * D0: LOCAL VARIABLE  - Trap task designator
00001832                          1319  *
00001832                          1320  * D1: LOCAL VARIABLE  - DATA1 local copy
00001832                          1321  *
00001832                          1322  * D2: LOCAL VARIABLE  - Base in which to print
00001832                          1323  *
00001832                          1324  * A1: LOCAL VARIABLE  - String address
00001832                          1325  *-------------------------------------------------------------------------------
00001832                          1326  PRINT_DATA1_WORD
00001832  2238 1016               1327      MOVE.L          DATA1,D1
00001836  4841                    1328      SWAP            D1              * We only want the upper word
00001838  C27C FFFF               1329      AND             #$0000FFFF,D1   * Bit mask for upper word
0000183C  700F                    1330      MOVEQ           #15,D0
0000183E  7410                    1331      MOVEQ           #16,D2
00001840  4E4F                    1332      TRAP            #15
00001842                          1333  
00001842                          1334  *-------------------------------------------------------------------------------
00001842                          1335  *
00001842                          1336  *       PRINT BGT
00001842                          1337  *________________________________________
00001842                          1338  * Register Use Summary:
00001842                          1339  *
00001842                          1340  * D0: LOCAL VARIABLE  - Trap task designator
00001842                          1341  *
00001842                          1342  * A1: LOCAL VARIABLE  - String address
00001842                          1343  *-------------------------------------------------------------------------------
00001842                          1344  PRINT_BGT
00001842  43F9 00001DF9           1345      LEA             STRING_BGT,A1   * Load "BGT" into A1
00001848  103C 000E               1346      MOVE.B          #14,D0      * Set trap task to String
0000184C  4E4F                    1347      TRAP            #15         * Print "BGT "
0000184E  6000 FE56               1348      BRA             PRINT_OPCODE_LOOP_RETURN
00001852                          1349  
00001852                          1350  *-------------------------------------------------------------------------------
00001852                          1351  *
00001852                          1352  *       PRINT BLE
00001852                          1353  *________________________________________
00001852                          1354  * Register Use Summary:
00001852                          1355  *
00001852                          1356  * D0: LOCAL VARIABLE  - Trap task designator
00001852                          1357  *
00001852                          1358  * A1: LOCAL VARIABLE  - String address
00001852                          1359  *-------------------------------------------------------------------------------
00001852                          1360  PRINT_BLE
00001852  43F9 00001DEF           1361      LEA             STRING_BLE,A1   * Load "BLE" into A1
00001858  103C 000E               1362      MOVE.B          #14,D0      * Set trap task to String
0000185C  4E4F                    1363      TRAP            #15         * Print "BLE "
0000185E  6000 FE46               1364      BRA             PRINT_OPCODE_LOOP_RETURN
00001862                          1365  
00001862                          1366  *-------------------------------------------------------------------------------
00001862                          1367  *
00001862                          1368  *       PRINT BEQ
00001862                          1369  *________________________________________
00001862                          1370  * Register Use Summary:
00001862                          1371  *
00001862                          1372  * D0: LOCAL VARIABLE  - Trap task designator
00001862                          1373  *
00001862                          1374  * A1: LOCAL VARIABLE  - String address
00001862                          1375  *-------------------------------------------------------------------------------
00001862                          1376  PRINT_BEQ
00001862  43F9 00001DEA           1377      LEA             STRING_BEQ,A1   * Load "BEQ" into A1
00001868  103C 000E               1378      MOVE.B          #14,D0      * Set trap task to String
0000186C  4E4F                    1379      TRAP            #15         * Print "BEQ "
0000186E  6000 FE36               1380      BRA             PRINT_OPCODE_LOOP_RETURN
00001872                          1381  
00001872                          1382  
00001872                          1383  *-------------------------------------------------------------------------------
00001872                          1384  *
00001872                          1385  *       PRINT BRA
00001872                          1386  *________________________________________
00001872                          1387  * Register Use Summary:
00001872                          1388  *
00001872                          1389  * D0: LOCAL VARIABLE  - Trap task designator
00001872                          1390  *
00001872                          1391  * A1: LOCAL VARIABLE  - String address
00001872                          1392  *-------------------------------------------------------------------------------
00001872                          1393  PRINT_BRA
00001872  43F9 00001DF4           1394      LEA             STRING_BRA,A1   * Load "BRA" into A1
00001878  103C 000E               1395      MOVE.B          #14,D0      * Set trap task to String
0000187C  4E4F                    1396      TRAP            #15         * Print "BRA "
0000187E  6000 FE26               1397      BRA             PRINT_OPCODE_LOOP_RETURN
00001882                          1398  
00001882                          1399  
00001882                          1400  *-------------------------------------------------------------------------------
00001882                          1401  *
00001882                          1402  *       PRINT ADD
00001882                          1403  *________________________________________
00001882                          1404  * Register Use Summary:
00001882                          1405  *
00001882                          1406  * D0: LOCAL VARIABLE  - Trap task designator
00001882                          1407  *
00001882                          1408  * A1: LOCAL VARIABLE  - String address
00001882                          1409  *-------------------------------------------------------------------------------
00001882                          1410  PRINT_ADD
00001882  43F9 00001DE1           1411      LEA             STRING_ADD,A1   * Load "ADD" into A1
00001888  103C 000E               1412      MOVE.B          #14,D0      * Set trap task to String
0000188C  4E4F                    1413      TRAP            #15         * Print "ADD "
0000188E  6000 FE16               1414      BRA             PRINT_OPCODE_LOOP_RETURN
00001892                          1415  
00001892                          1416  
00001892                          1417  *-------------------------------------------------------------------------------
00001892                          1418  *
00001892                          1419  *       PRINT ADDA
00001892                          1420  *________________________________________
00001892                          1421  * Register Use Summary:
00001892                          1422  *
00001892                          1423  * D0: LOCAL VARIABLE  - Trap task designator
00001892                          1424  *
00001892                          1425  * A1: LOCAL VARIABLE  - String address
00001892                          1426  *-------------------------------------------------------------------------------
00001892                          1427  PRINT_ADDA
00001892  43F9 00001DE5           1428      LEA             STRING_ADDA,A1  * Load "ADDA" into A1
00001898  103C 000E               1429      MOVE.B          #14,D0      * Set trap task to String
0000189C  4E4F                    1430      TRAP            #15         * Print "ADDA "
0000189E  6000 FE06               1431      BRA             PRINT_OPCODE_LOOP_RETURN
000018A2                          1432  
000018A2                          1433  
000018A2                          1434  *-------------------------------------------------------------------------------
000018A2                          1435  *
000018A2                          1436  *       PRINT MISC_NUMBER
000018A2                          1437  *________________________________________
000018A2                          1438  * Register Use Summary:
000018A2                          1439  *
000018A2                          1440  * D0: LOCAL VARIABLE  - Trap task designator
000018A2                          1441  *
000018A2                          1442  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
000018A2                          1443  *
000018A2                          1444  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
000018A2                          1445  *
000018A2                          1446  * A1: LOCAL VARIABLE  - String address
000018A2                          1447  *-------------------------------------------------------------------------------
000018A2                          1448  PRINT_MISC_NUMBER
000018A2  4281                    1449      CLR.L   D1
000018A4                          1450  
000018A4  103C 000F               1451      MOVE.B  #15,D0
000018A8  1239 00001E06           1452      MOVE.B  MISC_NUMBER,D1
000018AE  143C 000A               1453      MOVE.B  #10,D2
000018B2  4E4F                    1454      TRAP #15
000018B4                          1455  
000018B4  6000 FDF0               1456      BRA     PRINT_OPCODE_LOOP_RETURN
000018B8                          1457  
000018B8                          1458  *-------------------------------------------------------------------------------
000018B8                          1459  *
000018B8                          1460  *       PRINT MISC_NUMBER_AS_ADDRESS
000018B8                          1461  *________________________________________
000018B8                          1462  * Register Use Summary:
000018B8                          1463  *
000018B8                          1464  * D0: LOCAL VARIABLE  - Trap task designator
000018B8                          1465  *
000018B8                          1466  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
000018B8                          1467  *
000018B8                          1468  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
000018B8                          1469  *
000018B8                          1470  * A1: LOCAL VARIABLE  - String address
000018B8                          1471  *-------------------------------------------------------------------------------
000018B8                          1472  PRINT_MISC_NUMBER_AS_ADDRESS
000018B8                          1473  
000018B8  43F9 00001DA4           1474      LEA             STRING_A,A1
000018BE  103C 000E               1475      MOVE.B          #14,D0
000018C2  4E4F                    1476      TRAP            #15
000018C4                          1477  
000018C4  4280                    1478      CLR.L   D0
000018C6  4281                    1479      CLR.L   D1
000018C8  4282                    1480      CLR.L   D2
000018CA                          1481  
000018CA  103C 000F               1482      MOVE.B  #15,D0
000018CE  1239 00001E06           1483      MOVE.B  MISC_NUMBER,D1
000018D4  143C 000A               1484      MOVE.B  #10,D2
000018D8  4E4F                    1485      TRAP #15
000018DA                          1486  
000018DA  6000 FDCA               1487      BRA     PRINT_OPCODE_LOOP_RETURN
000018DE                          1488  
000018DE                          1489  *-------------------------------------------------------------------------------
000018DE                          1490  *
000018DE                          1491  *       PRINT MISC_NUMBER_AS_REGISTER
000018DE                          1492  *________________________________________
000018DE                          1493  * Register Use Summary:
000018DE                          1494  *
000018DE                          1495  * D0: LOCAL VARIABLE  - Trap task designator
000018DE                          1496  *
000018DE                          1497  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
000018DE                          1498  *
000018DE                          1499  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
000018DE                          1500  *
000018DE                          1501  * A1: LOCAL VARIABLE  - String address
000018DE                          1502  *-------------------------------------------------------------------------------
000018DE                          1503  PRINT_MISC_NUMBER_AS_REGISTER
000018DE                          1504  
000018DE  43F9 00001DA2           1505      LEA             STRING_D,A1
000018E4  103C 000E               1506      MOVE.B          #14,D0
000018E8  4E4F                    1507      TRAP            #15
000018EA                          1508  
000018EA  4280                    1509      CLR.L   D0
000018EC  4281                    1510      CLR.L   D1
000018EE  4282                    1511      CLR.L   D2
000018F0                          1512  
000018F0  103C 000F               1513      MOVE.B  #15,D0
000018F4  1239 00001E06           1514      MOVE.B  MISC_NUMBER,D1
000018FA  143C 000A               1515      MOVE.B  #10,D2
000018FE  4E4F                    1516      TRAP #15
00001900                          1517  
00001900  6000 FDA4               1518      BRA     PRINT_OPCODE_LOOP_RETURN
00001904                          1519  
00001904                          1520  *-------------------------------------------------------------------------------
00001904                          1521  *
00001904                          1522  *       PRINT MISC_NUMBER_AS_DATA
00001904                          1523  *________________________________________
00001904                          1524  * Register Use Summary:
00001904                          1525  *
00001904                          1526  * D0: LOCAL VARIABLE  - Trap task designator
00001904                          1527  *
00001904                          1528  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
00001904                          1529  *
00001904                          1530  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
00001904                          1531  *
00001904                          1532  * A1: LOCAL VARIABLE  - String address
00001904                          1533  *-------------------------------------------------------------------------------
00001904                          1534  PRINT_MISC_NUMBER_AS_DATA
00001904                          1535  
00001904  43F9 00001DB0           1536      LEA             STRING_POUND,A1
0000190A  103C 000E               1537      MOVE.B          #14,D0
0000190E  4E4F                    1538      TRAP            #15
00001910                          1539  
00001910  43F9 00001DB2           1540      LEA             STRING_DOLLAR,A1
00001916  103C 000E               1541      MOVE.B          #14,D0
0000191A  4E4F                    1542      TRAP            #15
0000191C                          1543  
0000191C  4280                    1544      CLR.L   D0
0000191E  4281                    1545      CLR.L   D1
00001920  4282                    1546      CLR.L   D2
00001922                          1547  
00001922  103C 000F               1548      MOVE.B  #15,D0
00001926  1239 00001E06           1549      MOVE.B  MISC_NUMBER,D1
0000192C  143C 000A               1550      MOVE.B  #10,D2
00001930  4E4F                    1551      TRAP #15
00001932                          1552  
00001932  6000 FD72               1553      BRA     PRINT_OPCODE_LOOP_RETURN
00001936                          1554  
00001936                          1555  
00001936                          1556  *-------------------------------------------------------------------------------
00001936                          1557  *
00001936                          1558  *       PRINT ADDQ
00001936                          1559  *________________________________________
00001936                          1560  * Register Use Summary:
00001936                          1561  *
00001936                          1562  * D0: LOCAL VARIABLE  - Trap task designator
00001936                          1563  *
00001936                          1564  * A1: LOCAL VARIABLE  - String address
00001936                          1565  *-------------------------------------------------------------------------------
00001936                          1566  PRINT_ADDQ
00001936  43F9 00001DDC           1567      LEA             STRING_ADDQ,A1  * Load "ADDQ" into A1
0000193C  103C 000E               1568      MOVE.B          #14,D0      * Set trap task to String
00001940  4E4F                    1569      TRAP            #15         * Print ", "
00001942  6000 FD62               1570      BRA             PRINT_OPCODE_LOOP_RETURN
00001946                          1571  
00001946                          1572  
00001946                          1573  *-------------------------------------------------------------------------------
00001946                          1574  *
00001946                          1575  *       PRINT BYTE DESIGNATOR
00001946                          1576  *________________________________________
00001946                          1577  * Register Use Summary:
00001946                          1578  *
00001946                          1579  * D0: LOCAL VARIABLE  - low byte of opcode
00001946                          1580  * A1: LOCAL VARIABLE  - String address
00001946                          1581  *-------------------------------------------------------------------------------
00001946                          1582  PRINT_BYTE_DESIGNATOR
00001946  43F9 00001D96           1583      LEA             STRING_BYTE_DESIGNATOR,A1
0000194C  103C 000E               1584      MOVE.B          #14,D0
00001950  4E4F                    1585      TRAP            #15
00001952  6000 FD52               1586      BRA             PRINT_OPCODE_LOOP_RETURN
00001956                          1587  
00001956                          1588  *-------------------------------------------------------------------------------
00001956                          1589  *
00001956                          1590  *       PRINT WORD DESIGNATOR
00001956                          1591  *________________________________________
00001956                          1592  * Register Use Summary:
00001956                          1593  *
00001956                          1594  * D0: LOCAL VARIABLE  - low byte of opcode
00001956                          1595  * A1: LOCAL VARIABLE  - String address
00001956                          1596  *-------------------------------------------------------------------------------
00001956                          1597  PRINT_WORD_DESIGNATOR
00001956  43F9 00001D9A           1598      LEA             STRING_WORD_DESIGNATOR,A1
0000195C  103C 000E               1599      MOVE.B          #14,D0
00001960  4E4F                    1600      TRAP            #15
00001962  6000 FD42               1601      BRA             PRINT_OPCODE_LOOP_RETURN
00001966                          1602  
00001966                          1603  *-------------------------------------------------------------------------------
00001966                          1604  *
00001966                          1605  *       PRINT LONG DESIGNATOR
00001966                          1606  *________________________________________
00001966                          1607  * Register Use Summary:
00001966                          1608  *
00001966                          1609  * D0: LOCAL VARIABLE  - low byte of opcode
00001966                          1610  * A1: LOCAL VARIABLE  - String address
00001966                          1611  *-------------------------------------------------------------------------------
00001966                          1612  PRINT_LONG_DESIGNATOR
00001966  43F9 00001D9E           1613      LEA             STRING_LONG_DESIGNATOR,A1
0000196C  103C 000E               1614      MOVE.B          #14,D0
00001970  4E4F                    1615      TRAP            #15
00001972  6000 FD32               1616      BRA             PRINT_OPCODE_LOOP_RETURN
00001976                          1617  
00001976                          1618  *-------------------------------------------------------------------------------
00001976                          1619  *
00001976                          1620  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - Dn REGISTER
00001976                          1621  *
00001976                          1622  * Prints "Dx, " where x ranges between 0 and 7. This is determined by masking
00001976                          1623  * the last four bits of the current opcode stored in D7.
00001976                          1624  *
00001976                          1625  *________________________________________
00001976                          1626  * Register Use Summary:
00001976                          1627  *
00001976                          1628  * D0: LOCAL VARIABLE  - Trap task designator
00001976                          1629  * D1: LOCAL VARIABLE  - Dn Register number to display
00001976                          1630  * D7: CONST PARAMETER - The opcode word
00001976                          1631  *
00001976                          1632  * A1: LOCAL VARIABLE  - String address
00001976                          1633  *-------------------------------------------------------------------------------
00001976                          1634  PRINT_EA_MODE_ID_DN
00001976  43F9 00001DA2           1635      LEA             STRING_D,A1     * Load "D" into A1
0000197C  103C 000E               1636      MOVE.B          #14,D0      * Set trap task to String
00001980  4E4F                    1637      TRAP            #15         * Print "D"
00001982                          1638  
00001982  4281                    1639      CLR.L           D1
00001984  1207                    1640      MOVE.B          D7,D1       * Get the lowest byte of the opcode
00001986  C23C 0007               1641      AND.B           #$7,D1      * Get the lowest four bits (register #)
0000198A  103C 0003               1642      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
0000198E  4E4F                    1643      TRAP            #15         * Print the register MISC_NUMBER
00001990                          1644  
00001990  6000 FD14               1645      BRA             PRINT_OPCODE_LOOP_RETURN
00001994                          1646  
00001994                          1647  *-------------------------------------------------------------------------------
00001994                          1648  *
00001994                          1649  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - ADDRESS REGISTER
00001994                          1650  *
00001994                          1651  * Prints "Ax, " where x ranges between 0 and 7. This is determined by masking
00001994                          1652  * the last four bits of the current opcode stored in D7.
00001994                          1653  *
00001994                          1654  *________________________________________
00001994                          1655  * Register Use Summary:
00001994                          1656  *
00001994                          1657  * D0: LOCAL VARIABLE  - Trap task designator
00001994                          1658  * D1: LOCAL VARIABLE  - Dn Register number to display
00001994                          1659  * D7: CONST PARAMETER - The opcode word
00001994                          1660  *
00001994                          1661  * A1: LOCAL VARIABLE  - String address
00001994                          1662  *-------------------------------------------------------------------------------
00001994                          1663  PRINT_EA_MODE_ID_AN
00001994  43F9 00001DA4           1664      LEA             STRING_A,A1
0000199A  103C 000E               1665      MOVE.B          #14,D0
0000199E  4E4F                    1666      TRAP            #15
000019A0                          1667  
000019A0                          1668  
000019A0  4281                    1669      CLR.L           D1
000019A2  1207                    1670      MOVE.B          D7,D1       * Get the lowest byte of the opcode
000019A4  C23C 0007               1671      AND.B           #$7,D1      * Get the lowest four bits (register #)
000019A8  103C 0003               1672      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
000019AC  4E4F                    1673      TRAP            #15         * Print the register MISC_NUMBER
000019AE                          1674  
000019AE  6000 FCF6               1675      BRA             PRINT_OPCODE_LOOP_RETURN
000019B2                          1676  
000019B2                          1677  
000019B2                          1678  *-------------------------------------------------------------------------------
000019B2                          1679  *
000019B2                          1680  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - (ADDRESS REGISTER)
000019B2                          1681  *
000019B2                          1682  *________________________________________
000019B2                          1683  * Register Use Summary:
000019B2                          1684  *
000019B2                          1685  * D0: LOCAL VARIABLE  - Trap task designator
000019B2                          1686  * D1: LOCAL VARIABLE  - Dn Register MISC_NUMBER to display
000019B2                          1687  * D7: CONST PARAMETER - The opcode word
000019B2                          1688  *
000019B2                          1689  * A1: LOCAL VARIABLE  - String address
000019B2                          1690  *-------------------------------------------------------------------------------
000019B2                          1691  PRINT_EA_MODE_ID_AN_INDIRECT
000019B2  43F9 00001DA8           1692      LEA             STRING_LEFT_PAREN,A1
000019B8  103C 000E               1693      MOVE.B          #14,D0
000019BC  4E4F                    1694      TRAP            #15
000019BE                          1695  
000019BE  43F9 00001DA4           1696      LEA             STRING_A,A1
000019C4  103C 000E               1697      MOVE.B          #14,D0
000019C8  4E4F                    1698      TRAP            #15
000019CA                          1699  
000019CA  4281                    1700      CLR.L           D1
000019CC  1207                    1701      MOVE.B          D7,D1       * Get the lowest byte of the opcode
000019CE  C23C 0007               1702      AND.B           #$7,D1      * Get the lowest four bits (register #)
000019D2  103C 0003               1703      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
000019D6  4E4F                    1704      TRAP            #15         * Print the register MISC_NUMBER
000019D8                          1705  
000019D8  43F9 00001DAA           1706      LEA             STRING_RIGHT_PAREN,A1
000019DE  103C 000E               1707      MOVE.B          #14,D0
000019E2  4E4F                    1708      TRAP            #15
000019E4                          1709  
000019E4  6000 FCC0               1710      BRA             PRINT_OPCODE_LOOP_RETURN
000019E8                          1711  
000019E8                          1712  *-------------------------------------------------------------------------------
000019E8                          1713  *
000019E8                          1714  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - (ADDRESS REGISTER)+
000019E8                          1715  *
000019E8                          1716  *________________________________________
000019E8                          1717  * Register Use Summary:
000019E8                          1718  *
000019E8                          1719  * D0: LOCAL VARIABLE  - Trap task designator
000019E8                          1720  * D1: LOCAL VARIABLE  - Dn Register number to display
000019E8                          1721  * D7: CONST PARAMETER - The opcode word
000019E8                          1722  *
000019E8                          1723  * A1: LOCAL VARIABLE  - String address
000019E8                          1724  *-------------------------------------------------------------------------------
000019E8                          1725  PRINT_EA_MODE_ID_AN_POST_INC
000019E8  43F9 00001DA8           1726      LEA             STRING_LEFT_PAREN,A1
000019EE  103C 000E               1727      MOVE.B          #14,D0
000019F2  4E4F                    1728      TRAP            #15
000019F4                          1729  
000019F4  43F9 00001DA4           1730      LEA             STRING_A,A1
000019FA  103C 000E               1731      MOVE.B          #14,D0
000019FE  4E4F                    1732      TRAP            #15
00001A00                          1733  
00001A00  4281                    1734      CLR.L           D1
00001A02  1207                    1735      MOVE.B          D7,D1       * Get the lowest byte of the opcode
00001A04  C23C 0007               1736      AND.B           #$7,D1      * Get the lowest four bits (register #)
00001A08  103C 0003               1737      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
00001A0C  4E4F                    1738      TRAP            #15         * Print the register MISC_NUMBER
00001A0E                          1739  
00001A0E  43F9 00001DAA           1740      LEA             STRING_RIGHT_PAREN,A1
00001A14  103C 000E               1741      MOVE.B          #14,D0
00001A18  4E4F                    1742      TRAP            #15
00001A1A                          1743  
00001A1A  43F9 00001DAC           1744      LEA             STRING_PLUS,A1
00001A20  103C 000E               1745      MOVE.B          #14,D0
00001A24  4E4F                    1746      TRAP            #15
00001A26                          1747  
00001A26  6000 FC7E               1748      BRA             PRINT_OPCODE_LOOP_RETURN
00001A2A                          1749  
00001A2A                          1750  
00001A2A                          1751  
00001A2A                          1752  *-------------------------------------------------------------------------------
00001A2A                          1753  *
00001A2A                          1754  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - -(ADDRESS REGISTER)
00001A2A                          1755  *
00001A2A                          1756  *________________________________________
00001A2A                          1757  * Register Use Summary:
00001A2A                          1758  *
00001A2A                          1759  * D0: LOCAL VARIABLE  - Trap task designator
00001A2A                          1760  * D1: LOCAL VARIABLE  - Dn Register number to display
00001A2A                          1761  * D7: CONST PARAMETER - The opcode word
00001A2A                          1762  *
00001A2A                          1763  * A1: LOCAL VARIABLE  - String address
00001A2A                          1764  *-------------------------------------------------------------------------------
00001A2A                          1765  PRINT_EA_MODE_ID_AN_PRE_DEC
00001A2A  43F9 00001DAE           1766      LEA             STRING_MINUS,A1
00001A30  103C 000E               1767      MOVE.B          #14,D0
00001A34  4E4F                    1768      TRAP            #15
00001A36                          1769  
00001A36  43F9 00001DA8           1770      LEA             STRING_LEFT_PAREN,A1
00001A3C  103C 000E               1771      MOVE.B          #14,D0
00001A40  4E4F                    1772      TRAP            #15
00001A42                          1773  
00001A42  43F9 00001DA4           1774      LEA             STRING_A,A1
00001A48  103C 000E               1775      MOVE.B          #14,D0
00001A4C  4E4F                    1776      TRAP            #15
00001A4E                          1777  
00001A4E  4281                    1778      CLR.L           D1
00001A50  1207                    1779      MOVE.B          D7,D1       * Get the lowest byte of the opcode
00001A52  C23C 0007               1780      AND.B           #$7,D1      * Get the lowest four bits (register #)
00001A56  103C 0003               1781      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
00001A5A  4E4F                    1782      TRAP            #15         * Print the register MISC_NUMBER
00001A5C                          1783  
00001A5C  43F9 00001DAA           1784      LEA             STRING_RIGHT_PAREN,A1
00001A62  103C 000E               1785      MOVE.B          #14,D0
00001A66  4E4F                    1786      TRAP            #15
00001A68                          1787  
00001A68  6000 FC3C               1788      BRA             PRINT_OPCODE_LOOP_RETURN
00001A6C                          1789  
00001A6C                          1790  
00001A6C                          1791  
00001A6C                          1792  
00001A6C                          1793  
00001A6C                          1794  *-------------------------------------------------------------------------------
00001A6C                          1795  *
00001A6C                          1796  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - WORD DATA
00001A6C                          1797  *
00001A6C                          1798  *________________________________________
00001A6C                          1799  * Register Use Summary:
00001A6C                          1800  *
00001A6C                          1801  * D0: LOCAL VARIABLE  - Trap task designator
00001A6C                          1802  * D1: LOCAL VARIABLE  - Dn Register number to display
00001A6C                          1803  * D7: CONST PARAMETER - The opcode word
00001A6C                          1804  *
00001A6C                          1805  * A1: LOCAL VARIABLE  - String address
00001A6C                          1806  *-------------------------------------------------------------------------------
00001A6C                          1807  PRINT_EA_MODE_ID_IND_SHORT
00001A6C  43F9 00001DB2           1808      LEA             STRING_DOLLAR,A1
00001A72  103C 000E               1809      MOVE.B          #14,D0
00001A76  4E4F                    1810      TRAP            #15
00001A78                          1811  
00001A78  2238 1016               1812      MOVE.L          DATA1,D1
00001A7C  4841                    1813      SWAP            D1              * We only want the upper word
00001A7E  C27C FFFF               1814      AND             #$0000FFFF,D1   * Bit mask for upper word
00001A82                          1815  
00001A82  700F                    1816      MOVEQ           #15,D0
00001A84  7410                    1817      MOVEQ           #16,D2
00001A86  4E4F                    1818      TRAP            #15
00001A88                          1819  
00001A88  6000 FC1C               1820      BRA             PRINT_OPCODE_LOOP_RETURN
00001A8C                          1821  
00001A8C                          1822  *-------------------------------------------------------------------------------
00001A8C                          1823  *
00001A8C                          1824  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - LONG DATA
00001A8C                          1825  *
00001A8C                          1826  *________________________________________
00001A8C                          1827  * Register Use Summary:
00001A8C                          1828  *
00001A8C                          1829  * D0: LOCAL VARIABLE  - Trap task designator
00001A8C                          1830  * D1: LOCAL VARIABLE  - Dn Register number to display
00001A8C                          1831  * D7: CONST PARAMETER - The opcode word
00001A8C                          1832  *
00001A8C                          1833  * A1: LOCAL VARIABLE  - String address
00001A8C                          1834  *-------------------------------------------------------------------------------
00001A8C                          1835  PRINT_EA_MODE_ID_IND_LONG
00001A8C  43F9 00001DB2           1836      LEA             STRING_DOLLAR,A1
00001A92  103C 000E               1837      MOVE.B          #14,D0
00001A96  4E4F                    1838      TRAP            #15
00001A98                          1839  
00001A98  2238 1016               1840      MOVE.L          DATA1,D1
00001A9C  700F                    1841      MOVEQ           #15,D0
00001A9E  7410                    1842      MOVEQ           #16,D2
00001AA0  4E4F                    1843      TRAP            #15
00001AA2                          1844  
00001AA2  6000 FC02               1845      BRA             PRINT_OPCODE_LOOP_RETURN
00001AA6                          1846  
00001AA6                          1847  *-------------------------------------------------------------------------------
00001AA6                          1848  *
00001AA6                          1849  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - ABSOLUTE
00001AA6                          1850  *
00001AA6                          1851  *________________________________________
00001AA6                          1852  * Register Use Summary:
00001AA6                          1853  *
00001AA6                          1854  * D0: LOCAL VARIABLE  - Trap task designator
00001AA6                          1855  * D1: LOCAL VARIABLE  - Dn Register number to display
00001AA6                          1856  * D7: CONST PARAMETER - The opcode word
00001AA6                          1857  *
00001AA6                          1858  * A1: LOCAL VARIABLE  - String address
00001AA6                          1859  *-------------------------------------------------------------------------------
00001AA6                          1860  PRINT_EA_MODE_ID_ABS_DATA
00001AA6  43F9 00001DB0           1861      LEA             STRING_POUND,A1
00001AAC  103C 000E               1862      MOVE.B          #14,D0
00001AB0  4E4F                    1863      TRAP            #15
00001AB2                          1864  
00001AB2  43F9 00001DB2           1865      LEA             STRING_DOLLAR,A1
00001AB8  103C 000E               1866      MOVE.B          #14,D0
00001ABC  4E4F                    1867      TRAP            #15
00001ABE                          1868  
00001ABE  2238 1016               1869      MOVE.L          DATA1,D1
00001AC2  700F                    1870      MOVEQ           #15,D0
00001AC4  7410                    1871      MOVEQ           #16,D2
00001AC6  4E4F                    1872      TRAP            #15
00001AC8                          1873  
00001AC8  6000 FBDC               1874      BRA             PRINT_OPCODE_LOOP_RETURN
00001ACC                          1875  
00001ACC                          1876  *-------------------------------------------------------------------------------
00001ACC                          1877  *
00001ACC                          1878  *       PRINT JSR
00001ACC                          1879  *________________________________________
00001ACC                          1880  * Register Use Summary:
00001ACC                          1881  *
00001ACC                          1882  * D0: LOCAL VARIABLE  - Trap task designator
00001ACC                          1883  *
00001ACC                          1884  * A1: LOCAL VARIABLE  - String address
00001ACC                          1885  *-------------------------------------------------------------------------------
00001ACC                          1886  PRINT_JSR
00001ACC  43F9 00001DFE           1887      LEA             STRING_JSR,A1   * Load "JSR" into A1
00001AD2  103C 000E               1888      MOVE.B          #14,D0      * Set trap task to String
00001AD6  4E4F                    1889      TRAP            #15
00001AD8  6000 FBCC               1890      BRA             PRINT_OPCODE_LOOP_RETURN
00001ADC                          1891  
00001ADC                          1892  
00001ADC                          1893  *-------------------------------------------------------------------------------
00001ADC                          1894  *
00001ADC                          1895  *       PRINT FOURSPACE
00001ADC                          1896  *________________________________________
00001ADC                          1897  * Register Use Summary:
00001ADC                          1898  *
00001ADC                          1899  * D0: LOCAL VARIABLE  - Trap task designator
00001ADC                          1900  *
00001ADC                          1901  * A1: LOCAL VARIABLE  - String address
00001ADC                          1902  *-------------------------------------------------------------------------------
00001ADC                          1903  PRINT_FOURSPACE
00001ADC  43F9 00001DB4           1904      LEA             STRING_FOURSPACE,A1 * Load four spaces into A1
00001AE2  103C 000E               1905      MOVE.B          #14,D0              * Set trap task to String
00001AE6  4E4F                    1906      TRAP            #15
00001AE8  6000 FBBC               1907      BRA             PRINT_OPCODE_LOOP_RETURN
00001AEC                          1908  
00001AEC                          1909  
00001AEC                          1910  *-------------------------------------------------------------------------------
00001AEC                          1911  *
00001AEC                          1912  *       PRINT COMMA
00001AEC                          1913  *________________________________________
00001AEC                          1914  * Register Use Summary:
00001AEC                          1915  *
00001AEC                          1916  * D0: LOCAL VARIABLE  - Trap task designator
00001AEC                          1917  *
00001AEC                          1918  * A1: LOCAL VARIABLE  - String address
00001AEC                          1919  *-------------------------------------------------------------------------------
00001AEC                          1920  PRINT_COMMA
00001AEC  43F9 00001DA6           1921      LEA             STRING_COMMA,A1 * Load the comma into A1
00001AF2  103C 000E               1922      MOVE.B          #14,D0              * Set trap task to String
00001AF6  4E4F                    1923      TRAP            #15
00001AF8  6000 FBAC               1924      BRA             PRINT_OPCODE_LOOP_RETURN
00001AFC                          1925  
00001AFC                          1926  *-------------------------------------------------------------------------------
00001AFC                          1927  *
00001AFC                          1928  *       PRINT ILLEGAL
00001AFC                          1929  *
00001AFC                          1930  * Incomplete implementation - final version will depend on opcode logic.
00001AFC                          1931  * Currently clears stack entirely, future implementation may need to keep
00001AFC                          1932  * some RTS addresses
00001AFC                          1933  *
00001AFC                          1934  * D7: RTS address (opcode shouldn't be necessary at this point)
00001AFC                          1935  *-------------------------------------------------------------------------------
00001AFC                          1936  PRINT_ILLEGAL       * INCOMPLETE *
00001AFC  2E17                    1937      MOVE.L          (SP),D7
00001AFE                          1938  
00001AFE  2E7C 00000000           1939      MOVE.L          #0,SP
00001B04  43F9 00001D8E           1940      LEA             STRING_ILLEGAL,A1
00001B0A  103C 000D               1941      MOVE.B          #13,D0
00001B0E  4E4F                    1942      TRAP            #15
00001B10                          1943  
00001B10  2E87                    1944      MOVE.L          D7,(SP)
00001B12                          1945  
00001B12  31FC 0002 1010          1946      MOVE.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
00001B18                          1947  
00001B18                          1948  
00001B18  4E75                    1949      RTS
00001B1A                          1950  
00001B1A                          1951  *--------------------------------------------------------------------------------
00001B1A                          1952  * PRINTADDR SUBROUTINE
00001B1A                          1953  *
00001B1A                          1954  * Prints the memory address and some blank spaces before the disassembled
00001B1A                          1955  * instruction is appended.
00001B1A                          1956  *
00001B1A                          1957  * Registers Used:
00001B1A                          1958  *   D0: Trap task designator
00001B1A                          1959  *   D1: Memory address to display
00001B1A                          1960  * D2: Trap task numerical base (Hex = 16)
00001B1A                          1961  *
00001B1A                          1962  *
00001B1A                          1963  * A1: Data memory location
00001B1A                          1964  *
00001B1A                          1965  *
00001B1A                          1966  PRINTADDR
00001B1A                          1967  
00001B1A  2238 1012               1968      MOVE.L   LOOP_INDEX,D1 * Print the loop index (memory location)
00001B1E  700F                    1969      MOVEQ    #15,D0
00001B20  7410                    1970      MOVEQ    #16,D2
00001B22                          1971  
00001B22  4E4F                    1972      TRAP     #15
00001B24                          1973  
00001B24  43F9 00001DB4           1974      LEA      STRING_FOURSPACE,A1 * Print some spaces
00001B2A  700E                    1975      MOVEQ      #14,D0
00001B2C  4E4F                    1976      TRAP       #15
00001B2E                          1977  
00001B2E  4E75                    1978      RTS
00001B30                          1979  
00001B30                          1980  *--------------------------------------------------------------------------------
00001B30                          1981  * PRINT_IMMEDIATE_NEWLINE
00001B30                          1982  *
00001B30                          1983  * CANNOT PUSH TO STACK - Used to put a newline after each opcode
00001B30                          1984  *
00001B30                          1985  * Registers Used:
00001B30                          1986  *   D0: Trap task designator
00001B30                          1987  *   D1: Memory address to display
00001B30                          1988  *
00001B30                          1989  * A1: Data memory location
00001B30                          1990  *
00001B30                          1991  PRINT_IMMEDIATE_NEWLINE
00001B30                          1992  
00001B30  43F9 00001DB9           1993    LEA        STRING_NEWLINE,A1
00001B36  700E                    1994      MOVEQ      #14,D0
00001B38  4E4F                    1995      TRAP       #15
00001B3A                          1996  
00001B3A  4E75                    1997    RTS
00001B3C                          1998  
00001B3C                          1999  *-----------------------------------------------------------------
00001B3C                          2000  * GET_INPUT
00001B3C                          2001  *
00001B3C                          2002  * Called before anything else, clears what it uses
00001B3C                          2003  *-----------------------------------------------------------------
00001B3C                          2004  GET_INPUT
00001B3C                          2005  
00001B3C  21FC 00000000 1000      2006      MOVE.L  #0,START_ADDR
00001B44  21FC 00000000 1004      2007      MOVE.L  #0,END_ADDR
00001B4C                          2008  
00001B4C  4283                    2009      CLR.L   D3
00001B4E                          2010  
00001B4E  43F9 00001CD4           2011      LEA     STRING_ENTER_START,A1
00001B54  103C 000D               2012      MOVE.B  #13,D0
00001B58  4E4F                    2013      TRAP    #15
00001B5A                          2014  
00001B5A  327C 0000               2015      MOVEA   #0,A1
00001B5E  103C 0002               2016      MOVE.B  #2,D0
00001B62  4E4F                    2017      TRAP    #15
00001B64                          2018  
00001B64  4EB9 00001BB4           2019      JSR     STRING_TO_HEX
00001B6A  21C3 1000               2020      MOVE.L  D3,START_ADDR
00001B6E                          2021  
00001B6E  4283                    2022      CLR.L   D3
00001B70                          2023  
00001B70  43F9 00001CFB           2024      LEA     STRING_ENTER_END,A1
00001B76  103C 000D               2025      MOVE.B  #13,D0
00001B7A  4E4F                    2026      TRAP    #15
00001B7C                          2027  
00001B7C  327C 0000               2028      MOVEA   #0,A1
00001B80  103C 0002               2029      MOVE.B  #2,D0
00001B84  4E4F                    2030      TRAP    #15
00001B86                          2031  
00001B86  4EB9 00001BB4           2032      JSR     STRING_TO_HEX
00001B8C  21C3 1004               2033      MOVE.L  D3,END_ADDR
00001B90                          2034  
00001B90  2438 1000               2035      MOVE.L  START_ADDR,D2
00001B94  B682                    2036      CMP.L   D2,D3
00001B96  6D00 000C               2037      BLT     OUT_OF_ORDER
00001B9A                          2038  
00001B9A  4280                    2039      CLR.L     D0
00001B9C  4281                    2040      CLR.L     D1
00001B9E  4282                    2041      CLR.L     D2
00001BA0  4283                    2042      CLR.L     D3
00001BA2                          2043  
00001BA2  4E75                    2044      RTS
00001BA4                          2045  
00001BA4                          2046  OUT_OF_ORDER
00001BA4                          2047  
00001BA4  43F9 00001D62           2048      LEA     STRING_OUT_OF_ORDER,A1
00001BAA  103C 000D               2049      MOVE.B  #13,D0
00001BAE  4E4F                    2050      TRAP    #15
00001BB0                          2051  
00001BB0  4EF8 1B3C               2052      JMP     GET_INPUT
00001BB4                          2053  
00001BB4                          2054  STRING_TO_HEX
00001BB4                          2055  
00001BB4  4282                    2056      CLR.L   D2
00001BB6  B23C 0000               2057      CMP.B   #0,D1
00001BBA  6700 0012               2058      BEQ     STH_END
00001BBE  4EB9 00001BE8           2059      JSR     STH_SET_VALUE
00001BC4  4EF8 1BB4               2060      JMP     STRING_TO_HEX
00001BC8                          2061  
00001BC8                          2062  STH_UPDATE
00001BC8                          2063  
00001BC8  5341                    2064      SUB.W   #1,D1
00001BCA  5249                    2065      ADDA.W  #1,A1
00001BCC  4E75                    2066      RTS
00001BCE                          2067  
00001BCE  4E75                    2068  STH_END     RTS
00001BD0                          2069  
00001BD0                          2070  STH_BAD_INPUT
00001BD0                          2071  
00001BD0  43F9 00001D20           2072      LEA     STRING_INVALID_INPUT,A1
00001BD6  103C 000D               2073      MOVE.B  #13,D0
00001BDA  4E4F                    2074      TRAP    #15
00001BDC                          2075  
00001BDC  327C 0000               2076      MOVEA   #0,A1
00001BE0  103C 0002               2077      MOVE.B  #2,D0
00001BE4  4E4F                    2078      TRAP    #15
00001BE6                          2079  
00001BE6  4E75                    2080      RTS
00001BE8                          2081  
00001BE8                          2082  STH_SET_VALUE
00001BE8                          2083  
00001BE8  7400                    2084      MOVE.L  #$0,D2
00001BEA  0C11 0030               2085      CMP.B   #$30,(A1)
00001BEE  6700 009C               2086      BEQ     STH_SHIFT_BITS
00001BF2                          2087  
00001BF2  7401                    2088      MOVE.L  #$1,D2
00001BF4  0C11 0031               2089      CMP.B   #$31,(A1)
00001BF8  6700 0092               2090      BEQ     STH_SHIFT_BITS
00001BFC                          2091  
00001BFC  7402                    2092      MOVE.L  #$2,D2
00001BFE  0C11 0032               2093      CMP.B   #$32,(A1)
00001C02  6700 0088               2094      BEQ     STH_SHIFT_BITS
00001C06                          2095  
00001C06  7403                    2096      MOVE.L  #$3,D2
00001C08  0C11 0033               2097      CMP.B   #$33,(A1)
00001C0C  6700 007E               2098      BEQ     STH_SHIFT_BITS
00001C10                          2099  
00001C10  7404                    2100      MOVE.L  #$4,D2
00001C12  0C11 0034               2101      CMP.B   #$34,(A1)
00001C16  6700 0074               2102      BEQ     STH_SHIFT_BITS
00001C1A                          2103  
00001C1A  7405                    2104      MOVE.L  #$5,D2
00001C1C  0C11 0035               2105      CMP.B   #$35,(A1)
00001C20  6700 006A               2106      BEQ     STH_SHIFT_BITS
00001C24                          2107  
00001C24  7406                    2108      MOVE.L  #$6,D2
00001C26  0C11 0036               2109      CMP.B   #$36,(A1)
00001C2A  6700 0060               2110      BEQ     STH_SHIFT_BITS
00001C2E                          2111  
00001C2E  7407                    2112      MOVE.L  #$7,D2
00001C30  0C11 0037               2113      CMP.B   #$37,(A1)
00001C34  6700 0056               2114      BEQ     STH_SHIFT_BITS
00001C38                          2115  
00001C38  7408                    2116      MOVE.L  #$8,D2
00001C3A  0C11 0038               2117      CMP.B   #$38,(A1)
00001C3E  6700 004C               2118      BEQ     STH_SHIFT_BITS
00001C42                          2119  
00001C42  7409                    2120      MOVE.L  #$9,D2
00001C44  0C11 0039               2121      CMP.B   #$39,(A1)
00001C48  6700 0042               2122      BEQ     STH_SHIFT_BITS
00001C4C                          2123  
00001C4C  740A                    2124      MOVE.L  #$A,D2
00001C4E  0C11 0041               2125      CMP.B   #$41,(A1)
00001C52  6700 0038               2126      BEQ     STH_SHIFT_BITS
00001C56                          2127  
00001C56  740B                    2128      MOVE.L  #$B,D2
00001C58  0C11 0042               2129      CMP.B   #$42,(A1)
00001C5C  6700 002E               2130      BEQ     STH_SHIFT_BITS
00001C60                          2131  
00001C60  740C                    2132      MOVE.L  #$C,D2
00001C62  0C11 0043               2133      CMP.B   #$43,(A1)
00001C66  6700 0024               2134      BEQ     STH_SHIFT_BITS
00001C6A                          2135  
00001C6A  740D                    2136      MOVE.L  #$D,D2
00001C6C  0C11 0044               2137      CMP.B   #$44,(A1)
00001C70  6700 001A               2138      BEQ     STH_SHIFT_BITS
00001C74                          2139  
00001C74  740E                    2140      MOVE.L  #$E,D2
00001C76  0C11 0045               2141      CMP.B   #$45,(A1)
00001C7A  6700 0010               2142      BEQ     STH_SHIFT_BITS
00001C7E                          2143  
00001C7E  740F                    2144      MOVE.L  #$F,D2
00001C80  0C11 0046               2145      CMP.B   #$46,(A1)
00001C84  6700 0006               2146      BEQ     STH_SHIFT_BITS
00001C88                          2147  
00001C88  4EF8 1BD0               2148      JMP     STH_BAD_INPUT
00001C8C                          2149  
00001C8C                          2150  STH_SHIFT_BITS
00001C8C                          2151  
00001C8C  B23C 0001               2152      CMP.B   #1,D1
00001C90  6700 0038               2153      BEQ     STH_INCREASE_VALUE
00001C94                          2154  
00001C94  E99A                    2155      ROL.L   #4,D2
00001C96  B23C 0002               2156      CMP.B   #2,D1
00001C9A  6700 002E               2157      BEQ     STH_INCREASE_VALUE
00001C9E                          2158  
00001C9E  E99A                    2159      ROL.L   #4,D2
00001CA0  B23C 0003               2160      CMP.B   #3,D1
00001CA4  6700 0024               2161      BEQ     STH_INCREASE_VALUE
00001CA8                          2162  
00001CA8  E99A                    2163      ROL.L   #4,D2
00001CAA  B23C 0004               2164      CMP.B   #4,D1
00001CAE  6700 001A               2165      BEQ     STH_INCREASE_VALUE
00001CB2                          2166  
00001CB2  E99A                    2167      ROL.L   #4,D2
00001CB4  B23C 0005               2168      CMP.B   #5,D1
00001CB8  6700 0010               2169      BEQ     STH_INCREASE_VALUE
00001CBC                          2170  
00001CBC  E99A                    2171      ROL.L   #4,D2
00001CBE  B23C 0006               2172      CMP.B   #6,D1
00001CC2  6700 0006               2173      BEQ     STH_INCREASE_VALUE
00001CC6                          2174  
00001CC6  4EF8 1BD0               2175      JMP     STH_BAD_INPUT
00001CCA                          2176  
00001CCA                          2177  STH_INCREASE_VALUE
00001CCA                          2178  
00001CCA  D682                    2179      ADD.L   D2,D3
00001CCC  4EF8 1BC8               2180      JMP     STH_UPDATE
00001CD0                          2181  
00001CD0                          2182  * END OF GET_INPUT -----------------------------------------------
00001CD0                          2183  
00001CD0  FFFF FFFF               2184      SIMHALT
00001CD4                          2185  
00001CD4                          2186  *-------------------------------------------------------------------------------
00001CD4                          2187  *                ________  ________  _________  ________
00001CD4                          2188  *               |\   ___ \|\   __  \|\___   ___\\   __  \
00001CD4                          2189  *               \ \  \_|\ \ \  \|\  \|___ \  \_\ \  \|\  \
00001CD4                          2190  *                \ \  \ \\ \ \   __  \   \ \  \ \ \   __  \
00001CD4                          2191  *                 \ \  \_\\ \ \  \ \  \   \ \  \ \ \  \ \  \
00001CD4                          2192  *                  \ \_______\ \__\ \__\   \ \__\ \ \__\ \__\
00001CD4                          2193  *                   \|_______|\|__|\|__|    \|__|  \|__|\|__|
00001CD4                          2194  *
00001CD4                          2195  *-------------------------------------------------------------------------------
00001CD4                          2196  
00001CD4                          2197  
00001CD4                          2198  * Data for GET_INPUT
00001CD4= 50 6C 65 61 73 65 ...   2199  STRING_ENTER_START      DC.B    'Please enter a start address, eg. 4A6C',0
00001CFB= 50 6C 65 61 73 65 ...   2200  STRING_ENTER_END        DC.B    'Please enter a end address, eg. 5D3F',0
00001D20= 49 4E 56 41 4C 49 ...   2201  STRING_INVALID_INPUT    DC.B    'INVALID INPUT, must be a valid EASy68k hexidecimal memory address',0
00001D62= 53 74 61 72 74 20 ...   2202  STRING_OUT_OF_ORDER     DC.B    'Start address must be less than end address',0
00001D8E                          2203  
00001D8E                          2204  
00001D8E= 49 4C 4C 45 47 41 ...   2205  STRING_ILLEGAL              DC.B    'ILLEGAL',0
00001D96= 2E 42 20 00             2206  STRING_BYTE_DESIGNATOR      DC.B    '.B ',0
00001D9A= 2E 57 20 00             2207  STRING_WORD_DESIGNATOR      DC.B    '.W ',0
00001D9E= 2E 4C 20 00             2208  STRING_LONG_DESIGNATOR      DC.B    '.L ',0
00001DA2= 44 00                   2209  STRING_D                    DC.B    'D',0
00001DA4= 41 00                   2210  STRING_A                    DC.B    'A',0
00001DA6= 2C 00                   2211  STRING_COMMA                DC.B    ',',0
00001DA8= 28 00                   2212  STRING_LEFT_PAREN           DC.B    '(',0
00001DAA= 29 00                   2213  STRING_RIGHT_PAREN          DC.B    ')',0
00001DAC= 2B 00                   2214  STRING_PLUS                 DC.B    '+',0
00001DAE= 2D 00                   2215  STRING_MINUS                DC.B    '-',0
00001DB0= 23 00                   2216  STRING_POUND                DC.B    '#',0
00001DB2= 24 00                   2217  STRING_DOLLAR               DC.B    '$',0
00001DB4                          2218  
00001DB4= 20 20 20 20 00          2219  STRING_FOURSPACE            DC.B    '    ',0
00001DB9= 0D 0A 00                2220  STRING_NEWLINE              DC.B    '',CR,LF,0
00001DBC                          2221  
00001DBC= 41 53 52 00             2222  STRING_ASR                  DC.B    'ASR',0
00001DC0= 41 53 4C 00             2223  STRING_ASL                  DC.B    'ASL',0
00001DC4= 4C 53 52 00             2224  STRING_LSR                  DC.B    'LSR',0
00001DC8= 4C 53 4C 00             2225  STRING_LSL                  DC.B    'LSL',0
00001DCC= 52 4F 52 00             2226  STRING_ROR                  DC.B    'ROR',0
00001DD0= 52 4F 4C 00             2227  STRING_ROL                  DC.B    'ROL',0
00001DD4= 4E 4F 50 00             2228  STRING_NOP                  DC.B    'NOP',0
00001DD8= 52 54 53 00             2229  STRING_RTS                  DC.B    'RTS',0
00001DDC= 41 44 44 51 00          2230  STRING_ADDQ                 DC.B    'ADDQ',0
00001DE1= 41 44 44 00             2231  STRING_ADD                  DC.B    'ADD',0
00001DE5= 41 44 44 41 00          2232  STRING_ADDA                 DC.B    'ADDA',0
00001DEA= 42 45 51 20 00          2233  STRING_BEQ                  DC.B    'BEQ ',0
00001DEF= 42 4C 45 20 00          2234  STRING_BLE                  DC.B    'BLE ',0
00001DF4= 42 52 41 20 00          2235  STRING_BRA                  DC.B    'BRA ',0
00001DF9= 42 47 54 20 00          2236  STRING_BGT                  DC.B    'BGT ',0
00001DFE= 4A 53 52 20 20 20 ...   2237  STRING_JSR                  DC.B    'JSR    ',0
00001E06                          2238  
00001E06                          2239  MISC_NUMBER  DS.B    1    * MISC_NUMBER to be printed
00001E08                          2240  MISC_OPCODE  DS.W    1
00001E0A                          2241  MISC_REGISTER DS.B   1
00001E0B                          2242  
00001E0B                          2243  
00001E0B                          2244  
00001E0B                          2245      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 14E4
ADDA                1464
ADDA_CONTINUE       14AC
ADDA_L              148C
ADDA_W              149C
ADDQ                1578
ADDQ_NOT_ZERO       15BC
ADD_ADDA            144E
ADD_DN_FIRST        1540
ADD_EA_FIRST        1508
ASL                 1218
ASR                 1208
ASX                 11F6
BCC                 1386
BCC_16              141A
BCC_32              1434
BCC_CONTINUE        13F0
BCC_END             143E
BEQ                 13E0
BGT                 13C0
BLE                 13D0
BRA                 13B0
BRANCHBLOCK         1112
CR                  D
DATA1               1016
DATA2               101A
DONE                110E
END_ADDR            1004
GET_INPUT           1B3C
INITIALIZE          101E
JSR                 1620
JSR_EA_MODE_ELSE    164A
JSR_FINISH          1684
JSR_PUSH_EA_MODE_ID_AN_INDIRECT  1666
JSR_PUSH_EA_MODE_ID_IND_LONG  167A
JSR_PUSH_EA_MODE_ID_IND_SHORT  1670
LF                  A
LOOP_INC            1010
LOOP_INDEX          1012
LSL                 11E6
LSR                 11D6
LSX                 11C4
LSX_ASX_ROX         1188
LSX_ASX_ROX_CONTINUE  125A
LSX_ASX_ROX_CONTINUE2  1376
LSX_ASX_ROX_MEM     134A
LSX_ASX_ROX_PRINT_ILLEGAL  1370
LSX_ASX_ROX_REGISTER  1302
LSX_ASX_ROX_RESET_D7  1380
LSX_ASX_ROX_SHIFT   1288
LSX_ASX_ROX_SHIFT_8  12D2
MISC_NUMBER         1E06
MISC_OPCODE         1E08
MISC_REGISTER       1E0A
NOP                 15EC
OPCODE_LOOP         10C8
OUT_OF_ORDER        1BA4
PRINTADDR           1B1A
PRINT_ADD           1882
PRINT_ADDA          1892
PRINT_ADDQ          1936
PRINT_ASL           17F8
PRINT_ASR           17E8
PRINT_BEQ           1862
PRINT_BGT           1842
PRINT_BLE           1852
PRINT_BRA           1872
PRINT_BYTE_DESIGNATOR  1946
PRINT_COMMA         1AEC
PRINT_COUNT         1008
PRINT_DATA1_LONG    1828
PRINT_DATA1_WORD    1832
PRINT_EA_MODE_ID_ABS_DATA  1AA6
PRINT_EA_MODE_ID_AN  1994
PRINT_EA_MODE_ID_AN_INDIRECT  19B2
PRINT_EA_MODE_ID_AN_POST_INC  19E8
PRINT_EA_MODE_ID_AN_PRE_DEC  1A2A
PRINT_EA_MODE_ID_DN  1976
PRINT_EA_MODE_ID_IND_LONG  1A8C
PRINT_EA_MODE_ID_IND_SHORT  1A6C
PRINT_FOURSPACE     1ADC
PRINT_ILLEGAL       1AFC
PRINT_IMMEDIATE_NEWLINE  1B30
PRINT_JSR           1ACC
PRINT_LONG_DESIGNATOR  1966
PRINT_LSL           17D8
PRINT_LSR           17C8
PRINT_MISC_NUMBER   18A2
PRINT_MISC_NUMBER_AS_ADDRESS  18B8
PRINT_MISC_NUMBER_AS_DATA  1904
PRINT_MISC_NUMBER_AS_REGISTER  18DE
PRINT_OPCODE        168C
PRINT_OPCODE_LOOP   1696
PRINT_OPCODE_LOOP_FINISH  16AC
PRINT_OPCODE_LOOP_INDEX  100A
PRINT_OPCODE_LOOP_RETURN  16A6
PRINT_ROL           1818
PRINT_ROR           1808
PRINT_WORD_DESIGNATOR  1956
PUSH_BWL            1780
PUSH_BWL_BYTE       179C
PUSH_BWL_FINISH     17BA
PUSH_BWL_LONG       17B0
PUSH_BWL_WORD       17A6
PUSH_EA_MODE_ID     16B8
PUSH_EA_MODE_ID_ABS_DATA  1764
PUSH_EA_MODE_ID_AN  16FE
PUSH_EA_MODE_ID_AN_INDIRECT  1708
PUSH_EA_MODE_ID_AN_POST_INC  1712
PUSH_EA_MODE_ID_AN_PRE_DEC  171C
PUSH_EA_MODE_ID_DN  16F4
PUSH_EA_MODE_ID_ELSE  1726
PUSH_EA_MODE_ID_FINISH  1772
PUSH_EA_MODE_ID_IND_LONG  1756
PUSH_EA_MODE_ID_IND_SHORT  1748
ROL                 124A
ROR                 123A
ROX                 1228
RTS                 1606
STACK_BASE          100C
START               101E
START_ADDR          1000
STH_BAD_INPUT       1BD0
STH_END             1BCE
STH_INCREASE_VALUE  1CCA
STH_SET_VALUE       1BE8
STH_SHIFT_BITS      1C8C
STH_UPDATE          1BC8
STRING_A            1DA4
STRING_ADD          1DE1
STRING_ADDA         1DE5
STRING_ADDQ         1DDC
STRING_ASL          1DC0
STRING_ASR          1DBC
STRING_BEQ          1DEA
STRING_BGT          1DF9
STRING_BLE          1DEF
STRING_BRA          1DF4
STRING_BYTE_DESIGNATOR  1D96
STRING_COMMA        1DA6
STRING_D            1DA2
STRING_DOLLAR       1DB2
STRING_ENTER_END    1CFB
STRING_ENTER_START  1CD4
STRING_FOURSPACE    1DB4
STRING_ILLEGAL      1D8E
STRING_INVALID_INPUT  1D20
STRING_JSR          1DFE
STRING_LEFT_PAREN   1DA8
STRING_LONG_DESIGNATOR  1D9E
STRING_LSL          1DC8
STRING_LSR          1DC4
STRING_MINUS        1DAE
STRING_NEWLINE      1DB9
STRING_NOP          1DD4
STRING_OUT_OF_ORDER  1D62
STRING_PLUS         1DAC
STRING_POUND        1DB0
STRING_RIGHT_PAREN  1DAA
STRING_ROL          1DD0
STRING_ROR          1DCC
STRING_RTS          1DD8
STRING_TO_HEX       1BB4
STRING_WORD_DESIGNATOR  1D9A
