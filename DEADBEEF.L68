0000101E Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 6/6/2020 5:38:07 AM

00000000                             1  *-------------------------------------------------------------------------------
00000000                             2  * Title      : PUSH_BWT / EA_MODE_ID Development
00000000                             3  * Written by : Ihsan Halimun, Camden Brewster, Matthew Munson
00000000                             4  * Date       : May 16th 2020
00000000                             5  * Description: It's the whole damn thing!
00000000                             6  *-------------------------------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  *-------------------------------------------------------------------------------
00001000                             9  *      ________   ___        ________   ________   ________   ___
00001000                            10  *     |\   ____\ |\  \      |\   __  \ |\   __  \ |\   __  \ |\  \
00001000                            11  *     \ \  \___| \ \  \     \ \  \|\  \\ \  \|\ /_\ \  \|\  \\ \  \
00001000                            12  *      \ \  \  ___\ \  \     \ \  \\\  \\ \   __  \\ \   __  \\ \  \
00001000                            13  *       \ \  \|\  \\ \  \____ \ \  \\\  \\ \  \|\  \\ \  \ \  \\ \  \____
00001000                            14  *        \ \_______\\ \_______\\ \_______\\ \_______\\ \__\ \__\\ \_______\
00001000                            15  *         \|_______| \|_______| \|_______| \|_______| \|__|\|__| \|_______|
00001000                            16  *-------------------------------------------------------------------------------
00001000                            17  
00001000                            18  START_ADDR   DS.L  1   *User defined memory start address
00001004                            19  END_ADDR     DS.L  1   *User defined memory end address
00001008                            20  
00001008  =0000000D                 21  CR    EQU   $0D
00001008  =0000000A                 22  LF    EQU   $0A
00001008                            23  
00001008                            24  PRINT_COUNT    DS.W    1    *How many print statements are sitting in the stack
0000100A                            25  PRINT_OPCODE_LOOP_INDEX  DS.W  1   * The print loop index
0000100C                            26  STACK_BASE     DS.L    1    *Where we begin putting print calls into stack
00001010                            27  
00001010                            28  LOOP_INC       DS.W    1    * How many words to skip to find the next opcode
00001012                            29  LOOP_INDEX     DS.L    1    * The opcode loop's index
00001016                            30  
00001016                            31  DATA1          DS.L    1    * The first line of opcode data
0000101A                            32  DATA2          DS.L    1    * The second line of opcode data
0000101E                            33  
0000101E                            34  START:
0000101E                            35  
0000101E                            36  *-------------------------------------------------------------------------------
0000101E                            37  *                ________  ________  ________  _______
0000101E                            38  *               |\   ____\|\   __  \|\   ___ \|\  ___ \
0000101E                            39  *               \ \  \___|\ \  \|\  \ \  \_|\ \ \   __/|
0000101E                            40  *                \ \  \    \ \  \\\  \ \  \ \\ \ \  \_|/__
0000101E                            41  *                 \ \  \____\ \  \\\  \ \  \_\\ \ \  \_|\ \
0000101E                            42  *                  \ \_______\ \_______\ \_______\ \_______\
0000101E                            43  *                   \|_______|\|_______|\|_______|\|_______|
0000101E                            44  *
0000101E                            45  *-------------------------------------------------------------------------------
0000101E                            46  
0000101E                            47  *-------------------------------------------------------------------------------
0000101E                            48  INITIALIZE
0000101E                            49  
0000101E                            50  * ------ Test Initializations ------
0000101E                            51  
0000101E                            52  
0000101E                            53  * ------ ADDQ TEST ------
0000101E  31FC 5200 4000            54    MOVE.W  #$5200, $4000 * ADDQ.B  #1,D0
00001024  31FC 5441 4002            55    MOVE.W  #$5441, $4002 * ADDQ.W  #2,D1
0000102A  31FC 5682 4004            56    MOVE.W  #$5682, $4004 * ADDQ.L  #3,D2
00001030                            57  
00001030  31FC 5E51 4006            58    MOVE.W  #$5E51, $4006 * ADDQ.W  #7,(A1)
00001036  31FC 505F 4008            59    MOVE.W  #$505F, $4008 * ADDQ.W  #8,(A7)+
0000103C                            60  
0000103C                            61  
0000103C                            62  *  MOVE.W    #$4E91, $4000   * JSR Opcode
0000103C                            63  *  MOVE.W    #$4EB9,$4000      * JSR 1016 (1)
0000103C                            64  *  MOVE.L    #$00001016, $4002 * JSR 1016 (2)
0000103C                            65  *  (^ Add 8 to memory address if you want something after this ^)
0000103C                            66  
0000103C                            67  *  MOVE.W    #$4E71, $4002   * NOP Opcode
0000103C                            68  *  MOVE.W    #$4E75, $4004   * RTS Opcode
0000103C                            69  *  MOVE.W    #$5241, $4000   * ADDQ Opcode
0000103C                            70  *  MOVE.W    #$D240, $4000   * ADD Opcode
0000103C                            71  *  MOVE.W    #$D5C9, $4000   * ADDA Opcode (ADDA.L A1,A2)
0000103C                            72  *   MOVE.L    #$60000002, $4000   * BRA Opcode
0000103C                            73  *   MOVE.L    #$6E000018, $4004   * BRA Opcode
0000103C                            74  *   MOVE.W    #$6FE6, $4008
0000103C                            75  *   MOVE.W    #$67E2, $400A
0000103C  31FC E940 4000            76     MOVE.W     #$E940,$4000     * ASR.L #8,D0 Opcode
00001042  31FC E061 4004            77     MOVE.W     #$E061,$4004
00001048  31FC EB49 4008            78     MOVE.W     #$EB49,$4008
0000104E  31FC E26A 400C            79     MOVE.W     #$E26A,$400C
00001054  31FC E31B 4010            80     MOVE.W     #$E31B,$4010
0000105A  31FC E55C 4014            81     MOVE.W     #$E55C,$4014
00001060  31FC E79D 4018            82     MOVE.W     #$E79D,$4018
00001066  31FC E21B 401C            83     MOVE.W     #$E21B,$401C
0000106C  31FC E45C 4020            84     MOVE.W     #$E45C,$4020
00001072  31FC E69D 4024            85     MOVE.W     #$E69D,$4024
00001078  31FC E1D1 4028            86     MOVE.W     #$E1D1,$4028
0000107E  31FC E0D2 402C            87     MOVE.W     #$E0D2,$402C
00001084  31FC E3E3 4030            88     MOVE.W     #$E3E3,$4030
0000108A  31FC E2DC 4034            89     MOVE.W     #$E2DC,$4034
00001090  31FC E7D5 4038            90     MOVE.W     #$E7D5,$4038
00001096  31FC E6D6 403C            91     MOVE.W     #$E6D6,$403C
0000109C                            92  
0000109C                            93  
0000109C  21FC 00004000 1000        94    MOVE.L    #$4000, START_ADDR
000010A4  21FC 00005000 1004        95    MOVE.L    #$5000, END_ADDR
000010AC                            96  
000010AC                            97  
000010AC                            98  * ------ Standard Initializations ------
000010AC  31FC 0000 1008            99    MOVE.W    #0, PRINT_COUNT
000010B2  13FC 0000 00001DCE       100    MOVE.B    #0, MISC_NUMBER
000010BA                           101  
000010BA                           102    * JSR GET_INPUT
000010BA                           103  
000010BA  2078 1000                104    MOVEA.L  START_ADDR,A0
000010BE  21C8 1012                105    MOVE.L   A0,LOOP_INDEX * Both A0 and LOOP_INDEX contain the start address
000010C2                           106  
000010C2                           107  
000010C2                           108  
000010C2                           109  *-------------------------------------------------------------------------------
000010C2                           110  *    OPCODE LOOP
000010C2                           111  *
000010C2                           112  *    The disassembler's main loop. Gets the contents of a memory location,
000010C2                           113  *    sends it to BRANCHBLOCK to be decoded and printed, and checks if we're
000010C2                           114  *    at the user defined endpoint.
000010C2                           115  *
000010C2                           116  * ________________________________________
000010C2                           117  * Register Use Summary:
000010C2                           118  *
000010C2                           119  * D7: CONST - The opcode to decode. Set before BRANCHBLOCK
000010C2                           120  *
000010C2                           121  * A0: The current Loop Index, updated before and after BRANCHBLOCK
000010C2                           122  * A1: How much we should increment the loop index
000010C2                           123  * A2: Local Variable - used for retrieving DATA
000010C2                           124  *-------------------------------------------------------------------------------
000010C2                           125  OPCODE_LOOP
000010C2                           126  
000010C2  2078 1012                127      MOVEA.L LOOP_INDEX,A0
000010C6  B1F8 1004                128      CMPA.L  END_ADDR, A0  * Check to see if we're done
000010CA  6E00 003C                129      BGT     DONE
000010CE                           130  
000010CE                           131  * ------ Reset Loop Variables ------
000010CE  31FC 0000 1008           132      MOVE.W  #0,PRINT_COUNT  * Reset print count to zero
000010D4  31FC 0000 1010           133      MOVE.W  #0,LOOP_INC     * Reset loop index increment to zero
000010DA  4287                     134      CLR.L   D7
000010DC                           135  
000010DC                           136  * ------ Get memory at loop index ------
000010DC  3E10                     137      MOVE.W  (A0),D7
000010DE                           138  
000010DE                           139  * ------ Fill DATA1 and DATA2 ------
000010DE  2448                     140      MOVEA.L  A0,A2
000010E0  544A                     141      ADDA     #2,A2        * Increment by 1 word to get the long afterwards
000010E2  21D2 1016                142      MOVE.L  (A2),DATA1   * Fill DATA1 with the long after the opcode
000010E6  584A                     143      ADDA     #4,A2
000010E8  21D2 101A                144      MOVE.L  (A2),DATA2   * Fill DATA2 with the long after DATA1
000010EC                           145  
000010EC                           146  
000010EC                           147  * ------ Execute Subroutines ------
000010EC  4EB9 00001AE2            148      JSR     PRINTADDR             * Print the memory address
000010F2  4EB9 0000110C            149      JSR     BRANCHBLOCK           * Figure out what opcode this is and print
000010F8                           150  
000010F8                           151  
000010F8                           152  * ------ Increment Loop ------
000010F8  2078 1012                153      MOVEA.L     LOOP_INDEX,A0
000010FC  3278 1010                154      MOVEA.W     LOOP_INC,A1
00001100  D0C9                     155      ADDA    A1,A0  * Move the index to the next opcode
00001102  21C8 1012                156      MOVE.L  A0,LOOP_INDEX
00001106                           157  
00001106  60BA                     158      BRA     OPCODE_LOOP
00001108                           159  
00001108                           160  DONE
00001108                           161  
00001108                           162      * This will eventually RTE to the user input section
00001108                           163  
00001108  FFFF FFFF                164      SIMHALT
0000110C                           165  
0000110C                           166  
0000110C                           167  
0000110C                           168  *-------------------------------------------------------------------------------
0000110C                           169  *     BRANCHBLOCK
0000110C                           170  *
0000110C                           171  *  Decodes the opcode in D7 and jumps to the corresponding opcode subroutine
0000110C                           172  *
0000110C                           173  *  Because 1 line is pulled out of memory at a time, it's possible that the
0000110C                           174  *  next opcode only takes up one word, and it's in the upper word of the
0000110C                           175  *  opcode long (eg.4E71FFFF is NOP then empty). We must check for single word
0000110C                           176  *  opcodes before we use any of the data in the lower word of D7.
0000110C                           177  *________________________________________
0000110C                           178  * Register Use Summary:
0000110C                           179  *
0000110C                           180  * D0: General variable, cleared every use to be safe
0000110C                           181  * D1:
0000110C                           182  * D2:
0000110C                           183  * D3:
0000110C                           184  * D4: (Keep in mind this is parameter for BWL)
0000110C                           185  * D5:
0000110C                           186  * D6:
0000110C                           187  * D7: CONST - The opcode to decode - NO TOUCH
0000110C                           188  *________________________________________
0000110C                           189  * A0:
0000110C                           190  * A1:
0000110C                           191  * A2:
0000110C                           192  * A3:
0000110C                           193  * A4:
0000110C                           194  * A5:
0000110C                           195  * A6:
0000110C                           196  * A7:
0000110C                           197  *-------------------------------------------------------------------------------
0000110C                           198  BRANCHBLOCK
0000110C                           199  
0000110C  21CF 100C                200    MOVE.L  SP,STACK_BASE   * Save the position of the stack for later
00001110                           201  
00001110                           202  * ---- DEBUG ----
00001110  BEBC 0000FFFF            203    CMP.L   #$FFFF,D7
00001116  67F0                     204    BEQ   DONE * For debug only! Exit if memory is unset
00001118                           205  
00001118                           206  * ---- CONSTANT OPCODES ----
00001118  BE7C 4E71                207    CMP.W   #$4E71,D7
0000111C  6700 0496                208    BEQ   NOP
00001120                           209  
00001120  BE7C 4E75                210    CMP.W   #$4E75,D7
00001124  6700 04A8                211    BEQ   RTS
00001128                           212  
00001128                           213  * ---- ADDQ ----
00001128  4280                     214    CLR.L   D0
0000112A  3007                     215    MOVE.W  D7,D0
0000112C  4840                     216    SWAP    D0
0000112E  E998                     217    ROL.L   #$04,D0
00001130  C03C 000F                218    AND.B   #$F,D0
00001134  B03C 0005                219    CMP.B   #5,D0
00001138  6700 0406                220    BEQ     ADDQ
0000113C                           221  
0000113C                           222  * ---- ADDA ----
0000113C  4280                     223    CLR.L   D0
0000113E  2007                     224    MOVE.L  D7,D0   *DXXX
00001140  C07C F000                225    AND.W   #$F000,D0
00001144  B07C D000                226    CMP.W   #$D000,D0
00001148  6700 02CC                227    BEQ     ADD_ADDA
0000114C                           228  
0000114C                           229  * ---- BCC ----
0000114C  4280                     230    CLR.L   D0
0000114E  2007                     231    MOVE.L  D7,D0
00001150  C07C F000                232    AND.W   #$F000,D0
00001154  B07C 6000                233    CMP.W   #$6000,D0
00001158  6700 01F4                234    BEQ     BCC
0000115C                           235  
0000115C                           236  * ---- LSX_ASX_ROR ----
0000115C  4280                     237    CLR.L   D0
0000115E  2007                     238    MOVE.L  D7,D0
00001160  C07C F000                239    AND.W   #$F000,D0
00001164  B07C E000                240    CMP.W   #$E000,D0
00001168  6700 0018                241    BEQ     LSX_ASX_ROX
0000116C                           242  
0000116C                           243  * ---- 10 BIT OPCODES ----
0000116C  4280                     244    CLR.L   D0
0000116E  3007                     245    MOVE.W  D7,D0
00001170  C07C FFC0                246    AND.W   #$FFC0,D0   * Mask opcode to get first 10 bits only
00001174                           247  
00001174  EC40                     248    ASR.W   #6,D0
00001176  B07C 013A                249    CMP     #$13A,D0
0000117A  6700 046C                250    BEQ     JSR
0000117E                           251  
0000117E                           252  
0000117E                           253  * ---- UH OH ----
0000117E                           254  
0000117E  6000 0944                255    BRA     PRINT_ILLEGAL
00001182                           256  
00001182                           257  
00001182                           258  *-------------------------------------------------------------------------------
00001182                           259  * ________   ________   ________   ________   ________   _______
00001182                           260  *|\   __  \ |\   __  \ |\   ____\ |\   __  \ |\   ___ \ |\  ___ \
00001182                           261  *\ \  \|\  \\ \  \|\  \\ \  \___| \ \  \|\  \\ \  \_|\ \\ \   __/|
00001182                           262  * \ \  \\\  \\ \   ____\\ \  \     \ \  \\\  \\ \  \ \\ \\ \  \_|/__
00001182                           263  *  \ \  \\\  \\ \  \___| \ \  \____ \ \  \\\  \\ \  \_\\ \\ \  \_|\ \
00001182                           264  *   \ \_______\\ \__\     \ \_______\\ \_______\\ \_______\\ \_______\
00001182                           265  *    \|_______| \|__|      \|_______| \|_______| \|_______| \|_______|
00001182                           266  *
00001182                           267  *-------------------------------------------------------------------------------
00001182                           268  *-------------------------------------------------------------------------------
00001182                           269  *   LSX_ASX_ROX
00001182                           270  *
00001182                           271  *
00001182                           272  *-------------------------------------------------------------------------------
00001182                           273  LSX_ASX_ROX
00001182  2007                     274    MOVE.L    D7,D0      * Reset D0
00001184  C07C 0018                275    AND.W     #$18,D0  * Isolate bits 4,3
00001188                           276    
00001188  B07C 0000                277    CMP.W #0,D0
0000118C  6700 0044                278    BEQ   ASX
00001190                           279    
00001190  B07C 0008                280    CMP.W #8,D0
00001194  6700 000A                281    BEQ   LSX
00001198                           282    
00001198  B07C 0018                283    CMP.W #$18,D0
0000119C  6700 0066                284    BEQ   ROX
000011A0                           285  
000011A0                           286  LSX
000011A0  2007                     287    MOVE.L    D7,D0      * Reset D0
000011A2  C07C 0100                288    AND.W     #$100,D0   * Isolate bit 8
000011A6  B07C 0000                289    CMP.W     #0,D0    
000011AA  6700 0006                290    BEQ       LSR
000011AE  6000 0012                291    BRA       LSL
000011B2                           292    
000011B2                           293  LSR
000011B2  4BF9 00001790            294    LEA     PRINT_LSR,A5    * Load the print subroutine into intermediate address
000011B8  2F0D                     295    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000011BA  5878 1008                296    ADD.W   #4,PRINT_COUNT
000011BE                           297  
000011BE  6000 0076                298    BRA     LSX_ASX_ROX_CONTINUE
000011C2                           299  
000011C2                           300  LSL
000011C2  4BF9 000017A0            301    LEA     PRINT_LSL,A5    * Load the print subroutine into intermediate address
000011C8  2F0D                     302    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000011CA  5878 1008                303    ADD.W   #4,PRINT_COUNT
000011CE                           304  
000011CE  6000 0066                305    BRA     LSX_ASX_ROX_CONTINUE
000011D2                           306  
000011D2                           307  ASX
000011D2  2007                     308    MOVE.L    D7,D0      * Reset D0
000011D4  C07C 0100                309    AND.W     #$100,D0   * Isolate bit 8
000011D8  B07C 0000                310    CMP.W     #0,D0    
000011DC  6700 0006                311    BEQ       ASR
000011E0  6000 0012                312    BRA       ASL
000011E4                           313    
000011E4                           314  ASR
000011E4  4BF9 000017B0            315    LEA     PRINT_ASR,A5    * Load the print subroutine into intermediate address
000011EA  2F0D                     316    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000011EC  5878 1008                317    ADD.W   #4,PRINT_COUNT
000011F0                           318  
000011F0  6000 0044                319    BRA     LSX_ASX_ROX_CONTINUE
000011F4                           320  
000011F4                           321  ASL
000011F4  4BF9 000017C0            322    LEA     PRINT_ASL,A5    * Load the print subroutine into intermediate address
000011FA  2F0D                     323    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000011FC  5878 1008                324    ADD.W   #4,PRINT_COUNT
00001200                           325    
00001200  6000 0034                326    BRA     LSX_ASX_ROX_CONTINUE
00001204                           327  
00001204                           328  ROX
00001204  2007                     329    MOVE.L    D7,D0      * Reset D0
00001206  C07C 0100                330    AND.W     #$100,D0   * Isolate bit 8
0000120A  B07C 0000                331    CMP.W     #0,D0    
0000120E  6700 0006                332    BEQ       ROR
00001212  6000 0012                333    BRA       ROL
00001216                           334    
00001216                           335  ROR
00001216  4BF9 000017D0            336    LEA     PRINT_ROR,A5    * Load the print subroutine into intermediate address
0000121C  2F0D                     337    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000121E  5878 1008                338    ADD.W   #4,PRINT_COUNT
00001222                           339  
00001222  6000 0012                340    BRA     LSX_ASX_ROX_CONTINUE
00001226                           341  
00001226                           342  ROL
00001226  4BF9 000017E0            343    LEA     PRINT_ROL,A5    * Load the print subroutine into intermediate address
0000122C  2F0D                     344    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000122E  5878 1008                345    ADD.W   #4,PRINT_COUNT
00001232                           346  
00001232  6000 0002                347    BRA     LSX_ASX_ROX_CONTINUE
00001236                           348  
00001236                           349  LSX_ASX_ROX_CONTINUE
00001236  2007                     350    MOVE.L    D7,D0      * Reset D0
00001238  EC98                     351    ROR.L     #$06,D0    * Isolate bits 7,6
0000123A  C0BC 00000003            352    AND.L     #3,D0
00001240  4284                     353    CLR.L     D4
00001242  1800                     354    MOVE.B    D0,D4      * Move bits 7,6 to D4 for BWL
00001244                           355    
00001244  B03C 0003                356    CMP.B     #3,D0
00001248  6700 00DC                357    BEQ       LSX_ASX_ROX_MEM
0000124C                           358  
0000124C  4EB9 00001748            359    JSR PUSH_BWL
00001252                           360    
00001252  2007                     361    MOVE.L    D7,D0      * Reset D0
00001254  C07C 0020                362    AND.W     #$20,D0    * Isolate bit 5
00001258  B07C 0000                363    CMP.W     #0,D0
0000125C  6700 0006                364    BEQ       LSX_ASX_ROX_SHIFT
00001260  6000 007C                365    BRA       LSX_ASX_ROX_REGISTER
00001264                           366    
00001264                           367  LSX_ASX_ROX_SHIFT
00001264  2007                     368    MOVE.L  D7,D0             * Reset D0
00001266  C0BC 00000E00            369    AND.L   #$E00,D0           * Get bits 11 - 9
0000126C  B0BC 00000000            370    CMP.L   #0,D0
00001272  6700 003A                371    BEQ     LSX_ASX_ROX_SHIFT_8  * If 0, shift count is 8
00001276                           372    
00001276  21FC 00000000 1016       373    MOVE.L  #0,DATA1
0000127E  E080                     374    ASR.L   #$8,D0
00001280  E280                     375    ASR.L   #$1,D0
00001282  21C0 1016                376    MOVE.L  D0,DATA1
00001286                           377  
00001286  4BF9 00001A6E            378    LEA PRINT_EA_MODE_ID_ABS_DATA,A5 * Print shift count
0000128C  2F0D                     379    MOVE.L    A5, -(SP)
0000128E  5878 1008                380    ADD.W     #4, PRINT_COUNT
00001292                           381      
00001292  4BF9 00001AB4            382    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001298  2F0D                     383    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000129A  5878 1008                384    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000129E                           385  
0000129E  4BF9 0000193E            386    LEA   PRINT_EA_MODE_ID_DN,A5  * Print data register
000012A4  2F0D                     387    MOVE.L    A5, -(SP)
000012A6  5878 1008                388    ADD.W     #4, PRINT_COUNT
000012AA                           389    
000012AA  6000 0092                390    BRA LSX_ASX_ROX_CONTINUE2
000012AE                           391  
000012AE                           392  LSX_ASX_ROX_SHIFT_8
000012AE  21FC 00000008 1016       393    MOVE.L  #8,DATA1
000012B6  4BF9 00001A6E            394    LEA PRINT_EA_MODE_ID_ABS_DATA,A5  * Print shift count 8
000012BC  2F0D                     395    MOVE.L    A5, -(SP)
000012BE  5878 1008                396    ADD.W     #4, PRINT_COUNT
000012C2                           397    
000012C2  4BF9 00001AB4            398    LEA     PRINT_COMMA,A5   * Load the print subroutine
000012C8  2F0D                     399    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000012CA  5878 1008                400    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000012CE                           401  
000012CE                           402    
000012CE  4BF9 0000193E            403    LEA   PRINT_EA_MODE_ID_DN,A5  * Print data register
000012D4  2F0D                     404    MOVE.L    A5, -(SP)
000012D6  5878 1008                405    ADD.W     #4, PRINT_COUNT
000012DA                           406    
000012DA  6000 0062                407    BRA LSX_ASX_ROX_CONTINUE2
000012DE                           408    
000012DE                           409  LSX_ASX_ROX_REGISTER
000012DE  2007                     410    MOVE.L    D7,D0      * Reset D0
000012E0  C0BC 00000E00            411    AND.L   #$E00,D0           * Get bits 11 - 9  LEA PRINT_FOURSPACE,A5
000012E6  2F0D                     412    MOVE.L    A5,-(SP)
000012E8  5878 1008                413    ADD.W    #4,PRINT_COUNT
000012EC  E080                     414    ASR.L   #$8,D0
000012EE  E280                     415    ASR.L   #$1,D0
000012F0                           416    
000012F0  2E00                     417    MOVE.L  D0,D7  
000012F2  4BF9 0000193E            418    LEA   PRINT_EA_MODE_ID_DN,A5  * Print data register
000012F8  2F0D                     419    MOVE.L    A5, -(SP)
000012FA  5878 1008                420    ADD.W     #4, PRINT_COUNT
000012FE                           421    
000012FE  4BF9 00001348            422    LEA LSX_ASX_ROX_RESET_D7,A5
00001304  2F0D                     423    MOVE.L    A5, -(SP)
00001306  5878 1008                424    ADD.W     #4, PRINT_COUNT
0000130A                           425  
0000130A  4BF9 00001AB4            426    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001310  2F0D                     427    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001312  5878 1008                428    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001316                           429  
00001316  4BF9 0000193E            430    LEA   PRINT_EA_MODE_ID_DN,A5  * Print data register
0000131C  2F0D                     431    MOVE.L    A5, -(SP)
0000131E  5878 1008                432    ADD.W     #4, PRINT_COUNT
00001322                           433  
00001322  6000 001A                434    BRA LSX_ASX_ROX_CONTINUE2
00001326                           435    
00001326                           436  LSX_ASX_ROX_MEM
00001326  2C07                     437    MOVE.L D7,D6
00001328                           438  
00001328  4BF9 00001AA4            439    LEA PRINT_FOURSPACE,A5
0000132E  2F0D                     440    MOVE.L    A5,-(SP)
00001330  5878 1008                441    ADD.W    #4,PRINT_COUNT
00001334                           442    
00001334  4EB9 00001680            443    JSR     PUSH_EA_MODE_ID
0000133A  6000 0002                444    BRA LSX_ASX_ROX_CONTINUE2
0000133E                           445  
0000133E                           446  
0000133E                           447  LSX_ASX_ROX_CONTINUE2  
0000133E  31FC 0004 1010           448    MOVE.W  #4,LOOP_INC
00001344  6000 030E                449    BRA   PRINT_OPCODE
00001348                           450  
00001348                           451  LSX_ASX_ROX_RESET_D7
00001348  2007                     452      MOVE.L    D7,D0
0000134A  6000 0322                453      BRA   PRINT_OPCODE_LOOP_RETURN
0000134E                           454      
0000134E                           455  *-------------------------------------------------------------------------------
0000134E                           456  *   BCC
0000134E                           457  *
0000134E                           458  *
0000134E                           459  *-------------------------------------------------------------------------------
0000134E                           460  BCC
0000134E  2007                     461    MOVE.L    D7,D0      * Reset D0
00001350  C07C 0F00                462    AND.W     #$0F00,D0  * Isolate bits 11-8
00001354  B07C 0000                463    CMP.W     #0,D0
00001358  6700 001E                464    BEQ       BRA
0000135C                           465  
0000135C  B07C 0E00                466    CMP.W     #$E00,D0
00001360  6700 0026                467    BEQ       BGT
00001364                           468  
00001364  B07C 0F00                469    CMP.W     #$F00,D0
00001368  6700 002E                470    BEQ       BLE
0000136C                           471  
0000136C  B07C 0700                472    CMP.W     #$700,D0
00001370  6700 0036                473    BEQ       BEQ
00001374                           474  
00001374  6000 074E                475    BRA       PRINT_ILLEGAL
00001378                           476  
00001378                           477  BRA
00001378  4BF9 0000183A            478    LEA     PRINT_BRA,A5    * Load the print subroutine into intermediate address
0000137E  2F0D                     479    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001380  5878 1008                480    ADD.W   #4,PRINT_COUNT
00001384                           481  
00001384  6000 0032                482    BRA   BCC_CONTINUE
00001388                           483  
00001388                           484  BGT
00001388  4BF9 0000180A            485    LEA     PRINT_BGT,A5    * Load the print subroutine into intermediate address
0000138E  2F0D                     486    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001390  5878 1008                487    ADD.W   #4,PRINT_COUNT
00001394                           488  
00001394  6000 0022                489    BRA   BCC_CONTINUE
00001398                           490  
00001398                           491  BLE
00001398  4BF9 0000181A            492    LEA     PRINT_BLE,A5    * Load the print subroutine into intermediate address
0000139E  2F0D                     493    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000013A0  5878 1008                494    ADD.W   #4,PRINT_COUNT
000013A4                           495  
000013A4  6000 0012                496    BRA   BCC_CONTINUE
000013A8                           497  
000013A8                           498  BEQ
000013A8  4BF9 0000182A            499    LEA     PRINT_BEQ,A5    * Load the print subroutine into intermediate address
000013AE  2F0D                     500    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000013B0  5878 1008                501    ADD.W   #4,PRINT_COUNT
000013B4                           502  
000013B4  6000 0002                503    BRA   BCC_CONTINUE
000013B8                           504  
000013B8                           505  BCC_CONTINUE
000013B8  7000                     506    MOVE.L    #0,D0
000013BA  1007                     507    MOVE.B    D7,D0      * Reset D0
000013BC  B03C 0000                508    CMP.B     #0,D0
000013C0  6700 0020                509    BEQ       BCC_16     * if 16 bit displacement, print the following short
000013C4                           510  
000013C4  B03C 00FF                511    CMP.B     #$FF,D0    * if 32 bit displacement, print the following long
000013C8  6700 0032                512    BEQ       BCC_32
000013CC                           513  
000013CC  21FC 00000000 1016       514    MOVE.L    #0,DATA1
000013D4                           515    *ROR.L     #4,D0
000013D4  21C0 1016                516    MOVE.L    D0,DATA1
000013D8                           517  
000013D8  31FC 0002 1010           518    MOVE.W  #2,LOOP_INC
000013DE                           519  
000013DE  6000 0026                520    BRA     BCC_END
000013E2                           521  
000013E2                           522  BCC_16
000013E2  2238 1016                523    MOVE.L          DATA1,D1
000013E6  4841                     524    SWAP            D1              * We only want the upper word
000013E8  C2BC 0000FFFF            525    AND.L           #$0000FFFF,D1   * Bit mask for upper word
000013EE  21C1 1016                526    MOVE.L          D1,DATA1
000013F2                           527  
000013F2  31FC 0004 1010           528    MOVE.W  #4,LOOP_INC
000013F8                           529  
000013F8  6000 000C                530    BRA     BCC_END
000013FC                           531  
000013FC                           532  BCC_32
000013FC  31FC 0006 1010           533    MOVE.W  #6,LOOP_INC
00001402  6000 0002                534    BRA     BCC_END
00001406                           535  
00001406                           536  BCC_END
00001406  4BF9 00001A6E            537    LEA     PRINT_EA_MODE_ID_ABS_DATA,A5
0000140C  2F0D                     538    MOVE.L  A5, -(SP)
0000140E  5878 1008                539    ADD.W   #4, PRINT_COUNT
00001412                           540  
00001412  6000 0240                541    BRA   PRINT_OPCODE
00001416                           542  
00001416                           543  
00001416                           544  *-------------------------------------------------------------------------------
00001416                           545  *   ADD ADDA
00001416                           546  *
00001416                           547  * Because ADD and ADDA have the same first four bits (1101), we need to do
00001416                           548  * some additional branching to differentiate them.
00001416                           549  *________________________________________
00001416                           550  * Register Use Summary:
00001416                           551  *
00001416                           552  * D0: General variable, cleared every use to be safe
00001416                           553  * D7: CONST - The opcode to decode - NO TOUCH
00001416                           554  *
00001416                           555  *-------------------------------------------------------------------------------
00001416                           556  ADD_ADDA
00001416                           557  
00001416  4280                     558    CLR.L   D0
00001418  2007                     559    MOVE.L  D7,D0
0000141A                           560  
0000141A  EC58                     561    ROR.W   #06,D0     * Get bits 7,6 on end
0000141C  C03C 0003                562    AND.B   #03,D0     * Isolate bits 7,6
00001420  B03C 0003                563    CMP.B   #03,D0
00001424  6700 0006                564    BEQ   ADDA
00001428                           565  
00001428  6000 0082                566    BRA   ADD          * Else it's ADD
0000142C                           567  *-------------------------------------------------------------------------------
0000142C                           568  
0000142C                           569  
0000142C                           570  *-------------------------------------------------------------------------------
0000142C                           571  *   ADDA
0000142C                           572  *
0000142C                           573  *
0000142C                           574  *-------------------------------------------------------------------------------
0000142C                           575  ADDA
0000142C                           576  
0000142C  2007                     577    MOVE.L  D7,D0         * Reset D0
0000142E                           578  
0000142E  4BF9 0000185A            579    LEA     PRINT_ADDA,A5    * Load the print subroutine into intermediate address
00001434  2F0D                     580    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001436  5878 1008                581    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000143A                           582  
0000143A  EC58                     583    ROR.W   #$6,D0        * Get bits 9,8,7,6 on end byte
0000143C  C03C 0007                584    AND.B   #7,D0         * Isolate bits 8,7,6
00001440                           585  
00001440  B03C 0003                586    CMP.B   #3,D0         * If 8,7,6 == 011
00001444  6700 001E                587    BEQ     ADDA_W
00001448                           588  
00001448  B03C 0007                589    CMP.B   #7,D0         * If 8,7,6 == 111
0000144C  6700 0006                590    BEQ     ADDA_L
00001450                           591  
00001450  6000 0672                592    BRA     PRINT_ILLEGAL
00001454                           593  
00001454                           594  * ------ Long Opmode ------
00001454                           595  ADDA_L
00001454                           596  
00001454  4BF9 0000192E            597    LEA     PRINT_LONG_DESIGNATOR,A5 * Load the ".L" print subroutine
0000145A  2F0D                     598    MOVE.L  A5, -(SP)       * Put the subroutine onto the stack
0000145C  5878 1008                599    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001460                           600  
00001460  6000 0012                601    BRA     ADDA_CONTINUE
00001464                           602  
00001464                           603  * ------ Word Opmode ------
00001464                           604  ADDA_W
00001464                           605  
00001464  4BF9 0000191E            606    LEA     PRINT_WORD_DESIGNATOR,A5 * Load the ".W" print subroutine
0000146A  2F0D                     607    MOVE.L  A5, -(SP)         * Put the subroutine onto the stack
0000146C  5878 1008                608    ADD.W   #4,PRINT_COUNT    * Increment Print Count by 1 long
00001470                           609  
00001470  6000 0002                610    BRA     ADDA_CONTINUE
00001474                           611  
00001474                           612  * ------ Continue ------
00001474                           613  ADDA_CONTINUE
00001474                           614  
00001474                           615  * Push the effective address print subroutine onto the stack
00001474  2C07                     616    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001476  4EB9 00001680            617    JSR     PUSH_EA_MODE_ID
0000147C                           618  
0000147C                           619  
0000147C  4BF9 00001AB4            620    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001482  2F0D                     621    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001484  5878 1008                622    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001488                           623  
00001488                           624  
00001488                           625  
00001488                           626  * Reset and push the address register print subroutine onto the stack
00001488  2007                     627    MOVE.L D7,D0    * Reset D0
0000148A                           628  
0000148A  E080                     629    ASR.L   #$8,D0
0000148C  E280                     630    ASR.L   #$1,D0
0000148E  C03C 0007                631    AND.B   #$7,D0
00001492                           632  
00001492  13C0 00001DCE            633    MOVE.B  D0,MISC_NUMBER
00001498                           634  
00001498  4BF9 00001880            635    LEA     PRINT_MISC_NUMBER_AS_ADDRESS,A5   * Load the print subroutine
0000149E  2F0D                     636    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000014A0  5878 1008                637    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000014A4                           638  
000014A4  5478 1010                639    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
000014A8                           640  
000014A8  6000 01AA                641    BRA   PRINT_OPCODE
000014AC                           642  
000014AC                           643  *-------------------------------------------------------------------------------
000014AC                           644  *   ADD
000014AC                           645  *
000014AC                           646  *
000014AC                           647  *-------------------------------------------------------------------------------
000014AC                           648  ADD
000014AC                           649  
000014AC                           650  * ------ Print "ADD" ------
000014AC  4BF9 0000184A            651    LEA     PRINT_ADD,A5    * Load the print subroutine into intermediate address
000014B2  2F0D                     652    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000014B4  5878 1008                653    ADD.W   #4,PRINT_COUNT
000014B8                           654  
000014B8                           655  * ------ Print size ------
000014B8  1800                     656    MOVE.B   D0,D4            * Move bits 7,6 to D4 for BWL
000014BA  4EB9 00001748            657    JSR      PUSH_BWL
000014C0                           658  
000014C0                           659  * ------ Reset D0, determine order ------
000014C0  2007                     660    MOVE.L  D7,D0
000014C2  E058                     661    ROR.W   #08,D0     * Get bit 8 on the end
000014C4  C07C 0001                662    AND.W   #1,D0
000014C8                           663  
000014C8                           664    * If bit 8 == 0 the order is <ea> + Dn
000014C8                           665    * If bit 8 == 1 the order is Dn + <ea>
000014C8                           666  
000014C8  B03C 0001                667    CMP.B   #1,D0
000014CC  6700 003A                668    BEQ     ADD_DN_FIRST
000014D0                           669  
000014D0                           670  * ------ Print order is effective address, data register ------
000014D0                           671  ADD_EA_FIRST
000014D0                           672  
000014D0                           673  
000014D0                           674    * ------ Print the effective address ------
000014D0  2C07                     675    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
000014D2  4EB9 00001680            676    JSR     PUSH_EA_MODE_ID
000014D8                           677  
000014D8                           678    * ------ Print a comma ------
000014D8  4BF9 00001AB4            679    LEA     PRINT_COMMA,A5   * Load the print subroutine
000014DE  2F0D                     680    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000014E0  5878 1008                681    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000014E4                           682  
000014E4                           683    * ------ Determine the register number ------
000014E4  2007                     684    MOVE.L  D7,D0
000014E6  E058                     685    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
000014E8  E258                     686    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
000014EA  C07C 0007                687    AND.W   #7,D0 * Mask against 111 to only get 3 bits
000014EE                           688  
000014EE                           689    * ------ Print the register number ------
000014EE  13C0 00001DCE            690    MOVE.B  D0,MISC_NUMBER
000014F4  4BF9 000018A6            691    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
000014FA  2F0D                     692    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000014FC  5878 1008                693    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001500                           694  
00001500  5478 1010                695    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
00001504                           696  
00001504  6000 014E                697    BRA   PRINT_OPCODE
00001508                           698  
00001508                           699  
00001508                           700  * ------ Print order is data register, effective address ------
00001508                           701  ADD_DN_FIRST
00001508                           702  
00001508                           703  
00001508                           704    * ------ Determine the register number ------
00001508  2007                     705    MOVE.L  D7,D0
0000150A  E058                     706    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
0000150C  E258                     707    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
0000150E  C07C 0007                708    AND.W   #7,D0 * Mask against 111 to only get 3 bits
00001512                           709  
00001512                           710    * ------ Print the register number ------
00001512  13C0 00001DCE            711    MOVE.B  D0,MISC_NUMBER
00001518  4BF9 000018A6            712    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
0000151E  2F0D                     713    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001520  5878 1008                714    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001524                           715  
00001524                           716    * ------ Print a comma ------
00001524  4BF9 00001AB4            717    LEA     PRINT_COMMA,A5   * Load the print subroutine
0000152A  2F0D                     718    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000152C  5878 1008                719    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001530                           720  
00001530                           721    * ------ Print the effective address ------
00001530  2C07                     722    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001532  4EB9 00001680            723    JSR     PUSH_EA_MODE_ID
00001538                           724  
00001538  5478 1010                725    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
0000153C                           726  
0000153C  6000 0116                727    BRA   PRINT_OPCODE
00001540                           728  
00001540                           729  
00001540                           730  *-------------------------------------------------------------------------------
00001540                           731  *   ADDQ
00001540                           732  *
00001540                           733  *
00001540                           734  *-------------------------------------------------------------------------------
00001540                           735  ADDQ
00001540                           736  
00001540                           737  
00001540                           738  * ------ Ensure that opcode is valid ------
00001540  2007                     739    MOVE.L  D7,D0
00001542  E058                     740    ROR.W   #$08,D0
00001544  C03C 0001                741    AND.B   #1,D0
00001548  B03C 0000                742    CMP.B   #0,D0             * Check for 0 in 8th bit
0000154C  6600 0576                743    BNE     PRINT_ILLEGAL
00001550                           744  
00001550                           745  * ------ Print "ADDQ" ------
00001550  4BF9 000018FE            746    LEA     PRINT_ADDQ,A5    * Load the print subroutine into intermediate address
00001556  2F0D                     747    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001558  5878 1008                748    ADD.W   #4,PRINT_COUNT
0000155C                           749  
0000155C                           750  * ------ Print Size ------
0000155C  2007                     751    MOVE.L  D7,D0
0000155E  EC58                     752    ROR.W   #6,D0
00001560  C07C 0003                753    AND.W   #3,D0
00001564                           754  
00001564  4284                     755    CLR.L   D4
00001566  1800                     756    MOVE.B  D0,D4            * Move bits 7,6 to D4 for BWL
00001568  4EB9 00001748            757    JSR     PUSH_BWL
0000156E                           758  
0000156E                           759  * ------ Retrieve Data ------
0000156E  2007                     760    MOVE.L  D7,D0             * Reset D0
00001570  E058                     761    ROR.W   #$8, D0           * Get bits 11 - 9
00001572  E258                     762    ROR.W   #$1, D0           * Get bits 11 - 9
00001574  C03C 0007                763    AND.B   #$7, D0           * Clear bit 11
00001578                           764  
00001578                           765  
00001578                           766  * ADDQ converts 000 to 8 since nobody wants to add 0 to their number
00001578  0C00 0000                767    CMPI.B   #0,D0
0000157C  6600 0006                768    BNE      ADDQ_NOT_ZERO
00001580                           769  
00001580                           770  *Else: D0 is 0, so we convert to 8
00001580  103C 0008                771    MOVE.B   #8,D0
00001584                           772  
00001584                           773  ADDQ_NOT_ZERO
00001584                           774  
00001584  13C0 00001DCE            775    MOVE.B  D0,MISC_NUMBER
0000158A                           776  
0000158A                           777  * ------ Print Data ------
0000158A  4BF9 000018CC            778    LEA     PRINT_MISC_NUMBER_AS_DATA,A5
00001590  2F0D                     779    MOVE.L  A5, -(SP)
00001592  5878 1008                780    ADD.W   #4, PRINT_COUNT
00001596                           781  
00001596                           782  * ------ Print a comma ------
00001596  4BF9 00001AB4            783    LEA     PRINT_COMMA,A5  * Load the print subroutine
0000159C  2F0D                     784    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000159E  5878 1008                785    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000015A2                           786  
000015A2                           787  * ------ Print Effective Address ------
000015A2  2C07                     788    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
000015A4  4EB9 00001680            789    JSR     PUSH_EA_MODE_ID
000015AA                           790  
000015AA                           791  
000015AA  31FC 0002 1010           792    MOVE.W  #2,LOOP_INC     * Increment the loop counter by 2 bytes
000015B0  6000 00A2                793    BRA     PRINT_OPCODE    * Always put this at the end
000015B4                           794  
000015B4                           795  
000015B4                           796  
000015B4                           797  *-------------------------------------------------------------------------------
000015B4                           798  *   NOP
000015B4                           799  *
000015B4                           800  *   NONSTANDARD OPCODE! Don't base your design off of this :)
000015B4                           801  *
000015B4                           802  *-------------------------------------------------------------------------------
000015B4                           803  NOP
000015B4                           804  
000015B4  43F9 00001D9C            805    LEA     STRING_NOP,A1
000015BA  103C 000E                806    MOVE.B  #14,D0
000015BE  4E4F                     807    TRAP    #15
000015C0                           808  
000015C0  31FC 0002 1010           809    MOVE.W  #2,LOOP_INC   * Increment the loop counter by 2 bytes
000015C6                           810  
000015C6  4EB9 00001AF8            811    JSR     PRINT_IMMEDIATE_NEWLINE
000015CC                           812  
000015CC  4E75                     813    RTS
000015CE                           814  
000015CE                           815  *-------------------------------------------------------------------------------
000015CE                           816  *   RTS
000015CE                           817  *
000015CE                           818  *   NONSTANDARD OPCODE! Don't base your design off of this :)
000015CE                           819  *
000015CE                           820  *-------------------------------------------------------------------------------
000015CE                           821  RTS
000015CE                           822  
000015CE  43F9 00001DA0            823    LEA     STRING_RTS,A1
000015D4  103C 000E                824    MOVE.B  #14,D0
000015D8  4E4F                     825    TRAP    #15
000015DA                           826  
000015DA  31FC 0002 1010           827    MOVE.W  #2,LOOP_INC   * Increment the loop counter by 2 bytes
000015E0                           828  
000015E0  4EB9 00001AF8            829    JSR     PRINT_IMMEDIATE_NEWLINE
000015E6                           830  
000015E6  4E75                     831    RTS
000015E8                           832  
000015E8                           833  
000015E8                           834  *-------------------------------------------------------------------------------
000015E8                           835  *   JSR
000015E8                           836  *
000015E8                           837  *
000015E8                           838  *-------------------------------------------------------------------------------
000015E8                           839  JSR
000015E8                           840  
000015E8  4BF9 00001A94            841    LEA     PRINT_JSR,A5    * Load the print subroutine into intermediate address
000015EE  2F0D                     842    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000015F0  5878 1008                843    ADD.W           #4,PRINT_COUNT
000015F4                           844  
000015F4                           845  * ---- Custom Branching Block ----
000015F4                           846  * Supported Modes: (An), Indirect short, Indirect Long
000015F4                           847  
000015F4  4280                     848    CLR.L     D0
000015F6  1007                     849    MOVE.B    D7,D0 * Copy opcode into local variable
000015F8  C03C 0038                850    AND.B     #$38,D0 * Mask D0 with 0111000 to get MODE bits only
000015FC  E600                     851    ASR.B   #3,D0 * Shift the result so D0 ranges between 000 and 111
000015FE                           852  
000015FE  B03C 0002                853    CMP.B   #2,D0         *010 -> Address Register   Indirect
00001602  6700 002A                854    BEQ   JSR_PUSH_EA_MODE_ID_AN_INDIRECT
00001606  B03C 0007                855    CMP.B   #7,D0         *111 -> All Data Operations
0000160A  6700 0006                856    BEQ     JSR_EA_MODE_ELSE
0000160E                           857  
0000160E  6000 04B4                858    BRA     PRINT_ILLEGAL
00001612                           859  
00001612                           860  
00001612                           861  *________________________________________
00001612                           862  * Handle Data Branching Logic
00001612                           863  * Only short and long indirect allowed
00001612                           864  *----------------------------------------
00001612                           865  JSR_EA_MODE_ELSE
00001612                           866  
00001612  4280                     867    CLR.L   D0
00001614  1007                     868    MOVE.B  D7,D0
00001616  C03C 0007                869    AND.B   #7,D0
0000161A                           870  
0000161A  B03C 0000                871    CMP.B   #0,D0
0000161E  6700 0018                872    BEQ     JSR_PUSH_EA_MODE_ID_IND_SHORT
00001622                           873  
00001622  B03C 0001                874    CMP.B   #1,D0
00001626  6700 001A                875    BEQ     JSR_PUSH_EA_MODE_ID_IND_LONG
0000162A                           876  
0000162A  6000 0498                877    BRA     PRINT_ILLEGAL
0000162E                           878  
0000162E                           879  *________________________________________
0000162E                           880  * Jump directly into the middle of
0000162E                           881  * the PUSH_EA_MODE subroutine
0000162E                           882  *----------------------------------------
0000162E                           883  JSR_PUSH_EA_MODE_ID_AN_INDIRECT
0000162E  4EB9 000016D0            884    JSR   PUSH_EA_MODE_ID_AN_INDIRECT
00001634  6000 0016                885    BRA   JSR_FINISH
00001638                           886  
00001638                           887  *________________________________________
00001638                           888  * Jump directly into the middle of
00001638                           889  * the PUSH_EA_MODE subroutine
00001638                           890  *----------------------------------------
00001638                           891  JSR_PUSH_EA_MODE_ID_IND_SHORT
00001638  4EB9 00001710            892    JSR   PUSH_EA_MODE_ID_IND_SHORT
0000163E  6000 000C                893    BRA   JSR_FINISH
00001642                           894  
00001642                           895  *________________________________________
00001642                           896  * Jump directly into the middle of
00001642                           897  * the PUSH_EA_MODE subroutine
00001642                           898  *----------------------------------------
00001642                           899  JSR_PUSH_EA_MODE_ID_IND_LONG
00001642  4EB9 0000171E            900    JSR   PUSH_EA_MODE_ID_IND_LONG
00001648  6000 0002                901    BRA   JSR_FINISH
0000164C                           902  
0000164C                           903  JSR_FINISH
0000164C                           904  
0000164C  5478 1010                905    ADD.W   #2,LOOP_INC     * Increment the loop counter by 1 word
00001650                           906  
00001650  6000 0002                907    BRA     PRINT_OPCODE    * Always put this at the end
00001654                           908  
00001654                           909  *-------------------------------------------------------------------------------
00001654                           910  *   PRINT OPCODE
00001654                           911  *-------------------------------------------------------------------------------
00001654                           912  
00001654                           913  PRINT_OPCODE
00001654                           914  
00001654  2E78 100C                915    MOVE.L  STACK_BASE,SP * Put the stack back to where it was when we started
00001658  31FC 0000 100A           916    MOVE.W  #0,PRINT_OPCODE_LOOP_INDEX
0000165E                           917  
0000165E                           918  PRINT_OPCODE_LOOP
0000165E                           919  
0000165E  3278 100A                920    MOVEA.W   PRINT_OPCODE_LOOP_INDEX,A1
00001662                           921  
00001662  B2F8 1008                922    CMPA.W   PRINT_COUNT,A1 * Check if we're done
00001666  6C00 000C                923    BGE     PRINT_OPCODE_LOOP_FINISH
0000166A                           924  
0000166A  2467                     925    MOVE.L  -(SP),A2  * Pop the next item on the stack and put it in A1
0000166C  4ED2                     926    JMP     (A2)        * Jump to the routine we stored on the stack
0000166E                           927  
0000166E                           928  PRINT_OPCODE_LOOP_RETURN * Print methods come back here
0000166E                           929  
0000166E  5878 100A                930    ADD.W    #4,PRINT_OPCODE_LOOP_INDEX
00001672                           931  
00001672  60EA                     932    BRA     PRINT_OPCODE_LOOP
00001674                           933  
00001674                           934  PRINT_OPCODE_LOOP_FINISH
00001674                           935  
00001674  2E78 100C                936    MOVE.L  STACK_BASE,SP  * Return the stack to normal so we can RTS
00001678                           937  
00001678  4EB9 00001AF8            938    JSR     PRINT_IMMEDIATE_NEWLINE
0000167E  4E75                     939    RTS
00001680                           940  
00001680                           941  *-------------------------------------------------------------------------------
00001680                           942  
00001680                           943  
00001680                           944  
00001680                           945  
00001680                           946  
00001680                           947  
00001680                           948  
00001680                           949  
00001680                           950  
00001680                           951  
00001680                           952  *-------------------------------------------------------------------------------
00001680                           953  *     _______    ________
00001680                           954  *    |\  ___ \  |\   __  \
00001680                           955  *    \ \   __/| \ \  \|\  \
00001680                           956  *     \ \  \_|/__\ \   __  \
00001680                           957  *      \ \  \_|\ \\ \  \ \  \
00001680                           958  *       \ \_______\\ \__\ \__\
00001680                           959  *        \|_______| \|__|\|__|
00001680                           960  *
00001680                           961  *-------------------------------------------------------------------------------
00001680                           962  
00001680                           963  *-------------------------------------------------------------------------------
00001680                           964  *
00001680                           965  *       PUSH EFFECTIVE ADDRESS MODE IDENTIFIER
00001680                           966  *
00001680                           967  * Determines the addressing mode of the effective address. Used for opcodes
00001680                           968  * with the last five bits dedicated to the effective address.
00001680                           969  *
00001680                           970  * TODO: Implement a counter for how many prints we've made
00001680                           971  *
00001680                           972  *________________________________________
00001680                           973  * Register Use Summary:
00001680                           974  *
00001680                           975  * D0: LOCAL VARIABLE - low byte of opcode
00001680                           976  * D6: PARAMETER - The effective address bits. Assumes bits are shifted into
00001680                           977  *                 the lowest 6 bits of the register.
00001680                           978  *
00001680                           979  * A4: LOCAL VARIABLE - RTS value temporary storage - must be swapped
00001680                           980  * A5: LOCAL VARIABLE - Print Label to be pushed to stack
00001680                           981  *
00001680                           982  *-------------------------------------------------------------------------------
00001680                           983  PUSH_EA_MODE_ID
00001680                           984  
00001680                           985  
00001680                           986  * ---- Input Processing ----
00001680                           987  
00001680  1006                     988      MOVE.B  D6,D0   * Put opcode in D0
00001682  C03C 0038                989      AND.B   #$38,D0 * Mask D0 with 0111000 to get MODE bits only
00001686  E600                     990      ASR.B   #3,D0   * Shift the result so D0 ranges between 000 and 111
00001688                           991  
00001688                           992  
00001688                           993  * ---- Branching Block ----
00001688                           994  
00001688  B03C 0000                995      CMP.B   #0,D0           *000 -> Register
0000168C  6700 002E                996      BEQ     PUSH_EA_MODE_ID_DN
00001690  B03C 0001                997      CMP.B   #1,D0           *001 -> Address Register
00001694  6700 0030                998      BEQ     PUSH_EA_MODE_ID_AN
00001698  B03C 0002                999      CMP.B   #2,D0           *010 -> Address Register   Indirect
0000169C  6700 0032               1000      BEQ     PUSH_EA_MODE_ID_AN_INDIRECT
000016A0  B03C 0003               1001      CMP.B   #3,D0           *011 -> Address Register  (Indirect)+
000016A4  6700 0034               1002      BEQ     PUSH_EA_MODE_ID_AN_POST_INC
000016A8  B03C 0004               1003      CMP.B   #4,D0           *100 -> Address Register -(Indirect)
000016AC  6700 0036               1004      BEQ     PUSH_EA_MODE_ID_AN_PRE_DEC
000016B0  B03C 0007               1005      CMP.B   #7,D0           *111 -> All Data Operations
000016B4  6700 0038               1006      BEQ     PUSH_EA_MODE_ID_ELSE
000016B8                          1007  
000016B8  6000 040A               1008      BRA     PRINT_ILLEGAL
000016BC                          1009  
000016BC                          1010  *________________________________________
000016BC                          1011  * Load Register Print Label
000016BC                          1012  *----------------------------------------
000016BC                          1013  PUSH_EA_MODE_ID_DN
000016BC  4BF9 0000193E           1014      LEA     PRINT_EA_MODE_ID_DN,A5
000016C2  6000 0076               1015      BRA     PUSH_EA_MODE_ID_FINISH
000016C6                          1016  
000016C6                          1017  *________________________________________
000016C6                          1018  * Load Address Register Print Label
000016C6                          1019  *----------------------------------------
000016C6                          1020  PUSH_EA_MODE_ID_AN
000016C6  4BF9 0000195C           1021      LEA     PRINT_EA_MODE_ID_AN,A5
000016CC  6000 006C               1022      BRA     PUSH_EA_MODE_ID_FINISH
000016D0                          1023  
000016D0                          1024  *________________________________________
000016D0                          1025  * Load (Address Register) Print Label
000016D0                          1026  *----------------------------------------
000016D0                          1027  PUSH_EA_MODE_ID_AN_INDIRECT
000016D0  4BF9 0000197A           1028      LEA     PRINT_EA_MODE_ID_AN_INDIRECT,A5
000016D6  6000 0062               1029      BRA     PUSH_EA_MODE_ID_FINISH
000016DA                          1030  
000016DA                          1031  *________________________________________
000016DA                          1032  * Load (Address Register)+ Print Label
000016DA                          1033  *----------------------------------------
000016DA                          1034  PUSH_EA_MODE_ID_AN_POST_INC
000016DA  4BF9 000019B0           1035      LEA     PRINT_EA_MODE_ID_AN_POST_INC,A5
000016E0  6000 0058               1036      BRA     PUSH_EA_MODE_ID_FINISH
000016E4                          1037  
000016E4                          1038  *________________________________________
000016E4                          1039  * Load -(Address Register) Print Label
000016E4                          1040  *----------------------------------------
000016E4                          1041  PUSH_EA_MODE_ID_AN_PRE_DEC
000016E4  4BF9 000019F2           1042      LEA     PRINT_EA_MODE_ID_AN_PRE_DEC,A5
000016EA  6000 004E               1043      BRA     PUSH_EA_MODE_ID_FINISH
000016EE                          1044  
000016EE                          1045  *________________________________________
000016EE                          1046  * Handle Data Branching Logic
000016EE                          1047  *----------------------------------------
000016EE                          1048  PUSH_EA_MODE_ID_ELSE
000016EE  1006                    1049      MOVE.B  D6,D0
000016F0  C03C 0007               1050      AND.B   #7,D0
000016F4                          1051  
000016F4  B03C 0000               1052      CMP.B   #0,D0
000016F8  6700 0016               1053      BEQ     PUSH_EA_MODE_ID_IND_SHORT
000016FC                          1054  
000016FC  B03C 0001               1055      CMP.B   #1,D0
00001700  6700 001C               1056      BEQ     PUSH_EA_MODE_ID_IND_LONG
00001704                          1057  
00001704  B03C 0004               1058      CMP.B   #4,D0
00001708  6700 0022               1059      BEQ     PUSH_EA_MODE_ID_ABS_DATA
0000170C                          1060  
0000170C  6000 03B6               1061      BRA     PRINT_ILLEGAL
00001710                          1062  
00001710                          1063  PUSH_EA_MODE_ID_IND_SHORT
00001710  4BF9 00001A34           1064      LEA     PRINT_EA_MODE_ID_IND_SHORT,A5
00001716  5878 1010               1065      ADD.W           #4, LOOP_INC * Adjust the Loop increment to skip the data
0000171A  6000 001E               1066      BRA     PUSH_EA_MODE_ID_FINISH
0000171E                          1067  
0000171E                          1068  PUSH_EA_MODE_ID_IND_LONG
0000171E  4BF9 00001A54           1069      LEA     PRINT_EA_MODE_ID_IND_LONG,A5
00001724  5078 1010               1070      ADD.W           #8,LOOP_INC * Adjust the Loop increment to skip the data
00001728  6000 0010               1071      BRA     PUSH_EA_MODE_ID_FINISH
0000172C                          1072  
0000172C                          1073  PUSH_EA_MODE_ID_ABS_DATA
0000172C  4BF9 00001A6E           1074      LEA     PRINT_EA_MODE_ID_ABS_DATA,A5
00001732  5078 1010               1075      ADD.W           #8,LOOP_INC * Adjust the Loop increment to skip the data
00001736  6000 0002               1076      BRA     PUSH_EA_MODE_ID_FINISH
0000173A                          1077  
0000173A                          1078  *________________________________________
0000173A                          1079  PUSH_EA_MODE_ID_FINISH
0000173A  2857                    1080      MOVEA.L         (SP),A4 * Store the value we're going to RTS to
0000173C  588F                    1081      ADD.L           #4,SP   * Move the stack pointer down to the RTS value
0000173E  2F0D                    1082      MOVE.L          A5,-(SP)    * Overwrite the RTS value with the print label
00001740  2F0C                    1083      MOVE.L          A4,-(SP)    * Push the RTS so we can return like normal
00001742                          1084  
00001742  5878 1008               1085      ADD.W           #4,PRINT_COUNT
00001746                          1086  
00001746  4E75                    1087      RTS
00001748                          1088  
00001748                          1089  *-------------------------------------------------------------------------------
00001748                          1090  *                 ________  ___       __   ___
00001748                          1091  *                |\   __  \|\  \     |\  \|\  \
00001748                          1092  *                \ \  \|\ /\ \  \    \ \  \ \  \
00001748                          1093  *                 \ \   __  \ \  \  __\ \  \ \  \
00001748                          1094  *                  \ \  \|\  \ \  \|\__\_\  \ \  \____
00001748                          1095  *                   \ \_______\ \____________\ \_______\
00001748                          1096  *                    \|_______|\|____________|\|_______|
00001748                          1097  *
00001748                          1098  
00001748                          1099  *-------------------------------------------------------------------------------
00001748                          1100  
00001748                          1101  *-------------------------------------------------------------------------------
00001748                          1102  *
00001748                          1103  *       PUSH BYTE, WORD, OR LONG
00001748                          1104  *
00001748                          1105  * TODO: Implement a counter for how many prints we've made
00001748                          1106  *________________________________________
00001748                          1107  * Register Use Summary:
00001748                          1108  *
00001748                          1109  * D4: PARAMETER       - The size bits to print
00001748                          1110  * D7: CONST PARAMETER - The opcode word
00001748                          1111  *
00001748                          1112  * A4: LOCAL VARIABLE  - Temp RTS location
00001748                          1113  * A5: LOCAL VARIABLE  - Label for the print routine to store on the stack
00001748                          1114  *-------------------------------------------------------------------------------
00001748                          1115  PUSH_BWL
00001748                          1116  
00001748                          1117  * ---- Branching Block ----
00001748                          1118  
00001748  B83C 0000               1119      CMP.B           #0,D4       *00 -> Byte
0000174C  6700 0016               1120      BEQ             PUSH_BWL_BYTE
00001750  B83C 0001               1121      CMP.B           #1,D4       *01 -> Word
00001754  6700 0018               1122      BEQ             PUSH_BWL_WORD
00001758  B83C 0002               1123      CMP.B           #2,D4       *10 -> Long
0000175C  6700 001A               1124      BEQ             PUSH_BWL_LONG
00001760                          1125  
00001760  6000 0362               1126      BRA             PRINT_ILLEGAL
00001764                          1127  
00001764                          1128  *________________________________________
00001764                          1129  * Load Byte Print Label
00001764                          1130  *----------------------------------------
00001764                          1131  PUSH_BWL_BYTE
00001764  4BF9 0000190E           1132      LEA             PRINT_BYTE_DESIGNATOR,A5
0000176A  6000 0016               1133      BRA             PUSH_BWL_FINISH
0000176E                          1134  *________________________________________
0000176E                          1135  * Load Word Print Label
0000176E                          1136  *----------------------------------------
0000176E                          1137  PUSH_BWL_WORD
0000176E  4BF9 0000191E           1138      LEA             PRINT_WORD_DESIGNATOR,A5
00001774  6000 000C               1139      BRA             PUSH_BWL_FINISH
00001778                          1140  
00001778                          1141  *________________________________________
00001778                          1142  * Load Long Print Label
00001778                          1143  *----------------------------------------
00001778                          1144  PUSH_BWL_LONG
00001778  4BF9 0000192E           1145      LEA             PRINT_LONG_DESIGNATOR,A5
0000177E  6000 0002               1146      BRA             PUSH_BWL_FINISH
00001782                          1147  
00001782                          1148  *________________________________________
00001782                          1149  PUSH_BWL_FINISH
00001782                          1150  
00001782  2857                    1151      MOVEA.L         (SP),A4 * Store the value we're going to RTS to
00001784  588F                    1152      ADD.L           #4,SP   * Move the stack pointer down to the RTS value
00001786  2F0D                    1153      MOVE.L          A5,-(SP)    * Overwrite the RTS value with the print label
00001788  2F0C                    1154      MOVE.L          A4,-(SP)    * Push the RTS so we can return like normal
0000178A                          1155  
0000178A  5878 1008               1156      ADD.W           #4,PRINT_COUNT
0000178E                          1157  
0000178E  4E75                    1158      RTS
00001790                          1159  
00001790                          1160  
00001790                          1161  *-------------------------------------------------------------------------------
00001790                          1162  *     ________   ________   ___   ________    _________
00001790                          1163  *    |\   __  \ |\   __  \ |\  \ |\   ___  \ |\___   ___\
00001790                          1164  *    \ \  \|\  \\ \  \|\  \\ \  \\ \  \\ \  \\|___ \  \_|
00001790                          1165  *     \ \   ____\\ \   _  _\\ \  \\ \  \\ \  \    \ \  \
00001790                          1166  *      \ \  \___| \ \  \\  \|\ \  \\ \  \\ \  \    \ \  \
00001790                          1167  *       \ \__\     \ \__\\ _\ \ \__\\ \__\\ \__\    \ \__\
00001790                          1168  *        \|__|      \|__|\|__| \|__| \|__| \|__|     \|__|
00001790                          1169  *
00001790                          1170  *-------------------------------------------------------------------------------
00001790                          1171  *-------------------------------------------------------------------------------
00001790                          1172  *
00001790                          1173  *       PRINT LSR
00001790                          1174  *________________________________________
00001790                          1175  * Register Use Summary:
00001790                          1176  *
00001790                          1177  * D0: LOCAL VARIABLE  - Trap task designator
00001790                          1178  *
00001790                          1179  * A1: LOCAL VARIABLE  - String address
00001790                          1180  *-------------------------------------------------------------------------------
00001790                          1181  PRINT_LSR
00001790  43F9 00001D8C           1182      LEA             STRING_LSR,A1   * Load "LSR" into A1
00001796  103C 000E               1183      MOVE.B          #14,D0      * Set trap task to String
0000179A  4E4F                    1184      TRAP            #15         * Print "LSR "
0000179C  6000 FED0               1185      BRA             PRINT_OPCODE_LOOP_RETURN
000017A0                          1186      
000017A0                          1187  *-------------------------------------------------------------------------------
000017A0                          1188  *
000017A0                          1189  *       PRINT LSL
000017A0                          1190  *________________________________________
000017A0                          1191  * Register Use Summary:
000017A0                          1192  *
000017A0                          1193  * D0: LOCAL VARIABLE  - Trap task designator
000017A0                          1194  *
000017A0                          1195  * A1: LOCAL VARIABLE  - String address
000017A0                          1196  *-------------------------------------------------------------------------------
000017A0                          1197  PRINT_LSL
000017A0  43F9 00001D90           1198      LEA             STRING_LSL,A1   * Load "LSL" into A1
000017A6  103C 000E               1199      MOVE.B          #14,D0      * Set trap task to String
000017AA  4E4F                    1200      TRAP            #15         * Print "LSL "
000017AC  6000 FEC0               1201      BRA             PRINT_OPCODE_LOOP_RETURN
000017B0                          1202      
000017B0                          1203  *-------------------------------------------------------------------------------
000017B0                          1204  *
000017B0                          1205  *       PRINT ASR
000017B0                          1206  *________________________________________
000017B0                          1207  * Register Use Summary:
000017B0                          1208  *
000017B0                          1209  * D0: LOCAL VARIABLE  - Trap task designator
000017B0                          1210  *
000017B0                          1211  * A1: LOCAL VARIABLE  - String address
000017B0                          1212  *-------------------------------------------------------------------------------
000017B0                          1213  PRINT_ASR
000017B0  43F9 00001D84           1214      LEA             STRING_ASR,A1   * Load "ASR" into A1
000017B6  103C 000E               1215      MOVE.B          #14,D0      * Set trap task to String
000017BA  4E4F                    1216      TRAP            #15         * Print "ASR "
000017BC  6000 FEB0               1217      BRA             PRINT_OPCODE_LOOP_RETURN
000017C0                          1218      
000017C0                          1219  *-------------------------------------------------------------------------------
000017C0                          1220  *
000017C0                          1221  *       PRINT ASL
000017C0                          1222  *________________________________________
000017C0                          1223  * Register Use Summary:
000017C0                          1224  *
000017C0                          1225  * D0: LOCAL VARIABLE  - Trap task designator
000017C0                          1226  *
000017C0                          1227  * A1: LOCAL VARIABLE  - String address
000017C0                          1228  *-------------------------------------------------------------------------------
000017C0                          1229  PRINT_ASL
000017C0  43F9 00001D88           1230      LEA             STRING_ASL,A1   * Load "ASL" into A1
000017C6  103C 000E               1231      MOVE.B          #14,D0      * Set trap task to String
000017CA  4E4F                    1232      TRAP            #15         * Print "ASL "
000017CC  6000 FEA0               1233      BRA             PRINT_OPCODE_LOOP_RETURN
000017D0                          1234  
000017D0                          1235  *-------------------------------------------------------------------------------
000017D0                          1236  *
000017D0                          1237  *       PRINT ROR
000017D0                          1238  *________________________________________
000017D0                          1239  * Register Use Summary:
000017D0                          1240  *
000017D0                          1241  * D0: LOCAL VARIABLE  - Trap task designator
000017D0                          1242  *
000017D0                          1243  * A1: LOCAL VARIABLE  - String address
000017D0                          1244  *-------------------------------------------------------------------------------
000017D0                          1245  PRINT_ROR
000017D0  43F9 00001D94           1246      LEA             STRING_ROR,A1   * Load "ROR" into A1
000017D6  103C 000E               1247      MOVE.B          #14,D0      * Set trap task to String
000017DA  4E4F                    1248      TRAP            #15         * Print "ROR "
000017DC  6000 FE90               1249      BRA             PRINT_OPCODE_LOOP_RETURN
000017E0                          1250      
000017E0                          1251  *-------------------------------------------------------------------------------
000017E0                          1252  *
000017E0                          1253  *       PRINT ROL
000017E0                          1254  *________________________________________
000017E0                          1255  * Register Use Summary:
000017E0                          1256  *
000017E0                          1257  * D0: LOCAL VARIABLE  - Trap task designator
000017E0                          1258  *
000017E0                          1259  * A1: LOCAL VARIABLE  - String address
000017E0                          1260  *-------------------------------------------------------------------------------
000017E0                          1261  PRINT_ROL
000017E0  43F9 00001D98           1262      LEA             STRING_ROL,A1   * Load "ROL" into A1
000017E6  103C 000E               1263      MOVE.B          #14,D0      * Set trap task to String
000017EA  4E4F                    1264      TRAP            #15         * Print "ROL"
000017EC  6000 FE80               1265      BRA             PRINT_OPCODE_LOOP_RETURN
000017F0                          1266  
000017F0                          1267  *-------------------------------------------------------------------------------
000017F0                          1268  *
000017F0                          1269  *       PRINT DATA1_WORD
000017F0                          1270  *________________________________________
000017F0                          1271  * Register Use Summary:
000017F0                          1272  *
000017F0                          1273  * D0: LOCAL VARIABLE  - Trap task designator
000017F0                          1274  *
000017F0                          1275  * D1: LOCAL VARIABLE  - DATA1 local copy
000017F0                          1276  *
000017F0                          1277  * D2: LOCAL VARIABLE  - Base in which to print
000017F0                          1278  *
000017F0                          1279  * A1: LOCAL VARIABLE  - String address
000017F0                          1280  *-------------------------------------------------------------------------------
000017F0                          1281  PRINT_DATA1_LONG
000017F0  2238 1016               1282      MOVE.L          DATA1,D1
000017F4  700F                    1283      MOVEQ           #15,D0
000017F6  7410                    1284      MOVEQ           #16,D2
000017F8  4E4F                    1285      TRAP            #15
000017FA                          1286  
000017FA                          1287  *-------------------------------------------------------------------------------
000017FA                          1288  *
000017FA                          1289  *       PRINT DATA1_WORD
000017FA                          1290  *________________________________________
000017FA                          1291  * Register Use Summary:
000017FA                          1292  *
000017FA                          1293  * D0: LOCAL VARIABLE  - Trap task designator
000017FA                          1294  *
000017FA                          1295  * D1: LOCAL VARIABLE  - DATA1 local copy
000017FA                          1296  *
000017FA                          1297  * D2: LOCAL VARIABLE  - Base in which to print
000017FA                          1298  *
000017FA                          1299  * A1: LOCAL VARIABLE  - String address
000017FA                          1300  *-------------------------------------------------------------------------------
000017FA                          1301  PRINT_DATA1_WORD
000017FA  2238 1016               1302      MOVE.L          DATA1,D1
000017FE  4841                    1303      SWAP            D1              * We only want the upper word
00001800  C27C FFFF               1304      AND             #$0000FFFF,D1   * Bit mask for upper word
00001804  700F                    1305      MOVEQ           #15,D0
00001806  7410                    1306      MOVEQ           #16,D2
00001808  4E4F                    1307      TRAP            #15
0000180A                          1308  
0000180A                          1309  *-------------------------------------------------------------------------------
0000180A                          1310  *
0000180A                          1311  *       PRINT BGT
0000180A                          1312  *________________________________________
0000180A                          1313  * Register Use Summary:
0000180A                          1314  *
0000180A                          1315  * D0: LOCAL VARIABLE  - Trap task designator
0000180A                          1316  *
0000180A                          1317  * A1: LOCAL VARIABLE  - String address
0000180A                          1318  *-------------------------------------------------------------------------------
0000180A                          1319  PRINT_BGT
0000180A  43F9 00001DC1           1320      LEA             STRING_BGT,A1   * Load "BGT" into A1
00001810  103C 000E               1321      MOVE.B          #14,D0      * Set trap task to String
00001814  4E4F                    1322      TRAP            #15         * Print "BGT "
00001816  6000 FE56               1323      BRA             PRINT_OPCODE_LOOP_RETURN
0000181A                          1324  
0000181A                          1325  *-------------------------------------------------------------------------------
0000181A                          1326  *
0000181A                          1327  *       PRINT BLE
0000181A                          1328  *________________________________________
0000181A                          1329  * Register Use Summary:
0000181A                          1330  *
0000181A                          1331  * D0: LOCAL VARIABLE  - Trap task designator
0000181A                          1332  *
0000181A                          1333  * A1: LOCAL VARIABLE  - String address
0000181A                          1334  *-------------------------------------------------------------------------------
0000181A                          1335  PRINT_BLE
0000181A  43F9 00001DB7           1336      LEA             STRING_BLE,A1   * Load "BLE" into A1
00001820  103C 000E               1337      MOVE.B          #14,D0      * Set trap task to String
00001824  4E4F                    1338      TRAP            #15         * Print "BLE "
00001826  6000 FE46               1339      BRA             PRINT_OPCODE_LOOP_RETURN
0000182A                          1340  
0000182A                          1341  *-------------------------------------------------------------------------------
0000182A                          1342  *
0000182A                          1343  *       PRINT BEQ
0000182A                          1344  *________________________________________
0000182A                          1345  * Register Use Summary:
0000182A                          1346  *
0000182A                          1347  * D0: LOCAL VARIABLE  - Trap task designator
0000182A                          1348  *
0000182A                          1349  * A1: LOCAL VARIABLE  - String address
0000182A                          1350  *-------------------------------------------------------------------------------
0000182A                          1351  PRINT_BEQ
0000182A  43F9 00001DB2           1352      LEA             STRING_BEQ,A1   * Load "BEQ" into A1
00001830  103C 000E               1353      MOVE.B          #14,D0      * Set trap task to String
00001834  4E4F                    1354      TRAP            #15         * Print "BEQ "
00001836  6000 FE36               1355      BRA             PRINT_OPCODE_LOOP_RETURN
0000183A                          1356  
0000183A                          1357  
0000183A                          1358  *-------------------------------------------------------------------------------
0000183A                          1359  *
0000183A                          1360  *       PRINT BRA
0000183A                          1361  *________________________________________
0000183A                          1362  * Register Use Summary:
0000183A                          1363  *
0000183A                          1364  * D0: LOCAL VARIABLE  - Trap task designator
0000183A                          1365  *
0000183A                          1366  * A1: LOCAL VARIABLE  - String address
0000183A                          1367  *-------------------------------------------------------------------------------
0000183A                          1368  PRINT_BRA
0000183A  43F9 00001DBC           1369      LEA             STRING_BRA,A1   * Load "BRA" into A1
00001840  103C 000E               1370      MOVE.B          #14,D0      * Set trap task to String
00001844  4E4F                    1371      TRAP            #15         * Print "BRA "
00001846  6000 FE26               1372      BRA             PRINT_OPCODE_LOOP_RETURN
0000184A                          1373  
0000184A                          1374  
0000184A                          1375  *-------------------------------------------------------------------------------
0000184A                          1376  *
0000184A                          1377  *       PRINT ADD
0000184A                          1378  *________________________________________
0000184A                          1379  * Register Use Summary:
0000184A                          1380  *
0000184A                          1381  * D0: LOCAL VARIABLE  - Trap task designator
0000184A                          1382  *
0000184A                          1383  * A1: LOCAL VARIABLE  - String address
0000184A                          1384  *-------------------------------------------------------------------------------
0000184A                          1385  PRINT_ADD
0000184A  43F9 00001DA9           1386      LEA             STRING_ADD,A1   * Load "ADD" into A1
00001850  103C 000E               1387      MOVE.B          #14,D0      * Set trap task to String
00001854  4E4F                    1388      TRAP            #15         * Print "ADD "
00001856  6000 FE16               1389      BRA             PRINT_OPCODE_LOOP_RETURN
0000185A                          1390  
0000185A                          1391  
0000185A                          1392  *-------------------------------------------------------------------------------
0000185A                          1393  *
0000185A                          1394  *       PRINT ADDA
0000185A                          1395  *________________________________________
0000185A                          1396  * Register Use Summary:
0000185A                          1397  *
0000185A                          1398  * D0: LOCAL VARIABLE  - Trap task designator
0000185A                          1399  *
0000185A                          1400  * A1: LOCAL VARIABLE  - String address
0000185A                          1401  *-------------------------------------------------------------------------------
0000185A                          1402  PRINT_ADDA
0000185A  43F9 00001DAD           1403      LEA             STRING_ADDA,A1  * Load "ADDA" into A1
00001860  103C 000E               1404      MOVE.B          #14,D0      * Set trap task to String
00001864  4E4F                    1405      TRAP            #15         * Print "ADDA "
00001866  6000 FE06               1406      BRA             PRINT_OPCODE_LOOP_RETURN
0000186A                          1407  
0000186A                          1408  
0000186A                          1409  *-------------------------------------------------------------------------------
0000186A                          1410  *
0000186A                          1411  *       PRINT MISC_NUMBER
0000186A                          1412  *________________________________________
0000186A                          1413  * Register Use Summary:
0000186A                          1414  *
0000186A                          1415  * D0: LOCAL VARIABLE  - Trap task designator
0000186A                          1416  *
0000186A                          1417  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
0000186A                          1418  *
0000186A                          1419  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
0000186A                          1420  *
0000186A                          1421  * A1: LOCAL VARIABLE  - String address
0000186A                          1422  *-------------------------------------------------------------------------------
0000186A                          1423  PRINT_MISC_NUMBER
0000186A  4281                    1424      CLR.L   D1
0000186C                          1425  
0000186C  103C 000F               1426      MOVE.B  #15,D0
00001870  1239 00001DCE           1427      MOVE.B  MISC_NUMBER,D1
00001876  143C 000A               1428      MOVE.B  #10,D2
0000187A  4E4F                    1429      TRAP #15
0000187C                          1430  
0000187C  6000 FDF0               1431      BRA     PRINT_OPCODE_LOOP_RETURN
00001880                          1432  
00001880                          1433  *-------------------------------------------------------------------------------
00001880                          1434  *
00001880                          1435  *       PRINT MISC_NUMBER_AS_ADDRESS
00001880                          1436  *________________________________________
00001880                          1437  * Register Use Summary:
00001880                          1438  *
00001880                          1439  * D0: LOCAL VARIABLE  - Trap task designator
00001880                          1440  *
00001880                          1441  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
00001880                          1442  *
00001880                          1443  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
00001880                          1444  *
00001880                          1445  * A1: LOCAL VARIABLE  - String address
00001880                          1446  *-------------------------------------------------------------------------------
00001880                          1447  PRINT_MISC_NUMBER_AS_ADDRESS
00001880                          1448  
00001880  43F9 00001D6C           1449      LEA             STRING_A,A1
00001886  103C 000E               1450      MOVE.B          #14,D0
0000188A  4E4F                    1451      TRAP            #15
0000188C                          1452  
0000188C  4280                    1453      CLR.L   D0
0000188E  4281                    1454      CLR.L   D1
00001890  4282                    1455      CLR.L   D2
00001892                          1456  
00001892  103C 000F               1457      MOVE.B  #15,D0
00001896  1239 00001DCE           1458      MOVE.B  MISC_NUMBER,D1
0000189C  143C 000A               1459      MOVE.B  #10,D2
000018A0  4E4F                    1460      TRAP #15
000018A2                          1461  
000018A2  6000 FDCA               1462      BRA     PRINT_OPCODE_LOOP_RETURN
000018A6                          1463  
000018A6                          1464  *-------------------------------------------------------------------------------
000018A6                          1465  *
000018A6                          1466  *       PRINT MISC_NUMBER_AS_REGISTER
000018A6                          1467  *________________________________________
000018A6                          1468  * Register Use Summary:
000018A6                          1469  *
000018A6                          1470  * D0: LOCAL VARIABLE  - Trap task designator
000018A6                          1471  *
000018A6                          1472  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
000018A6                          1473  *
000018A6                          1474  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
000018A6                          1475  *
000018A6                          1476  * A1: LOCAL VARIABLE  - String address
000018A6                          1477  *-------------------------------------------------------------------------------
000018A6                          1478  PRINT_MISC_NUMBER_AS_REGISTER
000018A6                          1479  
000018A6  43F9 00001D6A           1480      LEA             STRING_D,A1
000018AC  103C 000E               1481      MOVE.B          #14,D0
000018B0  4E4F                    1482      TRAP            #15
000018B2                          1483  
000018B2  4280                    1484      CLR.L   D0
000018B4  4281                    1485      CLR.L   D1
000018B6  4282                    1486      CLR.L   D2
000018B8                          1487  
000018B8  103C 000F               1488      MOVE.B  #15,D0
000018BC  1239 00001DCE           1489      MOVE.B  MISC_NUMBER,D1
000018C2  143C 000A               1490      MOVE.B  #10,D2
000018C6  4E4F                    1491      TRAP #15
000018C8                          1492  
000018C8  6000 FDA4               1493      BRA     PRINT_OPCODE_LOOP_RETURN
000018CC                          1494  
000018CC                          1495  *-------------------------------------------------------------------------------
000018CC                          1496  *
000018CC                          1497  *       PRINT MISC_NUMBER_AS_DATA
000018CC                          1498  *________________________________________
000018CC                          1499  * Register Use Summary:
000018CC                          1500  *
000018CC                          1501  * D0: LOCAL VARIABLE  - Trap task designator
000018CC                          1502  *
000018CC                          1503  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
000018CC                          1504  *
000018CC                          1505  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
000018CC                          1506  *
000018CC                          1507  * A1: LOCAL VARIABLE  - String address
000018CC                          1508  *-------------------------------------------------------------------------------
000018CC                          1509  PRINT_MISC_NUMBER_AS_DATA
000018CC                          1510  
000018CC  43F9 00001D78           1511      LEA             STRING_POUND,A1
000018D2  103C 000E               1512      MOVE.B          #14,D0
000018D6  4E4F                    1513      TRAP            #15
000018D8                          1514  
000018D8  43F9 00001D7A           1515      LEA             STRING_DOLLAR,A1
000018DE  103C 000E               1516      MOVE.B          #14,D0
000018E2  4E4F                    1517      TRAP            #15
000018E4                          1518  
000018E4  4280                    1519      CLR.L   D0
000018E6  4281                    1520      CLR.L   D1
000018E8  4282                    1521      CLR.L   D2
000018EA                          1522  
000018EA  103C 000F               1523      MOVE.B  #15,D0
000018EE  1239 00001DCE           1524      MOVE.B  MISC_NUMBER,D1
000018F4  143C 000A               1525      MOVE.B  #10,D2
000018F8  4E4F                    1526      TRAP #15
000018FA                          1527  
000018FA  6000 FD72               1528      BRA     PRINT_OPCODE_LOOP_RETURN
000018FE                          1529  
000018FE                          1530  
000018FE                          1531  *-------------------------------------------------------------------------------
000018FE                          1532  *
000018FE                          1533  *       PRINT ADDQ
000018FE                          1534  *________________________________________
000018FE                          1535  * Register Use Summary:
000018FE                          1536  *
000018FE                          1537  * D0: LOCAL VARIABLE  - Trap task designator
000018FE                          1538  *
000018FE                          1539  * A1: LOCAL VARIABLE  - String address
000018FE                          1540  *-------------------------------------------------------------------------------
000018FE                          1541  PRINT_ADDQ
000018FE  43F9 00001DA4           1542      LEA             STRING_ADDQ,A1  * Load "ADDQ" into A1
00001904  103C 000E               1543      MOVE.B          #14,D0      * Set trap task to String
00001908  4E4F                    1544      TRAP            #15         * Print ", "
0000190A  6000 FD62               1545      BRA             PRINT_OPCODE_LOOP_RETURN
0000190E                          1546  
0000190E                          1547  
0000190E                          1548  *-------------------------------------------------------------------------------
0000190E                          1549  *
0000190E                          1550  *       PRINT BYTE DESIGNATOR
0000190E                          1551  *________________________________________
0000190E                          1552  * Register Use Summary:
0000190E                          1553  *
0000190E                          1554  * D0: LOCAL VARIABLE  - low byte of opcode
0000190E                          1555  * A1: LOCAL VARIABLE  - String address
0000190E                          1556  *-------------------------------------------------------------------------------
0000190E                          1557  PRINT_BYTE_DESIGNATOR
0000190E  43F9 00001D5E           1558      LEA             STRING_BYTE_DESIGNATOR,A1
00001914  103C 000E               1559      MOVE.B          #14,D0
00001918  4E4F                    1560      TRAP            #15
0000191A  6000 FD52               1561      BRA             PRINT_OPCODE_LOOP_RETURN
0000191E                          1562  
0000191E                          1563  *-------------------------------------------------------------------------------
0000191E                          1564  *
0000191E                          1565  *       PRINT WORD DESIGNATOR
0000191E                          1566  *________________________________________
0000191E                          1567  * Register Use Summary:
0000191E                          1568  *
0000191E                          1569  * D0: LOCAL VARIABLE  - low byte of opcode
0000191E                          1570  * A1: LOCAL VARIABLE  - String address
0000191E                          1571  *-------------------------------------------------------------------------------
0000191E                          1572  PRINT_WORD_DESIGNATOR
0000191E  43F9 00001D62           1573      LEA             STRING_WORD_DESIGNATOR,A1
00001924  103C 000E               1574      MOVE.B          #14,D0
00001928  4E4F                    1575      TRAP            #15
0000192A  6000 FD42               1576      BRA             PRINT_OPCODE_LOOP_RETURN
0000192E                          1577  
0000192E                          1578  *-------------------------------------------------------------------------------
0000192E                          1579  *
0000192E                          1580  *       PRINT LONG DESIGNATOR
0000192E                          1581  *________________________________________
0000192E                          1582  * Register Use Summary:
0000192E                          1583  *
0000192E                          1584  * D0: LOCAL VARIABLE  - low byte of opcode
0000192E                          1585  * A1: LOCAL VARIABLE  - String address
0000192E                          1586  *-------------------------------------------------------------------------------
0000192E                          1587  PRINT_LONG_DESIGNATOR
0000192E  43F9 00001D66           1588      LEA             STRING_LONG_DESIGNATOR,A1
00001934  103C 000E               1589      MOVE.B          #14,D0
00001938  4E4F                    1590      TRAP            #15
0000193A  6000 FD32               1591      BRA             PRINT_OPCODE_LOOP_RETURN
0000193E                          1592  
0000193E                          1593  *-------------------------------------------------------------------------------
0000193E                          1594  *
0000193E                          1595  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - Dn REGISTER
0000193E                          1596  *
0000193E                          1597  * Prints "Dx, " where x ranges between 0 and 7. This is determined by masking
0000193E                          1598  * the last four bits of the current opcode stored in D7.
0000193E                          1599  *
0000193E                          1600  *________________________________________
0000193E                          1601  * Register Use Summary:
0000193E                          1602  *
0000193E                          1603  * D0: LOCAL VARIABLE  - Trap task designator
0000193E                          1604  * D1: LOCAL VARIABLE  - Dn Register number to display
0000193E                          1605  * D7: CONST PARAMETER - The opcode word
0000193E                          1606  *
0000193E                          1607  * A1: LOCAL VARIABLE  - String address
0000193E                          1608  *-------------------------------------------------------------------------------
0000193E                          1609  PRINT_EA_MODE_ID_DN
0000193E  43F9 00001D6A           1610      LEA             STRING_D,A1     * Load "D" into A1
00001944  103C 000E               1611      MOVE.B          #14,D0      * Set trap task to String
00001948  4E4F                    1612      TRAP            #15         * Print "D"
0000194A                          1613  
0000194A  4281                    1614      CLR.L           D1
0000194C  1207                    1615      MOVE.B          D7,D1       * Get the lowest byte of the opcode
0000194E  C23C 0007               1616      AND.B           #$7,D1      * Get the lowest four bits (register #)
00001952  103C 0003               1617      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
00001956  4E4F                    1618      TRAP            #15         * Print the register MISC_NUMBER
00001958                          1619  
00001958  6000 FD14               1620      BRA             PRINT_OPCODE_LOOP_RETURN
0000195C                          1621  
0000195C                          1622  *-------------------------------------------------------------------------------
0000195C                          1623  *
0000195C                          1624  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - ADDRESS REGISTER
0000195C                          1625  *
0000195C                          1626  * Prints "Ax, " where x ranges between 0 and 7. This is determined by masking
0000195C                          1627  * the last four bits of the current opcode stored in D7.
0000195C                          1628  *
0000195C                          1629  *________________________________________
0000195C                          1630  * Register Use Summary:
0000195C                          1631  *
0000195C                          1632  * D0: LOCAL VARIABLE  - Trap task designator
0000195C                          1633  * D1: LOCAL VARIABLE  - Dn Register number to display
0000195C                          1634  * D7: CONST PARAMETER - The opcode word
0000195C                          1635  *
0000195C                          1636  * A1: LOCAL VARIABLE  - String address
0000195C                          1637  *-------------------------------------------------------------------------------
0000195C                          1638  PRINT_EA_MODE_ID_AN
0000195C  43F9 00001D6C           1639      LEA             STRING_A,A1
00001962  103C 000E               1640      MOVE.B          #14,D0
00001966  4E4F                    1641      TRAP            #15
00001968                          1642  
00001968                          1643  
00001968  4281                    1644      CLR.L           D1
0000196A  1207                    1645      MOVE.B          D7,D1       * Get the lowest byte of the opcode
0000196C  C23C 0007               1646      AND.B           #$7,D1      * Get the lowest four bits (register #)
00001970  103C 0003               1647      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
00001974  4E4F                    1648      TRAP            #15         * Print the register MISC_NUMBER
00001976                          1649  
00001976  6000 FCF6               1650      BRA             PRINT_OPCODE_LOOP_RETURN
0000197A                          1651  
0000197A                          1652  
0000197A                          1653  *-------------------------------------------------------------------------------
0000197A                          1654  *
0000197A                          1655  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - (ADDRESS REGISTER)
0000197A                          1656  *
0000197A                          1657  *________________________________________
0000197A                          1658  * Register Use Summary:
0000197A                          1659  *
0000197A                          1660  * D0: LOCAL VARIABLE  - Trap task designator
0000197A                          1661  * D1: LOCAL VARIABLE  - Dn Register MISC_NUMBER to display
0000197A                          1662  * D7: CONST PARAMETER - The opcode word
0000197A                          1663  *
0000197A                          1664  * A1: LOCAL VARIABLE  - String address
0000197A                          1665  *-------------------------------------------------------------------------------
0000197A                          1666  PRINT_EA_MODE_ID_AN_INDIRECT
0000197A  43F9 00001D70           1667      LEA             STRING_LEFT_PAREN,A1
00001980  103C 000E               1668      MOVE.B          #14,D0
00001984  4E4F                    1669      TRAP            #15
00001986                          1670  
00001986  43F9 00001D6C           1671      LEA             STRING_A,A1
0000198C  103C 000E               1672      MOVE.B          #14,D0
00001990  4E4F                    1673      TRAP            #15
00001992                          1674  
00001992  4281                    1675      CLR.L           D1
00001994  1207                    1676      MOVE.B          D7,D1       * Get the lowest byte of the opcode
00001996  C23C 0007               1677      AND.B           #$7,D1      * Get the lowest four bits (register #)
0000199A  103C 0003               1678      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
0000199E  4E4F                    1679      TRAP            #15         * Print the register MISC_NUMBER
000019A0                          1680  
000019A0  43F9 00001D72           1681      LEA             STRING_RIGHT_PAREN,A1
000019A6  103C 000E               1682      MOVE.B          #14,D0
000019AA  4E4F                    1683      TRAP            #15
000019AC                          1684  
000019AC  6000 FCC0               1685      BRA             PRINT_OPCODE_LOOP_RETURN
000019B0                          1686  
000019B0                          1687  *-------------------------------------------------------------------------------
000019B0                          1688  *
000019B0                          1689  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - (ADDRESS REGISTER)+
000019B0                          1690  *
000019B0                          1691  *________________________________________
000019B0                          1692  * Register Use Summary:
000019B0                          1693  *
000019B0                          1694  * D0: LOCAL VARIABLE  - Trap task designator
000019B0                          1695  * D1: LOCAL VARIABLE  - Dn Register number to display
000019B0                          1696  * D7: CONST PARAMETER - The opcode word
000019B0                          1697  *
000019B0                          1698  * A1: LOCAL VARIABLE  - String address
000019B0                          1699  *-------------------------------------------------------------------------------
000019B0                          1700  PRINT_EA_MODE_ID_AN_POST_INC
000019B0  43F9 00001D70           1701      LEA             STRING_LEFT_PAREN,A1
000019B6  103C 000E               1702      MOVE.B          #14,D0
000019BA  4E4F                    1703      TRAP            #15
000019BC                          1704  
000019BC  43F9 00001D6C           1705      LEA             STRING_A,A1
000019C2  103C 000E               1706      MOVE.B          #14,D0
000019C6  4E4F                    1707      TRAP            #15
000019C8                          1708  
000019C8  4281                    1709      CLR.L           D1
000019CA  1207                    1710      MOVE.B          D7,D1       * Get the lowest byte of the opcode
000019CC  C23C 0007               1711      AND.B           #$7,D1      * Get the lowest four bits (register #)
000019D0  103C 0003               1712      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
000019D4  4E4F                    1713      TRAP            #15         * Print the register MISC_NUMBER
000019D6                          1714  
000019D6  43F9 00001D72           1715      LEA             STRING_RIGHT_PAREN,A1
000019DC  103C 000E               1716      MOVE.B          #14,D0
000019E0  4E4F                    1717      TRAP            #15
000019E2                          1718  
000019E2  43F9 00001D74           1719      LEA             STRING_PLUS,A1
000019E8  103C 000E               1720      MOVE.B          #14,D0
000019EC  4E4F                    1721      TRAP            #15
000019EE                          1722  
000019EE  6000 FC7E               1723      BRA             PRINT_OPCODE_LOOP_RETURN
000019F2                          1724  
000019F2                          1725  
000019F2                          1726  
000019F2                          1727  *-------------------------------------------------------------------------------
000019F2                          1728  *
000019F2                          1729  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - -(ADDRESS REGISTER)
000019F2                          1730  *
000019F2                          1731  *________________________________________
000019F2                          1732  * Register Use Summary:
000019F2                          1733  *
000019F2                          1734  * D0: LOCAL VARIABLE  - Trap task designator
000019F2                          1735  * D1: LOCAL VARIABLE  - Dn Register number to display
000019F2                          1736  * D7: CONST PARAMETER - The opcode word
000019F2                          1737  *
000019F2                          1738  * A1: LOCAL VARIABLE  - String address
000019F2                          1739  *-------------------------------------------------------------------------------
000019F2                          1740  PRINT_EA_MODE_ID_AN_PRE_DEC
000019F2  43F9 00001D76           1741      LEA             STRING_MINUS,A1
000019F8  103C 000E               1742      MOVE.B          #14,D0
000019FC  4E4F                    1743      TRAP            #15
000019FE                          1744  
000019FE  43F9 00001D70           1745      LEA             STRING_LEFT_PAREN,A1
00001A04  103C 000E               1746      MOVE.B          #14,D0
00001A08  4E4F                    1747      TRAP            #15
00001A0A                          1748  
00001A0A  43F9 00001D6C           1749      LEA             STRING_A,A1
00001A10  103C 000E               1750      MOVE.B          #14,D0
00001A14  4E4F                    1751      TRAP            #15
00001A16                          1752  
00001A16  4281                    1753      CLR.L           D1
00001A18  1207                    1754      MOVE.B          D7,D1       * Get the lowest byte of the opcode
00001A1A  C23C 0007               1755      AND.B           #$7,D1      * Get the lowest four bits (register #)
00001A1E  103C 0003               1756      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
00001A22  4E4F                    1757      TRAP            #15         * Print the register MISC_NUMBER
00001A24                          1758  
00001A24  43F9 00001D72           1759      LEA             STRING_RIGHT_PAREN,A1
00001A2A  103C 000E               1760      MOVE.B          #14,D0
00001A2E  4E4F                    1761      TRAP            #15
00001A30                          1762  
00001A30  6000 FC3C               1763      BRA             PRINT_OPCODE_LOOP_RETURN
00001A34                          1764  
00001A34                          1765  
00001A34                          1766  
00001A34                          1767  
00001A34                          1768  
00001A34                          1769  *-------------------------------------------------------------------------------
00001A34                          1770  *
00001A34                          1771  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - WORD DATA
00001A34                          1772  *
00001A34                          1773  *________________________________________
00001A34                          1774  * Register Use Summary:
00001A34                          1775  *
00001A34                          1776  * D0: LOCAL VARIABLE  - Trap task designator
00001A34                          1777  * D1: LOCAL VARIABLE  - Dn Register number to display
00001A34                          1778  * D7: CONST PARAMETER - The opcode word
00001A34                          1779  *
00001A34                          1780  * A1: LOCAL VARIABLE  - String address
00001A34                          1781  *-------------------------------------------------------------------------------
00001A34                          1782  PRINT_EA_MODE_ID_IND_SHORT
00001A34  43F9 00001D7A           1783      LEA             STRING_DOLLAR,A1
00001A3A  103C 000E               1784      MOVE.B          #14,D0
00001A3E  4E4F                    1785      TRAP            #15
00001A40                          1786  
00001A40  2238 1016               1787      MOVE.L          DATA1,D1
00001A44  4841                    1788      SWAP            D1              * We only want the upper word
00001A46  C27C FFFF               1789      AND             #$0000FFFF,D1   * Bit mask for upper word
00001A4A                          1790  
00001A4A  700F                    1791      MOVEQ           #15,D0
00001A4C  7410                    1792      MOVEQ           #16,D2
00001A4E  4E4F                    1793      TRAP            #15
00001A50                          1794  
00001A50  6000 FC1C               1795      BRA             PRINT_OPCODE_LOOP_RETURN
00001A54                          1796  
00001A54                          1797  *-------------------------------------------------------------------------------
00001A54                          1798  *
00001A54                          1799  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - LONG DATA
00001A54                          1800  *
00001A54                          1801  *________________________________________
00001A54                          1802  * Register Use Summary:
00001A54                          1803  *
00001A54                          1804  * D0: LOCAL VARIABLE  - Trap task designator
00001A54                          1805  * D1: LOCAL VARIABLE  - Dn Register number to display
00001A54                          1806  * D7: CONST PARAMETER - The opcode word
00001A54                          1807  *
00001A54                          1808  * A1: LOCAL VARIABLE  - String address
00001A54                          1809  *-------------------------------------------------------------------------------
00001A54                          1810  PRINT_EA_MODE_ID_IND_LONG
00001A54  43F9 00001D7A           1811      LEA             STRING_DOLLAR,A1
00001A5A  103C 000E               1812      MOVE.B          #14,D0
00001A5E  4E4F                    1813      TRAP            #15
00001A60                          1814  
00001A60  2238 1016               1815      MOVE.L          DATA1,D1
00001A64  700F                    1816      MOVEQ           #15,D0
00001A66  7410                    1817      MOVEQ           #16,D2
00001A68  4E4F                    1818      TRAP            #15
00001A6A                          1819  
00001A6A  6000 FC02               1820      BRA             PRINT_OPCODE_LOOP_RETURN
00001A6E                          1821  
00001A6E                          1822  *-------------------------------------------------------------------------------
00001A6E                          1823  *
00001A6E                          1824  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - ABSOLUTE
00001A6E                          1825  *
00001A6E                          1826  *________________________________________
00001A6E                          1827  * Register Use Summary:
00001A6E                          1828  *
00001A6E                          1829  * D0: LOCAL VARIABLE  - Trap task designator
00001A6E                          1830  * D1: LOCAL VARIABLE  - Dn Register number to display
00001A6E                          1831  * D7: CONST PARAMETER - The opcode word
00001A6E                          1832  *
00001A6E                          1833  * A1: LOCAL VARIABLE  - String address
00001A6E                          1834  *-------------------------------------------------------------------------------
00001A6E                          1835  PRINT_EA_MODE_ID_ABS_DATA
00001A6E  43F9 00001D78           1836      LEA             STRING_POUND,A1
00001A74  103C 000E               1837      MOVE.B          #14,D0
00001A78  4E4F                    1838      TRAP            #15
00001A7A                          1839  
00001A7A  43F9 00001D7A           1840      LEA             STRING_DOLLAR,A1
00001A80  103C 000E               1841      MOVE.B          #14,D0
00001A84  4E4F                    1842      TRAP            #15
00001A86                          1843  
00001A86  2238 1016               1844      MOVE.L          DATA1,D1
00001A8A  700F                    1845      MOVEQ           #15,D0
00001A8C  7410                    1846      MOVEQ           #16,D2
00001A8E  4E4F                    1847      TRAP            #15
00001A90                          1848  
00001A90  6000 FBDC               1849      BRA             PRINT_OPCODE_LOOP_RETURN
00001A94                          1850  
00001A94                          1851  *-------------------------------------------------------------------------------
00001A94                          1852  *
00001A94                          1853  *       PRINT JSR
00001A94                          1854  *________________________________________
00001A94                          1855  * Register Use Summary:
00001A94                          1856  *
00001A94                          1857  * D0: LOCAL VARIABLE  - Trap task designator
00001A94                          1858  *
00001A94                          1859  * A1: LOCAL VARIABLE  - String address
00001A94                          1860  *-------------------------------------------------------------------------------
00001A94                          1861  PRINT_JSR
00001A94  43F9 00001DC6           1862      LEA             STRING_JSR,A1   * Load "JSR" into A1
00001A9A  103C 000E               1863      MOVE.B          #14,D0      * Set trap task to String
00001A9E  4E4F                    1864      TRAP            #15
00001AA0  6000 FBCC               1865      BRA             PRINT_OPCODE_LOOP_RETURN
00001AA4                          1866  
00001AA4                          1867  
00001AA4                          1868  *-------------------------------------------------------------------------------
00001AA4                          1869  *
00001AA4                          1870  *       PRINT FOURSPACE
00001AA4                          1871  *________________________________________
00001AA4                          1872  * Register Use Summary:
00001AA4                          1873  *
00001AA4                          1874  * D0: LOCAL VARIABLE  - Trap task designator
00001AA4                          1875  *
00001AA4                          1876  * A1: LOCAL VARIABLE  - String address
00001AA4                          1877  *-------------------------------------------------------------------------------
00001AA4                          1878  PRINT_FOURSPACE
00001AA4  43F9 00001D7C           1879      LEA             STRING_FOURSPACE,A1 * Load four spaces into A1
00001AAA  103C 000E               1880      MOVE.B          #14,D0              * Set trap task to String
00001AAE  4E4F                    1881      TRAP            #15
00001AB0  6000 FBBC               1882      BRA             PRINT_OPCODE_LOOP_RETURN
00001AB4                          1883  
00001AB4                          1884  
00001AB4                          1885  *-------------------------------------------------------------------------------
00001AB4                          1886  *
00001AB4                          1887  *       PRINT COMMA
00001AB4                          1888  *________________________________________
00001AB4                          1889  * Register Use Summary:
00001AB4                          1890  *
00001AB4                          1891  * D0: LOCAL VARIABLE  - Trap task designator
00001AB4                          1892  *
00001AB4                          1893  * A1: LOCAL VARIABLE  - String address
00001AB4                          1894  *-------------------------------------------------------------------------------
00001AB4                          1895  PRINT_COMMA
00001AB4  43F9 00001D6E           1896      LEA             STRING_COMMA,A1 * Load the comma into A1
00001ABA  103C 000E               1897      MOVE.B          #14,D0              * Set trap task to String
00001ABE  4E4F                    1898      TRAP            #15
00001AC0  6000 FBAC               1899      BRA             PRINT_OPCODE_LOOP_RETURN
00001AC4                          1900  
00001AC4                          1901  *-------------------------------------------------------------------------------
00001AC4                          1902  *
00001AC4                          1903  *       PRINT ILLEGAL
00001AC4                          1904  *
00001AC4                          1905  * Incomplete implementation - final version will depend on opcode logic.
00001AC4                          1906  * Currently clears stack entirely, future implementation may need to keep
00001AC4                          1907  * some RTS addresses
00001AC4                          1908  *
00001AC4                          1909  * D7: RTS address (opcode shouldn't be necessary at this point)
00001AC4                          1910  *-------------------------------------------------------------------------------
00001AC4                          1911  PRINT_ILLEGAL       * INCOMPLETE *
00001AC4  2E17                    1912      MOVE.L          (SP),D7
00001AC6                          1913  
00001AC6  2E7C 00000000           1914      MOVE.L          #0,SP
00001ACC  43F9 00001D56           1915      LEA             STRING_ILLEGAL,A1
00001AD2  103C 000D               1916      MOVE.B          #13,D0
00001AD6  4E4F                    1917      TRAP            #15
00001AD8                          1918  
00001AD8  2E87                    1919      MOVE.L          D7,(SP)
00001ADA                          1920  
00001ADA  31FC 0002 1010          1921      MOVE.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
00001AE0                          1922  
00001AE0                          1923  
00001AE0  4E75                    1924      RTS
00001AE2                          1925  
00001AE2                          1926  *--------------------------------------------------------------------------------
00001AE2                          1927  * PRINTADDR SUBROUTINE
00001AE2                          1928  *
00001AE2                          1929  * Prints the memory address and some blank spaces before the disassembled
00001AE2                          1930  * instruction is appended.
00001AE2                          1931  *
00001AE2                          1932  * Registers Used:
00001AE2                          1933  *   D0: Trap task designator
00001AE2                          1934  *   D1: Memory address to display
00001AE2                          1935  * D2: Trap task numerical base (Hex = 16)
00001AE2                          1936  *
00001AE2                          1937  *
00001AE2                          1938  * A1: Data memory location
00001AE2                          1939  *
00001AE2                          1940  *
00001AE2                          1941  PRINTADDR
00001AE2                          1942  
00001AE2  2238 1012               1943      MOVE.L   LOOP_INDEX,D1 * Print the loop index (memory location)
00001AE6  700F                    1944      MOVEQ    #15,D0
00001AE8  7410                    1945      MOVEQ    #16,D2
00001AEA                          1946  
00001AEA  4E4F                    1947      TRAP     #15
00001AEC                          1948  
00001AEC  43F9 00001D7C           1949      LEA      STRING_FOURSPACE,A1 * Print some spaces
00001AF2  700E                    1950      MOVEQ      #14,D0
00001AF4  4E4F                    1951      TRAP       #15
00001AF6                          1952  
00001AF6  4E75                    1953      RTS
00001AF8                          1954  
00001AF8                          1955  *--------------------------------------------------------------------------------
00001AF8                          1956  * PRINT_IMMEDIATE_NEWLINE
00001AF8                          1957  *
00001AF8                          1958  * CANNOT PUSH TO STACK - Used to put a newline after each opcode
00001AF8                          1959  *
00001AF8                          1960  * Registers Used:
00001AF8                          1961  *   D0: Trap task designator
00001AF8                          1962  *   D1: Memory address to display
00001AF8                          1963  *
00001AF8                          1964  * A1: Data memory location
00001AF8                          1965  *
00001AF8                          1966  PRINT_IMMEDIATE_NEWLINE
00001AF8                          1967  
00001AF8  43F9 00001D81           1968    LEA        STRING_NEWLINE,A1
00001AFE  700E                    1969      MOVEQ      #14,D0
00001B00  4E4F                    1970      TRAP       #15
00001B02                          1971  
00001B02  4E75                    1972    RTS
00001B04                          1973  
00001B04                          1974  *-----------------------------------------------------------------
00001B04                          1975  * GET_INPUT
00001B04                          1976  *
00001B04                          1977  * Called before anything else, clears what it uses
00001B04                          1978  *-----------------------------------------------------------------
00001B04                          1979  GET_INPUT
00001B04                          1980  
00001B04  21FC 00000000 1000      1981      MOVE.L  #0,START_ADDR
00001B0C  21FC 00000000 1004      1982      MOVE.L  #0,END_ADDR
00001B14                          1983  
00001B14  4283                    1984      CLR.L   D3
00001B16                          1985  
00001B16  43F9 00001C9C           1986      LEA     STRING_ENTER_START,A1
00001B1C  103C 000D               1987      MOVE.B  #13,D0
00001B20  4E4F                    1988      TRAP    #15
00001B22                          1989  
00001B22  327C 0000               1990      MOVEA   #0,A1
00001B26  103C 0002               1991      MOVE.B  #2,D0
00001B2A  4E4F                    1992      TRAP    #15
00001B2C                          1993  
00001B2C  4EB9 00001B7C           1994      JSR     STRING_TO_HEX
00001B32  21C3 1000               1995      MOVE.L  D3,START_ADDR
00001B36                          1996  
00001B36  4283                    1997      CLR.L   D3
00001B38                          1998  
00001B38  43F9 00001CC3           1999      LEA     STRING_ENTER_END,A1
00001B3E  103C 000D               2000      MOVE.B  #13,D0
00001B42  4E4F                    2001      TRAP    #15
00001B44                          2002  
00001B44  327C 0000               2003      MOVEA   #0,A1
00001B48  103C 0002               2004      MOVE.B  #2,D0
00001B4C  4E4F                    2005      TRAP    #15
00001B4E                          2006  
00001B4E  4EB9 00001B7C           2007      JSR     STRING_TO_HEX
00001B54  21C3 1004               2008      MOVE.L  D3,END_ADDR
00001B58                          2009  
00001B58  2438 1000               2010      MOVE.L  START_ADDR,D2
00001B5C  B682                    2011      CMP.L   D2,D3
00001B5E  6D00 000C               2012      BLT     OUT_OF_ORDER
00001B62                          2013  
00001B62  4280                    2014      CLR.L     D0
00001B64  4281                    2015      CLR.L     D1
00001B66  4282                    2016      CLR.L     D2
00001B68  4283                    2017      CLR.L     D3
00001B6A                          2018  
00001B6A  4E75                    2019      RTS
00001B6C                          2020  
00001B6C                          2021  OUT_OF_ORDER
00001B6C                          2022  
00001B6C  43F9 00001D2A           2023      LEA     STRING_OUT_OF_ORDER,A1
00001B72  103C 000D               2024      MOVE.B  #13,D0
00001B76  4E4F                    2025      TRAP    #15
00001B78                          2026  
00001B78  4EF8 1B04               2027      JMP     GET_INPUT
00001B7C                          2028  
00001B7C                          2029  STRING_TO_HEX
00001B7C                          2030  
00001B7C  4282                    2031      CLR.L   D2
00001B7E  B23C 0000               2032      CMP.B   #0,D1
00001B82  6700 0012               2033      BEQ     STH_END
00001B86  4EB9 00001BB0           2034      JSR     STH_SET_VALUE
00001B8C  4EF8 1B7C               2035      JMP     STRING_TO_HEX
00001B90                          2036  
00001B90                          2037  STH_UPDATE
00001B90                          2038  
00001B90  5341                    2039      SUB.W   #1,D1
00001B92  5249                    2040      ADDA.W  #1,A1
00001B94  4E75                    2041      RTS
00001B96                          2042  
00001B96  4E75                    2043  STH_END     RTS
00001B98                          2044  
00001B98                          2045  STH_BAD_INPUT
00001B98                          2046  
00001B98  43F9 00001CE8           2047      LEA     STRING_INVALID_INPUT,A1
00001B9E  103C 000D               2048      MOVE.B  #13,D0
00001BA2  4E4F                    2049      TRAP    #15
00001BA4                          2050  
00001BA4  327C 0000               2051      MOVEA   #0,A1
00001BA8  103C 0002               2052      MOVE.B  #2,D0
00001BAC  4E4F                    2053      TRAP    #15
00001BAE                          2054  
00001BAE  4E75                    2055      RTS
00001BB0                          2056  
00001BB0                          2057  STH_SET_VALUE
00001BB0                          2058  
00001BB0  7400                    2059      MOVE.L  #$0,D2
00001BB2  0C11 0030               2060      CMP.B   #$30,(A1)
00001BB6  6700 009C               2061      BEQ     STH_SHIFT_BITS
00001BBA                          2062  
00001BBA  7401                    2063      MOVE.L  #$1,D2
00001BBC  0C11 0031               2064      CMP.B   #$31,(A1)
00001BC0  6700 0092               2065      BEQ     STH_SHIFT_BITS
00001BC4                          2066  
00001BC4  7402                    2067      MOVE.L  #$2,D2
00001BC6  0C11 0032               2068      CMP.B   #$32,(A1)
00001BCA  6700 0088               2069      BEQ     STH_SHIFT_BITS
00001BCE                          2070  
00001BCE  7403                    2071      MOVE.L  #$3,D2
00001BD0  0C11 0033               2072      CMP.B   #$33,(A1)
00001BD4  6700 007E               2073      BEQ     STH_SHIFT_BITS
00001BD8                          2074  
00001BD8  7404                    2075      MOVE.L  #$4,D2
00001BDA  0C11 0034               2076      CMP.B   #$34,(A1)
00001BDE  6700 0074               2077      BEQ     STH_SHIFT_BITS
00001BE2                          2078  
00001BE2  7405                    2079      MOVE.L  #$5,D2
00001BE4  0C11 0035               2080      CMP.B   #$35,(A1)
00001BE8  6700 006A               2081      BEQ     STH_SHIFT_BITS
00001BEC                          2082  
00001BEC  7406                    2083      MOVE.L  #$6,D2
00001BEE  0C11 0036               2084      CMP.B   #$36,(A1)
00001BF2  6700 0060               2085      BEQ     STH_SHIFT_BITS
00001BF6                          2086  
00001BF6  7407                    2087      MOVE.L  #$7,D2
00001BF8  0C11 0037               2088      CMP.B   #$37,(A1)
00001BFC  6700 0056               2089      BEQ     STH_SHIFT_BITS
00001C00                          2090  
00001C00  7408                    2091      MOVE.L  #$8,D2
00001C02  0C11 0038               2092      CMP.B   #$38,(A1)
00001C06  6700 004C               2093      BEQ     STH_SHIFT_BITS
00001C0A                          2094  
00001C0A  7409                    2095      MOVE.L  #$9,D2
00001C0C  0C11 0039               2096      CMP.B   #$39,(A1)
00001C10  6700 0042               2097      BEQ     STH_SHIFT_BITS
00001C14                          2098  
00001C14  740A                    2099      MOVE.L  #$A,D2
00001C16  0C11 0041               2100      CMP.B   #$41,(A1)
00001C1A  6700 0038               2101      BEQ     STH_SHIFT_BITS
00001C1E                          2102  
00001C1E  740B                    2103      MOVE.L  #$B,D2
00001C20  0C11 0042               2104      CMP.B   #$42,(A1)
00001C24  6700 002E               2105      BEQ     STH_SHIFT_BITS
00001C28                          2106  
00001C28  740C                    2107      MOVE.L  #$C,D2
00001C2A  0C11 0043               2108      CMP.B   #$43,(A1)
00001C2E  6700 0024               2109      BEQ     STH_SHIFT_BITS
00001C32                          2110  
00001C32  740D                    2111      MOVE.L  #$D,D2
00001C34  0C11 0044               2112      CMP.B   #$44,(A1)
00001C38  6700 001A               2113      BEQ     STH_SHIFT_BITS
00001C3C                          2114  
00001C3C  740E                    2115      MOVE.L  #$E,D2
00001C3E  0C11 0045               2116      CMP.B   #$45,(A1)
00001C42  6700 0010               2117      BEQ     STH_SHIFT_BITS
00001C46                          2118  
00001C46  740F                    2119      MOVE.L  #$F,D2
00001C48  0C11 0046               2120      CMP.B   #$46,(A1)
00001C4C  6700 0006               2121      BEQ     STH_SHIFT_BITS
00001C50                          2122  
00001C50  4EF8 1B98               2123      JMP     STH_BAD_INPUT
00001C54                          2124  
00001C54                          2125  STH_SHIFT_BITS
00001C54                          2126  
00001C54  B23C 0001               2127      CMP.B   #1,D1
00001C58  6700 0038               2128      BEQ     STH_INCREASE_VALUE
00001C5C                          2129  
00001C5C  E99A                    2130      ROL.L   #4,D2
00001C5E  B23C 0002               2131      CMP.B   #2,D1
00001C62  6700 002E               2132      BEQ     STH_INCREASE_VALUE
00001C66                          2133  
00001C66  E99A                    2134      ROL.L   #4,D2
00001C68  B23C 0003               2135      CMP.B   #3,D1
00001C6C  6700 0024               2136      BEQ     STH_INCREASE_VALUE
00001C70                          2137  
00001C70  E99A                    2138      ROL.L   #4,D2
00001C72  B23C 0004               2139      CMP.B   #4,D1
00001C76  6700 001A               2140      BEQ     STH_INCREASE_VALUE
00001C7A                          2141  
00001C7A  E99A                    2142      ROL.L   #4,D2
00001C7C  B23C 0005               2143      CMP.B   #5,D1
00001C80  6700 0010               2144      BEQ     STH_INCREASE_VALUE
00001C84                          2145  
00001C84  E99A                    2146      ROL.L   #4,D2
00001C86  B23C 0006               2147      CMP.B   #6,D1
00001C8A  6700 0006               2148      BEQ     STH_INCREASE_VALUE
00001C8E                          2149  
00001C8E  4EF8 1B98               2150      JMP     STH_BAD_INPUT
00001C92                          2151  
00001C92                          2152  STH_INCREASE_VALUE
00001C92                          2153  
00001C92  D682                    2154      ADD.L   D2,D3
00001C94  4EF8 1B90               2155      JMP     STH_UPDATE
00001C98                          2156  
00001C98                          2157  * END OF GET_INPUT -----------------------------------------------
00001C98                          2158  
00001C98  FFFF FFFF               2159      SIMHALT
00001C9C                          2160  
00001C9C                          2161  *-------------------------------------------------------------------------------
00001C9C                          2162  *                ________  ________  _________  ________
00001C9C                          2163  *               |\   ___ \|\   __  \|\___   ___\\   __  \
00001C9C                          2164  *               \ \  \_|\ \ \  \|\  \|___ \  \_\ \  \|\  \
00001C9C                          2165  *                \ \  \ \\ \ \   __  \   \ \  \ \ \   __  \
00001C9C                          2166  *                 \ \  \_\\ \ \  \ \  \   \ \  \ \ \  \ \  \
00001C9C                          2167  *                  \ \_______\ \__\ \__\   \ \__\ \ \__\ \__\
00001C9C                          2168  *                   \|_______|\|__|\|__|    \|__|  \|__|\|__|
00001C9C                          2169  *
00001C9C                          2170  *-------------------------------------------------------------------------------
00001C9C                          2171  
00001C9C                          2172  
00001C9C                          2173  * Data for GET_INPUT
00001C9C= 50 6C 65 61 73 65 ...   2174  STRING_ENTER_START      DC.B    'Please enter a start address, eg. 4A6C',0
00001CC3= 50 6C 65 61 73 65 ...   2175  STRING_ENTER_END        DC.B    'Please enter a end address, eg. 5D3F',0
00001CE8= 49 4E 56 41 4C 49 ...   2176  STRING_INVALID_INPUT    DC.B    'INVALID INPUT, must be a valid EASy68k hexidecimal memory address',0
00001D2A= 53 74 61 72 74 20 ...   2177  STRING_OUT_OF_ORDER     DC.B    'Start address must be less than end address',0
00001D56                          2178  
00001D56                          2179  
00001D56= 49 4C 4C 45 47 41 ...   2180  STRING_ILLEGAL              DC.B    'ILLEGAL',0
00001D5E= 2E 42 20 00             2181  STRING_BYTE_DESIGNATOR      DC.B    '.B ',0
00001D62= 2E 57 20 00             2182  STRING_WORD_DESIGNATOR      DC.B    '.W ',0
00001D66= 2E 4C 20 00             2183  STRING_LONG_DESIGNATOR      DC.B    '.L ',0
00001D6A= 44 00                   2184  STRING_D                    DC.B    'D',0
00001D6C= 41 00                   2185  STRING_A                    DC.B    'A',0
00001D6E= 2C 00                   2186  STRING_COMMA                DC.B    ',',0
00001D70= 28 00                   2187  STRING_LEFT_PAREN           DC.B    '(',0
00001D72= 29 00                   2188  STRING_RIGHT_PAREN          DC.B    ')',0
00001D74= 2B 00                   2189  STRING_PLUS                 DC.B    '+',0
00001D76= 2D 00                   2190  STRING_MINUS                DC.B    '-',0
00001D78= 23 00                   2191  STRING_POUND                DC.B    '#',0
00001D7A= 24 00                   2192  STRING_DOLLAR               DC.B    '$',0
00001D7C                          2193  
00001D7C= 20 20 20 20 00          2194  STRING_FOURSPACE            DC.B    '    ',0
00001D81= 0D 0A 00                2195  STRING_NEWLINE              DC.B    '',CR,LF,0
00001D84                          2196  
00001D84= 41 53 52 00             2197  STRING_ASR                  DC.B    'ASR',0
00001D88= 41 53 4C 00             2198  STRING_ASL                  DC.B    'ASL',0
00001D8C= 4C 53 52 00             2199  STRING_LSR                  DC.B    'LSR',0
00001D90= 4C 53 4C 00             2200  STRING_LSL                  DC.B    'LSL',0
00001D94= 52 4F 52 00             2201  STRING_ROR                  DC.B    'ROR',0
00001D98= 52 4F 4C 00             2202  STRING_ROL                  DC.B    'ROL',0
00001D9C= 4E 4F 50 00             2203  STRING_NOP                  DC.B    'NOP',0
00001DA0= 52 54 53 00             2204  STRING_RTS                  DC.B    'RTS',0
00001DA4= 41 44 44 51 00          2205  STRING_ADDQ                 DC.B    'ADDQ',0
00001DA9= 41 44 44 00             2206  STRING_ADD                  DC.B    'ADD',0
00001DAD= 41 44 44 41 00          2207  STRING_ADDA                 DC.B    'ADDA',0
00001DB2= 42 45 51 20 00          2208  STRING_BEQ                  DC.B    'BEQ ',0
00001DB7= 42 4C 45 20 00          2209  STRING_BLE                  DC.B    'BLE ',0
00001DBC= 42 52 41 20 00          2210  STRING_BRA                  DC.B    'BRA ',0
00001DC1= 42 47 54 20 00          2211  STRING_BGT                  DC.B    'BGT ',0
00001DC6= 4A 53 52 20 20 20 ...   2212  STRING_JSR                  DC.B    'JSR    ',0
00001DCE                          2213  
00001DCE                          2214  MISC_NUMBER  DS.B    1    * MISC_NUMBER to be printed
00001DD0                          2215  MISC_OPCODE  DS.W    1
00001DD2                          2216  MISC_REGISTER DS.B   1
00001DD3                          2217  
00001DD3                          2218  
00001DD3                          2219  
00001DD3                          2220      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 14AC
ADDA                142C
ADDA_CONTINUE       1474
ADDA_L              1454
ADDA_W              1464
ADDQ                1540
ADDQ_NOT_ZERO       1584
ADD_ADDA            1416
ADD_DN_FIRST        1508
ADD_EA_FIRST        14D0
ASL                 11F4
ASR                 11E4
ASX                 11D2
BCC                 134E
BCC_16              13E2
BCC_32              13FC
BCC_CONTINUE        13B8
BCC_END             1406
BEQ                 13A8
BGT                 1388
BLE                 1398
BRA                 1378
BRANCHBLOCK         110C
CR                  D
DATA1               1016
DATA2               101A
DONE                1108
END_ADDR            1004
GET_INPUT           1B04
INITIALIZE          101E
JSR                 15E8
JSR_EA_MODE_ELSE    1612
JSR_FINISH          164C
JSR_PUSH_EA_MODE_ID_AN_INDIRECT  162E
JSR_PUSH_EA_MODE_ID_IND_LONG  1642
JSR_PUSH_EA_MODE_ID_IND_SHORT  1638
LF                  A
LOOP_INC            1010
LOOP_INDEX          1012
LSL                 11C2
LSR                 11B2
LSX                 11A0
LSX_ASX_ROX         1182
LSX_ASX_ROX_CONTINUE  1236
LSX_ASX_ROX_CONTINUE2  133E
LSX_ASX_ROX_MEM     1326
LSX_ASX_ROX_REGISTER  12DE
LSX_ASX_ROX_RESET_D7  1348
LSX_ASX_ROX_SHIFT   1264
LSX_ASX_ROX_SHIFT_8  12AE
MISC_NUMBER         1DCE
MISC_OPCODE         1DD0
MISC_REGISTER       1DD2
NOP                 15B4
OPCODE_LOOP         10C2
OUT_OF_ORDER        1B6C
PRINTADDR           1AE2
PRINT_ADD           184A
PRINT_ADDA          185A
PRINT_ADDQ          18FE
PRINT_ASL           17C0
PRINT_ASR           17B0
PRINT_BEQ           182A
PRINT_BGT           180A
PRINT_BLE           181A
PRINT_BRA           183A
PRINT_BYTE_DESIGNATOR  190E
PRINT_COMMA         1AB4
PRINT_COUNT         1008
PRINT_DATA1_LONG    17F0
PRINT_DATA1_WORD    17FA
PRINT_EA_MODE_ID_ABS_DATA  1A6E
PRINT_EA_MODE_ID_AN  195C
PRINT_EA_MODE_ID_AN_INDIRECT  197A
PRINT_EA_MODE_ID_AN_POST_INC  19B0
PRINT_EA_MODE_ID_AN_PRE_DEC  19F2
PRINT_EA_MODE_ID_DN  193E
PRINT_EA_MODE_ID_IND_LONG  1A54
PRINT_EA_MODE_ID_IND_SHORT  1A34
PRINT_FOURSPACE     1AA4
PRINT_ILLEGAL       1AC4
PRINT_IMMEDIATE_NEWLINE  1AF8
PRINT_JSR           1A94
PRINT_LONG_DESIGNATOR  192E
PRINT_LSL           17A0
PRINT_LSR           1790
PRINT_MISC_NUMBER   186A
PRINT_MISC_NUMBER_AS_ADDRESS  1880
PRINT_MISC_NUMBER_AS_DATA  18CC
PRINT_MISC_NUMBER_AS_REGISTER  18A6
PRINT_OPCODE        1654
PRINT_OPCODE_LOOP   165E
PRINT_OPCODE_LOOP_FINISH  1674
PRINT_OPCODE_LOOP_INDEX  100A
PRINT_OPCODE_LOOP_RETURN  166E
PRINT_ROL           17E0
PRINT_ROR           17D0
PRINT_WORD_DESIGNATOR  191E
PUSH_BWL            1748
PUSH_BWL_BYTE       1764
PUSH_BWL_FINISH     1782
PUSH_BWL_LONG       1778
PUSH_BWL_WORD       176E
PUSH_EA_MODE_ID     1680
PUSH_EA_MODE_ID_ABS_DATA  172C
PUSH_EA_MODE_ID_AN  16C6
PUSH_EA_MODE_ID_AN_INDIRECT  16D0
PUSH_EA_MODE_ID_AN_POST_INC  16DA
PUSH_EA_MODE_ID_AN_PRE_DEC  16E4
PUSH_EA_MODE_ID_DN  16BC
PUSH_EA_MODE_ID_ELSE  16EE
PUSH_EA_MODE_ID_FINISH  173A
PUSH_EA_MODE_ID_IND_LONG  171E
PUSH_EA_MODE_ID_IND_SHORT  1710
ROL                 1226
ROR                 1216
ROX                 1204
RTS                 15CE
STACK_BASE          100C
START               101E
START_ADDR          1000
STH_BAD_INPUT       1B98
STH_END             1B96
STH_INCREASE_VALUE  1C92
STH_SET_VALUE       1BB0
STH_SHIFT_BITS      1C54
STH_UPDATE          1B90
STRING_A            1D6C
STRING_ADD          1DA9
STRING_ADDA         1DAD
STRING_ADDQ         1DA4
STRING_ASL          1D88
STRING_ASR          1D84
STRING_BEQ          1DB2
STRING_BGT          1DC1
STRING_BLE          1DB7
STRING_BRA          1DBC
STRING_BYTE_DESIGNATOR  1D5E
STRING_COMMA        1D6E
STRING_D            1D6A
STRING_DOLLAR       1D7A
STRING_ENTER_END    1CC3
STRING_ENTER_START  1C9C
STRING_FOURSPACE    1D7C
STRING_ILLEGAL      1D56
STRING_INVALID_INPUT  1CE8
STRING_JSR          1DC6
STRING_LEFT_PAREN   1D70
STRING_LONG_DESIGNATOR  1D66
STRING_LSL          1D90
STRING_LSR          1D8C
STRING_MINUS        1D76
STRING_NEWLINE      1D81
STRING_NOP          1D9C
STRING_OUT_OF_ORDER  1D2A
STRING_PLUS         1D74
STRING_POUND        1D78
STRING_RIGHT_PAREN  1D72
STRING_ROL          1D98
STRING_ROR          1D94
STRING_RTS          1DA0
STRING_TO_HEX       1B7C
STRING_WORD_DESIGNATOR  1D62
