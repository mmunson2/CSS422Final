0000101E Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 6/3/2020 4:42:10 AM

00000000                             1  *-------------------------------------------------------------------------------
00000000                             2  * Title      : PUSH_BWT / EA_MODE_ID Development
00000000                             3  * Written by : Ihsan Halimun, Camden Brewster, Matthew Munson
00000000                             4  * Date       : May 16th 2020
00000000                             5  * Description: It's the whole damn thing!
00000000                             6  *-------------------------------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  *-------------------------------------------------------------------------------
00001000                             9  *      ________   ___        ________   ________   ________   ___
00001000                            10  *     |\   ____\ |\  \      |\   __  \ |\   __  \ |\   __  \ |\  \
00001000                            11  *     \ \  \___| \ \  \     \ \  \|\  \\ \  \|\ /_\ \  \|\  \\ \  \
00001000                            12  *      \ \  \  ___\ \  \     \ \  \\\  \\ \   __  \\ \   __  \\ \  \
00001000                            13  *       \ \  \|\  \\ \  \____ \ \  \\\  \\ \  \|\  \\ \  \ \  \\ \  \____
00001000                            14  *        \ \_______\\ \_______\\ \_______\\ \_______\\ \__\ \__\\ \_______\
00001000                            15  *         \|_______| \|_______| \|_______| \|_______| \|__|\|__| \|_______|
00001000                            16  *-------------------------------------------------------------------------------
00001000                            17  
00001000                            18  START_ADDR   DS.L  1   *User defined memory start address
00001004                            19  END_ADDR     DS.L  1   *User defined memory end address
00001008                            20  
00001008  =0000000D                 21  CR    EQU   $0D
00001008  =0000000A                 22  LF    EQU   $0A
00001008                            23  
00001008                            24  PRINT_COUNT    DS.W    1    *How many print statements are sitting in the stack
0000100A                            25  PRINT_OPCODE_LOOP_INDEX  DS.W  1   * The print loop index
0000100C                            26  STACK_BASE     DS.L    1    *Where we begin putting print calls into stack
00001010                            27  
00001010                            28  LOOP_INC       DS.W    1    * How many words to skip to find the next opcode
00001012                            29  LOOP_INDEX     DS.L    1    * The opcode loop's index
00001016                            30  
00001016                            31  DATA1          DS.L    1    * The first line of opcode data
0000101A                            32  DATA2          DS.L    1    * The second line of opcode data
0000101E                            33  
0000101E                            34  START:
0000101E                            35  
0000101E                            36  *-------------------------------------------------------------------------------
0000101E                            37  *                ________  ________  ________  _______
0000101E                            38  *               |\   ____\|\   __  \|\   ___ \|\  ___ \
0000101E                            39  *               \ \  \___|\ \  \|\  \ \  \_|\ \ \   __/|
0000101E                            40  *                \ \  \    \ \  \\\  \ \  \ \\ \ \  \_|/__
0000101E                            41  *                 \ \  \____\ \  \\\  \ \  \_\\ \ \  \_|\ \
0000101E                            42  *                  \ \_______\ \_______\ \_______\ \_______\
0000101E                            43  *                   \|_______|\|_______|\|_______|\|_______|
0000101E                            44  *
0000101E                            45  *-------------------------------------------------------------------------------
0000101E                            46  
0000101E                            47  *-------------------------------------------------------------------------------
0000101E                            48  INITIALIZE
0000101E                            49  
0000101E                            50  * ------ Test Initializations ------
0000101E                            51  
0000101E                            52  *  MOVE.W    #$4E91, $4000   * JSR Opcode
0000101E                            53  *  MOVE.W    #$4EB9,$4000      * JSR 1016 (1)
0000101E                            54  *  MOVE.L    #$00001016, $4002 * JSR 1016 (2)
0000101E                            55  *  (^ Add 8 to memory address if you want something after this ^)
0000101E                            56  
0000101E                            57  *  MOVE.W    #$4E71, $4002   * NOP Opcode
0000101E                            58  *  MOVE.W    #$4E75, $4004   * RTS Opcode
0000101E                            59  *  MOVE.W    #$5241, $4000   * ADDQ Opcode
0000101E                            60  *  MOVE.W    #$D240, $4000   * ADD Opcode
0000101E                            61  *  MOVE.W    #$D5C9, $4000   * ADDA Opcode (ADDA.L A1,A2)
0000101E  21FC 60000002 4000        62     MOVE.L    #$60000002, $4000   * BRA Opcode
00001026  21FC 6E000018 4004        63     MOVE.L    #$6E000018, $4004   * BRA Opcode
0000102E  31FC 6FE6 4008            64     MOVE.W    #$6FE6, $4008
00001034  31FC 67E2 400A            65     MOVE.W    #$67E2, $400A
0000103A                            66  
0000103A  21FC 00004000 1000        67    MOVE.L    #$4000, START_ADDR
00001042  21FC 00005000 1004        68    MOVE.L    #$5000, END_ADDR
0000104A                            69  
0000104A                            70  
0000104A                            71  * ------ Standard Initializations ------
0000104A  31FC 0000 1008            72    MOVE.W    #0, PRINT_COUNT
00001050  13FC 0000 00001A70        73    MOVE.B    #0, MISC_NUMBER
00001058                            74  
00001058                            75    * JSR GET_INPUT
00001058                            76  
00001058  2078 1000                 77    MOVEA.L  START_ADDR,A0
0000105C  21C8 1012                 78    MOVE.L   A0,LOOP_INDEX * Both A0 and LOOP_INDEX contain the start address
00001060                            79  
00001060                            80  
00001060                            81  
00001060                            82  *-------------------------------------------------------------------------------
00001060                            83  *    OPCODE LOOP
00001060                            84  *
00001060                            85  *    The disassembler's main loop. Gets the contents of a memory location,
00001060                            86  *    sends it to BRANCHBLOCK to be decoded and printed, and checks if we're
00001060                            87  *    at the user defined endpoint.
00001060                            88  *
00001060                            89  * ________________________________________
00001060                            90  * Register Use Summary:
00001060                            91  *
00001060                            92  * D7: CONST - The opcode to decode. Set before BRANCHBLOCK
00001060                            93  *
00001060                            94  * A0: The current Loop Index, updated before and after BRANCHBLOCK
00001060                            95  * A1: How much we should increment the loop index
00001060                            96  * A2: Local Variable - used for retrieving DATA
00001060                            97  *-------------------------------------------------------------------------------
00001060                            98  OPCODE_LOOP
00001060                            99  
00001060  2078 1012                100      MOVEA.L LOOP_INDEX,A0
00001064  B1F8 1004                101      CMPA.L  END_ADDR, A0  * Check to see if we're done
00001068  6E00 003C                102      BGT     DONE
0000106C                           103  
0000106C                           104  * ------ Reset Loop Variables ------
0000106C  31FC 0000 1008           105      MOVE.W  #0,PRINT_COUNT  * Reset print count to zero
00001072  31FC 0000 1010           106      MOVE.W  #0,LOOP_INC     * Reset loop index increment to zero
00001078  4247                     107      CLR     D7
0000107A                           108  
0000107A                           109  * ------ Get memory at loop index ------
0000107A  3E10                     110      MOVE.W  (A0),D7
0000107C                           111  
0000107C                           112  * ------ Fill DATA1 and DATA2 ------
0000107C  2448                     113      MOVEA.L  A0,A2
0000107E  544A                     114      ADDA     #2,A2        * Increment by 1 word to get the long afterwards
00001080  21D2 1016                115      MOVE.L  (A2),DATA1   * Fill DATA1 with the long after the opcode
00001084  584A                     116      ADDA     #4,A2
00001086  21D2 101A                117      MOVE.L  (A2),DATA2   * Fill DATA2 with the long after DATA1
0000108A                           118  
0000108A                           119  
0000108A                           120  * ------ Execute Subroutines ------
0000108A  4EB9 0000179C            121      JSR     PRINTADDR             * Print the memory address
00001090  4EB9 000010AA            122      JSR     BRANCHBLOCK           * Figure out what opcode this is and print
00001096                           123  
00001096                           124  
00001096                           125  * ------ Increment Loop ------
00001096  2078 1012                126      MOVEA.L     LOOP_INDEX,A0
0000109A  3278 1010                127      MOVEA.W     LOOP_INC,A1
0000109E  D0C9                     128      ADDA    A1,A0  * Move the index to the next opcode
000010A0  21C8 1012                129      MOVE.L  A0,LOOP_INDEX
000010A4                           130  
000010A4  60BA                     131      BRA     OPCODE_LOOP
000010A6                           132  
000010A6                           133  DONE
000010A6                           134  
000010A6                           135      * This will eventually RTE to the user input section
000010A6                           136  
000010A6  FFFF FFFF                137      SIMHALT
000010AA                           138  
000010AA                           139  
000010AA                           140  
000010AA                           141  *-------------------------------------------------------------------------------
000010AA                           142  *     BRANCHBLOCK
000010AA                           143  *
000010AA                           144  *  Decodes the opcode in D7 and jumps to the corresponding opcode subroutine
000010AA                           145  *
000010AA                           146  *  Because 1 line is pulled out of memory at a time, it's possible that the
000010AA                           147  *  next opcode only takes up one word, and it's in the upper word of the
000010AA                           148  *  opcode long (eg.4E71FFFF is NOP then empty). We must check for single word
000010AA                           149  *  opcodes before we use any of the data in the lower word of D7.
000010AA                           150  *________________________________________
000010AA                           151  * Register Use Summary:
000010AA                           152  *
000010AA                           153  * D0: General variable, cleared every use to be safe
000010AA                           154  * D1:
000010AA                           155  * D2:
000010AA                           156  * D3:
000010AA                           157  * D4: (Keep in mind this is parameter for BWL)
000010AA                           158  * D5:
000010AA                           159  * D6:
000010AA                           160  * D7: CONST - The opcode to decode - NO TOUCH
000010AA                           161  *________________________________________
000010AA                           162  * A0:
000010AA                           163  * A1:
000010AA                           164  * A2:
000010AA                           165  * A3:
000010AA                           166  * A4:
000010AA                           167  * A5:
000010AA                           168  * A6:
000010AA                           169  * A7:
000010AA                           170  *-------------------------------------------------------------------------------
000010AA                           171  BRANCHBLOCK
000010AA                           172  
000010AA  21CF 100C                173    MOVE.L  SP,STACK_BASE   * Save the position of the stack for later
000010AE                           174  
000010AE                           175  * ---- DEBUG ----
000010AE  BEBC 0000FFFF            176    CMP.L   #$FFFF,D7
000010B4  67F0                     177    BEQ   DONE * For debug only! Exit if memory is unset
000010B6                           178  
000010B6                           179  * ---- CONSTANT OPCODES ----
000010B6  BE7C 4E71                180    CMP.W   #$4E71,D7
000010BA  6700 020E                181    BEQ   NOP
000010BE                           182  
000010BE  BE7C 4E75                183    CMP.W   #$4E75,D7
000010C2  6700 0220                184    BEQ   RTS
000010C6                           185  
000010C6                           186  * ---- ADDQ ----
000010C6  4280                     187    CLR.L   D0
000010C8  3007                     188    MOVE.W  D7,D0
000010CA  4840                     189    SWAP    D0
000010CC  E998                     190    ROL.L   #$04,D0
000010CE  C03C 000F                191    AND.B   #$F,D0
000010D2  B03C 0005                192    CMP.B   #5,D0
000010D6  6700 0226                193    BEQ     ADDQ
000010DA                           194  
000010DA                           195  * ---- ADDA ----
000010DA  4280                     196    CLR.L   D0
000010DC  2007                     197    MOVE.L  D7,D0   *DXXX
000010DE  C07C F000                198    AND.W   #$F000,D0
000010E2  B07C D000                199    CMP.W   #$D000,D0
000010E6  6700 00F0                200    BEQ     ADD_ADDA
000010EA                           201  
000010EA                           202  * ---- BCC ----
000010EA  4280                     203    CLR.L   D0
000010EC  2007                     204    MOVE.L  D7,D0
000010EE  C07C F000                205    AND.W   #$F000,D0
000010F2  B07C 6000                206    CMP.W   #$6000,D0
000010F6  6700 0018                207    BEQ     BCC
000010FA                           208  
000010FA                           209  * ---- 10 BIT OPCODES ----
000010FA  4280                     210    CLR.L     D0
000010FC  3007                     211    MOVE.W  D7,D0
000010FE  C07C FFC0                212    AND.W   #$FFC0,D0   * Mask opcode to get first 10 bits only
00001102                           213  
00001102  EC40                     214    ASR.W   #6,D0
00001104  B07C 013A                215    CMP     #$13A,D0
00001108  6700 0250                216    BEQ     JSR
0000110C                           217  
0000110C                           218  
0000110C                           219  * ---- UH OH ----
0000110C                           220  
0000110C  6000 0670                221    BRA     PRINT_ILLEGAL
00001110                           222  
00001110                           223  
00001110                           224  *-------------------------------------------------------------------------------
00001110                           225  * ________   ________   ________   ________   ________   _______
00001110                           226  *|\   __  \ |\   __  \ |\   ____\ |\   __  \ |\   ___ \ |\  ___ \
00001110                           227  *\ \  \|\  \\ \  \|\  \\ \  \___| \ \  \|\  \\ \  \_|\ \\ \   __/|
00001110                           228  * \ \  \\\  \\ \   ____\\ \  \     \ \  \\\  \\ \  \ \\ \\ \  \_|/__
00001110                           229  *  \ \  \\\  \\ \  \___| \ \  \____ \ \  \\\  \\ \  \_\\ \\ \  \_|\ \
00001110                           230  *   \ \_______\\ \__\     \ \_______\\ \_______\\ \_______\\ \_______\
00001110                           231  *    \|_______| \|__|      \|_______| \|_______| \|_______| \|_______|
00001110                           232  *
00001110                           233  *-------------------------------------------------------------------------------
00001110                           234  
00001110                           235  *-------------------------------------------------------------------------------
00001110                           236  *   BCC
00001110                           237  *
00001110                           238  *
00001110                           239  *-------------------------------------------------------------------------------
00001110                           240  BCC
00001110  2007                     241    MOVE.L    D7,D0      * Reset D0
00001112  C07C 0F00                242    AND.W     #$0F00,D0  * Isolate bits 11-8
00001116  B07C 0000                243    CMP.W     #0,D0
0000111A  6700 001E                244    BEQ       BRA
0000111E                           245    
0000111E  B07C 0E00                246    CMP.W     #$E00,D0
00001122  6700 0026                247    BEQ       BGT
00001126                           248    
00001126  B07C 0F00                249    CMP.W     #$F00,D0
0000112A  6700 002E                250    BEQ       BLE
0000112E                           251    
0000112E  B07C 0700                252    CMP.W     #$700,D0
00001132  6700 0036                253    BEQ       BEQ 
00001136                           254    
00001136  6000 0646                255    BRA       PRINT_ILLEGAL
0000113A                           256    
0000113A                           257  BRA
0000113A  4BF9 0000154C            258    LEA     PRINT_BRA,A5    * Load the print subroutine into intermediate address
00001140  2F0D                     259    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001142  5878 1008                260    ADD.W   #4,PRINT_COUNT  
00001146                           261  
00001146  6000 0032                262    BRA   BCC_CONTINUE
0000114A                           263  
0000114A                           264  BGT
0000114A  4BF9 0000151C            265    LEA     PRINT_BGT,A5    * Load the print subroutine into intermediate address
00001150  2F0D                     266    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001152  5878 1008                267    ADD.W   #4,PRINT_COUNT    
00001156                           268    
00001156  6000 0022                269    BRA   BCC_CONTINUE
0000115A                           270  
0000115A                           271  BLE
0000115A  4BF9 0000152C            272    LEA     PRINT_BLE,A5    * Load the print subroutine into intermediate address
00001160  2F0D                     273    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001162  5878 1008                274    ADD.W   #4,PRINT_COUNT  
00001166                           275  
00001166  6000 0012                276    BRA   BCC_CONTINUE
0000116A                           277  
0000116A                           278  BEQ
0000116A  4BF9 0000153C            279    LEA     PRINT_BEQ,A5    * Load the print subroutine into intermediate address
00001170  2F0D                     280    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001172  5878 1008                281    ADD.W   #4,PRINT_COUNT  
00001176                           282    
00001176  6000 0002                283    BRA   BCC_CONTINUE
0000117A                           284  
0000117A                           285  BCC_CONTINUE
0000117A  7000                     286    MOVE.L    #0,D0
0000117C  1007                     287    MOVE.B    D7,D0      * Reset D0
0000117E  B03C 0000                288    CMP.B     #0,D0
00001182  6700 0020                289    BEQ       BCC_16     * if 16 bit displacement, print the following short
00001186                           290  
00001186  B03C 00FF                291    CMP.B     #$FF,D0    * if 32 bit displacement, print the following long
0000118A  6700 0032                292    BEQ       BCC_32  
0000118E                           293  
0000118E  21FC 00000000 1016       294    MOVE.L    #0,DATA1
00001196                           295    *ROR.L     #4,D0
00001196  21C0 1016                296    MOVE.L    D0,DATA1
0000119A                           297    
0000119A  31FC 0002 1010           298    MOVE.W  #2,LOOP_INC
000011A0                           299    
000011A0  6000 0026                300    BRA     BCC_END
000011A4                           301    
000011A4                           302  BCC_16 
000011A4  2238 1016                303    MOVE.L          DATA1,D1
000011A8  4841                     304    SWAP            D1              * We only want the upper word
000011AA  C2BC 0000FFFF            305    AND.L           #$0000FFFF,D1   * Bit mask for upper word
000011B0  21C1 1016                306    MOVE.L          D1,DATA1
000011B4                           307    
000011B4  31FC 0004 1010           308    MOVE.W  #4,LOOP_INC
000011BA                           309    
000011BA  6000 000C                310    BRA     BCC_END
000011BE                           311  
000011BE                           312  BCC_32
000011BE  31FC 0006 1010           313    MOVE.W  #6,LOOP_INC  
000011C4  6000 0002                314    BRA     BCC_END
000011C8                           315  
000011C8                           316  BCC_END
000011C8  4BF9 00001728            317    LEA     PRINT_EA_MODE_ID_ABS_DATA,A5
000011CE  2F0D                     318    MOVE.L  A5, -(SP)
000011D0  5878 1008                319    ADD.W   #4, PRINT_COUNT 
000011D4                           320    
000011D4  6000 01F0                321    BRA   PRINT_OPCODE
000011D8                           322      
000011D8                           323  
000011D8                           324  *-------------------------------------------------------------------------------
000011D8                           325  *   ADD ADDA
000011D8                           326  *
000011D8                           327  *
000011D8                           328  *-------------------------------------------------------------------------------
000011D8                           329  ADD_ADDA * Figure out whether we're dealing with ADD or ADDA
000011D8  2007                     330    MOVE.L  D7,D0
000011DA  EC58                     331    ROR.W   #06,D0     * Get bits 7,6 on end
000011DC  C03C 0003                332    AND.B   #03,D0     * Isolate bits 7,6
000011E0  B03C 0003                333    CMP.B   #03,D0
000011E4  6700 0020                334    BEQ   ADDA
000011E8                           335  
000011E8  6000 009A                336    BRA   ADD          * Else it's ADD
000011EC                           337  *-------------------------------------------------------------------------------
000011EC                           338  
000011EC                           339  
000011EC                           340  
000011EC                           341  
000011EC                           342  RESUME_ADD
000011EC  363C 0000                343    MOVE.W #0,D3    * MISC_NUMBER for LOOP_INC
000011F0                           344  
000011F0                           345  
000011F0  5403                     346    ADD.B  #2, D3
000011F2                           347  
000011F2                           348  ADD_ADDA_LOOP_ADD_W
000011F2  5403                     349    ADD.B  #2, D3
000011F4                           350  
000011F4                           351  ADD_ADDA_LOOP_NO_ADD
000011F4  5403                     352    ADD.B #2, D3
000011F6  E41B                     353    ROR.B #2, D3
000011F8  C63C 000C                354    AND.B #$C,D3
000011FC                           355  
000011FC  11C3 1010                356    MOVE.B  D3,LOOP_INC
00001200                           357  
00001200  6000 01C4                358    BRA   PRINT_OPCODE
00001204                           359  
00001204                           360  
00001204  4E75                     361    RTS
00001206                           362  *-------------------------------------------------------------------------------
00001206                           363  *   ADDA
00001206                           364  *
00001206                           365  *
00001206                           366  *-------------------------------------------------------------------------------
00001206                           367  ADDA
00001206                           368  
00001206  2007                     369    MOVE.L  D7,D0         * Reset D0
00001208                           370  
00001208  4BF9 0000156C            371    LEA     PRINT_ADDA,A5    * Load the print subroutine into intermediate address
0000120E  2F0D                     372    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001210  5878 1008                373    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001214                           374  
00001214  EC58                     375    ROR.W   #$6,D0        * Get bits 9,8,7,6 on end byte
00001216  C03C 0007                376    AND.B   #7,D0         * Isolate bits 8,7,6
0000121A                           377  
0000121A  B03C 0003                378    CMP.B   #3,D0         * If 8,7,6 == 011
0000121E  6700 001E                379    BEQ     ADDA_W
00001222                           380  
00001222  B03C 0007                381    CMP.B   #7,D0         * If 8,7,6 == 111
00001226  6700 0006                382    BEQ     ADDA_L
0000122A                           383  
0000122A  6000 0552                384    BRA     PRINT_ILLEGAL
0000122E                           385  
0000122E                           386  * ------ Long Opmode ------
0000122E                           387  ADDA_L
0000122E                           388  
0000122E  4BF9 000015E8            389    LEA     PRINT_LONG_DESIGNATOR,A5 * Load the ".L" print subroutine
00001234  2F0D                     390    MOVE.L  A5, -(SP)       * Put the subroutine onto the stack
00001236  5878 1008                391    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000123A                           392    
0000123A  6000 0012                393    BRA     ADDA_CONTINUE
0000123E                           394  
0000123E                           395  * ------ Word Opmode ------
0000123E                           396  ADDA_W
0000123E                           397  
0000123E  4BF9 000015D8            398    LEA     PRINT_WORD_DESIGNATOR,A5 * Load the ".W" print subroutine
00001244  2F0D                     399    MOVE.L  A5, -(SP)         * Put the subroutine onto the stack
00001246  5878 1008                400    ADD.W   #4,PRINT_COUNT    * Increment Print Count by 1 long
0000124A                           401  
0000124A  6000 0002                402    BRA     ADDA_CONTINUE
0000124E                           403  
0000124E                           404  * ------ Continue ------
0000124E                           405  ADDA_CONTINUE
0000124E                           406  
0000124E                           407  * Push the effective address print subroutine onto the stack
0000124E  4EB9 000013F2            408    JSR     PUSH_EA_MODE_ID
00001254                           409  
00001254                           410  
00001254  4BF9 0000176E            411    LEA     PRINT_COMMA,A5   * Load the print subroutine
0000125A  2F0D                     412    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000125C  5878 1008                413    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001260                           414  
00001260                           415  
00001260                           416  
00001260                           417  * Reset and push the address register print subroutine onto the stack
00001260  2007                     418    MOVE.L D7,D0    * Reset D0
00001262                           419  
00001262  E080                     420    ASR.L   #$8,D0
00001264  E280                     421    ASR.L   #$1,D0
00001266  C03C 0007                422    AND.B   #$7,D0
0000126A                           423  
0000126A  13C0 00001A70            424    MOVE.B  D0,MISC_NUMBER
00001270                           425  
00001270  4BF9 00001592            426    LEA     PRINT_MISC_NUMBER_AS_ADDRESS,A5   * Load the print subroutine
00001276  2F0D                     427    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001278  5878 1008                428    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000127C                           429  
0000127C  5478 1010                430    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
00001280                           431  
00001280  6000 0144                432    BRA   PRINT_OPCODE
00001284                           433  
00001284                           434  *-------------------------------------------------------------------------------
00001284                           435  *   ADD
00001284                           436  *
00001284                           437  *
00001284                           438  *-------------------------------------------------------------------------------
00001284                           439  ADD
00001284                           440  
00001284  4BF9 0000155C            441    LEA     PRINT_ADD,A5    * Load the print subroutine into intermediate address
0000128A  2F0D                     442    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000128C  5478 1008                443    ADD.W   #2,PRINT_COUNT  * Edit: Shouldn't this be 4?
00001290                           444  
00001290  1800                     445    MOVE.B   D0,D4            * Move bits 7,6 to D4 for BWL
00001292                           446  
00001292  4BF9 000014BA            447    LEA     PUSH_BWL,A5    * Load the PUSH_BWL subroutine into intermediate address
00001298  2F0D                     448    MOVE.L  A5, -(SP)       * Put the PUSH_BWL subroutine jump onto the stack
0000129A  5478 1008                449    ADD.W   #2,PRINT_COUNT  * Edit: Shouldn't this be 4?
0000129E                           450  
0000129E  4EB9 000013F2            451    JSR     PUSH_EA_MODE_ID
000012A4  31FC 0004 1010           452    MOVE.W  #4,LOOP_INC     * Increment the loop counter by 4 bytes
000012AA                           453  
000012AA  3007                     454    MOVE D7,D0    * Reset D0
000012AC                           455  
000012AC  E080                     456    ASR.L   #$8,D0
000012AE  E280                     457    ASR.L   #$1,D0
000012B0  C03C 0007                458    AND.B   #$7,D0
000012B4                           459  
000012B4  13C0 00001A74            460    MOVE.B  D0,MISC_REGISTER
000012BA  4EB9 0000142E            461    JSR     PUSH_EA_MODE_ID_DN
000012C0  31FC 0004 1010           462    MOVE.W  #4,LOOP_INC     * Increment the loop counter by 4 bytes
000012C6                           463  
000012C6  6000 FF24                464    BRA   RESUME_ADD
000012CA                           465  
000012CA                           466  *-------------------------------------------------------------------------------
000012CA                           467  *   NOP
000012CA                           468  *
000012CA                           469  *   NONSTANDARD OPCODE! Don't base your design off of this :)
000012CA                           470  *
000012CA                           471  *-------------------------------------------------------------------------------
000012CA                           472  NOP
000012CA                           473  
000012CA  43F9 00001A3E            474    LEA     STRING_NOP,A1
000012D0  103C 000E                475    MOVE.B  #14,D0
000012D4  4E4F                     476    TRAP    #15
000012D6                           477  
000012D6  31FC 0002 1010           478    MOVE.W  #2,LOOP_INC   * Increment the loop counter by 2 bytes
000012DC                           479  
000012DC  4EB9 000017B2            480    JSR     PRINT_IMMEDIATE_NEWLINE
000012E2                           481  
000012E2  4E75                     482    RTS
000012E4                           483  
000012E4                           484  *-------------------------------------------------------------------------------
000012E4                           485  *   RTS
000012E4                           486  *
000012E4                           487  *   NONSTANDARD OPCODE! Don't base your design off of this :)
000012E4                           488  *
000012E4                           489  *-------------------------------------------------------------------------------
000012E4                           490  RTS
000012E4                           491  
000012E4  43F9 00001A42            492    LEA     STRING_RTS,A1
000012EA  103C 000E                493    MOVE.B  #14,D0
000012EE  4E4F                     494    TRAP    #15
000012F0                           495  
000012F0  31FC 0002 1010           496    MOVE.W  #2,LOOP_INC   * Increment the loop counter by 2 bytes
000012F6                           497  
000012F6  4EB9 000017B2            498    JSR     PRINT_IMMEDIATE_NEWLINE
000012FC                           499  
000012FC  4E75                     500    RTS
000012FE                           501  
000012FE                           502  *-------------------------------------------------------------------------------
000012FE                           503  *   ADDQ
000012FE                           504  *
000012FE                           505  *
000012FE                           506  *-------------------------------------------------------------------------------
000012FE                           507  ADDQ
000012FE                           508  
000012FE  2007                     509    MOVE.L  D7,D0             * Reset bit shit
00001300  E998                     510    ROL.L   #$04,D0
00001302                           511  
00001302  E998                     512    ROL.L   #$04,D0           * Isolate bits 11 - 8
00001304  C03C 0001                513    AND.B   #1,D0
00001308  B03C 0000                514    CMP.B   #0,D0             * Check for 0 in 8th bit
0000130C  6600 0470                515    BNE     PRINT_ILLEGAL
00001310                           516  
00001310  4BF9 000015B8            517    LEA     PRINT_ADDQ,A5    * Load the print subroutine into intermediate address
00001316  2F0D                     518    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001318  5478 1008                519    ADD.W   #2,PRINT_COUNT
0000131C                           520  
0000131C  E598                     521    ROL.L   #$02,D0           * Isolate bits 7 - 6
0000131E  4244                     522    CLR      D4
00001320  1800                     523    MOVE.B   D0,D4            * Move bits 7,6 to D4 for BWL
00001322                           524  
00001322  4BF9 000014BA            525    LEA     PUSH_BWL,A5    * Load the PUSH_BWL subroutine into intermediate address
00001328  2F0D                     526    MOVE.L  A5, -(SP)       * Put the PUSH_BWL subroutine jump onto the stack
0000132A  5478 1008                527    ADD.W   #2,PRINT_COUNT
0000132E                           528  
0000132E  2007                     529    MOVE.L  D7,D0             * Reset D0
00001330  EF98                     530    ROL.L   #$7, D0           * Get bits 11 - 9
00001332  C03C 0007                531    AND.B   #$7, D0           * Clear bit 11
00001336                           532  
00001336  13C0 00001A70            533    MOVE.B  D0,MISC_NUMBER
0000133C  4BF9 0000157C            534    LEA     PRINT_MISC_NUMBER,A5
00001342  2F0D                     535    MOVE.L  A5, -(SP)
00001344  5878 1008                536    ADD.W   #4, PRINT_COUNT
00001348                           537  
00001348  4847                     538    SWAP    D7              * Reset D7 for EA MODE
0000134A  4EB9 000013F2            539    JSR     PUSH_EA_MODE_ID
00001350  31FC 0004 1010           540    MOVE.W  #4,LOOP_INC     * Increment the loop counter by 4 bytes
00001356                           541  
00001356                           542  
00001356  6000 006E                543    BRA     PRINT_OPCODE    * Always put this at the end
0000135A                           544  
0000135A                           545  
0000135A                           546  *-------------------------------------------------------------------------------
0000135A                           547  *   JSR
0000135A                           548  *
0000135A                           549  *
0000135A                           550  *-------------------------------------------------------------------------------
0000135A                           551  JSR
0000135A                           552  
0000135A  4BF9 0000174E            553    LEA     PRINT_JSR,A5    * Load the print subroutine into intermediate address
00001360  2F0D                     554    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001362  5878 1008                555    ADD.W           #4,PRINT_COUNT
00001366                           556  
00001366                           557  * ---- Custom Branching Block ----
00001366                           558  * Supported Modes: (An), Indirect short, Indirect Long
00001366                           559  
00001366  4240                     560    CLR       D0
00001368  1007                     561    MOVE.B    D7,D0 * Copy opcode into local variable
0000136A  C03C 0038                562    AND.B     #$38,D0 * Mask D0 with 0111000 to get MODE bits only
0000136E  E600                     563    ASR.B   #3,D0 * Shift the result so D0 ranges between 000 and 111
00001370                           564  
00001370  B03C 0002                565    CMP.B   #2,D0         *010 -> Address Register   Indirect
00001374  6700 002A                566    BEQ   JSR_PUSH_EA_MODE_ID_AN_INDIRECT
00001378  B03C 0007                567    CMP.B   #7,D0         *111 -> All Data Operations
0000137C  6700 0006                568    BEQ     JSR_EA_MODE_ELSE
00001380                           569  
00001380  6000 03FC                570    BRA     PRINT_ILLEGAL
00001384                           571  
00001384                           572  
00001384                           573  *________________________________________
00001384                           574  * Handle Data Branching Logic
00001384                           575  * Only short and long indirect allowed
00001384                           576  *----------------------------------------
00001384                           577  JSR_EA_MODE_ELSE
00001384                           578  
00001384  4240                     579    CLR     D0
00001386  1007                     580    MOVE.B  D7,D0
00001388  C03C 0007                581    AND.B   #7,D0
0000138C                           582  
0000138C  B03C 0000                583    CMP.B   #0,D0
00001390  6700 0018                584    BEQ     JSR_PUSH_EA_MODE_ID_IND_SHORT
00001394                           585  
00001394  B03C 0001                586    CMP.B   #1,D0
00001398  6700 001A                587    BEQ     JSR_PUSH_EA_MODE_ID_IND_LONG
0000139C                           588  
0000139C  6000 03E0                589    BRA     PRINT_ILLEGAL
000013A0                           590  
000013A0                           591  *________________________________________
000013A0                           592  * Jump directly into the middle of
000013A0                           593  * the PUSH_EA_MODE subroutine
000013A0                           594  *----------------------------------------
000013A0                           595  JSR_PUSH_EA_MODE_ID_AN_INDIRECT
000013A0  4EB9 00001442            596    JSR   PUSH_EA_MODE_ID_AN_INDIRECT
000013A6  6000 0016                597    BRA   JSR_FINISH
000013AA                           598  
000013AA                           599  *________________________________________
000013AA                           600  * Jump directly into the middle of
000013AA                           601  * the PUSH_EA_MODE subroutine
000013AA                           602  *----------------------------------------
000013AA                           603  JSR_PUSH_EA_MODE_ID_IND_SHORT
000013AA  4EB9 00001482            604    JSR   PUSH_EA_MODE_ID_IND_SHORT
000013B0  6000 000C                605    BRA   JSR_FINISH
000013B4                           606  
000013B4                           607  *________________________________________
000013B4                           608  * Jump directly into the middle of
000013B4                           609  * the PUSH_EA_MODE subroutine
000013B4                           610  *----------------------------------------
000013B4                           611  JSR_PUSH_EA_MODE_ID_IND_LONG
000013B4  4EB9 00001490            612    JSR   PUSH_EA_MODE_ID_IND_LONG
000013BA  6000 0002                613    BRA   JSR_FINISH
000013BE                           614  
000013BE                           615  JSR_FINISH
000013BE                           616  
000013BE  5478 1010                617    ADD.W   #2,LOOP_INC     * Increment the loop counter by 1 word
000013C2                           618  
000013C2  6000 0002                619    BRA     PRINT_OPCODE    * Always put this at the end
000013C6                           620  
000013C6                           621  *-------------------------------------------------------------------------------
000013C6                           622  *   PRINT OPCODE
000013C6                           623  *-------------------------------------------------------------------------------
000013C6                           624  
000013C6                           625  PRINT_OPCODE
000013C6                           626  
000013C6  2E78 100C                627    MOVE.L  STACK_BASE,SP * Put the stack back to where it was when we started
000013CA  31FC 0000 100A           628    MOVE.W  #0,PRINT_OPCODE_LOOP_INDEX
000013D0                           629  
000013D0                           630  PRINT_OPCODE_LOOP
000013D0                           631  
000013D0  3278 100A                632    MOVEA.W   PRINT_OPCODE_LOOP_INDEX,A1
000013D4                           633  
000013D4  B2F8 1008                634    CMPA.W   PRINT_COUNT,A1 * Check if we're done
000013D8  6C00 000C                635    BGE     PRINT_OPCODE_LOOP_FINISH
000013DC                           636  
000013DC  2467                     637    MOVE.L  -(SP),A2  * Pop the next item on the stack and put it in A1
000013DE  4ED2                     638    JMP     (A2)        * Jump to the routine we stored on the stack
000013E0                           639  
000013E0                           640  PRINT_OPCODE_LOOP_RETURN * Print methods come back here
000013E0                           641  
000013E0  5878 100A                642    ADD.W    #4,PRINT_OPCODE_LOOP_INDEX
000013E4                           643  
000013E4  60EA                     644    BRA     PRINT_OPCODE_LOOP
000013E6                           645  
000013E6                           646  PRINT_OPCODE_LOOP_FINISH
000013E6                           647  
000013E6  2E78 100C                648    MOVE.L  STACK_BASE,SP  * Return the stack to normal so we can RTS
000013EA                           649  
000013EA  4EB9 000017B2            650    JSR     PRINT_IMMEDIATE_NEWLINE
000013F0  4E75                     651    RTS
000013F2                           652  
000013F2                           653  *-------------------------------------------------------------------------------
000013F2                           654  
000013F2                           655  
000013F2                           656  
000013F2                           657  
000013F2                           658  
000013F2                           659  
000013F2                           660  
000013F2                           661  
000013F2                           662  
000013F2                           663  
000013F2                           664  *-------------------------------------------------------------------------------
000013F2                           665  *     _______    ________
000013F2                           666  *    |\  ___ \  |\   __  \
000013F2                           667  *    \ \   __/| \ \  \|\  \
000013F2                           668  *     \ \  \_|/__\ \   __  \
000013F2                           669  *      \ \  \_|\ \\ \  \ \  \
000013F2                           670  *       \ \_______\\ \__\ \__\
000013F2                           671  *        \|_______| \|__|\|__|
000013F2                           672  *
000013F2                           673  *-------------------------------------------------------------------------------
000013F2                           674  
000013F2                           675  *-------------------------------------------------------------------------------
000013F2                           676  *
000013F2                           677  *       PUSH EFFECTIVE ADDRESS MODE IDENTIFIER
000013F2                           678  *
000013F2                           679  * Determines the addressing mode of the effective address. Used for opcodes
000013F2                           680  * with the last five bits dedicated to the effective address.
000013F2                           681  *
000013F2                           682  * TODO: Implement a counter for how many prints we've made
000013F2                           683  *
000013F2                           684  *________________________________________
000013F2                           685  * Register Use Summary:
000013F2                           686  *
000013F2                           687  * D0: LOCAL VARIABLE - low byte of opcode
000013F2                           688  * D7: CONST PARAMETER - The current opcode word
000013F2                           689  *
000013F2                           690  * A4: LOCAL VARIABLE - RTS value temporary storage - must be swapped
000013F2                           691  * A5: LOCAL VARIABLE - Print Label to be pushed to stack
000013F2                           692  *
000013F2                           693  *-------------------------------------------------------------------------------
000013F2                           694  PUSH_EA_MODE_ID
000013F2                           695  
000013F2                           696  
000013F2                           697  * ---- Input Processing ----
000013F2                           698  
000013F2  1007                     699      MOVE.B  D7,D0   * Put opcode in D0
000013F4  C03C 0038                700      AND.B   #$38,D0 * Mask D0 with 0111000 to get MODE bits only
000013F8  E600                     701      ASR.B   #3,D0   * Shift the result so D0 ranges between 000 and 111
000013FA                           702  
000013FA                           703  
000013FA                           704  * ---- Branching Block ----
000013FA                           705  
000013FA  B03C 0000                706      CMP.B   #0,D0           *000 -> Register
000013FE  6700 002E                707      BEQ     PUSH_EA_MODE_ID_DN
00001402  B03C 0001                708      CMP.B   #1,D0           *001 -> Address Register
00001406  6700 0030                709      BEQ     PUSH_EA_MODE_ID_AN
0000140A  B03C 0002                710      CMP.B   #2,D0           *010 -> Address Register   Indirect
0000140E  6700 0032                711      BEQ     PUSH_EA_MODE_ID_AN_INDIRECT
00001412  B03C 0003                712      CMP.B   #3,D0           *011 -> Address Register  (Indirect)+
00001416  6700 0034                713      BEQ     PUSH_EA_MODE_ID_AN_POST_INC
0000141A  B03C 0004                714      CMP.B   #4,D0           *100 -> Address Register -(Indirect)
0000141E  6700 0036                715      BEQ     PUSH_EA_MODE_ID_AN_PRE_DEC
00001422  B03C 0007                716      CMP.B   #7,D0           *111 -> All Data Operations
00001426  6700 0038                717      BEQ     PUSH_EA_MODE_ID_ELSE
0000142A                           718  
0000142A  6000 0352                719      BRA     PRINT_ILLEGAL
0000142E                           720  
0000142E                           721  *________________________________________
0000142E                           722  * Load Register Print Label
0000142E                           723  *----------------------------------------
0000142E                           724  PUSH_EA_MODE_ID_DN
0000142E  4BF9 000015F8            725      LEA     PRINT_EA_MODE_ID_DN,A5
00001434  6000 0076                726      BRA     PUSH_EA_MODE_ID_FINISH
00001438                           727  
00001438                           728  *________________________________________
00001438                           729  * Load Address Register Print Label
00001438                           730  *----------------------------------------
00001438                           731  PUSH_EA_MODE_ID_AN
00001438  4BF9 00001616            732      LEA     PRINT_EA_MODE_ID_AN,A5
0000143E  6000 006C                733      BRA     PUSH_EA_MODE_ID_FINISH
00001442                           734  
00001442                           735  *________________________________________
00001442                           736  * Load (Address Register) Print Label
00001442                           737  *----------------------------------------
00001442                           738  PUSH_EA_MODE_ID_AN_INDIRECT
00001442  4BF9 00001634            739      LEA     PRINT_EA_MODE_ID_AN_INDIRECT,A5
00001448  6000 0062                740      BRA     PUSH_EA_MODE_ID_FINISH
0000144C                           741  
0000144C                           742  *________________________________________
0000144C                           743  * Load (Address Register)+ Print Label
0000144C                           744  *----------------------------------------
0000144C                           745  PUSH_EA_MODE_ID_AN_POST_INC
0000144C  4BF9 0000166A            746      LEA     PRINT_EA_MODE_ID_AN_POST_INC,A5
00001452  6000 0058                747      BRA     PUSH_EA_MODE_ID_FINISH
00001456                           748  
00001456                           749  *________________________________________
00001456                           750  * Load -(Address Register) Print Label
00001456                           751  *----------------------------------------
00001456                           752  PUSH_EA_MODE_ID_AN_PRE_DEC
00001456  4BF9 000016AC            753      LEA     PRINT_EA_MODE_ID_AN_PRE_DEC,A5
0000145C  6000 004E                754      BRA     PUSH_EA_MODE_ID_FINISH
00001460                           755  
00001460                           756  *________________________________________
00001460                           757  * Handle Data Branching Logic
00001460                           758  *----------------------------------------
00001460                           759  PUSH_EA_MODE_ID_ELSE
00001460  1007                     760      MOVE.B  D7,D0
00001462  C03C 0007                761      AND.B   #7,D0
00001466                           762  
00001466  B03C 0000                763      CMP.B   #0,D0
0000146A  6700 0016                764      BEQ     PUSH_EA_MODE_ID_IND_SHORT
0000146E                           765  
0000146E  B03C 0001                766      CMP.B   #1,D0
00001472  6700 001C                767      BEQ     PUSH_EA_MODE_ID_IND_LONG
00001476                           768  
00001476  B03C 0004                769      CMP.B   #4,D0
0000147A  6700 0022                770      BEQ     PUSH_EA_MODE_ID_ABS_DATA
0000147E                           771  
0000147E  6000 02FE                772      BRA     PRINT_ILLEGAL
00001482                           773  
00001482                           774  PUSH_EA_MODE_ID_IND_SHORT
00001482  4BF9 000016EE            775      LEA     PRINT_EA_MODE_ID_IND_SHORT,A5
00001488  5878 1010                776      ADD.W           #4, LOOP_INC * Adjust the Loop increment to skip the data
0000148C  6000 001E                777      BRA     PUSH_EA_MODE_ID_FINISH
00001490                           778  
00001490                           779  PUSH_EA_MODE_ID_IND_LONG
00001490  4BF9 0000170E            780      LEA     PRINT_EA_MODE_ID_IND_LONG,A5
00001496  5078 1010                781      ADD.W           #8,LOOP_INC * Adjust the Loop increment to skip the data
0000149A  6000 0010                782      BRA     PUSH_EA_MODE_ID_FINISH
0000149E                           783  
0000149E                           784  PUSH_EA_MODE_ID_ABS_DATA
0000149E  4BF9 00001728            785      LEA     PRINT_EA_MODE_ID_ABS_DATA,A5
000014A4  5078 1010                786      ADD.W           #8,LOOP_INC * Adjust the Loop increment to skip the data
000014A8  6000 0002                787      BRA     PUSH_EA_MODE_ID_FINISH
000014AC                           788  
000014AC                           789  *________________________________________
000014AC                           790  PUSH_EA_MODE_ID_FINISH
000014AC  2857                     791      MOVEA.L         (SP),A4 * Store the value we're going to RTS to
000014AE  588F                     792      ADD.L           #4,SP   * Move the stack pointer down to the RTS value
000014B0  2F0D                     793      MOVE.L          A5,-(SP)    * Overwrite the RTS value with the print label
000014B2  2F0C                     794      MOVE.L          A4,-(SP)    * Push the RTS so we can return like normal
000014B4                           795  
000014B4  5878 1008                796      ADD.W           #4,PRINT_COUNT
000014B8                           797  
000014B8  4E75                     798      RTS
000014BA                           799  
000014BA                           800  *-------------------------------------------------------------------------------
000014BA                           801  *                 ________  ___       __   ___
000014BA                           802  *                |\   __  \|\  \     |\  \|\  \
000014BA                           803  *                \ \  \|\ /\ \  \    \ \  \ \  \
000014BA                           804  *                 \ \   __  \ \  \  __\ \  \ \  \
000014BA                           805  *                  \ \  \|\  \ \  \|\__\_\  \ \  \____
000014BA                           806  *                   \ \_______\ \____________\ \_______\
000014BA                           807  *                    \|_______|\|____________|\|_______|
000014BA                           808  *
000014BA                           809  
000014BA                           810  *-------------------------------------------------------------------------------
000014BA                           811  
000014BA                           812  *-------------------------------------------------------------------------------
000014BA                           813  *
000014BA                           814  *       PUSH BYTE, WORD, OR LONG
000014BA                           815  *
000014BA                           816  * TODO: Implement a counter for how many prints we've made
000014BA                           817  *________________________________________
000014BA                           818  * Register Use Summary:
000014BA                           819  *
000014BA                           820  * D4: PARAMETER       - The size bits to print
000014BA                           821  * D7: CONST PARAMETER - The opcode word
000014BA                           822  *
000014BA                           823  * A4: LOCAL VARIABLE  - Temp RTS location
000014BA                           824  * A5: LOCAL VARIABLE  - Label for the print routine to store on the stack
000014BA                           825  *-------------------------------------------------------------------------------
000014BA                           826  PUSH_BWL
000014BA                           827  
000014BA                           828  * ---- Branching Block ----
000014BA                           829  
000014BA  B83C 0000                830      CMP.B           #0,D4       *00 -> Byte
000014BE  6700 0016                831      BEQ             PUSH_BWL_BYTE
000014C2  B83C 0001                832      CMP.B           #1,D4       *01 -> Word
000014C6  6700 0018                833      BEQ             PUSH_BWL_WORD
000014CA  B83C 0003                834      CMP.B           #3,D4       *10 -> Long
000014CE  6700 001A                835      BEQ             PUSH_BWL_LONG
000014D2                           836  
000014D2  6000 02AA                837      BRA             PRINT_ILLEGAL
000014D6                           838  
000014D6                           839  *________________________________________
000014D6                           840  * Load Byte Print Label
000014D6                           841  *----------------------------------------
000014D6                           842  PUSH_BWL_BYTE
000014D6  4BF9 000015C8            843      LEA             PRINT_BYTE_DESIGNATOR,A5
000014DC  6000 0016                844      BRA             PUSH_BWL_FINISH
000014E0                           845  *________________________________________
000014E0                           846  * Load Word Print Label
000014E0                           847  *----------------------------------------
000014E0                           848  PUSH_BWL_WORD
000014E0  4BF9 000015D8            849      LEA             PRINT_WORD_DESIGNATOR,A5
000014E6  6000 000C                850      BRA             PUSH_BWL_FINISH
000014EA                           851  
000014EA                           852  *________________________________________
000014EA                           853  * Load Long Print Label
000014EA                           854  *----------------------------------------
000014EA                           855  PUSH_BWL_LONG
000014EA  4BF9 000015E8            856      LEA             PRINT_LONG_DESIGNATOR,A5
000014F0  6000 0002                857      BRA             PUSH_BWL_FINISH
000014F4                           858  
000014F4                           859  *________________________________________
000014F4                           860  PUSH_BWL_FINISH
000014F4                           861  
000014F4  2857                     862      MOVEA.L         (SP),A4 * Store the value we're going to RTS to
000014F6  588F                     863      ADD.L           #4,SP   * Move the stack pointer down to the RTS value
000014F8  2F0D                     864      MOVE.L          A5,-(SP)    * Overwrite the RTS value with the print label
000014FA  2F0C                     865      MOVE.L          A4,-(SP)    * Push the RTS so we can return like normal
000014FC                           866  
000014FC  5878 1008                867      ADD.W           #4,PRINT_COUNT
00001500                           868  
00001500  4E75                     869      RTS
00001502                           870  
00001502                           871  
00001502                           872  *-------------------------------------------------------------------------------
00001502                           873  *     ________   ________   ___   ________    _________
00001502                           874  *    |\   __  \ |\   __  \ |\  \ |\   ___  \ |\___   ___\
00001502                           875  *    \ \  \|\  \\ \  \|\  \\ \  \\ \  \\ \  \\|___ \  \_|
00001502                           876  *     \ \   ____\\ \   _  _\\ \  \\ \  \\ \  \    \ \  \
00001502                           877  *      \ \  \___| \ \  \\  \|\ \  \\ \  \\ \  \    \ \  \
00001502                           878  *       \ \__\     \ \__\\ _\ \ \__\\ \__\\ \__\    \ \__\
00001502                           879  *        \|__|      \|__|\|__| \|__| \|__| \|__|     \|__|
00001502                           880  *
00001502                           881  *-------------------------------------------------------------------------------
00001502                           882  *-------------------------------------------------------------------------------
00001502                           883  *
00001502                           884  *       PRINT DATA1_WORD
00001502                           885  *________________________________________
00001502                           886  * Register Use Summary:
00001502                           887  *
00001502                           888  * D0: LOCAL VARIABLE  - Trap task designator
00001502                           889  *
00001502                           890  * D1: LOCAL VARIABLE  - DATA1 local copy
00001502                           891  *
00001502                           892  * D2: LOCAL VARIABLE  - Base in which to print
00001502                           893  *
00001502                           894  * A1: LOCAL VARIABLE  - String address
00001502                           895  *-------------------------------------------------------------------------------
00001502                           896  PRINT_DATA1_LONG
00001502  2238 1016                897      MOVE.L          DATA1,D1
00001506  700F                     898      MOVEQ           #15,D0
00001508  7410                     899      MOVEQ           #16,D2
0000150A  4E4F                     900      TRAP            #15
0000150C                           901          
0000150C                           902  *-------------------------------------------------------------------------------
0000150C                           903  *
0000150C                           904  *       PRINT DATA1_WORD
0000150C                           905  *________________________________________
0000150C                           906  * Register Use Summary:
0000150C                           907  *
0000150C                           908  * D0: LOCAL VARIABLE  - Trap task designator
0000150C                           909  *
0000150C                           910  * D1: LOCAL VARIABLE  - DATA1 local copy
0000150C                           911  *
0000150C                           912  * D2: LOCAL VARIABLE  - Base in which to print
0000150C                           913  *
0000150C                           914  * A1: LOCAL VARIABLE  - String address
0000150C                           915  *-------------------------------------------------------------------------------
0000150C                           916  PRINT_DATA1_WORD
0000150C  2238 1016                917      MOVE.L          DATA1,D1
00001510  4841                     918      SWAP            D1              * We only want the upper word
00001512  C27C FFFF                919      AND             #$0000FFFF,D1   * Bit mask for upper word
00001516  700F                     920      MOVEQ           #15,D0
00001518  7410                     921      MOVEQ           #16,D2
0000151A  4E4F                     922      TRAP            #15
0000151C                           923          
0000151C                           924  *-------------------------------------------------------------------------------
0000151C                           925  *
0000151C                           926  *       PRINT BGT
0000151C                           927  *________________________________________
0000151C                           928  * Register Use Summary:
0000151C                           929  *
0000151C                           930  * D0: LOCAL VARIABLE  - Trap task designator
0000151C                           931  *
0000151C                           932  * A1: LOCAL VARIABLE  - String address
0000151C                           933  *-------------------------------------------------------------------------------
0000151C                           934  PRINT_BGT
0000151C  43F9 00001A63            935      LEA             STRING_BGT,A1   * Load "BGT" into A1
00001522  103C 000E                936      MOVE.B          #14,D0      * Set trap task to String
00001526  4E4F                     937      TRAP            #15         * Print "BGT "
00001528  6000 FEB6                938      BRA             PRINT_OPCODE_LOOP_RETURN
0000152C                           939  
0000152C                           940  *-------------------------------------------------------------------------------
0000152C                           941  *
0000152C                           942  *       PRINT BLE
0000152C                           943  *________________________________________
0000152C                           944  * Register Use Summary:
0000152C                           945  *
0000152C                           946  * D0: LOCAL VARIABLE  - Trap task designator
0000152C                           947  *
0000152C                           948  * A1: LOCAL VARIABLE  - String address
0000152C                           949  *-------------------------------------------------------------------------------
0000152C                           950  PRINT_BLE
0000152C  43F9 00001A59            951      LEA             STRING_BLE,A1   * Load "BLE" into A1
00001532  103C 000E                952      MOVE.B          #14,D0      * Set trap task to String
00001536  4E4F                     953      TRAP            #15         * Print "BLE "
00001538  6000 FEA6                954      BRA             PRINT_OPCODE_LOOP_RETURN
0000153C                           955  
0000153C                           956  *-------------------------------------------------------------------------------
0000153C                           957  *
0000153C                           958  *       PRINT BEQ
0000153C                           959  *________________________________________
0000153C                           960  * Register Use Summary:
0000153C                           961  *
0000153C                           962  * D0: LOCAL VARIABLE  - Trap task designator
0000153C                           963  *
0000153C                           964  * A1: LOCAL VARIABLE  - String address
0000153C                           965  *-------------------------------------------------------------------------------
0000153C                           966  PRINT_BEQ
0000153C  43F9 00001A54            967      LEA             STRING_BEQ,A1   * Load "BEQ" into A1
00001542  103C 000E                968      MOVE.B          #14,D0      * Set trap task to String
00001546  4E4F                     969      TRAP            #15         * Print "BEQ "
00001548  6000 FE96                970      BRA             PRINT_OPCODE_LOOP_RETURN
0000154C                           971  
0000154C                           972  
0000154C                           973  *-------------------------------------------------------------------------------
0000154C                           974  *
0000154C                           975  *       PRINT BRA
0000154C                           976  *________________________________________
0000154C                           977  * Register Use Summary:
0000154C                           978  *
0000154C                           979  * D0: LOCAL VARIABLE  - Trap task designator
0000154C                           980  *
0000154C                           981  * A1: LOCAL VARIABLE  - String address
0000154C                           982  *-------------------------------------------------------------------------------
0000154C                           983  PRINT_BRA
0000154C  43F9 00001A5E            984      LEA             STRING_BRA,A1   * Load "BRA" into A1
00001552  103C 000E                985      MOVE.B          #14,D0      * Set trap task to String
00001556  4E4F                     986      TRAP            #15         * Print "BRA "
00001558  6000 FE86                987      BRA             PRINT_OPCODE_LOOP_RETURN
0000155C                           988  
0000155C                           989  
0000155C                           990  *-------------------------------------------------------------------------------
0000155C                           991  *
0000155C                           992  *       PRINT ADD
0000155C                           993  *________________________________________
0000155C                           994  * Register Use Summary:
0000155C                           995  *
0000155C                           996  * D0: LOCAL VARIABLE  - Trap task designator
0000155C                           997  *
0000155C                           998  * A1: LOCAL VARIABLE  - String address
0000155C                           999  *-------------------------------------------------------------------------------
0000155C                          1000  PRINT_ADD
0000155C  43F9 00001A4B           1001      LEA             STRING_ADD,A1   * Load "ADD" into A1
00001562  103C 000E               1002      MOVE.B          #14,D0      * Set trap task to String
00001566  4E4F                    1003      TRAP            #15         * Print "ADD "
00001568  6000 FE76               1004      BRA             PRINT_OPCODE_LOOP_RETURN
0000156C                          1005  
0000156C                          1006  
0000156C                          1007  *-------------------------------------------------------------------------------
0000156C                          1008  *
0000156C                          1009  *       PRINT ADDA
0000156C                          1010  *________________________________________
0000156C                          1011  * Register Use Summary:
0000156C                          1012  *
0000156C                          1013  * D0: LOCAL VARIABLE  - Trap task designator
0000156C                          1014  *
0000156C                          1015  * A1: LOCAL VARIABLE  - String address
0000156C                          1016  *-------------------------------------------------------------------------------
0000156C                          1017  PRINT_ADDA
0000156C  43F9 00001A4F           1018      LEA             STRING_ADDA,A1  * Load "ADDA" into A1
00001572  103C 000E               1019      MOVE.B          #14,D0      * Set trap task to String
00001576  4E4F                    1020      TRAP            #15         * Print "ADDA "
00001578  6000 FE66               1021      BRA             PRINT_OPCODE_LOOP_RETURN
0000157C                          1022  
0000157C                          1023  
0000157C                          1024  *-------------------------------------------------------------------------------
0000157C                          1025  *
0000157C                          1026  *       PRINT MISC_NUMBER
0000157C                          1027  *________________________________________
0000157C                          1028  * Register Use Summary:
0000157C                          1029  *
0000157C                          1030  * D0: LOCAL VARIABLE  - Trap task designator
0000157C                          1031  *
0000157C                          1032  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
0000157C                          1033  *
0000157C                          1034  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
0000157C                          1035  *
0000157C                          1036  * A1: LOCAL VARIABLE  - String address
0000157C                          1037  *-------------------------------------------------------------------------------
0000157C                          1038  PRINT_MISC_NUMBER
0000157C  4241                    1039      CLR D1
0000157E                          1040  
0000157E  103C 000F               1041      MOVE.B  #15,D0
00001582  1239 00001A70           1042      MOVE.B  MISC_NUMBER,D1
00001588  143C 000A               1043      MOVE.B  #10,D2
0000158C  4E4F                    1044      TRAP #15
0000158E                          1045  
0000158E  6000 FE50               1046      BRA     PRINT_OPCODE_LOOP_RETURN
00001592                          1047  
00001592                          1048  *-------------------------------------------------------------------------------
00001592                          1049  *
00001592                          1050  *       PRINT MISC_NUMBER_AS_ADDRESS
00001592                          1051  *________________________________________
00001592                          1052  * Register Use Summary:
00001592                          1053  *
00001592                          1054  * D0: LOCAL VARIABLE  - Trap task designator
00001592                          1055  *
00001592                          1056  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
00001592                          1057  *
00001592                          1058  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
00001592                          1059  *
00001592                          1060  * A1: LOCAL VARIABLE  - String address
00001592                          1061  *-------------------------------------------------------------------------------
00001592                          1062  PRINT_MISC_NUMBER_AS_ADDRESS
00001592                          1063  
00001592  43F9 00001A26           1064      LEA             STRING_A,A1
00001598  103C 000E               1065      MOVE.B          #14,D0
0000159C  4E4F                    1066      TRAP            #15
0000159E                          1067  
0000159E  4240                    1068      CLR D0
000015A0  4281                    1069      CLR.L D1
000015A2  4242                    1070      CLR D2
000015A4                          1071  
000015A4  103C 000F               1072      MOVE.B  #15,D0
000015A8  1239 00001A70           1073      MOVE.B  MISC_NUMBER,D1
000015AE  143C 000A               1074      MOVE.B  #10,D2
000015B2  4E4F                    1075      TRAP #15
000015B4                          1076  
000015B4  6000 FE2A               1077      BRA     PRINT_OPCODE_LOOP_RETURN
000015B8                          1078  
000015B8                          1079  
000015B8                          1080  *-------------------------------------------------------------------------------
000015B8                          1081  *
000015B8                          1082  *       PRINT ADDQ
000015B8                          1083  *________________________________________
000015B8                          1084  * Register Use Summary:
000015B8                          1085  *
000015B8                          1086  * D0: LOCAL VARIABLE  - Trap task designator
000015B8                          1087  *
000015B8                          1088  * A1: LOCAL VARIABLE  - String address
000015B8                          1089  *-------------------------------------------------------------------------------
000015B8                          1090  PRINT_ADDQ
000015B8  43F9 00001A46           1091      LEA             STRING_ADDQ,A1  * Load "ADDQ" into A1
000015BE  103C 000E               1092      MOVE.B          #14,D0      * Set trap task to String
000015C2  4E4F                    1093      TRAP            #15         * Print ", "
000015C4  6000 FE1A               1094      BRA             PRINT_OPCODE_LOOP_RETURN
000015C8                          1095  
000015C8                          1096  
000015C8                          1097  *-------------------------------------------------------------------------------
000015C8                          1098  *
000015C8                          1099  *       PRINT BYTE DESIGNATOR
000015C8                          1100  *________________________________________
000015C8                          1101  * Register Use Summary:
000015C8                          1102  *
000015C8                          1103  * D0: LOCAL VARIABLE  - low byte of opcode
000015C8                          1104  * A1: LOCAL VARIABLE  - String address
000015C8                          1105  *-------------------------------------------------------------------------------
000015C8                          1106  PRINT_BYTE_DESIGNATOR
000015C8  43F9 00001A18           1107      LEA             STRING_BYTE_DESIGNATOR,A1
000015CE  103C 000E               1108      MOVE.B          #14,D0
000015D2  4E4F                    1109      TRAP            #15
000015D4  6000 FE0A               1110      BRA             PRINT_OPCODE_LOOP_RETURN
000015D8                          1111  
000015D8                          1112  *-------------------------------------------------------------------------------
000015D8                          1113  *
000015D8                          1114  *       PRINT WORD DESIGNATOR
000015D8                          1115  *________________________________________
000015D8                          1116  * Register Use Summary:
000015D8                          1117  *
000015D8                          1118  * D0: LOCAL VARIABLE  - low byte of opcode
000015D8                          1119  * A1: LOCAL VARIABLE  - String address
000015D8                          1120  *-------------------------------------------------------------------------------
000015D8                          1121  PRINT_WORD_DESIGNATOR
000015D8  43F9 00001A1C           1122      LEA             STRING_WORD_DESIGNATOR,A1
000015DE  103C 000E               1123      MOVE.B          #14,D0
000015E2  4E4F                    1124      TRAP            #15
000015E4  6000 FDFA               1125      BRA             PRINT_OPCODE_LOOP_RETURN
000015E8                          1126  
000015E8                          1127  *-------------------------------------------------------------------------------
000015E8                          1128  *
000015E8                          1129  *       PRINT LONG DESIGNATOR
000015E8                          1130  *________________________________________
000015E8                          1131  * Register Use Summary:
000015E8                          1132  *
000015E8                          1133  * D0: LOCAL VARIABLE  - low byte of opcode
000015E8                          1134  * A1: LOCAL VARIABLE  - String address
000015E8                          1135  *-------------------------------------------------------------------------------
000015E8                          1136  PRINT_LONG_DESIGNATOR
000015E8  43F9 00001A20           1137      LEA             STRING_LONG_DESIGNATOR,A1
000015EE  103C 000E               1138      MOVE.B          #14,D0
000015F2  4E4F                    1139      TRAP            #15
000015F4  6000 FDEA               1140      BRA             PRINT_OPCODE_LOOP_RETURN
000015F8                          1141  
000015F8                          1142  *-------------------------------------------------------------------------------
000015F8                          1143  *
000015F8                          1144  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - Dn REGISTER
000015F8                          1145  *
000015F8                          1146  * Prints "Dx, " where x ranges between 0 and 7. This is determined by masking
000015F8                          1147  * the last four bits of the current opcode stored in D7.
000015F8                          1148  *
000015F8                          1149  *________________________________________
000015F8                          1150  * Register Use Summary:
000015F8                          1151  *
000015F8                          1152  * D0: LOCAL VARIABLE  - Trap task designator
000015F8                          1153  * D1: LOCAL VARIABLE  - Dn Register number to display
000015F8                          1154  * D7: CONST PARAMETER - The opcode word
000015F8                          1155  *
000015F8                          1156  * A1: LOCAL VARIABLE  - String address
000015F8                          1157  *-------------------------------------------------------------------------------
000015F8                          1158  PRINT_EA_MODE_ID_DN
000015F8  43F9 00001A24           1159      LEA             STRING_D,A1     * Load "D" into A1
000015FE  103C 000E               1160      MOVE.B          #14,D0      * Set trap task to String
00001602  4E4F                    1161      TRAP            #15         * Print "D"
00001604                          1162  
00001604  4241                    1163      CLR             D1
00001606  1207                    1164      MOVE.B          D7,D1       * Get the lowest byte of the opcode
00001608  C23C 0007               1165      AND.B           #$7,D1      * Get the lowest four bits (register #)
0000160C  103C 0003               1166      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
00001610  4E4F                    1167      TRAP            #15         * Print the register MISC_NUMBER
00001612                          1168  
00001612  6000 FDCC               1169      BRA             PRINT_OPCODE_LOOP_RETURN
00001616                          1170  
00001616                          1171  *-------------------------------------------------------------------------------
00001616                          1172  *
00001616                          1173  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - ADDRESS REGISTER
00001616                          1174  *
00001616                          1175  * Prints "Ax, " where x ranges between 0 and 7. This is determined by masking
00001616                          1176  * the last four bits of the current opcode stored in D7.
00001616                          1177  *
00001616                          1178  *________________________________________
00001616                          1179  * Register Use Summary:
00001616                          1180  *
00001616                          1181  * D0: LOCAL VARIABLE  - Trap task designator
00001616                          1182  * D1: LOCAL VARIABLE  - Dn Register number to display
00001616                          1183  * D7: CONST PARAMETER - The opcode word
00001616                          1184  *
00001616                          1185  * A1: LOCAL VARIABLE  - String address
00001616                          1186  *-------------------------------------------------------------------------------
00001616                          1187  PRINT_EA_MODE_ID_AN
00001616  43F9 00001A26           1188      LEA             STRING_A,A1
0000161C  103C 000E               1189      MOVE.B          #14,D0
00001620  4E4F                    1190      TRAP            #15
00001622                          1191  
00001622                          1192  
00001622  4241                    1193      CLR             D1
00001624  1207                    1194      MOVE.B          D7,D1       * Get the lowest byte of the opcode
00001626  C23C 0007               1195      AND.B           #$7,D1      * Get the lowest four bits (register #)
0000162A  103C 0003               1196      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
0000162E  4E4F                    1197      TRAP            #15         * Print the register MISC_NUMBER
00001630                          1198  
00001630  6000 FDAE               1199      BRA             PRINT_OPCODE_LOOP_RETURN
00001634                          1200  
00001634                          1201  
00001634                          1202  *-------------------------------------------------------------------------------
00001634                          1203  *
00001634                          1204  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - (ADDRESS REGISTER)
00001634                          1205  *
00001634                          1206  *________________________________________
00001634                          1207  * Register Use Summary:
00001634                          1208  *
00001634                          1209  * D0: LOCAL VARIABLE  - Trap task designator
00001634                          1210  * D1: LOCAL VARIABLE  - Dn Register MISC_NUMBER to display
00001634                          1211  * D7: CONST PARAMETER - The opcode word
00001634                          1212  *
00001634                          1213  * A1: LOCAL VARIABLE  - String address
00001634                          1214  *-------------------------------------------------------------------------------
00001634                          1215  PRINT_EA_MODE_ID_AN_INDIRECT
00001634  43F9 00001A2A           1216      LEA             STRING_LEFT_PAREN,A1
0000163A  103C 000E               1217      MOVE.B          #14,D0
0000163E  4E4F                    1218      TRAP            #15
00001640                          1219  
00001640  43F9 00001A26           1220      LEA             STRING_A,A1
00001646  103C 000E               1221      MOVE.B          #14,D0
0000164A  4E4F                    1222      TRAP            #15
0000164C                          1223  
0000164C  4241                    1224      CLR             D1
0000164E  1207                    1225      MOVE.B          D7,D1       * Get the lowest byte of the opcode
00001650  C23C 0007               1226      AND.B           #$7,D1      * Get the lowest four bits (register #)
00001654  103C 0003               1227      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
00001658  4E4F                    1228      TRAP            #15         * Print the register MISC_NUMBER
0000165A                          1229  
0000165A  43F9 00001A2C           1230      LEA             STRING_RIGHT_PAREN,A1
00001660  103C 000E               1231      MOVE.B          #14,D0
00001664  4E4F                    1232      TRAP            #15
00001666                          1233  
00001666  6000 FD78               1234      BRA             PRINT_OPCODE_LOOP_RETURN
0000166A                          1235  
0000166A                          1236  *-------------------------------------------------------------------------------
0000166A                          1237  *
0000166A                          1238  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - (ADDRESS REGISTER)+
0000166A                          1239  *
0000166A                          1240  *________________________________________
0000166A                          1241  * Register Use Summary:
0000166A                          1242  *
0000166A                          1243  * D0: LOCAL VARIABLE  - Trap task designator
0000166A                          1244  * D1: LOCAL VARIABLE  - Dn Register number to display
0000166A                          1245  * D7: CONST PARAMETER - The opcode word
0000166A                          1246  *
0000166A                          1247  * A1: LOCAL VARIABLE  - String address
0000166A                          1248  *-------------------------------------------------------------------------------
0000166A                          1249  PRINT_EA_MODE_ID_AN_POST_INC
0000166A  43F9 00001A2A           1250      LEA             STRING_LEFT_PAREN,A1
00001670  103C 000E               1251      MOVE.B          #14,D0
00001674  4E4F                    1252      TRAP            #15
00001676                          1253  
00001676  43F9 00001A26           1254      LEA             STRING_A,A1
0000167C  103C 000E               1255      MOVE.B          #14,D0
00001680  4E4F                    1256      TRAP            #15
00001682                          1257  
00001682  4241                    1258      CLR             D1
00001684  1207                    1259      MOVE.B          D7,D1       * Get the lowest byte of the opcode
00001686  C23C 0007               1260      AND.B           #$7,D1      * Get the lowest four bits (register #)
0000168A  103C 0003               1261      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
0000168E  4E4F                    1262      TRAP            #15         * Print the register MISC_NUMBER
00001690                          1263  
00001690  43F9 00001A2C           1264      LEA             STRING_RIGHT_PAREN,A1
00001696  103C 000E               1265      MOVE.B          #14,D0
0000169A  4E4F                    1266      TRAP            #15
0000169C                          1267  
0000169C  43F9 00001A2E           1268      LEA             STRING_PLUS,A1
000016A2  103C 000E               1269      MOVE.B          #14,D0
000016A6  4E4F                    1270      TRAP            #15
000016A8                          1271  
000016A8  6000 FD36               1272      BRA             PRINT_OPCODE_LOOP_RETURN
000016AC                          1273  
000016AC                          1274  
000016AC                          1275  
000016AC                          1276  *-------------------------------------------------------------------------------
000016AC                          1277  *
000016AC                          1278  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - -(ADDRESS REGISTER)
000016AC                          1279  *
000016AC                          1280  *________________________________________
000016AC                          1281  * Register Use Summary:
000016AC                          1282  *
000016AC                          1283  * D0: LOCAL VARIABLE  - Trap task designator
000016AC                          1284  * D1: LOCAL VARIABLE  - Dn Register number to display
000016AC                          1285  * D7: CONST PARAMETER - The opcode word
000016AC                          1286  *
000016AC                          1287  * A1: LOCAL VARIABLE  - String address
000016AC                          1288  *-------------------------------------------------------------------------------
000016AC                          1289  PRINT_EA_MODE_ID_AN_PRE_DEC
000016AC  43F9 00001A30           1290      LEA             STRING_MINUS,A1
000016B2  103C 000E               1291      MOVE.B          #14,D0
000016B6  4E4F                    1292      TRAP            #15
000016B8                          1293  
000016B8  43F9 00001A2A           1294      LEA             STRING_LEFT_PAREN,A1
000016BE  103C 000E               1295      MOVE.B          #14,D0
000016C2  4E4F                    1296      TRAP            #15
000016C4                          1297  
000016C4  43F9 00001A26           1298      LEA             STRING_A,A1
000016CA  103C 000E               1299      MOVE.B          #14,D0
000016CE  4E4F                    1300      TRAP            #15
000016D0                          1301  
000016D0  4241                    1302      CLR             D1
000016D2  1207                    1303      MOVE.B          D7,D1       * Get the lowest byte of the opcode
000016D4  C23C 0007               1304      AND.B           #$7,D1      * Get the lowest four bits (register #)
000016D8  103C 0003               1305      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
000016DC  4E4F                    1306      TRAP            #15         * Print the register MISC_NUMBER
000016DE                          1307  
000016DE  43F9 00001A2C           1308      LEA             STRING_RIGHT_PAREN,A1
000016E4  103C 000E               1309      MOVE.B          #14,D0
000016E8  4E4F                    1310      TRAP            #15
000016EA                          1311  
000016EA  6000 FCF4               1312      BRA             PRINT_OPCODE_LOOP_RETURN
000016EE                          1313  
000016EE                          1314  
000016EE                          1315  
000016EE                          1316  
000016EE                          1317  
000016EE                          1318  *-------------------------------------------------------------------------------
000016EE                          1319  *
000016EE                          1320  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - WORD DATA
000016EE                          1321  *
000016EE                          1322  *________________________________________
000016EE                          1323  * Register Use Summary:
000016EE                          1324  *
000016EE                          1325  * D0: LOCAL VARIABLE  - Trap task designator
000016EE                          1326  * D1: LOCAL VARIABLE  - Dn Register number to display
000016EE                          1327  * D7: CONST PARAMETER - The opcode word
000016EE                          1328  *
000016EE                          1329  * A1: LOCAL VARIABLE  - String address
000016EE                          1330  *-------------------------------------------------------------------------------
000016EE                          1331  PRINT_EA_MODE_ID_IND_SHORT
000016EE  43F9 00001A34           1332      LEA             STRING_DOLLAR,A1
000016F4  103C 000E               1333      MOVE.B          #14,D0
000016F8  4E4F                    1334      TRAP            #15
000016FA                          1335  
000016FA  2238 1016               1336      MOVE.L          DATA1,D1
000016FE  4841                    1337      SWAP            D1              * We only want the upper word
00001700  C27C FFFF               1338      AND             #$0000FFFF,D1   * Bit mask for upper word
00001704                          1339  
00001704  700F                    1340      MOVEQ           #15,D0
00001706  7410                    1341      MOVEQ           #16,D2
00001708  4E4F                    1342      TRAP            #15
0000170A                          1343  
0000170A  6000 FCD4               1344      BRA             PRINT_OPCODE_LOOP_RETURN
0000170E                          1345  
0000170E                          1346  *-------------------------------------------------------------------------------
0000170E                          1347  *
0000170E                          1348  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - LONG DATA
0000170E                          1349  *
0000170E                          1350  *________________________________________
0000170E                          1351  * Register Use Summary:
0000170E                          1352  *
0000170E                          1353  * D0: LOCAL VARIABLE  - Trap task designator
0000170E                          1354  * D1: LOCAL VARIABLE  - Dn Register number to display
0000170E                          1355  * D7: CONST PARAMETER - The opcode word
0000170E                          1356  *
0000170E                          1357  * A1: LOCAL VARIABLE  - String address
0000170E                          1358  *-------------------------------------------------------------------------------
0000170E                          1359  PRINT_EA_MODE_ID_IND_LONG
0000170E  43F9 00001A34           1360      LEA             STRING_DOLLAR,A1
00001714  103C 000E               1361      MOVE.B          #14,D0
00001718  4E4F                    1362      TRAP            #15
0000171A                          1363  
0000171A  2238 1016               1364      MOVE.L          DATA1,D1
0000171E  700F                    1365      MOVEQ           #15,D0
00001720  7410                    1366      MOVEQ           #16,D2
00001722  4E4F                    1367      TRAP            #15
00001724                          1368  
00001724  6000 FCBA               1369      BRA             PRINT_OPCODE_LOOP_RETURN
00001728                          1370  
00001728                          1371  *-------------------------------------------------------------------------------
00001728                          1372  *
00001728                          1373  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - ABSOLUTE
00001728                          1374  *
00001728                          1375  *________________________________________
00001728                          1376  * Register Use Summary:
00001728                          1377  *
00001728                          1378  * D0: LOCAL VARIABLE  - Trap task designator
00001728                          1379  * D1: LOCAL VARIABLE  - Dn Register number to display
00001728                          1380  * D7: CONST PARAMETER - The opcode word
00001728                          1381  *
00001728                          1382  * A1: LOCAL VARIABLE  - String address
00001728                          1383  *-------------------------------------------------------------------------------
00001728                          1384  PRINT_EA_MODE_ID_ABS_DATA
00001728  43F9 00001A32           1385      LEA             STRING_POUND,A1
0000172E  103C 000E               1386      MOVE.B          #14,D0
00001732  4E4F                    1387      TRAP            #15
00001734                          1388  
00001734  43F9 00001A34           1389      LEA             STRING_DOLLAR,A1
0000173A  103C 000E               1390      MOVE.B          #14,D0
0000173E  4E4F                    1391      TRAP            #15
00001740                          1392  
00001740  2238 1016               1393      MOVE.L          DATA1,D1
00001744  700F                    1394      MOVEQ           #15,D0
00001746  7410                    1395      MOVEQ           #16,D2
00001748  4E4F                    1396      TRAP            #15
0000174A                          1397  
0000174A  6000 FC94               1398      BRA             PRINT_OPCODE_LOOP_RETURN
0000174E                          1399  
0000174E                          1400  *-------------------------------------------------------------------------------
0000174E                          1401  *
0000174E                          1402  *       PRINT JSR
0000174E                          1403  *________________________________________
0000174E                          1404  * Register Use Summary:
0000174E                          1405  *
0000174E                          1406  * D0: LOCAL VARIABLE  - Trap task designator
0000174E                          1407  *
0000174E                          1408  * A1: LOCAL VARIABLE  - String address
0000174E                          1409  *-------------------------------------------------------------------------------
0000174E                          1410  PRINT_JSR
0000174E  43F9 00001A68           1411      LEA             STRING_JSR,A1   * Load "JSR" into A1
00001754  103C 000E               1412      MOVE.B          #14,D0      * Set trap task to String
00001758  4E4F                    1413      TRAP            #15
0000175A  6000 FC84               1414      BRA             PRINT_OPCODE_LOOP_RETURN
0000175E                          1415  
0000175E                          1416  
0000175E                          1417  *-------------------------------------------------------------------------------
0000175E                          1418  *
0000175E                          1419  *       PRINT FOURSPACE
0000175E                          1420  *________________________________________
0000175E                          1421  * Register Use Summary:
0000175E                          1422  *
0000175E                          1423  * D0: LOCAL VARIABLE  - Trap task designator
0000175E                          1424  *
0000175E                          1425  * A1: LOCAL VARIABLE  - String address
0000175E                          1426  *-------------------------------------------------------------------------------
0000175E                          1427  PRINT_FOURSPACE
0000175E  43F9 00001A36           1428      LEA             STRING_FOURSPACE,A1 * Load four spaces into A1
00001764  103C 000E               1429      MOVE.B          #14,D0              * Set trap task to String
00001768  4E4F                    1430      TRAP            #15
0000176A  6000 FC74               1431      BRA             PRINT_OPCODE_LOOP_RETURN
0000176E                          1432  
0000176E                          1433  
0000176E                          1434  *-------------------------------------------------------------------------------
0000176E                          1435  *
0000176E                          1436  *       PRINT COMMA
0000176E                          1437  *________________________________________
0000176E                          1438  * Register Use Summary:
0000176E                          1439  *
0000176E                          1440  * D0: LOCAL VARIABLE  - Trap task designator
0000176E                          1441  *
0000176E                          1442  * A1: LOCAL VARIABLE  - String address
0000176E                          1443  *-------------------------------------------------------------------------------
0000176E                          1444  PRINT_COMMA
0000176E  43F9 00001A28           1445      LEA             STRING_COMMA,A1 * Load the comma into A1
00001774  103C 000E               1446      MOVE.B          #14,D0              * Set trap task to String
00001778  4E4F                    1447      TRAP            #15
0000177A  6000 FC64               1448      BRA             PRINT_OPCODE_LOOP_RETURN
0000177E                          1449  
0000177E                          1450  *-------------------------------------------------------------------------------
0000177E                          1451  *
0000177E                          1452  *       PRINT ILLEGAL
0000177E                          1453  *
0000177E                          1454  * Incomplete implementation - final version will depend on opcode logic.
0000177E                          1455  * Currently clears stack entirely, future implementation may need to keep
0000177E                          1456  * some RTS addresses
0000177E                          1457  *
0000177E                          1458  * D7: RTS address (opcode shouldn't be necessary at this point)
0000177E                          1459  *-------------------------------------------------------------------------------
0000177E                          1460  PRINT_ILLEGAL       * INCOMPLETE *
0000177E  2E17                    1461      MOVE.L          (SP),D7
00001780                          1462  
00001780  2E7C 00000000           1463      MOVE.L          #0,SP
00001786  43F9 00001A10           1464      LEA             STRING_ILLEGAL,A1
0000178C  103C 000D               1465      MOVE.B          #13,D0
00001790  4E4F                    1466      TRAP            #15
00001792                          1467  
00001792  2E87                    1468      MOVE.L          D7,(SP)
00001794                          1469  
00001794  31FC 0002 1010          1470      MOVE.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
0000179A                          1471  
0000179A                          1472  
0000179A  4E75                    1473      RTS
0000179C                          1474  
0000179C                          1475  *--------------------------------------------------------------------------------
0000179C                          1476  * PRINTADDR SUBROUTINE
0000179C                          1477  *
0000179C                          1478  * Prints the memory address and some blank spaces before the disassembled
0000179C                          1479  * instruction is appended.
0000179C                          1480  *
0000179C                          1481  * Registers Used:
0000179C                          1482  *   D0: Trap task designator
0000179C                          1483  *   D1: Memory address to display
0000179C                          1484  * D2: Trap task numerical base (Hex = 16)
0000179C                          1485  *
0000179C                          1486  *
0000179C                          1487  * A1: Data memory location
0000179C                          1488  *
0000179C                          1489  *
0000179C                          1490  PRINTADDR
0000179C                          1491  
0000179C  2238 1012               1492      MOVE.L   LOOP_INDEX,D1 * Print the loop index (memory location)
000017A0  700F                    1493      MOVEQ    #15,D0
000017A2  7410                    1494      MOVEQ    #16,D2
000017A4                          1495  
000017A4  4E4F                    1496      TRAP     #15
000017A6                          1497  
000017A6  43F9 00001A36           1498      LEA      STRING_FOURSPACE,A1 * Print some spaces
000017AC  700E                    1499      MOVEQ      #14,D0
000017AE  4E4F                    1500      TRAP       #15
000017B0                          1501  
000017B0  4E75                    1502      RTS
000017B2                          1503  
000017B2                          1504  *--------------------------------------------------------------------------------
000017B2                          1505  * PRINT_IMMEDIATE_NEWLINE
000017B2                          1506  *
000017B2                          1507  * CANNOT PUSH TO STACK - Used to put a newline after each opcode
000017B2                          1508  *
000017B2                          1509  * Registers Used:
000017B2                          1510  *   D0: Trap task designator
000017B2                          1511  *   D1: Memory address to display
000017B2                          1512  *
000017B2                          1513  * A1: Data memory location
000017B2                          1514  *
000017B2                          1515  PRINT_IMMEDIATE_NEWLINE
000017B2                          1516  
000017B2  43F9 00001A3B           1517    LEA        STRING_NEWLINE,A1
000017B8  700E                    1518      MOVEQ      #14,D0
000017BA  4E4F                    1519      TRAP       #15
000017BC                          1520  
000017BC  4E75                    1521    RTS
000017BE                          1522  
000017BE                          1523  *-----------------------------------------------------------------
000017BE                          1524  * GET_INPUT
000017BE                          1525  *
000017BE                          1526  * Called before anything else, clears what it uses
000017BE                          1527  *-----------------------------------------------------------------
000017BE                          1528  GET_INPUT
000017BE                          1529  
000017BE  21FC 00000000 1000      1530      MOVE.L  #0,START_ADDR
000017C6  21FC 00000000 1004      1531      MOVE.L  #0,END_ADDR
000017CE                          1532  
000017CE  4243                    1533      CLR     D3
000017D0                          1534  
000017D0  43F9 00001956           1535      LEA     STRING_ENTER_START,A1
000017D6  103C 000D               1536      MOVE.B  #13,D0
000017DA  4E4F                    1537      TRAP    #15
000017DC                          1538  
000017DC  327C 0000               1539      MOVEA   #0,A1
000017E0  103C 0002               1540      MOVE.B  #2,D0
000017E4  4E4F                    1541      TRAP    #15
000017E6                          1542  
000017E6  4EB9 00001836           1543      JSR     STRING_TO_HEX
000017EC  21C3 1000               1544      MOVE.L  D3,START_ADDR
000017F0                          1545  
000017F0  4243                    1546      CLR     D3
000017F2                          1547  
000017F2  43F9 0000197D           1548      LEA     STRING_ENTER_END,A1
000017F8  103C 000D               1549      MOVE.B  #13,D0
000017FC  4E4F                    1550      TRAP    #15
000017FE                          1551  
000017FE  327C 0000               1552      MOVEA   #0,A1
00001802  103C 0002               1553      MOVE.B  #2,D0
00001806  4E4F                    1554      TRAP    #15
00001808                          1555  
00001808  4EB9 00001836           1556      JSR     STRING_TO_HEX
0000180E  21C3 1004               1557      MOVE.L  D3,END_ADDR
00001812                          1558  
00001812  2438 1000               1559      MOVE.L  START_ADDR,D2
00001816  B682                    1560      CMP.L   D2,D3
00001818  6D00 000C               1561      BLT     OUT_OF_ORDER
0000181C                          1562  
0000181C  4240                    1563      CLR     D0
0000181E  4241                    1564      CLR     D1
00001820  4242                    1565      CLR     D2
00001822  4243                    1566      CLR     D3
00001824                          1567  
00001824  4E75                    1568      RTS
00001826                          1569  
00001826                          1570  OUT_OF_ORDER
00001826                          1571  
00001826  43F9 000019E4           1572      LEA     STRING_OUT_OF_ORDER,A1
0000182C  103C 000D               1573      MOVE.B  #13,D0
00001830  4E4F                    1574      TRAP    #15
00001832                          1575  
00001832  4EF8 17BE               1576      JMP     GET_INPUT
00001836                          1577  
00001836                          1578  STRING_TO_HEX
00001836                          1579  
00001836  4242                    1580      CLR     D2
00001838  B23C 0000               1581      CMP.B   #0,D1
0000183C  6700 0012               1582      BEQ     STH_END
00001840  4EB9 0000186A           1583      JSR     STH_SET_VALUE
00001846  4EF8 1836               1584      JMP     STRING_TO_HEX
0000184A                          1585  
0000184A                          1586  STH_UPDATE
0000184A                          1587  
0000184A  5341                    1588      SUB.W   #1,D1
0000184C  5249                    1589      ADDA.W  #1,A1
0000184E  4E75                    1590      RTS
00001850                          1591  
00001850  4E75                    1592  STH_END     RTS
00001852                          1593  
00001852                          1594  STH_BAD_INPUT
00001852                          1595  
00001852  43F9 000019A2           1596      LEA     STRING_INVALID_INPUT,A1
00001858  103C 000D               1597      MOVE.B  #13,D0
0000185C  4E4F                    1598      TRAP    #15
0000185E                          1599  
0000185E  327C 0000               1600      MOVEA   #0,A1
00001862  103C 0002               1601      MOVE.B  #2,D0
00001866  4E4F                    1602      TRAP    #15
00001868                          1603  
00001868  4E75                    1604      RTS
0000186A                          1605  
0000186A                          1606  STH_SET_VALUE
0000186A                          1607  
0000186A  7400                    1608      MOVE.L  #$0,D2
0000186C  0C11 0030               1609      CMP.B   #$30,(A1)
00001870  6700 009C               1610      BEQ     STH_SHIFT_BITS
00001874                          1611  
00001874  7401                    1612      MOVE.L  #$1,D2
00001876  0C11 0031               1613      CMP.B   #$31,(A1)
0000187A  6700 0092               1614      BEQ     STH_SHIFT_BITS
0000187E                          1615  
0000187E  7402                    1616      MOVE.L  #$2,D2
00001880  0C11 0032               1617      CMP.B   #$32,(A1)
00001884  6700 0088               1618      BEQ     STH_SHIFT_BITS
00001888                          1619  
00001888  7403                    1620      MOVE.L  #$3,D2
0000188A  0C11 0033               1621      CMP.B   #$33,(A1)
0000188E  6700 007E               1622      BEQ     STH_SHIFT_BITS
00001892                          1623  
00001892  7404                    1624      MOVE.L  #$4,D2
00001894  0C11 0034               1625      CMP.B   #$34,(A1)
00001898  6700 0074               1626      BEQ     STH_SHIFT_BITS
0000189C                          1627  
0000189C  7405                    1628      MOVE.L  #$5,D2
0000189E  0C11 0035               1629      CMP.B   #$35,(A1)
000018A2  6700 006A               1630      BEQ     STH_SHIFT_BITS
000018A6                          1631  
000018A6  7406                    1632      MOVE.L  #$6,D2
000018A8  0C11 0036               1633      CMP.B   #$36,(A1)
000018AC  6700 0060               1634      BEQ     STH_SHIFT_BITS
000018B0                          1635  
000018B0  7407                    1636      MOVE.L  #$7,D2
000018B2  0C11 0037               1637      CMP.B   #$37,(A1)
000018B6  6700 0056               1638      BEQ     STH_SHIFT_BITS
000018BA                          1639  
000018BA  7408                    1640      MOVE.L  #$8,D2
000018BC  0C11 0038               1641      CMP.B   #$38,(A1)
000018C0  6700 004C               1642      BEQ     STH_SHIFT_BITS
000018C4                          1643  
000018C4  7409                    1644      MOVE.L  #$9,D2
000018C6  0C11 0039               1645      CMP.B   #$39,(A1)
000018CA  6700 0042               1646      BEQ     STH_SHIFT_BITS
000018CE                          1647  
000018CE  740A                    1648      MOVE.L  #$A,D2
000018D0  0C11 0041               1649      CMP.B   #$41,(A1)
000018D4  6700 0038               1650      BEQ     STH_SHIFT_BITS
000018D8                          1651  
000018D8  740B                    1652      MOVE.L  #$B,D2
000018DA  0C11 0042               1653      CMP.B   #$42,(A1)
000018DE  6700 002E               1654      BEQ     STH_SHIFT_BITS
000018E2                          1655  
000018E2  740C                    1656      MOVE.L  #$C,D2
000018E4  0C11 0043               1657      CMP.B   #$43,(A1)
000018E8  6700 0024               1658      BEQ     STH_SHIFT_BITS
000018EC                          1659  
000018EC  740D                    1660      MOVE.L  #$D,D2
000018EE  0C11 0044               1661      CMP.B   #$44,(A1)
000018F2  6700 001A               1662      BEQ     STH_SHIFT_BITS
000018F6                          1663  
000018F6  740E                    1664      MOVE.L  #$E,D2
000018F8  0C11 0045               1665      CMP.B   #$45,(A1)
000018FC  6700 0010               1666      BEQ     STH_SHIFT_BITS
00001900                          1667  
00001900  740F                    1668      MOVE.L  #$F,D2
00001902  0C11 0046               1669      CMP.B   #$46,(A1)
00001906  6700 0006               1670      BEQ     STH_SHIFT_BITS
0000190A                          1671  
0000190A  4EF8 1852               1672      JMP     STH_BAD_INPUT
0000190E                          1673  
0000190E                          1674  STH_SHIFT_BITS
0000190E                          1675  
0000190E  B23C 0001               1676      CMP.B   #1,D1
00001912  6700 0038               1677      BEQ     STH_INCREASE_VALUE
00001916                          1678  
00001916  E99A                    1679      ROL.L   #4,D2
00001918  B23C 0002               1680      CMP.B   #2,D1
0000191C  6700 002E               1681      BEQ     STH_INCREASE_VALUE
00001920                          1682  
00001920  E99A                    1683      ROL.L   #4,D2
00001922  B23C 0003               1684      CMP.B   #3,D1
00001926  6700 0024               1685      BEQ     STH_INCREASE_VALUE
0000192A                          1686  
0000192A  E99A                    1687      ROL.L   #4,D2
0000192C  B23C 0004               1688      CMP.B   #4,D1
00001930  6700 001A               1689      BEQ     STH_INCREASE_VALUE
00001934                          1690  
00001934  E99A                    1691      ROL.L   #4,D2
00001936  B23C 0005               1692      CMP.B   #5,D1
0000193A  6700 0010               1693      BEQ     STH_INCREASE_VALUE
0000193E                          1694  
0000193E  E99A                    1695      ROL.L   #4,D2
00001940  B23C 0006               1696      CMP.B   #6,D1
00001944  6700 0006               1697      BEQ     STH_INCREASE_VALUE
00001948                          1698  
00001948  4EF8 1852               1699      JMP     STH_BAD_INPUT
0000194C                          1700  
0000194C                          1701  STH_INCREASE_VALUE
0000194C                          1702  
0000194C  D682                    1703      ADD.L   D2,D3
0000194E  4EF8 184A               1704      JMP     STH_UPDATE
00001952                          1705  
00001952                          1706  * END OF GET_INPUT -----------------------------------------------
00001952                          1707  
00001952  FFFF FFFF               1708      SIMHALT
00001956                          1709  
00001956                          1710  *-------------------------------------------------------------------------------
00001956                          1711  *                ________  ________  _________  ________
00001956                          1712  *               |\   ___ \|\   __  \|\___   ___\\   __  \
00001956                          1713  *               \ \  \_|\ \ \  \|\  \|___ \  \_\ \  \|\  \
00001956                          1714  *                \ \  \ \\ \ \   __  \   \ \  \ \ \   __  \
00001956                          1715  *                 \ \  \_\\ \ \  \ \  \   \ \  \ \ \  \ \  \
00001956                          1716  *                  \ \_______\ \__\ \__\   \ \__\ \ \__\ \__\
00001956                          1717  *                   \|_______|\|__|\|__|    \|__|  \|__|\|__|
00001956                          1718  *
00001956                          1719  *-------------------------------------------------------------------------------
00001956                          1720  
00001956                          1721  
00001956                          1722  * Data for GET_INPUT
00001956= 50 6C 65 61 73 65 ...   1723  STRING_ENTER_START      DC.B    'Please enter a start address, eg. 4A6C',0
0000197D= 50 6C 65 61 73 65 ...   1724  STRING_ENTER_END        DC.B    'Please enter a end address, eg. 5D3F',0
000019A2= 49 4E 56 41 4C 49 ...   1725  STRING_INVALID_INPUT    DC.B    'INVALID INPUT, must be a valid EASy68k hexidecimal memory address',0
000019E4= 53 74 61 72 74 20 ...   1726  STRING_OUT_OF_ORDER     DC.B    'Start address must be less than end address',0
00001A10                          1727  
00001A10                          1728  
00001A10= 49 4C 4C 45 47 41 ...   1729  STRING_ILLEGAL              DC.B    'ILLEGAL',0
00001A18= 2E 42 20 00             1730  STRING_BYTE_DESIGNATOR      DC.B    '.B ',0
00001A1C= 2E 57 20 00             1731  STRING_WORD_DESIGNATOR      DC.B    '.W ',0
00001A20= 2E 4C 20 00             1732  STRING_LONG_DESIGNATOR      DC.B    '.L ',0
00001A24= 44 00                   1733  STRING_D                    DC.B    'D',0
00001A26= 41 00                   1734  STRING_A                    DC.B    'A',0
00001A28= 2C 00                   1735  STRING_COMMA                DC.B    ',',0
00001A2A= 28 00                   1736  STRING_LEFT_PAREN           DC.B    '(',0
00001A2C= 29 00                   1737  STRING_RIGHT_PAREN          DC.B    ')',0
00001A2E= 2B 00                   1738  STRING_PLUS                 DC.B    '+',0
00001A30= 2D 00                   1739  STRING_MINUS                DC.B    '-',0
00001A32= 23 00                   1740  STRING_POUND                DC.B    '#',0
00001A34= 24 00                   1741  STRING_DOLLAR               DC.B    '$',0
00001A36                          1742  
00001A36= 20 20 20 20 00          1743  STRING_FOURSPACE            DC.B    '    ',0
00001A3B= 0D 0A 00                1744  STRING_NEWLINE              DC.B    '',CR,LF,0
00001A3E                          1745  
00001A3E= 4E 4F 50 00             1746  STRING_NOP                  DC.B    'NOP',0
00001A42= 52 54 53 00             1747  STRING_RTS                  DC.B    'RTS',0
00001A46= 41 44 44 51 00          1748  STRING_ADDQ                 DC.B    'ADDQ',0
00001A4B= 41 44 44 00             1749  STRING_ADD                  DC.B    'ADD',0
00001A4F= 41 44 44 41 00          1750  STRING_ADDA                 DC.B    'ADDA',0
00001A54= 42 45 51 20 00          1751  STRING_BEQ                  DC.B    'BEQ ',0
00001A59= 42 4C 45 20 00          1752  STRING_BLE                  DC.B    'BLE ',0
00001A5E= 42 52 41 20 00          1753  STRING_BRA                  DC.B    'BRA ',0
00001A63= 42 47 54 20 00          1754  STRING_BGT                  DC.B    'BGT ',0
00001A68= 4A 53 52 20 20 20 ...   1755  STRING_JSR                  DC.B    'JSR    ',0
00001A70                          1756  
00001A70                          1757  MISC_NUMBER  DS.B    1    * MISC_NUMBER to be printed
00001A72                          1758  MISC_OPCODE  DS.W    1
00001A74                          1759  MISC_REGISTER DS.B   1
00001A75                          1760  
00001A75                          1761  
00001A75                          1762  
00001A75                          1763      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 1284
ADDA                1206
ADDA_CONTINUE       124E
ADDA_L              122E
ADDA_W              123E
ADDQ                12FE
ADD_ADDA            11D8
ADD_ADDA_LOOP_ADD_W  11F2
ADD_ADDA_LOOP_NO_ADD  11F4
BCC                 1110
BCC_16              11A4
BCC_32              11BE
BCC_CONTINUE        117A
BCC_END             11C8
BEQ                 116A
BGT                 114A
BLE                 115A
BRA                 113A
BRANCHBLOCK         10AA
CR                  D
DATA1               1016
DATA2               101A
DONE                10A6
END_ADDR            1004
GET_INPUT           17BE
INITIALIZE          101E
JSR                 135A
JSR_EA_MODE_ELSE    1384
JSR_FINISH          13BE
JSR_PUSH_EA_MODE_ID_AN_INDIRECT  13A0
JSR_PUSH_EA_MODE_ID_IND_LONG  13B4
JSR_PUSH_EA_MODE_ID_IND_SHORT  13AA
LF                  A
LOOP_INC            1010
LOOP_INDEX          1012
MISC_NUMBER         1A70
MISC_OPCODE         1A72
MISC_REGISTER       1A74
NOP                 12CA
OPCODE_LOOP         1060
OUT_OF_ORDER        1826
PRINTADDR           179C
PRINT_ADD           155C
PRINT_ADDA          156C
PRINT_ADDQ          15B8
PRINT_BEQ           153C
PRINT_BGT           151C
PRINT_BLE           152C
PRINT_BRA           154C
PRINT_BYTE_DESIGNATOR  15C8
PRINT_COMMA         176E
PRINT_COUNT         1008
PRINT_DATA1_LONG    1502
PRINT_DATA1_WORD    150C
PRINT_EA_MODE_ID_ABS_DATA  1728
PRINT_EA_MODE_ID_AN  1616
PRINT_EA_MODE_ID_AN_INDIRECT  1634
PRINT_EA_MODE_ID_AN_POST_INC  166A
PRINT_EA_MODE_ID_AN_PRE_DEC  16AC
PRINT_EA_MODE_ID_DN  15F8
PRINT_EA_MODE_ID_IND_LONG  170E
PRINT_EA_MODE_ID_IND_SHORT  16EE
PRINT_FOURSPACE     175E
PRINT_ILLEGAL       177E
PRINT_IMMEDIATE_NEWLINE  17B2
PRINT_JSR           174E
PRINT_LONG_DESIGNATOR  15E8
PRINT_MISC_NUMBER   157C
PRINT_MISC_NUMBER_AS_ADDRESS  1592
PRINT_OPCODE        13C6
PRINT_OPCODE_LOOP   13D0
PRINT_OPCODE_LOOP_FINISH  13E6
PRINT_OPCODE_LOOP_INDEX  100A
PRINT_OPCODE_LOOP_RETURN  13E0
PRINT_WORD_DESIGNATOR  15D8
PUSH_BWL            14BA
PUSH_BWL_BYTE       14D6
PUSH_BWL_FINISH     14F4
PUSH_BWL_LONG       14EA
PUSH_BWL_WORD       14E0
PUSH_EA_MODE_ID     13F2
PUSH_EA_MODE_ID_ABS_DATA  149E
PUSH_EA_MODE_ID_AN  1438
PUSH_EA_MODE_ID_AN_INDIRECT  1442
PUSH_EA_MODE_ID_AN_POST_INC  144C
PUSH_EA_MODE_ID_AN_PRE_DEC  1456
PUSH_EA_MODE_ID_DN  142E
PUSH_EA_MODE_ID_ELSE  1460
PUSH_EA_MODE_ID_FINISH  14AC
PUSH_EA_MODE_ID_IND_LONG  1490
PUSH_EA_MODE_ID_IND_SHORT  1482
RESUME_ADD          11EC
RTS                 12E4
STACK_BASE          100C
START               101E
START_ADDR          1000
STH_BAD_INPUT       1852
STH_END             1850
STH_INCREASE_VALUE  194C
STH_SET_VALUE       186A
STH_SHIFT_BITS      190E
STH_UPDATE          184A
STRING_A            1A26
STRING_ADD          1A4B
STRING_ADDA         1A4F
STRING_ADDQ         1A46
STRING_BEQ          1A54
STRING_BGT          1A63
STRING_BLE          1A59
STRING_BRA          1A5E
STRING_BYTE_DESIGNATOR  1A18
STRING_COMMA        1A28
STRING_D            1A24
STRING_DOLLAR       1A34
STRING_ENTER_END    197D
STRING_ENTER_START  1956
STRING_FOURSPACE    1A36
STRING_ILLEGAL      1A10
STRING_INVALID_INPUT  19A2
STRING_JSR          1A68
STRING_LEFT_PAREN   1A2A
STRING_LONG_DESIGNATOR  1A20
STRING_MINUS        1A30
STRING_NEWLINE      1A3B
STRING_NOP          1A3E
STRING_OUT_OF_ORDER  19E4
STRING_PLUS         1A2E
STRING_POUND        1A32
STRING_RIGHT_PAREN  1A2C
STRING_RTS          1A42
STRING_TO_HEX       1836
STRING_WORD_DESIGNATOR  1A1C
