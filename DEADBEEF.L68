00001020 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 6/10/2020 10:12:08 PM

00000000                             1  *-------------------------------------------------------------------------------
00000000                             2  * Title      : PUSH_BWT / EA_MODE_ID Development
00000000                             3  * Written by : Ihsan Halimun, Camden Brewster, Matthew Munson
00000000                             4  * Created    : May 16th 2020
00000000                             5  * Last Edited: June 10th 2020
00000000                             6  *-------------------------------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  *-------------------------------------------------------------------------------
00001000                             9  *      ________   ___        ________   ________   ________   ___
00001000                            10  *     |\   ____\ |\  \      |\   __  \ |\   __  \ |\   __  \ |\  \
00001000                            11  *     \ \  \___| \ \  \     \ \  \|\  \\ \  \|\ /_\ \  \|\  \\ \  \
00001000                            12  *      \ \  \  ___\ \  \     \ \  \\\  \\ \   __  \\ \   __  \\ \  \
00001000                            13  *       \ \  \|\  \\ \  \____ \ \  \\\  \\ \  \|\  \\ \  \ \  \\ \  \____
00001000                            14  *        \ \_______\\ \_______\\ \_______\\ \_______\\ \__\ \__\\ \_______\
00001000                            15  *         \|_______| \|_______| \|_______| \|_______| \|__|\|__| \|_______|
00001000                            16  *-------------------------------------------------------------------------------
00001000                            17  
00001000                            18  START_ADDR   DS.L  1   *User defined memory start address
00001004                            19  END_ADDR     DS.L  1   *User defined memory end address
00001008                            20  
00001008  =0000000D                 21  CR    EQU   $0D
00001008  =0000000A                 22  LF    EQU   $0A
00001008                            23  
00001008                            24  * How many print statements are sitting in the stack:
00001008                            25  PRINT_COUNT              DS.W    1
0000100A                            26  
0000100A                            27  PRINT_OPCODE_LOOP_INDEX  DS.W    1   * The print loop index
0000100C                            28  STACK_BASE               DS.L    1   * Where the print calls start
00001010                            29  
00001010                            30  LOOP_INC       DS.W    1    * How many words to skip to find the next opcode
00001012                            31  LOOP_INDEX     DS.L    1    * The opcode loop's index
00001016                            32  
00001016                            33  
00001016                            34  DATA1          DS.L    1    * The first line of opcode data
0000101A                            35  DATA1_IN_USE   DS.W    1  * Boolean: Whether or not DATA1 is being used
0000101C                            36  
0000101C                            37  DATA2          DS.L    1    * The second line of opcode data
00001020                            38  
00001020                            39  START:
00001020                            40  
00001020                            41  *-------------------------------------------------------------------------------
00001020                            42  *                ________  ________  ________  _______
00001020                            43  *               |\   ____\|\   __  \|\   ___ \|\  ___ \
00001020                            44  *               \ \  \___|\ \  \|\  \ \  \_|\ \ \   __/|
00001020                            45  *                \ \  \    \ \  \\\  \ \  \ \\ \ \  \_|/__
00001020                            46  *                 \ \  \____\ \  \\\  \ \  \_\\ \ \  \_|\ \
00001020                            47  *                  \ \_______\ \_______\ \_______\ \_______\
00001020                            48  *                   \|_______|\|_______|\|_______|\|_______|
00001020                            49  *
00001020                            50  *-------------------------------------------------------------------------------
00001020                            51  
00001020                            52  *-------------------------------------------------------------------------------
00001020                            53  INITIALIZE
00001020                            54  * ------ ASL TEST ------
00001020  31FC E940 413A            55     MOVE.W     #$E940,$413A  * ASL   #8,D0
00001026  31FC E1D1 413C            56     MOVE.W     #$E1D1,$413C  * ASL   (A1)
0000102C  31FC E1C9 413E            57     MOVE.W     #$E1C9,$413E  * ASL   A1 (ILLEGAL)
00001032                            58  
00001032                            59  * ------ ASR TEST ------
00001032  31FC E061 4140            60     MOVE.W     #$E061,$4140  * ASR   D0,D1
00001038  31FC E0D2 4142            61     MOVE.W     #$E0D2,$4142  * ASR   (A2)
0000103E  31FC E0CA 4144            62     MOVE.W     #$E0CA,$4144  * ASR   A2 (ILLEGAL)
00001044                            63  
00001044                            64  * ------ LSL TEST ------
00001044  31FC EB49 4146            65     MOVE.W     #$EB49,$4146  * LSL   #5,D1
0000104A  31FC E3E3 4148            66     MOVE.W     #$E3E3,$4148  * LSL   -(A3)
00001050  31FC E3CB 414A            67     MOVE.W     #$E3CB,$414A  * LSL   A3 (ILLEGAL)
00001056                            68  
00001056                            69  * ------ LSR TEST ------
00001056  31FC E26A 414C            70     MOVE.W     #$E26A,$414C  * LSR   D1,S2
0000105C  31FC E2DC 414E            71     MOVE.W     #$E2DC,$414E  * LSR   (A4)+
00001062  31FC E0D2 4150            72     MOVE.W     #$E0D2,$4150  * LSR   A4 (ILLEGAL)
00001068                            73  
00001068                            74  * ------ ROL TEST ------
00001068  31FC E31B 4152            75     MOVE.W     #$E31B,$4152  * ROL.B #1,D3
0000106E  31FC E55C 4154            76     MOVE.W     #$E55C,$4154  * ROL.W #2,D4
00001074  31FC E79D 4156            77     MOVE.W     #$E79D,$4156  * ROL.L #3,D5
0000107A  31FC E7D5 4158            78     MOVE.W     #$E7D5,$4158  * ROL   (A5)
00001080  31FC E7C0 415A            79     MOVE.W     #$E7C0,$415A  * ROL   D0 (ILLEGAL)
00001086                            80  
00001086                            81  * ------ ROR TEST ------
00001086  31FC E21B 415C            82     MOVE.W     #$E21B,$415C  * ROR.B #1,D3
0000108C  31FC E45C 4160            83     MOVE.W     #$E45C,$4160  * ROR.W #2,D4
00001092  31FC E69D 4162            84     MOVE.W     #$E69D,$4162  * ROR.L #3,D5
00001098  31FC E6D6 4164            85     MOVE.W     #$E6D6,$4164  * ROR   (A6)
0000109E  31FC E6C0 4166            86     MOVE.W     #$E6C0,$4166  * ROL   (D0) (ILLEGAL)
000010A4                            87  * ------ Standard Initializations ------
000010A4  31FC 0000 1008            88    MOVE.W    #0, PRINT_COUNT
000010AA  13FC 0000 00002BEE        89    MOVE.B    #0, MISC_NUMBER
000010B2  33FC 0000 00002BF4        90    MOVE.W    #0, LINE_COUNT
000010BA                            91  
000010BA                            92    * Begin the user input loop
000010BA  4EB9 0000282C             93    JSR GET_INPUT
000010C0                            94  
000010C0  2078 1000                 95    MOVEA.L  START_ADDR,A0
000010C4  21C8 1012                 96    MOVE.L   A0,LOOP_INDEX * Both A0 and LOOP_INDEX contain the start address
000010C8                            97  
000010C8                            98  
000010C8                            99  
000010C8                           100  *-------------------------------------------------------------------------------
000010C8                           101  *    OPCODE LOOP
000010C8                           102  *
000010C8                           103  *    The disassembler's main loop. Gets the contents of a memory location,
000010C8                           104  *    sends it to BRANCHBLOCK to be decoded and printed, and checks if we're
000010C8                           105  *    at the user defined endpoint.
000010C8                           106  *
000010C8                           107  * ________________________________________
000010C8                           108  * Register Use Summary:
000010C8                           109  *
000010C8                           110  * D7: CONST - The opcode to decode. Set before BRANCHBLOCK
000010C8                           111  *
000010C8                           112  * A0: The current Loop Index, updated before and after BRANCHBLOCK
000010C8                           113  * A1: How much we should increment the loop index
000010C8                           114  * A2: Local Variable - used for retrieving DATA
000010C8                           115  *-------------------------------------------------------------------------------
000010C8                           116  OPCODE_LOOP
000010C8                           117  
000010C8  2078 1012                118      MOVEA.L LOOP_INDEX,A0
000010CC  B1F8 1004                119      CMP.L   END_ADDR,A0  * Check to see if we're done
000010D0  6E00 0082                120      BGT     DONE
000010D4                           121  
000010D4                           122  * ------ Reset Loop Variables ------
000010D4  31FC 0000 1008           123      MOVE.W  #0,PRINT_COUNT  * Reset print count to zero
000010DA  31FC 0000 1010           124      MOVE.W  #0,LOOP_INC     * Reset loop index increment to zero
000010E0  4287                     125      CLR.L   D7
000010E2                           126  
000010E2                           127  * ------ Get memory at loop index ------
000010E2  3E10                     128      MOVE.W  (A0),D7
000010E4                           129  
000010E4                           130  * ------ Fill DATA1 and DATA2 ------
000010E4  2448                     131      MOVEA.L  A0,A2
000010E6  544A                     132      ADDA     #2,A2        * Increment by 1 word to get the long afterwards
000010E8  21D2 1016                133      MOVE.L  (A2),DATA1   * Fill DATA1 with the long after the opcode
000010EC  584A                     134      ADDA     #4,A2
000010EE  21D2 101C                135      MOVE.L  (A2),DATA2   * Fill DATA2 with the long after DATA1
000010F2                           136  
000010F2  31FC 0000 101A           137      MOVE.W  #0,DATA1_IN_USE  * Reset data boolean
000010F8  13FC 0000 00002BEE       138      MOVE.B  #0,MISC_NUMBER   * Reset MISC_NUMBER
00001100  13FC 0000 00002BF2       139      MOVE.B  #0,MISC_REGISTER * Reset MISC_REGISTER
00001108                           140  
00001108                           141  * ------ Execute Subroutines ------
00001108  4EB9 000024CC            142      JSR     PRINTADDR             * Print the memory address
0000110E  4EB9 00001162            143      JSR     BRANCHBLOCK           * Figure out what opcode this is and print
00001114                           144  
00001114                           145  
00001114                           146  * ------ Increment Loop ------
00001114  2078 1012                147      MOVEA.L     LOOP_INDEX,A0
00001118  3278 1010                148      MOVEA.W     LOOP_INC,A1
0000111C  D0C9                     149      ADDA    A1,A0  * Move the index to the next opcode
0000111E  21C8 1012                150      MOVE.L  A0,LOOP_INDEX
00001122                           151  
00001122                           152  
00001122                           153  * ------ Check for pause ------
00001122  247C 00000000            154      MOVEA.L   #0,A2
00001128  3479 00002BF4            155      MOVEA.W   LINE_COUNT,A2
0000112E  524A                     156      ADDA.W    #1,A2
00001130  33CA 00002BF4            157      MOVE.W    A2,LINE_COUNT
00001136                           158  
00001136  B4FC 001E                159      CMP.W     #30,A2
0000113A  6C00 0006                160      BGE       OPCODE_LOOP_PAUSE
0000113E                           161  
0000113E                           162  
0000113E  6000 0010                163      BRA     OPCODE_LOOP_CONTINUE
00001142                           164  
00001142                           165  OPCODE_LOOP_PAUSE
00001142  4EB9 000024EE            166      JSR     PAUSE_CONSOLE
00001148  33FC 0000 00002BF4       167      MOVE.W  #0, LINE_COUNT
00001150                           168  
00001150                           169  OPCODE_LOOP_CONTINUE
00001150  6000 FF76                170      BRA     OPCODE_LOOP
00001154                           171  
00001154                           172  DONE
00001154                           173  
00001154  4EB9 000024EE            174      JSR     PAUSE_CONSOLE
0000115A  6000 1864                175      BRA     QUERY_CONTINUE
0000115E                           176  
0000115E  FFFF FFFF                177      SIMHALT
00001162                           178  
00001162                           179  
00001162                           180  
00001162                           181  *-------------------------------------------------------------------------------
00001162                           182  *     BRANCHBLOCK
00001162                           183  *
00001162                           184  *  Decodes the opcode in D7 and jumps to the corresponding opcode subroutine
00001162                           185  *
00001162                           186  *  Because 1 line is pulled out of memory at a time, it's possible that the
00001162                           187  *  next opcode only takes up one word, and it's in the upper word of the
00001162                           188  *  opcode long (eg.4E71FFFF is NOP then empty). We must check for single word
00001162                           189  *  opcodes before we use any of the data in the lower word of D7.
00001162                           190  *________________________________________
00001162                           191  * Register Use Summary:
00001162                           192  *
00001162                           193  * D0: General variable, cleared every use to be safe
00001162                           194  * D1:
00001162                           195  * D2:
00001162                           196  * D3:
00001162                           197  * D4: (Keep in mind this is parameter for BWL)
00001162                           198  * D5:
00001162                           199  * D6:
00001162                           200  * D7: CONST - The opcode to decode - NO TOUCH
00001162                           201  *________________________________________
00001162                           202  * A0:
00001162                           203  * A1:
00001162                           204  * A2:
00001162                           205  * A3:
00001162                           206  * A4:
00001162                           207  * A5:
00001162                           208  * A6:
00001162                           209  * A7:
00001162                           210  *-------------------------------------------------------------------------------
00001162                           211  BRANCHBLOCK
00001162                           212  
00001162  21CF 100C                213    MOVE.L  SP,STACK_BASE   * Save the position of the stack for later
00001166                           214  
00001166                           215  * ---- EMPTY MEMORY ----
00001166  BEBC 0000FFFF            216    CMP.L   #$FFFF,D7
0000116C  6700 1338                217    BEQ     PRINT_NON_OPCODE_DATA
00001170                           218  
00001170                           219  * ---- CONSTANT OPCODES ----
00001170  BE7C 4E71                220    CMP.W   #$4E71,D7
00001174  6700 0C0A                221    BEQ     NOP
00001178                           222  
00001178  BE7C 4E75                223    CMP.W   #$4E75,D7
0000117C  6700 0C1C                224    BEQ     RTS
00001180                           225  
00001180                           226  * ------ MOVE / MOVEA ------
00001180  4280                     227    CLR.L   D0
00001182  3007                     228    MOVE.W  D7,D0
00001184                           229  
00001184  E598                     230    ROL.L   #$02,D0 * Move the first two bits into the upper word
00001186  4840                     231    SWAP    D0      * Swap the upper word and the lower word
00001188                           232  
00001188  B07C 0000                233    CMP.W   #0,D0
0000118C  6700 05B4                234    BEQ     MOVE_MOVEA
00001190                           235  
00001190                           236  * ------ MOVEQ ------
00001190  4280                     237    CLR.L   D0
00001192  4281                     238    CLR.L   D1
00001194  3007                     239    MOVE.W  D7,D0
00001196                           240  
00001196  E058                     241    ROR.W   #$8,D0 * Check bit 8 to make sure it's zero
00001198  3200                     242    MOVE.W  D0,D1 * D1 is where we'll do the mask
0000119A  0241 0001                243    ANDI.W  #1,D1 * Mask 1
0000119E                           244  
0000119E  B27C 0000                245    CMP.W   #0,D1
000011A2  6600 0010                246    BNE     BRANCHBLOCK_MOVEQ_END
000011A6                           247  
000011A6  E858                     248    ROR.W   #$4,D0 * Check bits 12-15 for 0111
000011A8  C07C 000F                249    AND.W   #$F,D0
000011AC  B03C 0007                250    CMP.B   #$7,D0
000011B0  6700 053A                251    BEQ     MOVEQ
000011B4                           252  
000011B4                           253  BRANCHBLOCK_MOVEQ_END * Go here if it's not MOVEQ
000011B4                           254  
000011B4                           255  * ------ MOVEM ------
000011B4  4280                     256    CLR.L   D0
000011B6  3007                     257    MOVE.W  D7,D0
000011B8                           258  
000011B8  C07C FB80                259    AND.W   #$FB80,D0 * Mask 1111 1011 1000 0000
000011BC  B07C 4880                260    CMP.W   #$4880,D0
000011C0                           261  
000011C0  6700 0364                262    BEQ     MOVEM
000011C4                           263  
000011C4                           264  * ---- NOT ----
000011C4  4280                     265    CLR.L   D0
000011C6  3007                     266    MOVE.W  D7,D0
000011C8  C07C FF00                267    AND.W   #$FF00,D0
000011CC  B07C 4600                268    CMP.W   #$4600,D0
000011D0  6700 0116                269    BEQ     NOT
000011D4                           270  
000011D4                           271  * ---- LEA ----
000011D4  4280                     272    CLR.L   D0
000011D6  3007                     273    MOVE.W  D7,D0
000011D8  C07C F1C0                274    AND.W   #$F1C0,D0
000011DC  B07C 41C0                275    CMP.W   #$41C0,D0
000011E0  6700 008C                276    BEQ     LEA
000011E4                           277  
000011E4                           278  * ---- ADDQ ----
000011E4  4280                     279    CLR.L   D0
000011E6  3007                     280    MOVE.W  D7,D0
000011E8  4840                     281    SWAP    D0
000011EA  E998                     282    ROL.L   #$04,D0
000011EC  C03C 000F                283    AND.B   #$F,D0
000011F0  B03C 0005                284    CMP.B   #5,D0
000011F4  6700 0B16                285    BEQ     ADDQ
000011F8                           286  
000011F8                           287  * ---- ADDA / ADD ----
000011F8  4280                     288    CLR.L   D0
000011FA  3007                     289    MOVE.W  D7,D0   *DXXX
000011FC  C07C F000                290    AND.W   #$F000,D0
00001200  B07C D000                291    CMP.W   #$D000,D0
00001204  6700 09DC                292    BEQ     ADD_ADDA
00001208                           293  
00001208                           294  * ---- SUB ----
00001208  4280                     295    CLR.L   D0
0000120A  3007                     296    MOVE.W  D7,D0
0000120C  C07C F000                297    AND.W   #$F000,D0
00001210  B07C 9000                298    CMP.W   #$9000,D0
00001214  6700 0272                299    BEQ     SUB
00001218                           300  
00001218                           301  * ---- OR ----
00001218  4280                     302    CLR.L   D0
0000121A  3007                     303    MOVE.W  D7,D0
0000121C  C07C F000                304    AND.W   #$F000,D0
00001220  B07C 8000                305    CMP.W   #$8000,D0
00001224  6700 01B2                306    BEQ     OR
00001228                           307  
00001228                           308  * ---- AND ----
00001228  4280                     309    CLR.L   D0
0000122A  3007                     310    MOVE.W  D7,D0
0000122C  C07C F000                311    AND.W   #$F000,D0
00001230  B07C C000                312    CMP.W   #$C000,D0
00001234  6700 00F2                313    BEQ     AND
00001238                           314  
00001238                           315  * ---- BCC ----
00001238  4280                     316    CLR.L   D0
0000123A  2007                     317    MOVE.L  D7,D0
0000123C  C07C F000                318    AND.W   #$F000,D0
00001240  B07C 6000                319    CMP.W   #$6000,D0
00001244  6700 08D4                320    BEQ     BCC
00001248                           321  
00001248                           322  * ---- LSX_ASX_ROR ----
00001248  4280                     323    CLR.L   D0
0000124A  2007                     324    MOVE.L  D7,D0
0000124C  C07C F000                325    AND.W   #$F000,D0
00001250  B07C E000                326    CMP.W   #$E000,D0
00001254  6700 06D6                327    BEQ     LSX_ASX_ROX
00001258                           328  
00001258                           329  * ---- JSR ----
00001258  4280                     330    CLR.L   D0
0000125A  3007                     331    MOVE.W  D7,D0
0000125C  C07C FFC0                332    AND.W   #$FFC0,D0   * Mask opcode to get first 10 bits only
00001260                           333  
00001260  EC40                     334    ASR.W   #6,D0
00001262  B07C 013A                335    CMP     #$13A,D0
00001266  6700 0B4C                336    BEQ     JSR
0000126A                           337  
0000126A                           338  * ---- Data is not recognized as opcode ----
0000126A                           339  
0000126A  6000 123A                340    BRA     PRINT_NON_OPCODE_DATA
0000126E                           341  
0000126E                           342  
0000126E                           343  *-------------------------------------------------------------------------------
0000126E                           344  * ________   ________   ________   ________   ________   _______
0000126E                           345  *|\   __  \ |\   __  \ |\   ____\ |\   __  \ |\   ___ \ |\  ___ \
0000126E                           346  *\ \  \|\  \\ \  \|\  \\ \  \___| \ \  \|\  \\ \  \_|\ \\ \   __/|
0000126E                           347  * \ \  \\\  \\ \   ____\\ \  \     \ \  \\\  \\ \  \ \\ \\ \  \_|/__
0000126E                           348  *  \ \  \\\  \\ \  \___| \ \  \____ \ \  \\\  \\ \  \_\\ \\ \  \_|\ \
0000126E                           349  *   \ \_______\\ \__\     \ \_______\\ \_______\\ \_______\\ \_______\
0000126E                           350  *    \|_______| \|__|      \|_______| \|_______| \|_______| \|_______|
0000126E                           351  *
0000126E                           352  *-------------------------------------------------------------------------------
0000126E                           353  
0000126E                           354  *-------------------------------------------------------------------------------
0000126E                           355  * LEA
0000126E                           356  *
0000126E                           357  * Load Effective address
0000126E                           358  *
0000126E                           359  * "LEA" -> "    " -> <ea> -> "," -> An
0000126E                           360  *
0000126E                           361  * Effective address does not allow Dn, An, (An)+, -(An)
0000126E                           362  *-------------------------------------------------------------------------------
0000126E                           363  LEA
0000126E                           364  
0000126E                           365    * ------ Print "LEA" ------
0000126E  4BF9 0000244E            366    LEA     PRINT_LEA,A5    * Load the print subroutine into intermediate address
00001274  2F0D                     367    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001276  5878 1008                368    ADD.W   #4,PRINT_COUNT
0000127A                           369  
0000127A                           370    * ------ Print some spaces ------
0000127A  4BF9 0000245E            371    LEA     PRINT_FOURSPACE,A5    * Load the print subroutine into temp
00001280  2F0D                     372    MOVE.L  A5, -(SP)             * Put the print subroutine jump onto the stack
00001282  5878 1008                373    ADD.W   #4,PRINT_COUNT
00001286                           374  
00001286                           375    * ------ Dn,An,(An)+,-(An) are not allowed ------
00001286  4280                     376    CLR.L   D0
00001288  1007                     377    MOVE.B  D7,D0 * Put opcode in D0
0000128A  C03C 0038                378    AND.B   #$38,D0   * Mask D0 with 0111000 to get MODE bits only
0000128E  E600                     379    ASR.B   #3,D0 * Shift the result so D0 ranges between 000 and 111
00001290                           380  
00001290  B03C 0000                381    CMP.B   #0,D0         *000 -> Register
00001294  6700 11F8                382    BEQ     PRINT_ILLEGAL
00001298  B03C 0001                383    CMP.B   #1,D0         *001 -> Address Register
0000129C  6700 11F0                384    BEQ     PRINT_ILLEGAL
000012A0  B03C 0003                385    CMP.B   #3,D0         *011 -> Address Register  (Indirect)+
000012A4  6700 11E8                386    BEQ     PRINT_ILLEGAL
000012A8  B03C 0004                387    CMP.B   #4,D0         *100 -> Address Register -(Indirect)
000012AC  6700 11E0                388    BEQ     PRINT_ILLEGAL
000012B0                           389  
000012B0                           390    * ------ Print the effective address ------
000012B0  2C07                     391    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
000012B2  4EB9 00001E4C            392    JSR     PUSH_EA_MODE_ID
000012B8                           393  
000012B8                           394  * ------ Print a comma ------
000012B8  4BF9 0000247E            395    LEA     PRINT_COMMA,A5   * Load the print subroutine
000012BE  2F0D                     396    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000012C0  5878 1008                397    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000012C4                           398  
000012C4                           399  * ------ Get Destination Address ------
000012C4  2007                     400    MOVE.L    D7,D0
000012C6  E058                     401    ROR.W     #$8,D0 * Get the three register bits
000012C8  E258                     402    ROR.W     #$1,D0
000012CA  C07C 0007                403    AND.W     #$7,D0 * Mask 111
000012CE                           404  
000012CE  13C0 00002BEE            405    MOVE.B    D0,MISC_NUMBER
000012D4                           406  
000012D4                           407  * ------ Print Destination Address ------
000012D4  4BF9 0000205E            408    LEA       PRINT_MISC_NUMBER_AS_ADDRESS,A5
000012DA  2F0D                     409    MOVE.L    A5, -(SP)       * Put the print subroutine jump onto the stack
000012DC  5878 1008                410    ADD.W     #4,PRINT_COUNT
000012E0                           411  
000012E0                           412  
000012E0  5478 1010                413    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
000012E4                           414  
000012E4  6000 0B3A                415    BRA   PRINT_OPCODE
000012E8                           416  
000012E8                           417  
000012E8                           418  *-------------------------------------------------------------------------------
000012E8                           419  * NOT
000012E8                           420  *
000012E8                           421  * "NOT" -> <.Size> -> <ea>
000012E8                           422  *
000012E8                           423  * Effective address does not allow An
000012E8                           424  *-------------------------------------------------------------------------------
000012E8                           425  NOT
000012E8                           426  
000012E8                           427  * ------ Print "NOT" ------
000012E8  4BF9 0000243E            428    LEA     PRINT_NOT,A5    * Load the print subroutine into intermediate address
000012EE  2F0D                     429    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000012F0  5878 1008                430    ADD.W   #4,PRINT_COUNT
000012F4                           431  
000012F4                           432    * ------ Print size ------
000012F4  4280                     433      CLR.L   D0
000012F6  2007                     434      MOVE.L  D7,D0
000012F8                           435  
000012F8  EC58                     436      ROR.W   #06,D0     * Get bits 7,6 on end
000012FA  C03C 0003                437      AND.B   #03,D0     * Isolate bits 7,6
000012FE                           438  
000012FE  1800                     439      MOVE.B   D0,D4      * Move bits 7,6 to D4 for BWL
00001300  4EB9 00001F26            440      JSR      PUSH_BWL
00001306                           441  
00001306                           442  
00001306                           443    * ------ An is not allowed ------
00001306  4280                     444    CLR.L   D0
00001308  1007                     445    MOVE.B  D7,D0 * Put opcode in D0
0000130A  C03C 0038                446    AND.B   #$38,D0   * Mask D0 with 0111000 to get MODE bits only
0000130E  E600                     447    ASR.B   #3,D0 * Shift the result so D0 ranges between 000 and 111
00001310                           448  
00001310  B03C 0001                449    CMP.B   #1,D0         *001 -> Address Register
00001314  6700 1178                450    BEQ     PRINT_ILLEGAL
00001318                           451  
00001318                           452    * ------ Print the effective address ------
00001318  2C07                     453    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
0000131A  4EB9 00001E4C            454    JSR     PUSH_EA_MODE_ID
00001320                           455  
00001320  5478 1010                456    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
00001324                           457  
00001324  6000 0AFA                458    BRA   PRINT_OPCODE
00001328                           459  
00001328                           460  
00001328                           461  *-------------------------------------------------------------------------------
00001328                           462  * AND
00001328                           463  *
00001328                           464  *-------------------------------------------------------------------------------
00001328                           465  AND
00001328                           466  
00001328                           467  * ------ Print "AND" ------
00001328  4BF9 00002228            468    LEA     PRINT_AND,A5    * Load the print subroutine into intermediate address
0000132E  2F0D                     469    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001330  5878 1008                470    ADD.W   #4,PRINT_COUNT
00001334                           471  
00001334                           472  * ------ Print size ------
00001334  4280                     473    CLR.L    D0
00001336  2007                     474    MOVE.L   D7,D0
00001338                           475  
00001338  EC58                     476    ROR.W    #06,D0     * Get bits 7,6 on end
0000133A  C03C 0003                477    AND.B    #03,D0     * Isolate bits 7,6
0000133E                           478  
0000133E  1800                     479    MOVE.B   D0,D4     * Move bits 7,6 to D4 for BWL
00001340  4EB9 00001F26            480    JSR      PUSH_BWL
00001346                           481  
00001346                           482  * ------ Reset D0, determine order ------
00001346  2007                     483    MOVE.L  D7,D0
00001348  E058                     484    ROR.W   #08,D0     * Get bit 8 on the end
0000134A  C07C 0001                485    AND.W   #1,D0
0000134E                           486  
0000134E                           487    * If bit 8 == 0 the order is <ea> AND Dn
0000134E                           488    * If bit 8 == 1 the order is Dn AND <ea>
0000134E                           489  
0000134E  B03C 0001                490    CMP.B   #1,D0
00001352  6700 004C                491    BEQ     AND_DN_FIRST
00001356                           492  
00001356                           493  * ------ Print order is effective address, data register ------
00001356                           494  AND_EA_FIRST
00001356                           495  
00001356                           496    * ------ An is not allowed ------
00001356  4280                     497    CLR.L   D0
00001358  1007                     498    MOVE.B  D7,D0 * Put opcode in D0
0000135A  C03C 0038                499    AND.B   #$38,D0   * Mask D0 with 0111000 to get MODE bits only
0000135E  E600                     500    ASR.B   #3,D0 * Shift the result so D0 ranges between 000 and 111
00001360                           501  
00001360  B03C 0001                502    CMP.B   #1,D0         *001 -> Address Register
00001364  6700 1128                503    BEQ     PRINT_ILLEGAL
00001368                           504  
00001368                           505    * ------ Print the effective address ------
00001368  2C07                     506    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
0000136A  4EB9 00001E4C            507    JSR     PUSH_EA_MODE_ID
00001370                           508  
00001370                           509    * ------ Print a comma ------
00001370  4BF9 0000247E            510    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001376  2F0D                     511    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001378  5878 1008                512    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000137C                           513  
0000137C                           514    * ------ Determine the register number ------
0000137C  2007                     515    MOVE.L  D7,D0
0000137E  E058                     516    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
00001380  E258                     517    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
00001382  C07C 0007                518    AND.W   #7,D0 * Mask against 111 to only get 3 bits
00001386                           519  
00001386                           520    * ------ Print the register number ------
00001386  13C0 00002BEE            521    MOVE.B  D0,MISC_NUMBER
0000138C  4BF9 00002084            522    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
00001392  2F0D                     523    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001394  5878 1008                524    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001398                           525  
00001398  5478 1010                526    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
0000139C                           527  
0000139C  6000 0A82                528    BRA   PRINT_OPCODE
000013A0                           529  
000013A0                           530  
000013A0                           531  * ------ Print order is data register, effective address ------
000013A0                           532  AND_DN_FIRST
000013A0                           533  
000013A0                           534  
000013A0                           535    * ------ Determine the register number ------
000013A0  2007                     536    MOVE.L  D7,D0
000013A2  E058                     537    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
000013A4  E258                     538    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
000013A6  C07C 0007                539    AND.W   #7,D0 * Mask against 111 to only get 3 bits
000013AA                           540  
000013AA                           541    * ------ Print the register number ------
000013AA  13C0 00002BEE            542    MOVE.B  D0,MISC_NUMBER
000013B0  4BF9 00002084            543    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
000013B6  2F0D                     544    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000013B8  5878 1008                545    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000013BC                           546  
000013BC                           547    * ------ Print a comma ------
000013BC  4BF9 0000247E            548    LEA     PRINT_COMMA,A5   * Load the print subroutine
000013C2  2F0D                     549    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000013C4  5878 1008                550    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000013C8                           551  
000013C8                           552    * ------ Print the effective address ------
000013C8  2C07                     553    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
000013CA  4EB9 00001E4C            554    JSR     PUSH_EA_MODE_ID
000013D0                           555  
000013D0  5478 1010                556    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
000013D4                           557  
000013D4  6000 0A4A                558    BRA   PRINT_OPCODE
000013D8                           559  
000013D8                           560  
000013D8                           561  *-------------------------------------------------------------------------------
000013D8                           562  * OR
000013D8                           563  *
000013D8                           564  *
000013D8                           565  *-------------------------------------------------------------------------------
000013D8                           566  OR
000013D8                           567  
000013D8                           568  * ------ Print "OR" ------
000013D8  4BF9 00002238            569    LEA     PRINT_OR,A5    * Load the print subroutine into intermediate address
000013DE  2F0D                     570    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000013E0  5878 1008                571    ADD.W   #4,PRINT_COUNT
000013E4                           572  
000013E4                           573  * ------ Print size ------
000013E4  4280                     574    CLR.L   D0
000013E6  2007                     575    MOVE.L  D7,D0
000013E8                           576  
000013E8  EC58                     577    ROR.W   #06,D0     * Get bits 7,6 on end
000013EA  C03C 0003                578    AND.B   #03,D0     * Isolate bits 7,6
000013EE                           579  
000013EE  1800                     580    MOVE.B   D0,D4            * Move bits 7,6 to D4 for BWL
000013F0  4EB9 00001F26            581    JSR      PUSH_BWL
000013F6                           582  
000013F6                           583  * ------ Reset D0, determine order ------
000013F6  2007                     584    MOVE.L  D7,D0
000013F8  E058                     585    ROR.W   #08,D0     * Get bit 8 on the end
000013FA  C07C 0001                586    AND.W   #1,D0
000013FE                           587  
000013FE                           588    * If bit 8 == 0 the order is <ea> OR Dn
000013FE                           589    * If bit 8 == 1 the order is Dn OR <ea>
000013FE                           590  
000013FE                           591  
000013FE  B03C 0001                592    CMP.B   #1,D0
00001402  6700 004C                593    BEQ     OR_DN_FIRST
00001406                           594  
00001406                           595  * ------ Print order is effective address, data register ------
00001406                           596  OR_EA_FIRST
00001406                           597  
00001406                           598    * ------ An is not allowed ------
00001406  4280                     599    CLR.L   D0
00001408  1007                     600    MOVE.B  D7,D0 * Put opcode in D0
0000140A  C03C 0038                601    AND.B   #$38,D0   * Mask D0 with 0111000 to get MODE bits only
0000140E  E600                     602    ASR.B   #3,D0 * Shift the result so D0 ranges between 000 and 111
00001410                           603  
00001410  B03C 0001                604    CMP.B   #1,D0         *001 -> Address Register
00001414  6700 1078                605    BEQ     PRINT_ILLEGAL
00001418                           606  
00001418                           607    * ------ Print the effective address ------
00001418  2C07                     608    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
0000141A  4EB9 00001E4C            609    JSR     PUSH_EA_MODE_ID
00001420                           610  
00001420                           611    * ------ Print a comma ------
00001420  4BF9 0000247E            612    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001426  2F0D                     613    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001428  5878 1008                614    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000142C                           615  
0000142C                           616    * ------ Determine the register number ------
0000142C  2007                     617    MOVE.L  D7,D0
0000142E  E058                     618    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
00001430  E258                     619    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
00001432  C07C 0007                620    AND.W   #7,D0 * Mask against 111 to only get 3 bits
00001436                           621  
00001436                           622    * ------ Print the register number ------
00001436  13C0 00002BEE            623    MOVE.B  D0,MISC_NUMBER
0000143C  4BF9 00002084            624    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
00001442  2F0D                     625    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001444  5878 1008                626    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001448                           627  
00001448  5478 1010                628    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
0000144C                           629  
0000144C  6000 09D2                630    BRA   PRINT_OPCODE
00001450                           631  
00001450                           632  
00001450                           633  * ------ Print order is data register, effective address ------
00001450                           634  OR_DN_FIRST
00001450                           635  
00001450                           636  
00001450                           637    * ------ Determine the register number ------
00001450  2007                     638    MOVE.L  D7,D0
00001452  E058                     639    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
00001454  E258                     640    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
00001456  C07C 0007                641    AND.W   #7,D0 * Mask against 111 to only get 3 bits
0000145A                           642  
0000145A                           643    * ------ Print the register number ------
0000145A  13C0 00002BEE            644    MOVE.B  D0,MISC_NUMBER
00001460  4BF9 00002084            645    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
00001466  2F0D                     646    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001468  5878 1008                647    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000146C                           648  
0000146C                           649    * ------ Print a comma ------
0000146C  4BF9 0000247E            650    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001472  2F0D                     651    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001474  5878 1008                652    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001478                           653  
00001478                           654    * ------ Print the effective address ------
00001478  2C07                     655    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
0000147A  4EB9 00001E4C            656    JSR     PUSH_EA_MODE_ID
00001480                           657  
00001480  5478 1010                658    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
00001484                           659  
00001484  6000 099A                660    BRA   PRINT_OPCODE
00001488                           661  
00001488                           662  
00001488                           663  
00001488                           664  
00001488                           665  *-------------------------------------------------------------------------------
00001488                           666  * SUB
00001488                           667  *
00001488                           668  *
00001488                           669  *-------------------------------------------------------------------------------
00001488                           670  SUB
00001488                           671  
00001488                           672  * ------ Print "SUB" ------
00001488  4BF9 00002218            673    LEA     PRINT_SUB,A5    * Load the print subroutine into intermediate address
0000148E  2F0D                     674    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001490  5878 1008                675    ADD.W   #4,PRINT_COUNT
00001494                           676  
00001494                           677  * ------ Print size ------
00001494  4280                     678    CLR.L   D0
00001496  2007                     679    MOVE.L  D7,D0
00001498                           680  
00001498  EC58                     681    ROR.W   #06,D0     * Get bits 7,6 on end
0000149A  C03C 0003                682    AND.B   #03,D0     * Isolate bits 7,6
0000149E                           683  
0000149E  1800                     684    MOVE.B   D0,D4            * Move bits 7,6 to D4 for BWL
000014A0  4EB9 00001F26            685    JSR      PUSH_BWL
000014A6                           686  
000014A6                           687  * ------ Reset D0, determine order ------
000014A6  2007                     688    MOVE.L  D7,D0
000014A8  E058                     689    ROR.W   #08,D0     * Get bit 8 on the end
000014AA  C07C 0001                690    AND.W   #1,D0
000014AE                           691  
000014AE                           692    * If bit 8 == 0 the order is Dn - <ea>
000014AE                           693    * If bit 8 == 1 the order is <ea> - Dn
000014AE                           694  
000014AE  B03C 0000                695    CMP.B   #0,D0
000014B2  6700 003A                696    BEQ     SUB_DN_FIRST
000014B6                           697  
000014B6                           698  * ------ Print order is effective address, data register ------
000014B6                           699  SUB_EA_FIRST
000014B6                           700  
000014B6                           701  
000014B6                           702    * ------ Print the effective address ------
000014B6  2C07                     703    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
000014B8  4EB9 00001E4C            704    JSR     PUSH_EA_MODE_ID
000014BE                           705  
000014BE                           706    * ------ Print a comma ------
000014BE  4BF9 0000247E            707    LEA     PRINT_COMMA,A5   * Load the print subroutine
000014C4  2F0D                     708    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000014C6  5878 1008                709    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000014CA                           710  
000014CA                           711    * ------ Determine the register number ------
000014CA  2007                     712    MOVE.L  D7,D0
000014CC  E058                     713    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
000014CE  E258                     714    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
000014D0  C07C 0007                715    AND.W   #7,D0 * Mask against 111 to only get 3 bits
000014D4                           716  
000014D4                           717    * ------ Print the register number ------
000014D4  13C0 00002BEE            718    MOVE.B  D0,MISC_NUMBER
000014DA  4BF9 00002084            719    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
000014E0  2F0D                     720    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000014E2  5878 1008                721    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000014E6                           722  
000014E6  5478 1010                723    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
000014EA                           724  
000014EA  6000 0934                725    BRA   PRINT_OPCODE
000014EE                           726  
000014EE                           727  
000014EE                           728  * ------ Print order is data register, effective address ------
000014EE                           729  SUB_DN_FIRST
000014EE                           730  
000014EE                           731  
000014EE                           732    * ------ Determine the register number ------
000014EE  2007                     733    MOVE.L  D7,D0
000014F0  E058                     734    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
000014F2  E258                     735    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
000014F4  C07C 0007                736    AND.W   #7,D0 * Mask against 111 to only get 3 bits
000014F8                           737  
000014F8                           738    * ------ Print the register number ------
000014F8  13C0 00002BEE            739    MOVE.B  D0,MISC_NUMBER
000014FE  4BF9 00002084            740    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
00001504  2F0D                     741    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001506  5878 1008                742    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000150A                           743  
0000150A                           744    * ------ Print a comma ------
0000150A  4BF9 0000247E            745    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001510  2F0D                     746    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001512  5878 1008                747    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001516                           748  
00001516                           749    * ------ Print the effective address ------
00001516  2C07                     750    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001518  4EB9 00001E4C            751    JSR     PUSH_EA_MODE_ID
0000151E                           752  
0000151E  5478 1010                753    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
00001522                           754  
00001522  6000 08FC                755    BRA   PRINT_OPCODE
00001526                           756  
00001526                           757  
00001526                           758  
00001526                           759  
00001526                           760  
00001526                           761  
00001526                           762  *-------------------------------------------------------------------------------
00001526                           763  * MOVEM
00001526                           764  *
00001526                           765  *
00001526                           766  *-------------------------------------------------------------------------------
00001526                           767  MOVEM
00001526                           768  
00001526                           769  * ------ Check for ILLEGAL ------
00001526                           770  * Bits 7-9 must equal 001
00001526  4280                     771    CLR.L   D0
00001528  3007                     772    MOVE.W  D7,D0
0000152A                           773  
0000152A  EE58                     774    ROR.W   #7,D0 * Shift to bit 7
0000152C  C07C 0007                775    AND.W   #7,D0 * Mask 111
00001530                           776  
00001530  B03C 0001                777    CMP.B   #1,D0
00001534  6600 0F58                778    BNE     PRINT_ILLEGAL
00001538                           779  
00001538                           780  
00001538                           781  * ------ Put List Mask in MISC_OPCODE ------
00001538  2038 1016                782    MOVE.L    DATA1,D0
0000153C  4840                     783    SWAP      D0
0000153E  33C0 00002BF0            784    MOVE.W    D0,MISC_OPCODE
00001544                           785  
00001544                           786  * ------ Shift so DATA1 is standard ------
00001544                           787  * The Effective Address Subroutine expects data in DATA1
00001544                           788  * So we've moved the List Mask to MISC_OPCODE
00001544                           789  * and shifted everything back 1 word so it fits nicely
00001544                           790  
00001544  2238 101C                791    MOVE.L    DATA2,D1
00001548  4841                     792    SWAP      D1
0000154A                           793  
0000154A  3001                     794    MOVE.W    D1,D0
0000154C  21C0 1016                795    MOVE.L    D0,DATA1
00001550                           796  
00001550                           797  * ------ Print "MOVEM" ------
00001550                           798  
00001550  4BF9 00002208            799    LEA     PRINT_MOVEM,A5
00001556  2F0D                     800    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001558  5878 1008                801    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000155C                           802  
0000155C                           803  * ------ Get Size Bit ------
0000155C  4280                     804    CLR.L   D0
0000155E  3007                     805    MOVE.W  D7,D0
00001560                           806  
00001560  EC58                     807    ROR.W   #6,D0 * Bit 6 is size bit
00001562  C07C 0001                808    AND.W   #1,D0 * Mask 0001
00001566                           809  
00001566                           810  * ------ Size Branching ------
00001566  B03C 0000                811    CMP.B   #0,D0 * 0 = Word
0000156A  6700 0016                812    BEQ     MOVEM_SIZE_WORD
0000156E  6600 0002                813    BNE     MOVEM_SIZE_LONG
00001572                           814  
00001572                           815  * ------ Print ".L" ------
00001572                           816  MOVEM_SIZE_LONG
00001572                           817  
00001572  4BF9 00002268            818    LEA     PRINT_LONG_DESIGNATOR,A5 * Load the ".L" print subroutine
00001578  2F0D                     819    MOVE.L  A5, -(SP)       * Put the subroutine onto the stack
0000157A  5878 1008                820    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000157E                           821  
0000157E  6000 0012                822    BRA   MOVEM_SIZE_CONTINUE
00001582                           823  
00001582                           824  * ------ Print ".W" ------
00001582                           825  MOVEM_SIZE_WORD
00001582                           826  
00001582  4BF9 00002258            827    LEA     PRINT_WORD_DESIGNATOR,A5 * Load the ".W" print subroutine
00001588  2F0D                     828    MOVE.L  A5, -(SP)         * Put the subroutine onto the stack
0000158A  5878 1008                829    ADD.W   #4,PRINT_COUNT    * Increment Print Count by 1 long
0000158E                           830  
0000158E  6000 0002                831    BRA   MOVEM_SIZE_CONTINUE
00001592                           832  
00001592                           833  MOVEM_SIZE_CONTINUE
00001592                           834  
00001592                           835  * ------ Get the direction bit ------
00001592  4280                     836    CLR.L   D0
00001594  3007                     837    MOVE.W  D7,D0
00001596                           838  
00001596  E058                     839    ROR.W   #8,D0   * Get bit 10
00001598  E458                     840    ROR.W   #2,D0
0000159A                           841  
0000159A  C07C 0001                842    AND.W   #1,D0   * Mask 0000 0001
0000159E                           843  
0000159E  B03C 0001                844    CMP.B   #1,D0
000015A2  6700 0006                845    BEQ     MOVEM_MEM2REG * If direction bit is 1, do memory -> register(s)
000015A6                           846  
000015A6  6000 009E                847    BRA     MOVEM_REG2MEM * else, do register(s) -> memory
000015AA                           848  
000015AA                           849  
000015AA                           850  *-------------------------------------------------------------------------------
000015AA                           851  * MOVEM_MEM2REG
000015AA                           852  *
000015AA                           853  * • Do modified EA_MODE first
000015AA                           854  *   • (An), (An)+, (xxx).W, (xxx).L only!
000015AA                           855  * • Then push MOVEM register print
000015AA                           856  *-------------------------------------------------------------------------------
000015AA                           857  MOVEM_MEM2REG
000015AA                           858  
000015AA                           859  
000015AA                           860  * ---- Custom Branching Block ----
000015AA  4280                     861    CLR.L     D0
000015AC  4286                     862    CLR.L     D6
000015AE  1007                     863    MOVE.B    D7,D0 * Copy opcode into local variable
000015B0  3C07                     864    MOVE.W    D7,D6
000015B2                           865  
000015B2  C03C 0038                866    AND.B     #$38,D0 * Mask D0 with 0111000 to get MODE bits only
000015B6  E600                     867    ASR.B     #3,D0   * Shift the result so D0 ranges between 000 and 111
000015B8  1200                     868    MOVE.B    D0,D1 * Save result for later.
000015BA                           869  
000015BA  B03C 0002                870    CMP.B     #2,D0
000015BE  6700 0032                871    BEQ       MOVEM_MEM2REG_AN_IND
000015C2  B03C 0003                872    CMP.B     #3,D0
000015C6  6700 0034                873    BEQ       MOVEM_MEM2REG_POST_INC
000015CA  B03C 0007                874    CMP.B     #7,D0
000015CE  6700 0006                875    BEQ       MOVEM_MEM2REG_ELSE
000015D2                           876  
000015D2  6000 0EBA                877    BRA       PRINT_ILLEGAL
000015D6                           878  
000015D6                           879  MOVEM_MEM2REG_ELSE
000015D6                           880  
000015D6  4280                     881    CLR.L   D0
000015D8  1007                     882    MOVE.B  D7,D0
000015DA  C03C 0007                883    AND.B   #7,D0
000015DE                           884  
000015DE  B03C 0000                885    CMP.B   #0,D0
000015E2  6700 0022                886    BEQ     MOVEM_MEM2REG_IND_SHORT
000015E6  B03C 0001                887    CMP.B   #1,D0
000015EA  6700 0024                888    BEQ     MOVEM_MEM2REG_IND_LONG
000015EE                           889  
000015EE  6000 0E9E                890    BRA     PRINT_ILLEGAL
000015F2                           891  
000015F2                           892  *________________________________________
000015F2                           893  * Jump directly into the middle of
000015F2                           894  * the PUSH_EA_MODE subroutine
000015F2                           895  *----------------------------------------
000015F2                           896  MOVEM_MEM2REG_AN_IND
000015F2                           897  
000015F2  4EB9 00001E9C            898    JSR     PUSH_EA_MODE_ID_AN_INDIRECT
000015F8  6000 0020                899    BRA     MOVEM_MEM2REG_EA_FINISH
000015FC                           900  *________________________________________
000015FC                           901  * Jump directly into the middle of
000015FC                           902  * the PUSH_EA_MODE subroutine
000015FC                           903  *----------------------------------------
000015FC                           904  MOVEM_MEM2REG_POST_INC
000015FC                           905  
000015FC  4EB9 00001EA6            906    JSR     PUSH_EA_MODE_ID_AN_POST_INC
00001602  6000 0016                907    BRA     MOVEM_MEM2REG_EA_FINISH
00001606                           908  
00001606                           909  *________________________________________
00001606                           910  * Jump directly into the middle of
00001606                           911  * the PUSH_EA_MODE subroutine
00001606                           912  *----------------------------------------
00001606                           913  MOVEM_MEM2REG_IND_SHORT
00001606                           914  
00001606  4EB9 00001EDC            915    JSR   PUSH_EA_MODE_ID_IND_SHORT
0000160C  6000 000C                916    BRA   MOVEM_MEM2REG_EA_FINISH
00001610                           917  
00001610                           918  *________________________________________
00001610                           919  * Jump directly into the middle of
00001610                           920  * the PUSH_EA_MODE subroutine
00001610                           921  *----------------------------------------
00001610                           922  MOVEM_MEM2REG_IND_LONG
00001610                           923  
00001610  4EB9 00001EF0            924    JSR   PUSH_EA_MODE_ID_IND_LONG
00001616  6000 0002                925    BRA     MOVEM_MEM2REG_EA_FINISH
0000161A                           926  
0000161A                           927  *________________________________________
0000161A                           928  * Jump directly into the middle of
0000161A                           929  * the PUSH_EA_MODE subroutine
0000161A                           930  *----------------------------------------
0000161A                           931  MOVEM_MEM2REG_EA_FINISH
0000161A                           932  
0000161A  4BF9 0000247E            933    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001620  2F0D                     934    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001622  5878 1008                935    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001626                           936  
00001626  4BF9 0000246E            937    LEA     PRINT_SPACE,A5   * Load the print subroutine
0000162C  2F0D                     938    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000162E  5878 1008                939    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001632                           940  
00001632  4BF9 000024FC            941    LEA     PRINT_MOVEM_STANDARD,A5   * Load the print subroutine
00001638  2F0D                     942    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000163A  5878 1008                943    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000163E                           944  
0000163E                           945  
0000163E  5878 1010                946    ADD.W  #4,LOOP_INC     * Increment the loop counter by 2 bytes
00001642                           947  
00001642  6000 07DC                948    BRA   PRINT_OPCODE
00001646                           949  
00001646                           950  
00001646                           951  *-------------------------------------------------------------------------------
00001646                           952  * MOVEM_REG2MEM
00001646                           953  *
00001646                           954  * • Push MOVEM register print first
00001646                           955  * • Then do modified EA_MODE
00001646                           956  *     • (An), -(An), (xxx).W, (xxx.L) only!
00001646                           957  *
00001646                           958  *-------------------------------------------------------------------------------
00001646                           959  MOVEM_REG2MEM
00001646                           960  
00001646                           961  
00001646                           962    * ---- Custom Branching Block ----
00001646  4280                     963      CLR.L     D0
00001648  4286                     964      CLR.L     D6
0000164A  1007                     965      MOVE.B    D7,D0 * Copy opcode into local variable
0000164C  3C07                     966      MOVE.W    D7,D6
0000164E                           967  
0000164E  C03C 0038                968      AND.B     #$38,D0 * Mask D0 with 0111000 to get MODE bits only
00001652  E600                     969      ASR.B     #3,D0 * Shift the result so D0 ranges between 000 and 111
00001654                           970  
00001654  B03C 0002                971      CMP.B     #2,D0
00001658  6700 0032                972      BEQ       MOVEM_REG2MEM_AN_IND
0000165C  B03C 0004                973      CMP.B     #4,D0
00001660  6700 0040                974      BEQ       MOVEM_REG2MEM_PRE_DEC
00001664  B03C 0007                975      CMP.B     #7,D0
00001668  6700 0006                976      BEQ       MOVEM_REG2MEM_ELSE
0000166C                           977  
0000166C  6000 0E20                978      BRA       PRINT_ILLEGAL
00001670                           979  
00001670                           980  MOVEM_REG2MEM_ELSE
00001670                           981  
00001670  4280                     982      CLR.L   D0
00001672  1007                     983      MOVE.B  D7,D0
00001674  C03C 0007                984      AND.B   #7,D0
00001678                           985  
00001678  B03C 0000                986      CMP.B   #0,D0
0000167C  6700 003A                987      BEQ     MOVEM_REG2MEM_IND_SHORT
00001680  B03C 0001                988      CMP.B   #1,D0
00001684  6700 0048                989      BEQ     MOVEM_REG2MEM_IND_LONG
00001688                           990  
00001688  6000 0E04                991      BRA     PRINT_ILLEGAL
0000168C                           992  
0000168C                           993  *________________________________________
0000168C                           994  * Jump directly into the middle of
0000168C                           995  * the PUSH_EA_MODE subroutine
0000168C                           996  *----------------------------------------
0000168C                           997  MOVEM_REG2MEM_AN_IND
0000168C                           998  
0000168C  4BF9 000024FC            999      LEA     PRINT_MOVEM_STANDARD,A5   * Load the print subroutine
00001692  2F0D                    1000      MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001694  5878 1008               1001      ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001698                          1002  
00001698  4EB9 00001E9C           1003      JSR     PUSH_EA_MODE_ID_AN_INDIRECT
0000169E  6000 0044               1004      BRA     MOVEM_REG2MEM_EA_FINISH
000016A2                          1005  *________________________________________
000016A2                          1006  * Jump directly into the middle of
000016A2                          1007  * the PUSH_EA_MODE subroutine
000016A2                          1008  *----------------------------------------
000016A2                          1009  MOVEM_REG2MEM_PRE_DEC
000016A2                          1010  
000016A2  4BF9 00002694           1011      LEA     PRINT_MOVEM_REVERSE,A5   * Load the print subroutine
000016A8  2F0D                    1012      MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000016AA  5878 1008               1013      ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000016AE                          1014  
000016AE  4EB9 00001EB0           1015      JSR     PUSH_EA_MODE_ID_AN_PRE_DEC
000016B4  6000 002E               1016      BRA     MOVEM_REG2MEM_EA_FINISH
000016B8                          1017  
000016B8                          1018  *________________________________________
000016B8                          1019  * Jump directly into the middle of
000016B8                          1020  * the PUSH_EA_MODE subroutine
000016B8                          1021  *----------------------------------------
000016B8                          1022  MOVEM_REG2MEM_IND_SHORT
000016B8                          1023  
000016B8  4BF9 000024FC           1024      LEA     PRINT_MOVEM_STANDARD,A5   * Load the print subroutine
000016BE  2F0D                    1025      MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000016C0  5878 1008               1026      ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000016C4                          1027  
000016C4                          1028  
000016C4  4EB9 00001EDC           1029      JSR   PUSH_EA_MODE_ID_IND_SHORT
000016CA  6000 0018               1030      BRA   MOVEM_REG2MEM_EA_FINISH
000016CE                          1031  
000016CE                          1032  *________________________________________
000016CE                          1033  * Jump directly into the middle of
000016CE                          1034  * the PUSH_EA_MODE subroutine
000016CE                          1035  *----------------------------------------
000016CE                          1036  MOVEM_REG2MEM_IND_LONG
000016CE                          1037  
000016CE  4BF9 000024FC           1038      LEA     PRINT_MOVEM_STANDARD,A5   * Load the print subroutine
000016D4  2F0D                    1039      MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000016D6  5878 1008               1040      ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000016DA                          1041  
000016DA  4EB9 00001EF0           1042      JSR   PUSH_EA_MODE_ID_IND_LONG
000016E0  6000 0002               1043      BRA     MOVEM_REG2MEM_EA_FINISH
000016E4                          1044  
000016E4                          1045  *________________________________________
000016E4                          1046  * Jump directly into the middle of
000016E4                          1047  * the PUSH_EA_MODE subroutine
000016E4                          1048  *----------------------------------------
000016E4                          1049  MOVEM_REG2MEM_EA_FINISH
000016E4                          1050  
000016E4  5878 1010               1051    ADD.W  #4,LOOP_INC     * Increment the loop counter by 2 bytes
000016E8                          1052  
000016E8  6000 0736               1053    BRA   PRINT_OPCODE
000016EC                          1054  
000016EC                          1055  
000016EC                          1056  *-------------------------------------------------------------------------------
000016EC                          1057  * MOVEQ
000016EC                          1058  * Assumption: Bit 8 is checked for zero so this subroutine is always valid
000016EC                          1059  *
000016EC                          1060  *-------------------------------------------------------------------------------
000016EC                          1061  MOVEQ
000016EC                          1062  
000016EC  4280                    1063    CLR.L   D0
000016EE  3007                    1064    MOVE.W  D7,D0
000016F0                          1065  
000016F0                          1066  * ------ Print "MOVEQ" ------
000016F0                          1067  
000016F0  4BF9 000021F8           1068    LEA     PRINT_MOVEQ,A5
000016F6  2F0D                    1069    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000016F8  5878 1008               1070    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000016FC                          1071  
000016FC                          1072  * ------ Print Data ------
000016FC                          1073  
000016FC  C07C 00FF               1074    AND.W   #$FF,D0 * Get bits 0-7
00001700  13C0 00002BEE           1075    MOVE.B  D0,MISC_NUMBER
00001706                          1076  
00001706  4BF9 000021A2           1077    LEA     PRINT_MISC_NUMBER_AS_DATA,A5   * Load the print subroutine
0000170C  2F0D                    1078    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000170E  5878 1008               1079    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001712                          1080  
00001712                          1081  * ------ Print a comma ------
00001712  4BF9 0000247E           1082    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001718  2F0D                    1083    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000171A  5878 1008               1084    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000171E                          1085  
0000171E                          1086  * ------ Print Register ------
0000171E                          1087  
0000171E  3007                    1088    MOVE.W  D7,D0
00001720  E058                    1089    ROR.W   #8,D0 *Shift to get bits 9 - 11
00001722  E258                    1090    ROR.W   #1,D0
00001724                          1091  
00001724  C07C 0007               1092    AND.W   #7,D0 * Mask 111
00001728  13C0 00002BF2           1093    MOVE.B  D0,MISC_REGISTER
0000172E                          1094  
0000172E  4BF9 000020AA           1095    LEA     PRINT_MISC_REGISTER,A5   * Load the print subroutine
00001734  2F0D                    1096    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001736  5878 1008               1097    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000173A                          1098  
0000173A  5478 1010               1099    ADD.W  #2,LOOP_INC     * Increment the loop counter by 2 bytes
0000173E                          1100  
0000173E  6000 06E0               1101    BRA   PRINT_OPCODE
00001742                          1102  
00001742                          1103  
00001742                          1104  
00001742                          1105  
00001742                          1106  *-------------------------------------------------------------------------------
00001742                          1107  * MOVE_MOVEA
00001742                          1108  *
00001742                          1109  * Both opcodes start with 00 so we need to figure out which is which
00001742                          1110  *-------------------------------------------------------------------------------
00001742                          1111  MOVE_MOVEA
00001742  4280                    1112      CLR.L   D0
00001744  3007                    1113      MOVE.W  D7,D0
00001746                          1114  
00001746  EC58                    1115      ROR     #$6,D0    *Get bits 6, 7, and 8
00001748  0200 0007               1116      ANDI.B  #$07,D0   * Mask against 111
0000174C                          1117  
0000174C  0C00 0001               1118      CMPI.B  #1,D0     * If bits equal 001, it's MOVEA
00001750  6700 015A               1119      BEQ     MOVEA
00001754                          1120  
00001754  6000 0002               1121      BRA     MOVE      * Else it's MOVE
00001758                          1122  
00001758                          1123  *-------------------------------------------------------------------------------
00001758                          1124  * MOVE
00001758                          1125  *
00001758                          1126  * This hurts me
00001758                          1127  *
00001758                          1128  *-------------------------------------------------------------------------------
00001758                          1129  MOVE
00001758                          1130  
00001758  2007                    1131    MOVE.L    D7,D0 * Load the print subroutine into intermediate address
0000175A                          1132  
0000175A                          1133  * ------ Print "MOVE" ------
0000175A                          1134  
0000175A  4BF9 000021D8           1135    LEA       PRINT_MOVE,A5
00001760  2F0D                    1136    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001762  5878 1008               1137    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001766                          1138  
00001766                          1139  * ------ Determine Size ------
00001766  E058                    1140    ROR.W   #$8,D0 * Shift a total of 12 bits to retrieve SIZE designator
00001768  E858                    1141    ROR.W   #$4,D0
0000176A  C07C 0007               1142    AND.W   #$7,D0 * Mask 111
0000176E                          1143  
0000176E  4284                    1144    CLR.L   D4 * Clear D4 for use as BWL parameter
00001770                          1145  
00001770  B03C 0001               1146    CMP.B   #1,D0
00001774  6700 0016               1147    BEQ     MOVE_B
00001778  B03C 0003               1148    CMP.B   #3,D0
0000177C  6700 001C               1149    BEQ     MOVE_W
00001780  B03C 0002               1150    CMP.B   #2,D0
00001784  6700 0022               1151    BEQ     MOVE_L
00001788                          1152  
00001788  6000 0D04               1153    BRA     PRINT_ILLEGAL
0000178C                          1154  
0000178C                          1155  * ------ Size Branching ------
0000178C                          1156  * MOVE uses a nonstandard size code. We convert it to the standard so we can
0000178C                          1157  * easily use the existing PUSH_BWL subroutine
0000178C                          1158  MOVE_B
0000178C  183C 0000               1159    MOVE.B  #0,D4
00001790  4EB9 00001F26           1160    JSR     PUSH_BWL
00001796  6000 001E               1161    BRA     MOVE_SIZE_CONTINUE
0000179A                          1162  
0000179A                          1163  MOVE_W
0000179A  183C 0001               1164    MOVE.B  #1,D4
0000179E  4EB9 00001F26           1165    JSR     PUSH_BWL
000017A4  6000 0010               1166    BRA     MOVE_SIZE_CONTINUE
000017A8                          1167  
000017A8                          1168  MOVE_L
000017A8  183C 0002               1169    MOVE.B  #2,D4
000017AC  4EB9 00001F26           1170    JSR     PUSH_BWL
000017B2  6000 0002               1171    BRA     MOVE_SIZE_CONTINUE
000017B6                          1172  
000017B6                          1173  MOVE_SIZE_CONTINUE
000017B6                          1174  
000017B6                          1175  * ------ Print Source ------
000017B6  2C07                    1176    MOVE.L    D7,D6
000017B8  4EB9 00001E4C           1177    JSR       PUSH_EA_MODE_ID
000017BE                          1178  
000017BE                          1179  * ------ Print a comma ------
000017BE  4BF9 0000247E           1180    LEA     PRINT_COMMA,A5   * Load the print subroutine
000017C4  2F0D                    1181    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000017C6  5878 1008               1182    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000017CA                          1183  
000017CA                          1184  * ------ Print Destination ------
000017CA                          1185  * Unfortunately our PUSH_EA_MODE_ID wasn't designed for this :/
000017CA                          1186  
000017CA  2007                    1187    MOVE.L    D7,D0 * D0 holds MODE bits
000017CC  2207                    1188    MOVE.L    D7,D1 * D1 holds REGISTER bits
000017CE                          1189  
000017CE  EC58                    1190    ROR.W     #$6,D0 * Get the three mode bits
000017D0  C07C 0007               1191    AND.W     #$7,D0 * Mask 111
000017D4                          1192  
000017D4  E059                    1193    ROR.W     #$8,D1 * Get the three register bits
000017D6  E259                    1194    ROR.W     #$1,D1
000017D8  C27C 0007               1195    AND.W     #$7,D1 * Mask 111
000017DC                          1196  
000017DC                          1197  * ---- Branching Block ----
000017DC                          1198  
000017DC                          1199  
000017DC  13C1 00002BEE           1200    MOVE.B  D1,MISC_NUMBER * For modes that print the register bits as a number
000017E2                          1201  
000017E2  B03C 0000               1202    CMP.B   #0,D0         *000 -> Register
000017E6  6700 0026               1203    BEQ     MOVE_MODE_DN
000017EA  B03C 0002               1204    CMP.B   #2,D0         *010 -> Address Register   Indirect
000017EE  6700 0028               1205    BEQ     MOVE_MODE_AN_INDIRECT
000017F2  B03C 0003               1206    CMP.B   #3,D0         *011 -> Address Register  (Indirect)+
000017F6  6700 002A               1207    BEQ     MOVE_MODE_AN_POST_INC
000017FA  B03C 0004               1208    CMP.B   #4,D0         *100 -> Address Register -(Indirect)
000017FE  6700 002C               1209    BEQ     MOVE_MODE_AN_PRE_DEC
00001802  B03C 0007               1210    CMP.B   #7,D0         *111 -> All Data Operations
00001806  6700 002E               1211    BEQ     MOVE_MODE_ELSE
0000180A                          1212  
0000180A  6000 0C82               1213    BRA     PRINT_ILLEGAL
0000180E                          1214  
0000180E                          1215  *________________________________________
0000180E                          1216  * Load Register Print Label
0000180E                          1217  *----------------------------------------
0000180E                          1218  MOVE_MODE_DN
0000180E  4BF9 00002084           1219    LEA   PRINT_MISC_NUMBER_AS_REGISTER,A5
00001814  6000 0088               1220    BRA   MOVE_MODE_FINISH
00001818                          1221  *________________________________________
00001818                          1222  * Load (Address Register) Print Label
00001818                          1223  *----------------------------------------
00001818                          1224  MOVE_MODE_AN_INDIRECT
00001818  4BF9 00002164           1225    LEA   PRINT_MISC_ADDRESS_IND,A5
0000181E  6000 007E               1226    BRA   MOVE_MODE_FINISH
00001822                          1227  *________________________________________
00001822                          1228  * Load (Address Register)+ Print Label
00001822                          1229  *----------------------------------------
00001822                          1230  MOVE_MODE_AN_POST_INC
00001822  4BF9 0000211A           1231    LEA   PRINT_MISC_POST_INC,A5
00001828  6000 0074               1232    BRA   MOVE_MODE_FINISH
0000182C                          1233  *________________________________________
0000182C                          1234  * Load -(Address Register) Print Label
0000182C                          1235  *----------------------------------------
0000182C                          1236  MOVE_MODE_AN_PRE_DEC
0000182C  4BF9 000020D0           1237    LEA   PRINT_MISC_PRE_DEC,A5
00001832  6000 006A               1238    BRA   MOVE_MODE_FINISH
00001836                          1239  
00001836                          1240  *________________________________________
00001836                          1241  * Handle Data Branching Logic
00001836                          1242  *----------------------------------------
00001836                          1243  MOVE_MODE_ELSE
00001836                          1244  
00001836  B23C 0000               1245      CMP.B   #0,D1
0000183A  6700 000A               1246      BEQ     MOVE_MODE_IND_SHORT
0000183E                          1247  
0000183E  B23C 0001               1248      CMP.B   #1,D1
00001842  6700 002E               1249      BEQ     MOVE_MODE_IND_LONG
00001846                          1250  
00001846                          1251  * ------ Data is short ------
00001846                          1252  MOVE_MODE_IND_SHORT
00001846  0C78 0001 101A          1253      CMP.W  #1,DATA1_IN_USE
0000184C  6700 0016               1254      BEQ     MOVE_MODE_IND_SHORT_DATA2
00001850  5478 1010               1255      ADD.W           #2, LOOP_INC * Adjust the Loop increment to skip the data
00001854  31FC 0001 101A          1256      MOVE.W  #1,DATA1_IN_USE
0000185A                          1257  
0000185A  4BF9 0000236E           1258      LEA     PRINT_EA_MODE_ID_IND_SHORT,A5
00001860  6000 003C               1259      BRA     MOVE_MODE_FINISH
00001864                          1260  
00001864                          1261  * ------ Data is short, DATA1 is in use ------
00001864                          1262  MOVE_MODE_IND_SHORT_DATA2
00001864  5478 1010               1263      ADD.W           #2, LOOP_INC * Adjust the Loop increment to skip the data
00001868                          1264  
00001868  4BF9 0000238E           1265      LEA     PRINT_EA_MODE_ID_IND_SHORT_DATA2,A5
0000186E  6000 002E               1266      BRA     MOVE_MODE_FINISH
00001872                          1267  
00001872                          1268  * ------ Data is Long ------
00001872                          1269  MOVE_MODE_IND_LONG
00001872  0C78 0001 101A          1270      CMP.W  #1,DATA1_IN_USE
00001878  6700 0016               1271      BEQ     MOVE_MODE_IND_LONG_DATA2
0000187C                          1272  
0000187C  4BF9 000023AE           1273      LEA     PRINT_EA_MODE_ID_IND_LONG,A5
00001882  5878 1010               1274      ADD.W           #4,LOOP_INC * Adjust the Loop increment to skip the data
00001886  31FC 0001 101A          1275      MOVE.W  #1,DATA1_IN_USE
0000188C  6000 0010               1276      BRA     MOVE_MODE_FINISH
00001890                          1277  
00001890                          1278  
00001890                          1279  * ------ Data is Long, DATA1 is in use ------
00001890                          1280  MOVE_MODE_IND_LONG_DATA2
00001890                          1281  
00001890  4BF9 000023C8           1282      LEA     PRINT_EA_MODE_ID_IND_LONG_DATA2,A5
00001896  5878 1010               1283      ADD.W           #4,LOOP_INC * Adjust the Loop increment to skip the data
0000189A  6000 0002               1284      BRA     MOVE_MODE_FINISH
0000189E                          1285  
0000189E                          1286  
0000189E                          1287  MOVE_MODE_FINISH
0000189E                          1288  
0000189E  2F0D                    1289    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000018A0  5878 1008               1290    ADD.W           #4,PRINT_COUNT
000018A4                          1291  
000018A4  5478 1010               1292    ADD.W  #2,LOOP_INC     * Increment the loop counter by 2 bytes
000018A8                          1293  
000018A8  6000 0576               1294    BRA   PRINT_OPCODE
000018AC                          1295  
000018AC                          1296  
000018AC                          1297  *-------------------------------------------------------------------------------
000018AC                          1298  * MOVEA
000018AC                          1299  *
000018AC                          1300  *
000018AC                          1301  *-------------------------------------------------------------------------------
000018AC                          1302  MOVEA
000018AC                          1303  
000018AC  2007                    1304    MOVE.L    D7,D0 * Load the print subroutine into intermediate address
000018AE                          1305  
000018AE                          1306  * ------ Print "MOVEA" ------
000018AE                          1307  
000018AE  4BF9 000021E8           1308    LEA     PRINT_MOVEA,A5
000018B4  2F0D                    1309    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000018B6  5878 1008               1310    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000018BA                          1311  
000018BA                          1312  * ------ Determine Size ------
000018BA  E058                    1313    ROR.W   #$8,D0 * Shift a total of 12 bits to retrieve SIZE designator
000018BC  E858                    1314    ROR.W   #$4,D0
000018BE  C07C 0007               1315    AND.W   #$7,D0 * Mask 111
000018C2                          1316  
000018C2  4284                    1317    CLR.L   D4 * Clear D4 for use as BWL parameter
000018C4                          1318  
000018C4  B03C 0003               1319    CMP.B   #3,D0
000018C8  6700 000E               1320    BEQ     MOVEA_W
000018CC  B03C 0002               1321    CMP.B   #2,D0
000018D0  6700 0014               1322    BEQ     MOVEA_L
000018D4                          1323  
000018D4  6000 0BB8               1324    BRA     PRINT_ILLEGAL
000018D8                          1325  
000018D8                          1326  
000018D8                          1327  * ------ Size Branching ------
000018D8                          1328  * MOVEA uses a nonstandard size code. We convert it to the standard so we can
000018D8                          1329  * easily use the existing PUSH_BWL subroutine
000018D8                          1330  MOVEA_W
000018D8  183C 0001               1331    MOVE.B  #1,D4
000018DC  4EB9 00001F26           1332    JSR     PUSH_BWL
000018E2  6000 0010               1333    BRA     MOVEA_SIZE_CONTINUE
000018E6                          1334  
000018E6                          1335  MOVEA_L
000018E6  183C 0002               1336    MOVE.B  #2,D4
000018EA  4EB9 00001F26           1337    JSR     PUSH_BWL
000018F0  6000 0002               1338    BRA     MOVEA_SIZE_CONTINUE
000018F4                          1339  
000018F4                          1340  MOVEA_SIZE_CONTINUE
000018F4                          1341  
000018F4                          1342  * ------ Print Source ------
000018F4  2C07                    1343    MOVE.L    D7,D6
000018F6  4EB9 00001E4C           1344    JSR       PUSH_EA_MODE_ID
000018FC                          1345  
000018FC                          1346  * ------ Print a comma ------
000018FC  4BF9 0000247E           1347    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001902  2F0D                    1348    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001904  5878 1008               1349    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001908                          1350  
00001908                          1351  * ------ Get Destination Address ------
00001908  2007                    1352    MOVE.L    D7,D0
0000190A  E058                    1353    ROR.W     #$8,D0 * Get the three register bits
0000190C  E258                    1354    ROR.W     #$1,D0
0000190E  C07C 0007               1355    AND.W     #$7,D0 * Mask 111
00001912                          1356  
00001912  13C0 00002BEE           1357    MOVE.B    D0,MISC_NUMBER
00001918                          1358  
00001918                          1359  * ------ Print Destination Address ------
00001918  4BF9 0000205E           1360    LEA       PRINT_MISC_NUMBER_AS_ADDRESS,A5
0000191E  2F0D                    1361    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001920  5878 1008               1362    ADD.W           #4,PRINT_COUNT
00001924                          1363  
00001924  5478 1010               1364    ADD.W  #2,LOOP_INC     * Increment the loop counter by 2 bytes
00001928                          1365  
00001928  6000 04F6               1366    BRA   PRINT_OPCODE
0000192C                          1367  
0000192C                          1368  *-------------------------------------------------------------------------------
0000192C                          1369  *   LSX_ASX_ROX
0000192C                          1370  *
0000192C                          1371  *
0000192C                          1372  *-------------------------------------------------------------------------------
0000192C                          1373  LSX_ASX_ROX
0000192C  2007                    1374    MOVE.L    D7,D0      * Reset D0
0000192E  C07C FEC0               1375    AND.W     #$FEC0,D0
00001932                          1376     
00001932                          1377  * ------ Arithmetic Shift MEM ------   
00001932  B07C E0C0               1378    CMP.W #$E0C0,D0
00001936  6700 0066               1379    BEQ   ASX
0000193A                          1380  
0000193A                          1381  * ------ Logical Shift MEM -----
0000193A  B07C E2C0               1382    CMP.W #$E2C0,D0
0000193E  6700 002C               1383    BEQ   LSX
00001942                          1384  
00001942                          1385  * ------ Rotate MEM ------
00001942  B07C E6C0               1386    CMP.W #$E6C0,D0
00001946  6700 0088               1387    BEQ   ROX
0000194A                          1388    
0000194A  2007                    1389    MOVE.L    D7,D0      * Reset D0  
0000194C  C07C 0018               1390    AND.W     #$18,D0  * Isolate bits 4,3 
00001950                          1391    
00001950                          1392  * ------ Arithmetic Shift ------
00001950  B07C 0000               1393    CMP.W #0,D0
00001954  6700 0048               1394    BEQ   ASX
00001958                          1395  
00001958                          1396  * ------ Logical Shift ------
00001958  B07C 0008               1397    CMP.W #8,D0
0000195C  6700 000E               1398    BEQ   LSX
00001960                          1399  
00001960                          1400  * ------ Rotate ------
00001960  B07C 0018               1401    CMP.W #$18,D0
00001964  6700 006A               1402    BEQ   ROX
00001968                          1403  
00001968  6000 0B24               1404    BRA   PRINT_ILLEGAL
0000196C                          1405  *______________________________
0000196C                          1406  *Determine Logical Shift Direction
0000196C                          1407  *------------------------------
0000196C                          1408  LSX
0000196C  2007                    1409    MOVE.L    D7,D0      * Reset D0
0000196E  C07C 0100               1410    AND.W     #$100,D0   * Isolate bit 8
00001972  B07C 0000               1411    CMP.W     #0,D0
00001976  6700 0006               1412    BEQ       LSR
0000197A  6000 0012               1413    BRA       LSL
0000197E                          1414  
0000197E                          1415  *______________________________
0000197E                          1416  * Logical Shift Right
0000197E                          1417  *------------------------------
0000197E                          1418  LSR
0000197E  4BF9 00001F6E           1419    LEA     PRINT_LSR,A5    * Load the print subroutine into intermediate address
00001984  2F0D                    1420    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001986  5878 1008               1421    ADD.W   #4,PRINT_COUNT
0000198A                          1422  
0000198A  6000 0076               1423    BRA     LSX_ASX_ROX_CONTINUE
0000198E                          1424  
0000198E                          1425  *______________________________
0000198E                          1426  * Logical Shift Left
0000198E                          1427  *------------------------------
0000198E                          1428  LSL
0000198E  4BF9 00001F7E           1429    LEA     PRINT_LSL,A5    * Load the print subroutine into intermediate address
00001994  2F0D                    1430    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001996  5878 1008               1431    ADD.W   #4,PRINT_COUNT
0000199A                          1432  
0000199A  6000 0066               1433    BRA     LSX_ASX_ROX_CONTINUE
0000199E                          1434  
0000199E                          1435  *______________________________
0000199E                          1436  *Determine Arithmetic Shift Direction
0000199E                          1437  *------------------------------
0000199E                          1438  ASX
0000199E  2007                    1439    MOVE.L    D7,D0      * Reset D0
000019A0  C07C 0100               1440    AND.W     #$100,D0   * Isolate bit 8
000019A4  B07C 0000               1441    CMP.W     #0,D0
000019A8  6700 0006               1442    BEQ       ASR
000019AC  6000 0012               1443    BRA       ASL
000019B0                          1444  
000019B0                          1445  *______________________________
000019B0                          1446  * Arithmetic Shift Right
000019B0                          1447  *------------------------------
000019B0                          1448  ASR
000019B0  4BF9 00001F8E           1449    LEA     PRINT_ASR,A5    * Load the print subroutine into intermediate address
000019B6  2F0D                    1450    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000019B8  5878 1008               1451    ADD.W   #4,PRINT_COUNT
000019BC                          1452  
000019BC  6000 0044               1453    BRA     LSX_ASX_ROX_CONTINUE
000019C0                          1454  
000019C0                          1455  *______________________________
000019C0                          1456  * Arithmetic Shift Left
000019C0                          1457  *------------------------------
000019C0                          1458  ASL
000019C0  4BF9 00001F9E           1459    LEA     PRINT_ASL,A5    * Load the print subroutine into intermediate address
000019C6  2F0D                    1460    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000019C8  5878 1008               1461    ADD.W   #4,PRINT_COUNT
000019CC                          1462  
000019CC  6000 0034               1463    BRA     LSX_ASX_ROX_CONTINUE
000019D0                          1464  
000019D0                          1465  *______________________________
000019D0                          1466  * Determine Rotate Direction
000019D0                          1467  *------------------------------
000019D0                          1468  ROX
000019D0  2007                    1469    MOVE.L    D7,D0      * Reset D0
000019D2  C07C 0100               1470    AND.W     #$100,D0   * Isolate bit 8
000019D6  B07C 0000               1471    CMP.W     #0,D0
000019DA  6700 0006               1472    BEQ       ROR
000019DE  6000 0012               1473    BRA       ROL
000019E2                          1474  
000019E2                          1475  *______________________________
000019E2                          1476  * Rotate Right
000019E2                          1477  *------------------------------
000019E2                          1478  ROR
000019E2  4BF9 00001FAE           1479    LEA     PRINT_ROR,A5    * Load the print subroutine into intermediate address
000019E8  2F0D                    1480    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000019EA  5878 1008               1481    ADD.W   #4,PRINT_COUNT
000019EE                          1482  
000019EE  6000 0012               1483    BRA     LSX_ASX_ROX_CONTINUE
000019F2                          1484  
000019F2                          1485  *______________________________
000019F2                          1486  * Rotate Left
000019F2                          1487  *------------------------------
000019F2                          1488  ROL
000019F2  4BF9 00001FBE           1489    LEA     PRINT_ROL,A5    * Load the print subroutine into intermediate address
000019F8  2F0D                    1490    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000019FA  5878 1008               1491    ADD.W   #4,PRINT_COUNT
000019FE                          1492  
000019FE  6000 0002               1493    BRA     LSX_ASX_ROX_CONTINUE
00001A02                          1494  
00001A02                          1495  *______________________________
00001A02                          1496  * All Subroutine Continue
00001A02                          1497  *------------------------------
00001A02                          1498  LSX_ASX_ROX_CONTINUE
00001A02  2007                    1499    MOVE.L    D7,D0      * Reset D0
00001A04  EC98                    1500    ROR.L     #$06,D0    * Isolate bits 7,6
00001A06  C0BC 00000003           1501    AND.L     #3,D0
00001A0C  4284                    1502    CLR.L     D4
00001A0E  1800                    1503    MOVE.B    D0,D4      * Move bits 7,6 to D4 for BWL
00001A10                          1504  
00001A10  B03C 0003               1505    CMP.B     #3,D0
00001A14  6700 00CE               1506    BEQ       LSX_ASX_ROX_MEM
00001A18                          1507  
00001A18  4EB9 00001F26           1508    JSR PUSH_BWL
00001A1E                          1509  
00001A1E  2007                    1510    MOVE.L    D7,D0      * Reset D0
00001A20  C07C 0020               1511    AND.W     #$20,D0    * Isolate bit 5
00001A24  B07C 0000               1512    CMP.W     #0,D0
00001A28  6700 0006               1513    BEQ       LSX_ASX_ROX_SHIFT
00001A2C  6000 007C               1514    BRA       LSX_ASX_ROX_REGISTER
00001A30                          1515  
00001A30                          1516  *__________________________________
00001A30                          1517  * Print the number of bits to shift
00001A30                          1518  *----------------------------------
00001A30                          1519  LSX_ASX_ROX_SHIFT
00001A30  2007                    1520    MOVE.L  D7,D0             * Reset D0
00001A32  C0BC 00000E00           1521    AND.L   #$E00,D0           * Get bits 11 - 9
00001A38  B0BC 00000000           1522    CMP.L   #0,D0
00001A3E  6700 003A               1523    BEQ     LSX_ASX_ROX_SHIFT_8  * If 0, shift count is 8
00001A42                          1524  
00001A42  21FC 00000000 1016      1525    MOVE.L  #0,DATA1
00001A4A  E080                    1526    ASR.L   #$8,D0
00001A4C  E280                    1527    ASR.L   #$1,D0
00001A4E  21C0 1016               1528    MOVE.L  D0,DATA1
00001A52                          1529  
00001A52  4BF9 000023E2           1530    LEA PRINT_EA_MODE_ID_ABS_DATA,A5 * Print shift count
00001A58  2F0D                    1531    MOVE.L    A5, -(SP)
00001A5A  5878 1008               1532    ADD.W     #4, PRINT_COUNT
00001A5E                          1533  
00001A5E  4BF9 0000247E           1534    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001A64  2F0D                    1535    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001A66  5878 1008               1536    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001A6A                          1537  
00001A6A  4BF9 00002278           1538    LEA   PRINT_EA_MODE_ID_DN,A5  * Print data register
00001A70  2F0D                    1539    MOVE.L    A5, -(SP)
00001A72  5878 1008               1540    ADD.W     #4, PRINT_COUNT
00001A76                          1541  
00001A76  6000 0092               1542    BRA LSX_ASX_ROX_FINISH
00001A7A                          1543  
00001A7A                          1544  *__________________________________
00001A7A                          1545  * Convert 0 to 8 (Special case)
00001A7A                          1546  *----------------------------------
00001A7A                          1547  LSX_ASX_ROX_SHIFT_8
00001A7A  21FC 00000008 1016      1548    MOVE.L  #8,DATA1
00001A82  4BF9 000023E2           1549    LEA PRINT_EA_MODE_ID_ABS_DATA,A5  * Print shift count 8
00001A88  2F0D                    1550    MOVE.L    A5, -(SP)
00001A8A  5878 1008               1551    ADD.W     #4, PRINT_COUNT
00001A8E                          1552  
00001A8E  4BF9 0000247E           1553    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001A94  2F0D                    1554    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001A96  5878 1008               1555    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001A9A                          1556  
00001A9A                          1557  
00001A9A  4BF9 00002278           1558    LEA   PRINT_EA_MODE_ID_DN,A5  * Print data register
00001AA0  2F0D                    1559    MOVE.L    A5, -(SP)
00001AA2  5878 1008               1560    ADD.W     #4, PRINT_COUNT
00001AA6                          1561  
00001AA6  6000 0062               1562    BRA LSX_ASX_ROX_FINISH
00001AAA                          1563  
00001AAA                          1564  *__________________________________
00001AAA                          1565  * Print the register that contains the number of bits to shift
00001AAA                          1566  *----------------------------------
00001AAA                          1567  LSX_ASX_ROX_REGISTER
00001AAA  2007                    1568    MOVE.L    D7,D0      * Reset D0
00001AAC  C0BC 00000E00           1569    AND.L   #$E00,D0
00001AB2                          1570  
00001AB2  E080                    1571    ASR.L   #$8,D0
00001AB4  E280                    1572    ASR.L   #$1,D0
00001AB6                          1573  
00001AB6  13C0 00002BEE           1574    MOVE.B  D0,MISC_NUMBER
00001ABC  4BF9 00002084           1575    LEA   PRINT_MISC_NUMBER_AS_REGISTER,A5  * Print data register
00001AC2  2F0D                    1576    MOVE.L    A5, -(SP)
00001AC4  5878 1008               1577    ADD.W     #4, PRINT_COUNT
00001AC8                          1578  
00001AC8  4BF9 0000247E           1579    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001ACE  2F0D                    1580    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001AD0  5878 1008               1581    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001AD4                          1582  
00001AD4  4BF9 00002278           1583    LEA   PRINT_EA_MODE_ID_DN,A5  * Print data register
00001ADA  2F0D                    1584    MOVE.L    A5, -(SP)
00001ADC  5878 1008               1585    ADD.W     #4, PRINT_COUNT
00001AE0                          1586  
00001AE0  6000 0028               1587    BRA LSX_ASX_ROX_FINISH
00001AE4                          1588  
00001AE4                          1589  *__________________________________
00001AE4                          1590  * Memory Shift mode
00001AE4                          1591  *----------------------------------
00001AE4                          1592  LSX_ASX_ROX_MEM
00001AE4  2C07                    1593    MOVE.L D7,D6
00001AE6  CCBC 00000038           1594    AND.L #$38,D6
00001AEC  BC7C 0008               1595    CMP.W #8,D6
00001AF0  6F00 099C               1596    BLE   PRINT_ILLEGAL
00001AF4                          1597  
00001AF4  4BF9 0000245E           1598    LEA PRINT_FOURSPACE,A5
00001AFA  2F0D                    1599    MOVE.L    A5,-(SP)
00001AFC  5878 1008               1600    ADD.W    #4,PRINT_COUNT
00001B00                          1601  
00001B00  4EB9 00001E4C           1602    JSR     PUSH_EA_MODE_ID
00001B06  6000 0002               1603    BRA LSX_ASX_ROX_FINISH
00001B0A                          1604  
00001B0A                          1605  
00001B0A                          1606  *__________________________________
00001B0A                          1607  * Finish
00001B0A                          1608  *----------------------------------
00001B0A                          1609  LSX_ASX_ROX_FINISH
00001B0A  31FC 0002 1010          1610    MOVE.W  #2,LOOP_INC
00001B10  6000 030E               1611    BRA   PRINT_OPCODE
00001B14                          1612  
00001B14                          1613  LSX_ASX_ROX_RESET_D7
00001B14  2007                    1614      MOVE.L    D7,D0
00001B16  6000 0322               1615      BRA   PRINT_OPCODE_LOOP_RETURN
00001B1A                          1616  
00001B1A                          1617  *-------------------------------------------------------------------------------
00001B1A                          1618  *   BCC
00001B1A                          1619  *
00001B1A                          1620  *
00001B1A                          1621  *-------------------------------------------------------------------------------
00001B1A                          1622  BCC
00001B1A  2007                    1623    MOVE.L    D7,D0      * Reset D0
00001B1C  C07C 0F00               1624    AND.W     #$0F00,D0  * Isolate bits 11-8
00001B20  B07C 0000               1625    CMP.W     #0,D0
00001B24  6700 001E               1626    BEQ       BRA
00001B28                          1627  
00001B28  B07C 0E00               1628    CMP.W     #$E00,D0
00001B2C  6700 0026               1629    BEQ       BGT
00001B30                          1630  
00001B30  B07C 0F00               1631    CMP.W     #$F00,D0
00001B34  6700 002E               1632    BEQ       BLE
00001B38                          1633  
00001B38  B07C 0700               1634    CMP.W     #$700,D0
00001B3C  6700 0036               1635    BEQ       BEQ
00001B40                          1636  
00001B40  6000 094C               1637    BRA       PRINT_ILLEGAL
00001B44                          1638  
00001B44                          1639  BRA
00001B44  4BF9 00002018           1640    LEA     PRINT_BRA,A5    * Load the print subroutine into intermediate address
00001B4A  2F0D                    1641    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001B4C  5878 1008               1642    ADD.W   #4,PRINT_COUNT
00001B50                          1643  
00001B50  6000 0032               1644    BRA   BCC_CONTINUE
00001B54                          1645  
00001B54                          1646  BGT
00001B54  4BF9 00001FE8           1647    LEA     PRINT_BGT,A5    * Load the print subroutine into intermediate address
00001B5A  2F0D                    1648    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001B5C  5878 1008               1649    ADD.W   #4,PRINT_COUNT
00001B60                          1650  
00001B60  6000 0022               1651    BRA   BCC_CONTINUE
00001B64                          1652  
00001B64                          1653  BLE
00001B64  4BF9 00001FF8           1654    LEA     PRINT_BLE,A5    * Load the print subroutine into intermediate address
00001B6A  2F0D                    1655    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001B6C  5878 1008               1656    ADD.W   #4,PRINT_COUNT
00001B70                          1657  
00001B70  6000 0012               1658    BRA   BCC_CONTINUE
00001B74                          1659  
00001B74                          1660  BEQ
00001B74  4BF9 00002008           1661    LEA     PRINT_BEQ,A5    * Load the print subroutine into intermediate address
00001B7A  2F0D                    1662    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001B7C  5878 1008               1663    ADD.W   #4,PRINT_COUNT
00001B80                          1664  
00001B80  6000 0002               1665    BRA   BCC_CONTINUE
00001B84                          1666  
00001B84                          1667  BCC_CONTINUE
00001B84  7000                    1668    MOVE.L    #0,D0
00001B86  1007                    1669    MOVE.B    D7,D0      * Reset D0
00001B88  B03C 0000               1670    CMP.B     #0,D0
00001B8C  6700 0020               1671    BEQ       BCC_16     * if 16 bit displacement, print the following short
00001B90                          1672  
00001B90  B03C 00FF               1673    CMP.B     #$FF,D0    * if 32 bit displacement, print the following long
00001B94  6700 0032               1674    BEQ       BCC_32
00001B98                          1675  
00001B98  21FC 00000000 1016      1676    MOVE.L    #0,DATA1
00001BA0                          1677    *ROR.L     #4,D0
00001BA0  21C0 1016               1678    MOVE.L    D0,DATA1
00001BA4                          1679  
00001BA4  31FC 0002 1010          1680    MOVE.W  #2,LOOP_INC
00001BAA                          1681  
00001BAA  6000 0026               1682    BRA     BCC_END
00001BAE                          1683  
00001BAE                          1684  BCC_16
00001BAE  2238 1016               1685    MOVE.L          DATA1,D1
00001BB2  4841                    1686    SWAP            D1              * We only want the upper word
00001BB4  C2BC 0000FFFF           1687    AND.L           #$0000FFFF,D1   * Bit mask for upper word
00001BBA  21C1 1016               1688    MOVE.L          D1,DATA1
00001BBE                          1689  
00001BBE  31FC 0004 1010          1690    MOVE.W  #4,LOOP_INC
00001BC4                          1691  
00001BC4  6000 000C               1692    BRA     BCC_END
00001BC8                          1693  
00001BC8                          1694  BCC_32
00001BC8  31FC 0006 1010          1695    MOVE.W  #6,LOOP_INC
00001BCE  6000 0002               1696    BRA     BCC_END
00001BD2                          1697  
00001BD2                          1698  BCC_END
00001BD2  4BF9 000023E2           1699    LEA     PRINT_EA_MODE_ID_ABS_DATA,A5
00001BD8  2F0D                    1700    MOVE.L  A5, -(SP)
00001BDA  5878 1008               1701    ADD.W   #4, PRINT_COUNT
00001BDE                          1702  
00001BDE  6000 0240               1703    BRA   PRINT_OPCODE
00001BE2                          1704  
00001BE2                          1705  
00001BE2                          1706  *-------------------------------------------------------------------------------
00001BE2                          1707  *   ADD ADDA
00001BE2                          1708  *
00001BE2                          1709  * Because ADD and ADDA have the same first four bits (1101), we need to do
00001BE2                          1710  * some additional branching to differentiate them.
00001BE2                          1711  *________________________________________
00001BE2                          1712  * Register Use Summary:
00001BE2                          1713  *
00001BE2                          1714  * D0: General variable, cleared every use to be safe
00001BE2                          1715  * D7: CONST - The opcode to decode - NO TOUCH
00001BE2                          1716  *
00001BE2                          1717  *-------------------------------------------------------------------------------
00001BE2                          1718  ADD_ADDA
00001BE2                          1719  
00001BE2  4280                    1720    CLR.L   D0
00001BE4  2007                    1721    MOVE.L  D7,D0
00001BE6                          1722  
00001BE6  EC58                    1723    ROR.W   #06,D0     * Get bits 7,6 on end
00001BE8  C03C 0003               1724    AND.B   #03,D0     * Isolate bits 7,6
00001BEC  B03C 0003               1725    CMP.B   #03,D0
00001BF0  6700 0006               1726    BEQ   ADDA
00001BF4                          1727  
00001BF4  6000 0082               1728    BRA   ADD          * Else it's ADD
00001BF8                          1729  *-------------------------------------------------------------------------------
00001BF8                          1730  
00001BF8                          1731  
00001BF8                          1732  *-------------------------------------------------------------------------------
00001BF8                          1733  *   ADDA
00001BF8                          1734  *
00001BF8                          1735  *
00001BF8                          1736  *-------------------------------------------------------------------------------
00001BF8                          1737  ADDA
00001BF8                          1738  
00001BF8  2007                    1739    MOVE.L  D7,D0         * Reset D0
00001BFA                          1740  
00001BFA  4BF9 00002038           1741    LEA     PRINT_ADDA,A5    * Load the print subroutine into intermediate address
00001C00  2F0D                    1742    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001C02  5878 1008               1743    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001C06                          1744  
00001C06  EC58                    1745    ROR.W   #$6,D0        * Get bits 9,8,7,6 on end byte
00001C08  C03C 0007               1746    AND.B   #7,D0         * Isolate bits 8,7,6
00001C0C                          1747  
00001C0C  B03C 0003               1748    CMP.B   #3,D0         * If 8,7,6 == 011
00001C10  6700 001E               1749    BEQ     ADDA_W
00001C14                          1750  
00001C14  B03C 0007               1751    CMP.B   #7,D0         * If 8,7,6 == 111
00001C18  6700 0006               1752    BEQ     ADDA_L
00001C1C                          1753  
00001C1C  6000 0870               1754    BRA     PRINT_ILLEGAL
00001C20                          1755  
00001C20                          1756  * ------ Long Opmode ------
00001C20                          1757  ADDA_L
00001C20                          1758  
00001C20  4BF9 00002268           1759    LEA     PRINT_LONG_DESIGNATOR,A5 * Load the ".L" print subroutine
00001C26  2F0D                    1760    MOVE.L  A5, -(SP)       * Put the subroutine onto the stack
00001C28  5878 1008               1761    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001C2C                          1762  
00001C2C  6000 0012               1763    BRA     ADDA_CONTINUE
00001C30                          1764  
00001C30                          1765  * ------ Word Opmode ------
00001C30                          1766  ADDA_W
00001C30                          1767  
00001C30  4BF9 00002258           1768    LEA     PRINT_WORD_DESIGNATOR,A5 * Load the ".W" print subroutine
00001C36  2F0D                    1769    MOVE.L  A5, -(SP)         * Put the subroutine onto the stack
00001C38  5878 1008               1770    ADD.W   #4,PRINT_COUNT    * Increment Print Count by 1 long
00001C3C                          1771  
00001C3C  6000 0002               1772    BRA     ADDA_CONTINUE
00001C40                          1773  
00001C40                          1774  * ------ Continue ------
00001C40                          1775  ADDA_CONTINUE
00001C40                          1776  
00001C40                          1777  * Push the effective address print subroutine onto the stack
00001C40  2C07                    1778    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001C42  4EB9 00001E4C           1779    JSR     PUSH_EA_MODE_ID
00001C48                          1780  
00001C48                          1781  
00001C48  4BF9 0000247E           1782    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001C4E  2F0D                    1783    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001C50  5878 1008               1784    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001C54                          1785  
00001C54                          1786  
00001C54                          1787  
00001C54                          1788  * Reset and push the address register print subroutine onto the stack
00001C54  2007                    1789    MOVE.L D7,D0    * Reset D0
00001C56                          1790  
00001C56  E080                    1791    ASR.L   #$8,D0
00001C58  E280                    1792    ASR.L   #$1,D0
00001C5A  C03C 0007               1793    AND.B   #$7,D0
00001C5E                          1794  
00001C5E  13C0 00002BEE           1795    MOVE.B  D0,MISC_NUMBER
00001C64                          1796  
00001C64  4BF9 0000205E           1797    LEA     PRINT_MISC_NUMBER_AS_ADDRESS,A5   * Load the print subroutine
00001C6A  2F0D                    1798    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001C6C  5878 1008               1799    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001C70                          1800  
00001C70  5478 1010               1801    ADD.W  #2,LOOP_INC     * Increment the loop counter by 2 bytes
00001C74                          1802  
00001C74  6000 01AA               1803    BRA   PRINT_OPCODE
00001C78                          1804  
00001C78                          1805  *-------------------------------------------------------------------------------
00001C78                          1806  *   ADD
00001C78                          1807  *
00001C78                          1808  *
00001C78                          1809  *-------------------------------------------------------------------------------
00001C78                          1810  ADD
00001C78                          1811  
00001C78                          1812  * ------ Print "ADD" ------
00001C78  4BF9 00002028           1813    LEA     PRINT_ADD,A5    * Load the print subroutine into intermediate address
00001C7E  2F0D                    1814    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001C80  5878 1008               1815    ADD.W   #4,PRINT_COUNT
00001C84                          1816  
00001C84                          1817  * ------ Print size ------
00001C84  1800                    1818    MOVE.B   D0,D4            * Move bits 7,6 to D4 for BWL
00001C86  4EB9 00001F26           1819    JSR      PUSH_BWL
00001C8C                          1820  
00001C8C                          1821  * ------ Reset D0, determine order ------
00001C8C  2007                    1822    MOVE.L  D7,D0
00001C8E  E058                    1823    ROR.W   #08,D0     * Get bit 8 on the end
00001C90  C07C 0001               1824    AND.W   #1,D0
00001C94                          1825  
00001C94                          1826    * If bit 8 == 0 the order is <ea> + Dn
00001C94                          1827    * If bit 8 == 1 the order is Dn + <ea>
00001C94                          1828  
00001C94  B03C 0001               1829    CMP.B   #1,D0
00001C98  6700 003A               1830    BEQ     ADD_DN_FIRST
00001C9C                          1831  
00001C9C                          1832  * ------ Print order is effective address, data register ------
00001C9C                          1833  ADD_EA_FIRST
00001C9C                          1834  
00001C9C                          1835  
00001C9C                          1836    * ------ Print the effective address ------
00001C9C  2C07                    1837    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001C9E  4EB9 00001E4C           1838    JSR     PUSH_EA_MODE_ID
00001CA4                          1839  
00001CA4                          1840    * ------ Print a comma ------
00001CA4  4BF9 0000247E           1841    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001CAA  2F0D                    1842    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001CAC  5878 1008               1843    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001CB0                          1844  
00001CB0                          1845    * ------ Determine the register number ------
00001CB0  2007                    1846    MOVE.L  D7,D0
00001CB2  E058                    1847    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
00001CB4  E258                    1848    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
00001CB6  C07C 0007               1849    AND.W   #7,D0 * Mask against 111 to only get 3 bits
00001CBA                          1850  
00001CBA                          1851    * ------ Print the register number ------
00001CBA  13C0 00002BEE           1852    MOVE.B  D0,MISC_NUMBER
00001CC0  4BF9 00002084           1853    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
00001CC6  2F0D                    1854    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001CC8  5878 1008               1855    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001CCC                          1856  
00001CCC  5478 1010               1857    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
00001CD0                          1858  
00001CD0  6000 014E               1859    BRA   PRINT_OPCODE
00001CD4                          1860  
00001CD4                          1861  
00001CD4                          1862  * ------ Print order is data register, effective address ------
00001CD4                          1863  ADD_DN_FIRST
00001CD4                          1864  
00001CD4                          1865  
00001CD4                          1866    * ------ Determine the register number ------
00001CD4  2007                    1867    MOVE.L  D7,D0
00001CD6  E058                    1868    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
00001CD8  E258                    1869    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
00001CDA  C07C 0007               1870    AND.W   #7,D0 * Mask against 111 to only get 3 bits
00001CDE                          1871  
00001CDE                          1872    * ------ Print the register number ------
00001CDE  13C0 00002BEE           1873    MOVE.B  D0,MISC_NUMBER
00001CE4  4BF9 00002084           1874    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
00001CEA  2F0D                    1875    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001CEC  5878 1008               1876    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001CF0                          1877  
00001CF0                          1878    * ------ Print a comma ------
00001CF0  4BF9 0000247E           1879    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001CF6  2F0D                    1880    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001CF8  5878 1008               1881    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001CFC                          1882  
00001CFC                          1883    * ------ Print the effective address ------
00001CFC  2C07                    1884    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001CFE  4EB9 00001E4C           1885    JSR     PUSH_EA_MODE_ID
00001D04                          1886  
00001D04  5478 1010               1887    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
00001D08                          1888  
00001D08  6000 0116               1889    BRA   PRINT_OPCODE
00001D0C                          1890  
00001D0C                          1891  
00001D0C                          1892  *-------------------------------------------------------------------------------
00001D0C                          1893  *   ADDQ
00001D0C                          1894  *
00001D0C                          1895  *
00001D0C                          1896  *-------------------------------------------------------------------------------
00001D0C                          1897  ADDQ
00001D0C                          1898  
00001D0C                          1899  
00001D0C                          1900  * ------ Ensure that opcode is valid ------
00001D0C  2007                    1901    MOVE.L  D7,D0
00001D0E  E058                    1902    ROR.W   #$08,D0
00001D10  C03C 0001               1903    AND.B   #1,D0
00001D14  B03C 0000               1904    CMP.B   #0,D0             * Check for 0 in 8th bit
00001D18  6600 0774               1905    BNE     PRINT_ILLEGAL
00001D1C                          1906  
00001D1C                          1907  * ------ Print "ADDQ" ------
00001D1C  4BF9 000021C8           1908    LEA     PRINT_ADDQ,A5    * Load the print subroutine into intermediate address
00001D22  2F0D                    1909    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001D24  5878 1008               1910    ADD.W   #4,PRINT_COUNT
00001D28                          1911  
00001D28                          1912  * ------ Print Size ------
00001D28  2007                    1913    MOVE.L  D7,D0
00001D2A  EC58                    1914    ROR.W   #6,D0
00001D2C  C07C 0003               1915    AND.W   #3,D0
00001D30                          1916  
00001D30  4284                    1917    CLR.L   D4
00001D32  1800                    1918    MOVE.B  D0,D4            * Move bits 7,6 to D4 for BWL
00001D34  4EB9 00001F26           1919    JSR     PUSH_BWL
00001D3A                          1920  
00001D3A                          1921  * ------ Retrieve Data ------
00001D3A  2007                    1922    MOVE.L  D7,D0             * Reset D0
00001D3C  E058                    1923    ROR.W   #$8, D0           * Get bits 11 - 9
00001D3E  E258                    1924    ROR.W   #$1, D0           * Get bits 11 - 9
00001D40  C03C 0007               1925    AND.B   #$7, D0           * Clear bit 11
00001D44                          1926  
00001D44                          1927  
00001D44                          1928  * ADDQ converts 000 to 8 since nobody wants to add 0 to their number
00001D44  0C00 0000               1929    CMPI.B   #0,D0
00001D48  6600 0006               1930    BNE      ADDQ_NOT_ZERO
00001D4C                          1931  
00001D4C                          1932  *Else: D0 is 0, so we convert to 8
00001D4C  103C 0008               1933    MOVE.B   #8,D0
00001D50                          1934  
00001D50                          1935  ADDQ_NOT_ZERO
00001D50                          1936  
00001D50  13C0 00002BEE           1937    MOVE.B  D0,MISC_NUMBER
00001D56                          1938  
00001D56                          1939  * ------ Print Data ------
00001D56  4BF9 000021A2           1940    LEA     PRINT_MISC_NUMBER_AS_DATA,A5
00001D5C  2F0D                    1941    MOVE.L  A5, -(SP)
00001D5E  5878 1008               1942    ADD.W   #4, PRINT_COUNT
00001D62                          1943  
00001D62                          1944  * ------ Print a comma ------
00001D62  4BF9 0000247E           1945    LEA     PRINT_COMMA,A5  * Load the print subroutine
00001D68  2F0D                    1946    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001D6A  5878 1008               1947    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001D6E                          1948  
00001D6E                          1949  * ------ Print Effective Address ------
00001D6E  2C07                    1950    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001D70  4EB9 00001E4C           1951    JSR     PUSH_EA_MODE_ID
00001D76                          1952  
00001D76                          1953  
00001D76  31FC 0002 1010          1954    MOVE.W  #2,LOOP_INC     * Increment the loop counter by 2 bytes
00001D7C  6000 00A2               1955    BRA     PRINT_OPCODE    * Always put this at the end
00001D80                          1956  
00001D80                          1957  
00001D80                          1958  
00001D80                          1959  *-------------------------------------------------------------------------------
00001D80                          1960  *   NOP
00001D80                          1961  *
00001D80                          1962  *   NONSTANDARD OPCODE! Don't base your design off of this :)
00001D80                          1963  *
00001D80                          1964  *-------------------------------------------------------------------------------
00001D80                          1965  NOP
00001D80                          1966  
00001D80  43F9 00002B4E           1967    LEA     STRING_NOP,A1
00001D86  103C 000E               1968    MOVE.B  #14,D0
00001D8A  4E4F                    1969    TRAP    #15
00001D8C                          1970  
00001D8C  31FC 0002 1010          1971    MOVE.W  #2,LOOP_INC   * Increment the loop counter by 2 bytes
00001D92                          1972  
00001D92  4EB9 000024E2           1973    JSR     PRINT_IMMEDIATE_NEWLINE
00001D98                          1974  
00001D98  4E75                    1975    RTS
00001D9A                          1976  
00001D9A                          1977  *-------------------------------------------------------------------------------
00001D9A                          1978  *   RTS
00001D9A                          1979  *
00001D9A                          1980  *   NONSTANDARD OPCODE! Don't base your design off of this :)
00001D9A                          1981  *
00001D9A                          1982  *-------------------------------------------------------------------------------
00001D9A                          1983  RTS
00001D9A                          1984  
00001D9A  43F9 00002B52           1985    LEA     STRING_RTS,A1
00001DA0  103C 000E               1986    MOVE.B  #14,D0
00001DA4  4E4F                    1987    TRAP    #15
00001DA6                          1988  
00001DA6  31FC 0002 1010          1989    MOVE.W  #2,LOOP_INC   * Increment the loop counter by 2 bytes
00001DAC                          1990  
00001DAC  4EB9 000024E2           1991    JSR     PRINT_IMMEDIATE_NEWLINE
00001DB2                          1992  
00001DB2  4E75                    1993    RTS
00001DB4                          1994  
00001DB4                          1995  
00001DB4                          1996  *-------------------------------------------------------------------------------
00001DB4                          1997  *   JSR
00001DB4                          1998  *
00001DB4                          1999  *
00001DB4                          2000  *-------------------------------------------------------------------------------
00001DB4                          2001  JSR
00001DB4                          2002  
00001DB4  4BF9 0000242E           2003    LEA     PRINT_JSR,A5    * Load the print subroutine into intermediate address
00001DBA  2F0D                    2004    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001DBC  5878 1008               2005    ADD.W           #4,PRINT_COUNT
00001DC0                          2006  
00001DC0                          2007  * ---- Custom Branching Block ----
00001DC0                          2008  * Supported Modes: (An), Indirect short, Indirect Long
00001DC0                          2009  
00001DC0  4280                    2010    CLR.L     D0
00001DC2  1007                    2011    MOVE.B    D7,D0 * Copy opcode into local variable
00001DC4  C03C 0038               2012    AND.B     #$38,D0 * Mask D0 with 0111000 to get MODE bits only
00001DC8  E600                    2013    ASR.B   #3,D0 * Shift the result so D0 ranges between 000 and 111
00001DCA                          2014  
00001DCA  B03C 0002               2015    CMP.B   #2,D0         *010 -> Address Register   Indirect
00001DCE  6700 002A               2016    BEQ   JSR_PUSH_EA_MODE_ID_AN_INDIRECT
00001DD2  B03C 0007               2017    CMP.B   #7,D0         *111 -> All Data Operations
00001DD6  6700 0006               2018    BEQ     JSR_EA_MODE_ELSE
00001DDA                          2019  
00001DDA  6000 06B2               2020    BRA     PRINT_ILLEGAL
00001DDE                          2021  
00001DDE                          2022  
00001DDE                          2023  *________________________________________
00001DDE                          2024  * Handle Data Branching Logic
00001DDE                          2025  * Only short and long indirect allowed
00001DDE                          2026  *----------------------------------------
00001DDE                          2027  JSR_EA_MODE_ELSE
00001DDE                          2028  
00001DDE  4280                    2029    CLR.L   D0
00001DE0  1007                    2030    MOVE.B  D7,D0
00001DE2  C03C 0007               2031    AND.B   #7,D0
00001DE6                          2032  
00001DE6  B03C 0000               2033    CMP.B   #0,D0
00001DEA  6700 0018               2034    BEQ     JSR_PUSH_EA_MODE_ID_IND_SHORT
00001DEE                          2035  
00001DEE  B03C 0001               2036    CMP.B   #1,D0
00001DF2  6700 001A               2037    BEQ     JSR_PUSH_EA_MODE_ID_IND_LONG
00001DF6                          2038  
00001DF6  6000 0696               2039    BRA     PRINT_ILLEGAL
00001DFA                          2040  
00001DFA                          2041  *________________________________________
00001DFA                          2042  * Jump directly into the middle of
00001DFA                          2043  * the PUSH_EA_MODE subroutine
00001DFA                          2044  *----------------------------------------
00001DFA                          2045  JSR_PUSH_EA_MODE_ID_AN_INDIRECT
00001DFA  4EB9 00001E9C           2046    JSR   PUSH_EA_MODE_ID_AN_INDIRECT
00001E00  6000 0016               2047    BRA   JSR_FINISH
00001E04                          2048  
00001E04                          2049  *________________________________________
00001E04                          2050  * Jump directly into the middle of
00001E04                          2051  * the PUSH_EA_MODE subroutine
00001E04                          2052  *----------------------------------------
00001E04                          2053  JSR_PUSH_EA_MODE_ID_IND_SHORT
00001E04  4EB9 00001EDC           2054    JSR   PUSH_EA_MODE_ID_IND_SHORT
00001E0A  6000 000C               2055    BRA   JSR_FINISH
00001E0E                          2056  
00001E0E                          2057  *________________________________________
00001E0E                          2058  * Jump directly into the middle of
00001E0E                          2059  * the PUSH_EA_MODE subroutine
00001E0E                          2060  *----------------------------------------
00001E0E                          2061  JSR_PUSH_EA_MODE_ID_IND_LONG
00001E0E  4EB9 00001EF0           2062    JSR   PUSH_EA_MODE_ID_IND_LONG
00001E14  6000 0002               2063    BRA   JSR_FINISH
00001E18                          2064  
00001E18                          2065  JSR_FINISH
00001E18                          2066  
00001E18  5478 1010               2067    ADD.W   #2,LOOP_INC     * Increment the loop counter by 1 word
00001E1C                          2068  
00001E1C  6000 0002               2069    BRA     PRINT_OPCODE    * Always put this at the end
00001E20                          2070  
00001E20                          2071  *-------------------------------------------------------------------------------
00001E20                          2072  *   PRINT OPCODE
00001E20                          2073  *-------------------------------------------------------------------------------
00001E20                          2074  
00001E20                          2075  PRINT_OPCODE
00001E20                          2076  
00001E20  2E78 100C               2077    MOVE.L  STACK_BASE,SP * Put the stack back to where it was when we started
00001E24  31FC 0000 100A          2078    MOVE.W  #0,PRINT_OPCODE_LOOP_INDEX
00001E2A                          2079  
00001E2A                          2080  PRINT_OPCODE_LOOP
00001E2A                          2081  
00001E2A  3278 100A               2082    MOVEA.W   PRINT_OPCODE_LOOP_INDEX,A1
00001E2E                          2083  
00001E2E  B2F8 1008               2084    CMP.W   PRINT_COUNT,A1 * Check if we're done
00001E32  6C00 000C               2085    BGE     PRINT_OPCODE_LOOP_FINISH
00001E36                          2086  
00001E36  2467                    2087    MOVE.L  -(SP),A2  * Pop the next item on the stack and put it in A1
00001E38  4ED2                    2088    JMP     (A2)        * Jump to the routine we stored on the stack
00001E3A                          2089  
00001E3A                          2090  PRINT_OPCODE_LOOP_RETURN * Print methods come back here
00001E3A                          2091  
00001E3A  5878 100A               2092    ADD.W    #4,PRINT_OPCODE_LOOP_INDEX
00001E3E                          2093  
00001E3E  60EA                    2094    BRA     PRINT_OPCODE_LOOP
00001E40                          2095  
00001E40                          2096  PRINT_OPCODE_LOOP_FINISH
00001E40                          2097  
00001E40  2E78 100C               2098    MOVE.L  STACK_BASE,SP  * Return the stack to normal so we can RTS
00001E44                          2099  
00001E44  4EB9 000024E2           2100    JSR     PRINT_IMMEDIATE_NEWLINE
00001E4A  4E75                    2101    RTS
00001E4C                          2102  
00001E4C                          2103  *-------------------------------------------------------------------------------
00001E4C                          2104  
00001E4C                          2105  
00001E4C                          2106  
00001E4C                          2107  
00001E4C                          2108  
00001E4C                          2109  
00001E4C                          2110  
00001E4C                          2111  
00001E4C                          2112  
00001E4C                          2113  
00001E4C                          2114  *-------------------------------------------------------------------------------
00001E4C                          2115  *     _______    ________
00001E4C                          2116  *    |\  ___ \  |\   __  \
00001E4C                          2117  *    \ \   __/| \ \  \|\  \
00001E4C                          2118  *     \ \  \_|/__\ \   __  \
00001E4C                          2119  *      \ \  \_|\ \\ \  \ \  \
00001E4C                          2120  *       \ \_______\\ \__\ \__\
00001E4C                          2121  *        \|_______| \|__|\|__|
00001E4C                          2122  *
00001E4C                          2123  *-------------------------------------------------------------------------------
00001E4C                          2124  
00001E4C                          2125  *-------------------------------------------------------------------------------
00001E4C                          2126  *
00001E4C                          2127  *       PUSH EFFECTIVE ADDRESS MODE IDENTIFIER
00001E4C                          2128  *
00001E4C                          2129  * Determines the addressing mode of the effective address. Used for opcodes
00001E4C                          2130  * with the last five bits dedicated to the effective address.
00001E4C                          2131  *
00001E4C                          2132  * TODO: Implement a counter for how many prints we've made
00001E4C                          2133  *
00001E4C                          2134  *________________________________________
00001E4C                          2135  * Register Use Summary:
00001E4C                          2136  *
00001E4C                          2137  * D0: LOCAL VARIABLE - low byte of opcode
00001E4C                          2138  * D6: PARAMETER - The effective address bits. Assumes bits are shifted into
00001E4C                          2139  *                 the lowest 6 bits of the register.
00001E4C                          2140  *
00001E4C                          2141  * A4: LOCAL VARIABLE - RTS value temporary storage - must be swapped
00001E4C                          2142  * A5: LOCAL VARIABLE - Print Label to be pushed to stack
00001E4C                          2143  *
00001E4C                          2144  *-------------------------------------------------------------------------------
00001E4C                          2145  PUSH_EA_MODE_ID
00001E4C                          2146  
00001E4C                          2147  
00001E4C                          2148  * ---- Input Processing ----
00001E4C                          2149  
00001E4C  1006                    2150      MOVE.B  D6,D0   * Put opcode in D0
00001E4E  C03C 0038               2151      AND.B   #$38,D0 * Mask D0 with 0111000 to get MODE bits only
00001E52  E600                    2152      ASR.B   #3,D0   * Shift the result so D0 ranges between 000 and 111
00001E54                          2153  
00001E54                          2154  
00001E54                          2155  * ---- Branching Block ----
00001E54                          2156  
00001E54  B03C 0000               2157      CMP.B   #0,D0           *000 -> Register
00001E58  6700 002E               2158      BEQ     PUSH_EA_MODE_ID_DN
00001E5C  B03C 0001               2159      CMP.B   #1,D0           *001 -> Address Register
00001E60  6700 0030               2160      BEQ     PUSH_EA_MODE_ID_AN
00001E64  B03C 0002               2161      CMP.B   #2,D0           *010 -> Address Register   Indirect
00001E68  6700 0032               2162      BEQ     PUSH_EA_MODE_ID_AN_INDIRECT
00001E6C  B03C 0003               2163      CMP.B   #3,D0           *011 -> Address Register  (Indirect)+
00001E70  6700 0034               2164      BEQ     PUSH_EA_MODE_ID_AN_POST_INC
00001E74  B03C 0004               2165      CMP.B   #4,D0           *100 -> Address Register -(Indirect)
00001E78  6700 0036               2166      BEQ     PUSH_EA_MODE_ID_AN_PRE_DEC
00001E7C  B03C 0007               2167      CMP.B   #7,D0           *111 -> All Data Operations
00001E80  6700 0038               2168      BEQ     PUSH_EA_MODE_ID_ELSE
00001E84                          2169  
00001E84  6000 0608               2170      BRA     PRINT_ILLEGAL
00001E88                          2171  
00001E88                          2172  *________________________________________
00001E88                          2173  * Load Register Print Label
00001E88                          2174  *----------------------------------------
00001E88                          2175  PUSH_EA_MODE_ID_DN
00001E88  4BF9 00002278           2176      LEA     PRINT_EA_MODE_ID_DN,A5
00001E8E  6000 0088               2177      BRA     PUSH_EA_MODE_ID_FINISH
00001E92                          2178  
00001E92                          2179  *________________________________________
00001E92                          2180  * Load Address Register Print Label
00001E92                          2181  *----------------------------------------
00001E92                          2182  PUSH_EA_MODE_ID_AN
00001E92  4BF9 00002296           2183      LEA     PRINT_EA_MODE_ID_AN,A5
00001E98  6000 007E               2184      BRA     PUSH_EA_MODE_ID_FINISH
00001E9C                          2185  
00001E9C                          2186  *________________________________________
00001E9C                          2187  * Load (Address Register) Print Label
00001E9C                          2188  *----------------------------------------
00001E9C                          2189  PUSH_EA_MODE_ID_AN_INDIRECT
00001E9C  4BF9 000022B4           2190      LEA     PRINT_EA_MODE_ID_AN_INDIRECT,A5
00001EA2  6000 0074               2191      BRA     PUSH_EA_MODE_ID_FINISH
00001EA6                          2192  
00001EA6                          2193  *________________________________________
00001EA6                          2194  * Load (Address Register)+ Print Label
00001EA6                          2195  *----------------------------------------
00001EA6                          2196  PUSH_EA_MODE_ID_AN_POST_INC
00001EA6  4BF9 000022EA           2197      LEA     PRINT_EA_MODE_ID_AN_POST_INC,A5
00001EAC  6000 006A               2198      BRA     PUSH_EA_MODE_ID_FINISH
00001EB0                          2199  
00001EB0                          2200  *________________________________________
00001EB0                          2201  * Load -(Address Register) Print Label
00001EB0                          2202  *----------------------------------------
00001EB0                          2203  PUSH_EA_MODE_ID_AN_PRE_DEC
00001EB0  4BF9 0000232C           2204      LEA     PRINT_EA_MODE_ID_AN_PRE_DEC,A5
00001EB6  6000 0060               2205      BRA     PUSH_EA_MODE_ID_FINISH
00001EBA                          2206  
00001EBA                          2207  *________________________________________
00001EBA                          2208  * Handle Data Branching Logic
00001EBA                          2209  *----------------------------------------
00001EBA                          2210  PUSH_EA_MODE_ID_ELSE
00001EBA  1006                    2211      MOVE.B  D6,D0
00001EBC  C03C 0007               2212      AND.B   #7,D0
00001EC0                          2213  
00001EC0  B03C 0000               2214      CMP.B   #0,D0
00001EC4  6700 0016               2215      BEQ     PUSH_EA_MODE_ID_IND_SHORT
00001EC8                          2216  
00001EC8  B03C 0001               2217      CMP.B   #1,D0
00001ECC  6700 0022               2218      BEQ     PUSH_EA_MODE_ID_IND_LONG
00001ED0                          2219  
00001ED0  B03C 0004               2220      CMP.B   #4,D0
00001ED4  6700 002E               2221      BEQ     PUSH_EA_MODE_ID_ABS_DATA
00001ED8                          2222  
00001ED8  6000 05B4               2223      BRA     PRINT_ILLEGAL
00001EDC                          2224  
00001EDC                          2225  PUSH_EA_MODE_ID_IND_SHORT
00001EDC  4BF9 0000236E           2226      LEA     PRINT_EA_MODE_ID_IND_SHORT,A5
00001EE2  5478 1010               2227      ADD.W           #2, LOOP_INC * Adjust the Loop increment to skip the data
00001EE6  31FC 0001 101A          2228      MOVE.W  #1,DATA1_IN_USE
00001EEC  6000 002A               2229      BRA     PUSH_EA_MODE_ID_FINISH
00001EF0                          2230  
00001EF0                          2231  PUSH_EA_MODE_ID_IND_LONG
00001EF0  4BF9 000023AE           2232      LEA     PRINT_EA_MODE_ID_IND_LONG,A5
00001EF6  5878 1010               2233      ADD.W           #4,LOOP_INC * Adjust the Loop increment to skip the data
00001EFA  31FC 0001 101A          2234      MOVE.W  #1,DATA1_IN_USE
00001F00  6000 0016               2235      BRA     PUSH_EA_MODE_ID_FINISH
00001F04                          2236  
00001F04                          2237  PUSH_EA_MODE_ID_ABS_DATA
00001F04  4BF9 000023E2           2238      LEA     PRINT_EA_MODE_ID_ABS_DATA,A5
00001F0A  5878 1010               2239      ADD.W           #4,LOOP_INC * Adjust the Loop increment to skip the data
00001F0E  31FC 0001 101A          2240          MOVE.W  #1,DATA1_IN_USE
00001F14  6000 0002               2241      BRA     PUSH_EA_MODE_ID_FINISH
00001F18                          2242  
00001F18                          2243  *________________________________________
00001F18                          2244  PUSH_EA_MODE_ID_FINISH
00001F18  2857                    2245      MOVEA.L         (SP),A4 * Store the value we're going to RTS to
00001F1A  588F                    2246      ADD.L           #4,SP   * Move the stack pointer down to the RTS value
00001F1C  2F0D                    2247      MOVE.L          A5,-(SP)    * Overwrite the RTS value with the print label
00001F1E  2F0C                    2248      MOVE.L          A4,-(SP)    * Push the RTS so we can return like normal
00001F20                          2249  
00001F20  5878 1008               2250      ADD.W           #4,PRINT_COUNT
00001F24                          2251  
00001F24  4E75                    2252      RTS
00001F26                          2253  
00001F26                          2254  *-------------------------------------------------------------------------------
00001F26                          2255  *                 ________  ___       __   ___
00001F26                          2256  *                |\   __  \|\  \     |\  \|\  \
00001F26                          2257  *                \ \  \|\ /\ \  \    \ \  \ \  \
00001F26                          2258  *                 \ \   __  \ \  \  __\ \  \ \  \
00001F26                          2259  *                  \ \  \|\  \ \  \|\__\_\  \ \  \____
00001F26                          2260  *                   \ \_______\ \____________\ \_______\
00001F26                          2261  *                    \|_______|\|____________|\|_______|
00001F26                          2262  *
00001F26                          2263  
00001F26                          2264  *-------------------------------------------------------------------------------
00001F26                          2265  
00001F26                          2266  *-------------------------------------------------------------------------------
00001F26                          2267  *
00001F26                          2268  *       PUSH BYTE, WORD, OR LONG
00001F26                          2269  *
00001F26                          2270  * TODO: Implement a counter for how many prints we've made
00001F26                          2271  *________________________________________
00001F26                          2272  * Register Use Summary:
00001F26                          2273  *
00001F26                          2274  * D4: PARAMETER       - The size bits to print
00001F26                          2275  * D7: CONST PARAMETER - The opcode word
00001F26                          2276  *
00001F26                          2277  * A4: LOCAL VARIABLE  - Temp RTS location
00001F26                          2278  * A5: LOCAL VARIABLE  - Label for the print routine to store on the stack
00001F26                          2279  *-------------------------------------------------------------------------------
00001F26                          2280  PUSH_BWL
00001F26                          2281  
00001F26                          2282  * ---- Branching Block ----
00001F26                          2283  
00001F26  B83C 0000               2284      CMP.B           #0,D4       *00 -> Byte
00001F2A  6700 0016               2285      BEQ             PUSH_BWL_BYTE
00001F2E  B83C 0001               2286      CMP.B           #1,D4       *01 -> Word
00001F32  6700 0018               2287      BEQ             PUSH_BWL_WORD
00001F36  B83C 0002               2288      CMP.B           #2,D4       *10 -> Long
00001F3A  6700 001A               2289      BEQ             PUSH_BWL_LONG
00001F3E                          2290  
00001F3E  6000 054E               2291      BRA             PRINT_ILLEGAL
00001F42                          2292  
00001F42                          2293  *________________________________________
00001F42                          2294  * Load Byte Print Label
00001F42                          2295  *----------------------------------------
00001F42                          2296  PUSH_BWL_BYTE
00001F42  4BF9 00002248           2297      LEA             PRINT_BYTE_DESIGNATOR,A5
00001F48  6000 0016               2298      BRA             PUSH_BWL_FINISH
00001F4C                          2299  *________________________________________
00001F4C                          2300  * Load Word Print Label
00001F4C                          2301  *----------------------------------------
00001F4C                          2302  PUSH_BWL_WORD
00001F4C  4BF9 00002258           2303      LEA             PRINT_WORD_DESIGNATOR,A5
00001F52  6000 000C               2304      BRA             PUSH_BWL_FINISH
00001F56                          2305  
00001F56                          2306  *________________________________________
00001F56                          2307  * Load Long Print Label
00001F56                          2308  *----------------------------------------
00001F56                          2309  PUSH_BWL_LONG
00001F56  4BF9 00002268           2310      LEA             PRINT_LONG_DESIGNATOR,A5
00001F5C  6000 0002               2311      BRA             PUSH_BWL_FINISH
00001F60                          2312  
00001F60                          2313  *________________________________________
00001F60                          2314  PUSH_BWL_FINISH
00001F60                          2315  
00001F60  2857                    2316      MOVEA.L         (SP),A4 * Store the value we're going to RTS to
00001F62  588F                    2317      ADD.L           #4,SP   * Move the stack pointer down to the RTS value
00001F64  2F0D                    2318      MOVE.L          A5,-(SP)    * Overwrite the RTS value with the print label
00001F66  2F0C                    2319      MOVE.L          A4,-(SP)    * Push the RTS so we can return like normal
00001F68                          2320  
00001F68  5878 1008               2321      ADD.W           #4,PRINT_COUNT
00001F6C                          2322  
00001F6C  4E75                    2323      RTS
00001F6E                          2324  
00001F6E                          2325  
00001F6E                          2326  *-------------------------------------------------------------------------------
00001F6E                          2327  *     ________   ________   ___   ________    _________
00001F6E                          2328  *    |\   __  \ |\   __  \ |\  \ |\   ___  \ |\___   ___\
00001F6E                          2329  *    \ \  \|\  \\ \  \|\  \\ \  \\ \  \\ \  \\|___ \  \_|
00001F6E                          2330  *     \ \   ____\\ \   _  _\\ \  \\ \  \\ \  \    \ \  \
00001F6E                          2331  *      \ \  \___| \ \  \\  \|\ \  \\ \  \\ \  \    \ \  \
00001F6E                          2332  *       \ \__\     \ \__\\ _\ \ \__\\ \__\\ \__\    \ \__\
00001F6E                          2333  *        \|__|      \|__|\|__| \|__| \|__| \|__|     \|__|
00001F6E                          2334  *
00001F6E                          2335  * May god have mercy on your soul
00001F6E                          2336  *-------------------------------------------------------------------------------
00001F6E                          2337  *-------------------------------------------------------------------------------
00001F6E                          2338  *
00001F6E                          2339  *       PRINT LSR
00001F6E                          2340  *________________________________________
00001F6E                          2341  * Register Use Summary:
00001F6E                          2342  *
00001F6E                          2343  * D0: LOCAL VARIABLE  - Trap task designator
00001F6E                          2344  *
00001F6E                          2345  * A1: LOCAL VARIABLE  - String address
00001F6E                          2346  *-------------------------------------------------------------------------------
00001F6E                          2347  PRINT_LSR
00001F6E  43F9 00002B3E           2348      LEA             STRING_LSR,A1   * Load "LSR" into A1
00001F74  103C 000E               2349      MOVE.B          #14,D0      * Set trap task to String
00001F78  4E4F                    2350      TRAP            #15         * Print "LSR "
00001F7A  6000 FEBE               2351      BRA             PRINT_OPCODE_LOOP_RETURN
00001F7E                          2352  
00001F7E                          2353  *-------------------------------------------------------------------------------
00001F7E                          2354  *
00001F7E                          2355  *       PRINT LSL
00001F7E                          2356  *________________________________________
00001F7E                          2357  * Register Use Summary:
00001F7E                          2358  *
00001F7E                          2359  * D0: LOCAL VARIABLE  - Trap task designator
00001F7E                          2360  *
00001F7E                          2361  * A1: LOCAL VARIABLE  - String address
00001F7E                          2362  *-------------------------------------------------------------------------------
00001F7E                          2363  PRINT_LSL
00001F7E  43F9 00002B42           2364      LEA             STRING_LSL,A1   * Load "LSL" into A1
00001F84  103C 000E               2365      MOVE.B          #14,D0      * Set trap task to String
00001F88  4E4F                    2366      TRAP            #15         * Print "LSL "
00001F8A  6000 FEAE               2367      BRA             PRINT_OPCODE_LOOP_RETURN
00001F8E                          2368  
00001F8E                          2369  *-------------------------------------------------------------------------------
00001F8E                          2370  *
00001F8E                          2371  *       PRINT ASR
00001F8E                          2372  *________________________________________
00001F8E                          2373  * Register Use Summary:
00001F8E                          2374  *
00001F8E                          2375  * D0: LOCAL VARIABLE  - Trap task designator
00001F8E                          2376  *
00001F8E                          2377  * A1: LOCAL VARIABLE  - String address
00001F8E                          2378  *-------------------------------------------------------------------------------
00001F8E                          2379  PRINT_ASR
00001F8E  43F9 00002B36           2380      LEA             STRING_ASR,A1   * Load "ASR" into A1
00001F94  103C 000E               2381      MOVE.B          #14,D0      * Set trap task to String
00001F98  4E4F                    2382      TRAP            #15         * Print "ASR "
00001F9A  6000 FE9E               2383      BRA             PRINT_OPCODE_LOOP_RETURN
00001F9E                          2384  
00001F9E                          2385  *-------------------------------------------------------------------------------
00001F9E                          2386  *
00001F9E                          2387  *       PRINT ASL
00001F9E                          2388  *________________________________________
00001F9E                          2389  * Register Use Summary:
00001F9E                          2390  *
00001F9E                          2391  * D0: LOCAL VARIABLE  - Trap task designator
00001F9E                          2392  *
00001F9E                          2393  * A1: LOCAL VARIABLE  - String address
00001F9E                          2394  *-------------------------------------------------------------------------------
00001F9E                          2395  PRINT_ASL
00001F9E  43F9 00002B3A           2396      LEA             STRING_ASL,A1   * Load "ASL" into A1
00001FA4  103C 000E               2397      MOVE.B          #14,D0      * Set trap task to String
00001FA8  4E4F                    2398      TRAP            #15         * Print "ASL "
00001FAA  6000 FE8E               2399      BRA             PRINT_OPCODE_LOOP_RETURN
00001FAE                          2400  
00001FAE                          2401  *-------------------------------------------------------------------------------
00001FAE                          2402  *
00001FAE                          2403  *       PRINT ROR
00001FAE                          2404  *________________________________________
00001FAE                          2405  * Register Use Summary:
00001FAE                          2406  *
00001FAE                          2407  * D0: LOCAL VARIABLE  - Trap task designator
00001FAE                          2408  *
00001FAE                          2409  * A1: LOCAL VARIABLE  - String address
00001FAE                          2410  *-------------------------------------------------------------------------------
00001FAE                          2411  PRINT_ROR
00001FAE  43F9 00002B46           2412      LEA             STRING_ROR,A1   * Load "ROR" into A1
00001FB4  103C 000E               2413      MOVE.B          #14,D0      * Set trap task to String
00001FB8  4E4F                    2414      TRAP            #15         * Print "ROR "
00001FBA  6000 FE7E               2415      BRA             PRINT_OPCODE_LOOP_RETURN
00001FBE                          2416  
00001FBE                          2417  *-------------------------------------------------------------------------------
00001FBE                          2418  *
00001FBE                          2419  *       PRINT ROL
00001FBE                          2420  *________________________________________
00001FBE                          2421  * Register Use Summary:
00001FBE                          2422  *
00001FBE                          2423  * D0: LOCAL VARIABLE  - Trap task designator
00001FBE                          2424  *
00001FBE                          2425  * A1: LOCAL VARIABLE  - String address
00001FBE                          2426  *-------------------------------------------------------------------------------
00001FBE                          2427  PRINT_ROL
00001FBE  43F9 00002B4A           2428      LEA             STRING_ROL,A1   * Load "ROL" into A1
00001FC4  103C 000E               2429      MOVE.B          #14,D0      * Set trap task to String
00001FC8  4E4F                    2430      TRAP            #15         * Print "ROL"
00001FCA  6000 FE6E               2431      BRA             PRINT_OPCODE_LOOP_RETURN
00001FCE                          2432  
00001FCE                          2433  *-------------------------------------------------------------------------------
00001FCE                          2434  *
00001FCE                          2435  *       PRINT DATA1_WORD
00001FCE                          2436  *________________________________________
00001FCE                          2437  * Register Use Summary:
00001FCE                          2438  *
00001FCE                          2439  * D0: LOCAL VARIABLE  - Trap task designator
00001FCE                          2440  *
00001FCE                          2441  * D1: LOCAL VARIABLE  - DATA1 local copy
00001FCE                          2442  *
00001FCE                          2443  * D2: LOCAL VARIABLE  - Base in which to print
00001FCE                          2444  *
00001FCE                          2445  * A1: LOCAL VARIABLE  - String address
00001FCE                          2446  *-------------------------------------------------------------------------------
00001FCE                          2447  PRINT_DATA1_LONG
00001FCE  2238 1016               2448      MOVE.L          DATA1,D1
00001FD2  700F                    2449      MOVEQ           #15,D0
00001FD4  7410                    2450      MOVEQ           #16,D2
00001FD6  4E4F                    2451      TRAP            #15
00001FD8                          2452  
00001FD8                          2453  *-------------------------------------------------------------------------------
00001FD8                          2454  *
00001FD8                          2455  *       PRINT DATA1_WORD
00001FD8                          2456  *________________________________________
00001FD8                          2457  * Register Use Summary:
00001FD8                          2458  *
00001FD8                          2459  * D0: LOCAL VARIABLE  - Trap task designator
00001FD8                          2460  *
00001FD8                          2461  * D1: LOCAL VARIABLE  - DATA1 local copy
00001FD8                          2462  *
00001FD8                          2463  * D2: LOCAL VARIABLE  - Base in which to print
00001FD8                          2464  *
00001FD8                          2465  * A1: LOCAL VARIABLE  - String address
00001FD8                          2466  *-------------------------------------------------------------------------------
00001FD8                          2467  PRINT_DATA1_WORD
00001FD8  2238 1016               2468      MOVE.L          DATA1,D1
00001FDC  4841                    2469      SWAP            D1              * We only want the upper word
00001FDE  C27C FFFF               2470      AND             #$0000FFFF,D1   * Bit mask for upper word
00001FE2  700F                    2471      MOVEQ           #15,D0
00001FE4  7410                    2472      MOVEQ           #16,D2
00001FE6  4E4F                    2473      TRAP            #15
00001FE8                          2474  
00001FE8                          2475  *-------------------------------------------------------------------------------
00001FE8                          2476  *
00001FE8                          2477  *       PRINT BGT
00001FE8                          2478  *________________________________________
00001FE8                          2479  * Register Use Summary:
00001FE8                          2480  *
00001FE8                          2481  * D0: LOCAL VARIABLE  - Trap task designator
00001FE8                          2482  *
00001FE8                          2483  * A1: LOCAL VARIABLE  - String address
00001FE8                          2484  *-------------------------------------------------------------------------------
00001FE8                          2485  PRINT_BGT
00001FE8  43F9 00002B73           2486      LEA             STRING_BGT,A1   * Load "BGT" into A1
00001FEE  103C 000E               2487      MOVE.B          #14,D0      * Set trap task to String
00001FF2  4E4F                    2488      TRAP            #15         * Print "BGT "
00001FF4  6000 FE44               2489      BRA             PRINT_OPCODE_LOOP_RETURN
00001FF8                          2490  
00001FF8                          2491  *-------------------------------------------------------------------------------
00001FF8                          2492  *
00001FF8                          2493  *       PRINT BLE
00001FF8                          2494  *________________________________________
00001FF8                          2495  * Register Use Summary:
00001FF8                          2496  *
00001FF8                          2497  * D0: LOCAL VARIABLE  - Trap task designator
00001FF8                          2498  *
00001FF8                          2499  * A1: LOCAL VARIABLE  - String address
00001FF8                          2500  *-------------------------------------------------------------------------------
00001FF8                          2501  PRINT_BLE
00001FF8  43F9 00002B69           2502      LEA             STRING_BLE,A1   * Load "BLE" into A1
00001FFE  103C 000E               2503      MOVE.B          #14,D0      * Set trap task to String
00002002  4E4F                    2504      TRAP            #15         * Print "BLE "
00002004  6000 FE34               2505      BRA             PRINT_OPCODE_LOOP_RETURN
00002008                          2506  
00002008                          2507  *-------------------------------------------------------------------------------
00002008                          2508  *
00002008                          2509  *       PRINT BEQ
00002008                          2510  *________________________________________
00002008                          2511  * Register Use Summary:
00002008                          2512  *
00002008                          2513  * D0: LOCAL VARIABLE  - Trap task designator
00002008                          2514  *
00002008                          2515  * A1: LOCAL VARIABLE  - String address
00002008                          2516  *-------------------------------------------------------------------------------
00002008                          2517  PRINT_BEQ
00002008  43F9 00002B64           2518      LEA             STRING_BEQ,A1   * Load "BEQ" into A1
0000200E  103C 000E               2519      MOVE.B          #14,D0      * Set trap task to String
00002012  4E4F                    2520      TRAP            #15         * Print "BEQ "
00002014  6000 FE24               2521      BRA             PRINT_OPCODE_LOOP_RETURN
00002018                          2522  
00002018                          2523  
00002018                          2524  *-------------------------------------------------------------------------------
00002018                          2525  *
00002018                          2526  *       PRINT BRA
00002018                          2527  *________________________________________
00002018                          2528  * Register Use Summary:
00002018                          2529  *
00002018                          2530  * D0: LOCAL VARIABLE  - Trap task designator
00002018                          2531  *
00002018                          2532  * A1: LOCAL VARIABLE  - String address
00002018                          2533  *-------------------------------------------------------------------------------
00002018                          2534  PRINT_BRA
00002018  43F9 00002B6E           2535      LEA             STRING_BRA,A1   * Load "BRA" into A1
0000201E  103C 000E               2536      MOVE.B          #14,D0      * Set trap task to String
00002022  4E4F                    2537      TRAP            #15         * Print "BRA "
00002024  6000 FE14               2538      BRA             PRINT_OPCODE_LOOP_RETURN
00002028                          2539  
00002028                          2540  
00002028                          2541  *-------------------------------------------------------------------------------
00002028                          2542  *
00002028                          2543  *       PRINT ADD
00002028                          2544  *________________________________________
00002028                          2545  * Register Use Summary:
00002028                          2546  *
00002028                          2547  * D0: LOCAL VARIABLE  - Trap task designator
00002028                          2548  *
00002028                          2549  * A1: LOCAL VARIABLE  - String address
00002028                          2550  *-------------------------------------------------------------------------------
00002028                          2551  PRINT_ADD
00002028  43F9 00002B5B           2552      LEA             STRING_ADD,A1   * Load "ADD" into A1
0000202E  103C 000E               2553      MOVE.B          #14,D0      * Set trap task to String
00002032  4E4F                    2554      TRAP            #15         * Print "ADD "
00002034  6000 FE04               2555      BRA             PRINT_OPCODE_LOOP_RETURN
00002038                          2556  
00002038                          2557  
00002038                          2558  *-------------------------------------------------------------------------------
00002038                          2559  *
00002038                          2560  *       PRINT ADDA
00002038                          2561  *________________________________________
00002038                          2562  * Register Use Summary:
00002038                          2563  *
00002038                          2564  * D0: LOCAL VARIABLE  - Trap task designator
00002038                          2565  *
00002038                          2566  * A1: LOCAL VARIABLE  - String address
00002038                          2567  *-------------------------------------------------------------------------------
00002038                          2568  PRINT_ADDA
00002038  43F9 00002B5F           2569      LEA             STRING_ADDA,A1  * Load "ADDA" into A1
0000203E  103C 000E               2570      MOVE.B          #14,D0      * Set trap task to String
00002042  4E4F                    2571      TRAP            #15         * Print "ADDA "
00002044  6000 FDF4               2572      BRA             PRINT_OPCODE_LOOP_RETURN
00002048                          2573  
00002048                          2574  
00002048                          2575  *-------------------------------------------------------------------------------
00002048                          2576  *
00002048                          2577  *       PRINT MISC_NUMBER
00002048                          2578  *________________________________________
00002048                          2579  * Register Use Summary:
00002048                          2580  *
00002048                          2581  * D0: LOCAL VARIABLE  - Trap task designator
00002048                          2582  *
00002048                          2583  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
00002048                          2584  *
00002048                          2585  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
00002048                          2586  *
00002048                          2587  * A1: LOCAL VARIABLE  - String address
00002048                          2588  *-------------------------------------------------------------------------------
00002048                          2589  PRINT_MISC_NUMBER
00002048  4281                    2590      CLR.L   D1
0000204A                          2591  
0000204A  103C 000F               2592      MOVE.B  #15,D0
0000204E  1239 00002BEE           2593      MOVE.B  MISC_NUMBER,D1
00002054  143C 000A               2594      MOVE.B  #10,D2
00002058  4E4F                    2595      TRAP #15
0000205A                          2596  
0000205A  6000 FDDE               2597      BRA     PRINT_OPCODE_LOOP_RETURN
0000205E                          2598  
0000205E                          2599  *-------------------------------------------------------------------------------
0000205E                          2600  *
0000205E                          2601  *       PRINT MISC_NUMBER_AS_ADDRESS
0000205E                          2602  *________________________________________
0000205E                          2603  * Register Use Summary:
0000205E                          2604  *
0000205E                          2605  * D0: LOCAL VARIABLE  - Trap task designator
0000205E                          2606  *
0000205E                          2607  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
0000205E                          2608  *
0000205E                          2609  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
0000205E                          2610  *
0000205E                          2611  * A1: LOCAL VARIABLE  - String address
0000205E                          2612  *-------------------------------------------------------------------------------
0000205E                          2613  PRINT_MISC_NUMBER_AS_ADDRESS
0000205E                          2614  
0000205E  43F9 00002B1C           2615      LEA             STRING_A,A1
00002064  103C 000E               2616      MOVE.B          #14,D0
00002068  4E4F                    2617      TRAP            #15
0000206A                          2618  
0000206A  4280                    2619      CLR.L   D0
0000206C  4281                    2620      CLR.L   D1
0000206E  4282                    2621      CLR.L   D2
00002070                          2622  
00002070  103C 000F               2623      MOVE.B  #15,D0
00002074  1239 00002BEE           2624      MOVE.B  MISC_NUMBER,D1
0000207A  143C 000A               2625      MOVE.B  #10,D2
0000207E  4E4F                    2626      TRAP #15
00002080                          2627  
00002080  6000 FDB8               2628      BRA     PRINT_OPCODE_LOOP_RETURN
00002084                          2629  
00002084                          2630  *-------------------------------------------------------------------------------
00002084                          2631  *
00002084                          2632  *       PRINT MISC_NUMBER_AS_REGISTER
00002084                          2633  *________________________________________
00002084                          2634  * Register Use Summary:
00002084                          2635  *
00002084                          2636  * D0: LOCAL VARIABLE  - Trap task designator
00002084                          2637  *
00002084                          2638  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
00002084                          2639  *
00002084                          2640  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
00002084                          2641  *
00002084                          2642  * A1: LOCAL VARIABLE  - String address
00002084                          2643  *-------------------------------------------------------------------------------
00002084                          2644  PRINT_MISC_NUMBER_AS_REGISTER
00002084                          2645  
00002084  43F9 00002B1A           2646      LEA             STRING_D,A1
0000208A  103C 000E               2647      MOVE.B          #14,D0
0000208E  4E4F                    2648      TRAP            #15
00002090                          2649  
00002090  4280                    2650      CLR.L   D0
00002092  4281                    2651      CLR.L   D1
00002094  4282                    2652      CLR.L   D2
00002096                          2653  
00002096  103C 000F               2654      MOVE.B  #15,D0
0000209A  1239 00002BEE           2655      MOVE.B  MISC_NUMBER,D1
000020A0  143C 000A               2656      MOVE.B  #10,D2
000020A4  4E4F                    2657      TRAP #15
000020A6                          2658  
000020A6  6000 FD92               2659      BRA     PRINT_OPCODE_LOOP_RETURN
000020AA                          2660  
000020AA                          2661  *-------------------------------------------------------------------------------
000020AA                          2662  *
000020AA                          2663  *       PRINT MISC_REGISTER
000020AA                          2664  *________________________________________
000020AA                          2665  * Register Use Summary:
000020AA                          2666  *
000020AA                          2667  * D0: LOCAL VARIABLE  - Trap task designator
000020AA                          2668  *
000020AA                          2669  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
000020AA                          2670  *
000020AA                          2671  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
000020AA                          2672  *
000020AA                          2673  * A1: LOCAL VARIABLE  - String address
000020AA                          2674  *-------------------------------------------------------------------------------
000020AA                          2675  PRINT_MISC_REGISTER
000020AA                          2676  
000020AA  43F9 00002B1A           2677      LEA             STRING_D,A1
000020B0  103C 000E               2678      MOVE.B          #14,D0
000020B4  4E4F                    2679      TRAP            #15
000020B6                          2680  
000020B6  4280                    2681      CLR.L   D0
000020B8  4281                    2682      CLR.L   D1
000020BA  4282                    2683      CLR.L   D2
000020BC                          2684  
000020BC  103C 000F               2685      MOVE.B  #15,D0
000020C0  1239 00002BF2           2686      MOVE.B  MISC_REGISTER,D1
000020C6  143C 000A               2687      MOVE.B  #10,D2
000020CA  4E4F                    2688      TRAP #15
000020CC                          2689  
000020CC  6000 FD6C               2690      BRA     PRINT_OPCODE_LOOP_RETURN
000020D0                          2691  
000020D0                          2692  
000020D0                          2693  
000020D0                          2694  *-------------------------------------------------------------------------------
000020D0                          2695  *
000020D0                          2696  *       PRINT_MISC_PRE_DEC
000020D0                          2697  *________________________________________
000020D0                          2698  * Register Use Summary:
000020D0                          2699  *
000020D0                          2700  * D0: LOCAL VARIABLE  - Trap task designator
000020D0                          2701  *
000020D0                          2702  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
000020D0                          2703  *
000020D0                          2704  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
000020D0                          2705  *
000020D0                          2706  * A1: LOCAL VARIABLE  - String address
000020D0                          2707  *-------------------------------------------------------------------------------
000020D0                          2708  PRINT_MISC_PRE_DEC
000020D0                          2709  
000020D0  43F9 00002B26           2710      LEA             STRING_MINUS,A1
000020D6  103C 000E               2711      MOVE.B          #14,D0
000020DA  4E4F                    2712      TRAP            #15
000020DC                          2713  
000020DC  43F9 00002B20           2714      LEA             STRING_LEFT_PAREN,A1
000020E2  103C 000E               2715      MOVE.B          #14,D0
000020E6  4E4F                    2716      TRAP            #15
000020E8                          2717  
000020E8  43F9 00002B1C           2718      LEA             STRING_A,A1
000020EE  103C 000E               2719      MOVE.B          #14,D0
000020F2  4E4F                    2720      TRAP            #15
000020F4                          2721  
000020F4  4280                    2722      CLR.L   D0
000020F6  4281                    2723      CLR.L   D1
000020F8  4282                    2724      CLR.L   D2
000020FA                          2725  
000020FA  103C 000F               2726      MOVE.B  #15,D0
000020FE  1239 00002BEE           2727      MOVE.B  MISC_NUMBER,D1
00002104  143C 000A               2728      MOVE.B  #10,D2
00002108  4E4F                    2729      TRAP #15
0000210A                          2730  
0000210A  43F9 00002B22           2731      LEA             STRING_RIGHT_PAREN,A1
00002110  103C 000E               2732      MOVE.B          #14,D0
00002114  4E4F                    2733      TRAP            #15
00002116                          2734  
00002116  6000 FD22               2735      BRA     PRINT_OPCODE_LOOP_RETURN
0000211A                          2736  
0000211A                          2737  *-------------------------------------------------------------------------------
0000211A                          2738  *
0000211A                          2739  *       PRINT_MISC_POST_INC
0000211A                          2740  *________________________________________
0000211A                          2741  * Register Use Summary:
0000211A                          2742  *
0000211A                          2743  * D0: LOCAL VARIABLE  - Trap task designator
0000211A                          2744  *
0000211A                          2745  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
0000211A                          2746  *
0000211A                          2747  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
0000211A                          2748  *
0000211A                          2749  * A1: LOCAL VARIABLE  - String address
0000211A                          2750  *-------------------------------------------------------------------------------
0000211A                          2751  PRINT_MISC_POST_INC
0000211A                          2752  
0000211A  43F9 00002B20           2753      LEA             STRING_LEFT_PAREN,A1
00002120  103C 000E               2754      MOVE.B          #14,D0
00002124  4E4F                    2755      TRAP            #15
00002126                          2756  
00002126  43F9 00002B1C           2757      LEA             STRING_A,A1
0000212C  103C 000E               2758      MOVE.B          #14,D0
00002130  4E4F                    2759      TRAP            #15
00002132                          2760  
00002132  4280                    2761      CLR.L   D0
00002134  4281                    2762      CLR.L   D1
00002136  4282                    2763      CLR.L   D2
00002138                          2764  
00002138  103C 000F               2765      MOVE.B  #15,D0
0000213C  1239 00002BEE           2766      MOVE.B  MISC_NUMBER,D1
00002142  143C 000A               2767      MOVE.B  #10,D2
00002146  4E4F                    2768      TRAP #15
00002148                          2769  
00002148  43F9 00002B22           2770      LEA             STRING_RIGHT_PAREN,A1
0000214E  103C 000E               2771      MOVE.B          #14,D0
00002152  4E4F                    2772      TRAP            #15
00002154                          2773  
00002154  43F9 00002B24           2774      LEA             STRING_PLUS,A1
0000215A  103C 000E               2775      MOVE.B          #14,D0
0000215E  4E4F                    2776      TRAP            #15
00002160                          2777  
00002160  6000 FCD8               2778      BRA     PRINT_OPCODE_LOOP_RETURN
00002164                          2779  
00002164                          2780  *-------------------------------------------------------------------------------
00002164                          2781  *
00002164                          2782  *       PRINT_MISC_ADDRESS_IND
00002164                          2783  *________________________________________
00002164                          2784  * Register Use Summary:
00002164                          2785  *
00002164                          2786  * D0: LOCAL VARIABLE  - Trap task designator
00002164                          2787  *
00002164                          2788  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
00002164                          2789  *
00002164                          2790  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
00002164                          2791  *
00002164                          2792  * A1: LOCAL VARIABLE  - String address
00002164                          2793  *-------------------------------------------------------------------------------
00002164                          2794  PRINT_MISC_ADDRESS_IND
00002164                          2795  
00002164  43F9 00002B20           2796      LEA             STRING_LEFT_PAREN,A1
0000216A  103C 000E               2797      MOVE.B          #14,D0
0000216E  4E4F                    2798      TRAP            #15
00002170                          2799  
00002170  43F9 00002B1C           2800      LEA             STRING_A,A1
00002176  103C 000E               2801      MOVE.B          #14,D0
0000217A  4E4F                    2802      TRAP            #15
0000217C                          2803  
0000217C  4280                    2804      CLR.L   D0
0000217E  4281                    2805      CLR.L   D1
00002180  4282                    2806      CLR.L   D2
00002182                          2807  
00002182  103C 000F               2808      MOVE.B  #15,D0
00002186  1239 00002BEE           2809      MOVE.B  MISC_NUMBER,D1
0000218C  143C 000A               2810      MOVE.B  #10,D2
00002190  4E4F                    2811      TRAP #15
00002192                          2812  
00002192  43F9 00002B22           2813      LEA             STRING_RIGHT_PAREN,A1
00002198  103C 000E               2814      MOVE.B          #14,D0
0000219C  4E4F                    2815      TRAP            #15
0000219E                          2816  
0000219E  6000 FC9A               2817      BRA     PRINT_OPCODE_LOOP_RETURN
000021A2                          2818  
000021A2                          2819  
000021A2                          2820  *-------------------------------------------------------------------------------
000021A2                          2821  *
000021A2                          2822  *       PRINT MISC_NUMBER_AS_DATA
000021A2                          2823  *________________________________________
000021A2                          2824  * Register Use Summary:
000021A2                          2825  *
000021A2                          2826  * D0: LOCAL VARIABLE  - Trap task designator
000021A2                          2827  *
000021A2                          2828  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
000021A2                          2829  *
000021A2                          2830  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
000021A2                          2831  *
000021A2                          2832  * A1: LOCAL VARIABLE  - String address
000021A2                          2833  *-------------------------------------------------------------------------------
000021A2                          2834  PRINT_MISC_NUMBER_AS_DATA
000021A2                          2835  
000021A2  43F9 00002B28           2836      LEA             STRING_POUND,A1
000021A8  103C 000E               2837      MOVE.B          #14,D0
000021AC  4E4F                    2838      TRAP            #15
000021AE                          2839  
000021AE  4280                    2840      CLR.L   D0
000021B0  4281                    2841      CLR.L   D1
000021B2  4282                    2842      CLR.L   D2
000021B4                          2843  
000021B4  103C 000F               2844      MOVE.B  #15,D0
000021B8  1239 00002BEE           2845      MOVE.B  MISC_NUMBER,D1
000021BE  143C 000A               2846      MOVE.B  #10,D2
000021C2  4E4F                    2847      TRAP #15
000021C4                          2848  
000021C4  6000 FC74               2849      BRA     PRINT_OPCODE_LOOP_RETURN
000021C8                          2850  
000021C8                          2851  
000021C8                          2852  *-------------------------------------------------------------------------------
000021C8                          2853  *
000021C8                          2854  *       PRINT ADDQ
000021C8                          2855  *________________________________________
000021C8                          2856  * Register Use Summary:
000021C8                          2857  *
000021C8                          2858  * D0: LOCAL VARIABLE  - Trap task designator
000021C8                          2859  *
000021C8                          2860  * A1: LOCAL VARIABLE  - String address
000021C8                          2861  *-------------------------------------------------------------------------------
000021C8                          2862  PRINT_ADDQ
000021C8  43F9 00002B56           2863      LEA             STRING_ADDQ,A1  * Load "ADDQ" into A1
000021CE  103C 000E               2864      MOVE.B          #14,D0      * Set trap task to String
000021D2  4E4F                    2865      TRAP            #15         * Print ", "
000021D4  6000 FC64               2866      BRA             PRINT_OPCODE_LOOP_RETURN
000021D8                          2867  
000021D8                          2868  *-------------------------------------------------------------------------------
000021D8                          2869  *
000021D8                          2870  *       PRINT MOVE
000021D8                          2871  *________________________________________
000021D8                          2872  * Register Use Summary:
000021D8                          2873  *
000021D8                          2874  * D0: LOCAL VARIABLE  - Trap task designator
000021D8                          2875  *
000021D8                          2876  * A1: LOCAL VARIABLE  - String address
000021D8                          2877  *-------------------------------------------------------------------------------
000021D8                          2878  PRINT_MOVE
000021D8  43F9 00002B80           2879      LEA             STRING_MOVE,A1  * Load "MOVE" into A1
000021DE  103C 000E               2880      MOVE.B          #14,D0      * Set trap task to String
000021E2  4E4F                    2881      TRAP            #15         * Print ", "
000021E4  6000 FC54               2882      BRA             PRINT_OPCODE_LOOP_RETURN
000021E8                          2883  
000021E8                          2884  *-------------------------------------------------------------------------------
000021E8                          2885  *
000021E8                          2886  *       PRINT MOVEA
000021E8                          2887  *________________________________________
000021E8                          2888  * Register Use Summary:
000021E8                          2889  *
000021E8                          2890  * D0: LOCAL VARIABLE  - Trap task designator
000021E8                          2891  *
000021E8                          2892  * A1: LOCAL VARIABLE  - String address
000021E8                          2893  *-------------------------------------------------------------------------------
000021E8                          2894  PRINT_MOVEA
000021E8  43F9 00002B85           2895      LEA             STRING_MOVEA,A1 * Load "MOVEA" into A1
000021EE  103C 000E               2896      MOVE.B          #14,D0      * Set trap task to String
000021F2  4E4F                    2897      TRAP            #15         * Print ", "
000021F4  6000 FC44               2898      BRA             PRINT_OPCODE_LOOP_RETURN
000021F8                          2899  
000021F8                          2900  
000021F8                          2901  *-------------------------------------------------------------------------------
000021F8                          2902  *
000021F8                          2903  *       PRINT MOVEQ
000021F8                          2904  *________________________________________
000021F8                          2905  * Register Use Summary:
000021F8                          2906  *
000021F8                          2907  * D0: LOCAL VARIABLE  - Trap task designator
000021F8                          2908  *
000021F8                          2909  * A1: LOCAL VARIABLE  - String address
000021F8                          2910  *-------------------------------------------------------------------------------
000021F8                          2911  PRINT_MOVEQ
000021F8  43F9 00002B8B           2912      LEA             STRING_MOVEQ,A1 * Load "MOVEQ" into A1
000021FE  103C 000E               2913      MOVE.B          #14,D0      * Set trap task to String
00002202  4E4F                    2914      TRAP            #15         * Print ", "
00002204  6000 FC34               2915      BRA             PRINT_OPCODE_LOOP_RETURN
00002208                          2916  
00002208                          2917  
00002208                          2918  *-------------------------------------------------------------------------------
00002208                          2919  *
00002208                          2920  *       PRINT MOVEM
00002208                          2921  *________________________________________
00002208                          2922  * Register Use Summary:
00002208                          2923  *
00002208                          2924  * D0: LOCAL VARIABLE  - Trap task designator
00002208                          2925  *
00002208                          2926  * A1: LOCAL VARIABLE  - String address
00002208                          2927  *-------------------------------------------------------------------------------
00002208                          2928  PRINT_MOVEM
00002208  43F9 00002B95           2929      LEA             STRING_MOVEM,A1 * Load "MOVEM" into A1
0000220E  103C 000E               2930      MOVE.B          #14,D0      * Set trap task to String
00002212  4E4F                    2931      TRAP            #15         * Print ", "
00002214  6000 FC24               2932      BRA             PRINT_OPCODE_LOOP_RETURN
00002218                          2933  
00002218                          2934  *-------------------------------------------------------------------------------
00002218                          2935  *
00002218                          2936  *       PRINT SUB
00002218                          2937  *________________________________________
00002218                          2938  * Register Use Summary:
00002218                          2939  *
00002218                          2940  * D0: LOCAL VARIABLE  - Trap task designator
00002218                          2941  *
00002218                          2942  * A1: LOCAL VARIABLE  - String address
00002218                          2943  *-------------------------------------------------------------------------------
00002218                          2944  PRINT_SUB
00002218  43F9 00002B9B           2945      LEA             STRING_SUB,A1   * Load "SUB" into A1
0000221E  103C 000E               2946      MOVE.B          #14,D0      * Set trap task to String
00002222  4E4F                    2947      TRAP            #15         * Print ", "
00002224  6000 FC14               2948      BRA             PRINT_OPCODE_LOOP_RETURN
00002228                          2949  
00002228                          2950  *-------------------------------------------------------------------------------
00002228                          2951  *
00002228                          2952  *       PRINT AND
00002228                          2953  *________________________________________
00002228                          2954  * Register Use Summary:
00002228                          2955  *
00002228                          2956  * D0: LOCAL VARIABLE  - Trap task designator
00002228                          2957  *
00002228                          2958  * A1: LOCAL VARIABLE  - String address
00002228                          2959  *-------------------------------------------------------------------------------
00002228                          2960  PRINT_AND
00002228  43F9 00002B9F           2961      LEA             STRING_AND,A1   * Load "AND" into A1
0000222E  103C 000E               2962      MOVE.B          #14,D0      * Set trap task to String
00002232  4E4F                    2963      TRAP            #15         * Print ", "
00002234  6000 FC04               2964      BRA             PRINT_OPCODE_LOOP_RETURN
00002238                          2965  
00002238                          2966  *-------------------------------------------------------------------------------
00002238                          2967  *
00002238                          2968  *       PRINT OR
00002238                          2969  *________________________________________
00002238                          2970  * Register Use Summary:
00002238                          2971  *
00002238                          2972  * D0: LOCAL VARIABLE  - Trap task designator
00002238                          2973  *
00002238                          2974  * A1: LOCAL VARIABLE  - String address
00002238                          2975  *-------------------------------------------------------------------------------
00002238                          2976  PRINT_OR
00002238  43F9 00002BA3           2977      LEA             STRING_OR,A1    * Load "OR" into A1
0000223E  103C 000E               2978      MOVE.B          #14,D0      * Set trap task to String
00002242  4E4F                    2979      TRAP            #15         * Print ", "
00002244  6000 FBF4               2980      BRA             PRINT_OPCODE_LOOP_RETURN
00002248                          2981  
00002248                          2982  
00002248                          2983  *-------------------------------------------------------------------------------
00002248                          2984  *
00002248                          2985  *       PRINT BYTE DESIGNATOR
00002248                          2986  *________________________________________
00002248                          2987  * Register Use Summary:
00002248                          2988  *
00002248                          2989  * D0: LOCAL VARIABLE  - low byte of opcode
00002248                          2990  * A1: LOCAL VARIABLE  - String address
00002248                          2991  *-------------------------------------------------------------------------------
00002248                          2992  PRINT_BYTE_DESIGNATOR
00002248  43F9 00002B0E           2993      LEA             STRING_BYTE_DESIGNATOR,A1
0000224E  103C 000E               2994      MOVE.B          #14,D0
00002252  4E4F                    2995      TRAP            #15
00002254  6000 FBE4               2996      BRA             PRINT_OPCODE_LOOP_RETURN
00002258                          2997  
00002258                          2998  *-------------------------------------------------------------------------------
00002258                          2999  *
00002258                          3000  *       PRINT WORD DESIGNATOR
00002258                          3001  *________________________________________
00002258                          3002  * Register Use Summary:
00002258                          3003  *
00002258                          3004  * D0: LOCAL VARIABLE  - low byte of opcode
00002258                          3005  * A1: LOCAL VARIABLE  - String address
00002258                          3006  *-------------------------------------------------------------------------------
00002258                          3007  PRINT_WORD_DESIGNATOR
00002258  43F9 00002B12           3008      LEA             STRING_WORD_DESIGNATOR,A1
0000225E  103C 000E               3009      MOVE.B          #14,D0
00002262  4E4F                    3010      TRAP            #15
00002264  6000 FBD4               3011      BRA             PRINT_OPCODE_LOOP_RETURN
00002268                          3012  
00002268                          3013  *-------------------------------------------------------------------------------
00002268                          3014  *
00002268                          3015  *       PRINT LONG DESIGNATOR
00002268                          3016  *________________________________________
00002268                          3017  * Register Use Summary:
00002268                          3018  *
00002268                          3019  * D0: LOCAL VARIABLE  - low byte of opcode
00002268                          3020  * A1: LOCAL VARIABLE  - String address
00002268                          3021  *-------------------------------------------------------------------------------
00002268                          3022  PRINT_LONG_DESIGNATOR
00002268  43F9 00002B16           3023      LEA             STRING_LONG_DESIGNATOR,A1
0000226E  103C 000E               3024      MOVE.B          #14,D0
00002272  4E4F                    3025      TRAP            #15
00002274  6000 FBC4               3026      BRA             PRINT_OPCODE_LOOP_RETURN
00002278                          3027  
00002278                          3028  *-------------------------------------------------------------------------------
00002278                          3029  *
00002278                          3030  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - Dn REGISTER
00002278                          3031  *
00002278                          3032  * Prints "Dx, " where x ranges between 0 and 7. This is determined by masking
00002278                          3033  * the last four bits of the current opcode stored in D7.
00002278                          3034  *
00002278                          3035  *________________________________________
00002278                          3036  * Register Use Summary:
00002278                          3037  *
00002278                          3038  * D0: LOCAL VARIABLE  - Trap task designator
00002278                          3039  * D1: LOCAL VARIABLE  - Dn Register number to display
00002278                          3040  * D7: CONST PARAMETER - The opcode word
00002278                          3041  *
00002278                          3042  * A1: LOCAL VARIABLE  - String address
00002278                          3043  *-------------------------------------------------------------------------------
00002278                          3044  PRINT_EA_MODE_ID_DN
00002278  43F9 00002B1A           3045      LEA             STRING_D,A1     * Load "D" into A1
0000227E  103C 000E               3046      MOVE.B          #14,D0      * Set trap task to String
00002282  4E4F                    3047      TRAP            #15         * Print "D"
00002284                          3048  
00002284  4281                    3049      CLR.L           D1
00002286  1207                    3050      MOVE.B          D7,D1       * Get the lowest byte of the opcode
00002288  C23C 0007               3051      AND.B           #$7,D1      * Get the lowest four bits (register #)
0000228C  103C 0003               3052      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
00002290  4E4F                    3053      TRAP            #15         * Print the register MISC_NUMBER
00002292                          3054  
00002292  6000 FBA6               3055      BRA             PRINT_OPCODE_LOOP_RETURN
00002296                          3056  
00002296                          3057  *-------------------------------------------------------------------------------
00002296                          3058  *
00002296                          3059  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - ADDRESS REGISTER
00002296                          3060  *
00002296                          3061  * Prints "Ax, " where x ranges between 0 and 7. This is determined by masking
00002296                          3062  * the last four bits of the current opcode stored in D7.
00002296                          3063  *
00002296                          3064  *________________________________________
00002296                          3065  * Register Use Summary:
00002296                          3066  *
00002296                          3067  * D0: LOCAL VARIABLE  - Trap task designator
00002296                          3068  * D1: LOCAL VARIABLE  - Dn Register number to display
00002296                          3069  * D7: CONST PARAMETER - The opcode word
00002296                          3070  *
00002296                          3071  * A1: LOCAL VARIABLE  - String address
00002296                          3072  *-------------------------------------------------------------------------------
00002296                          3073  PRINT_EA_MODE_ID_AN
00002296  43F9 00002B1C           3074      LEA             STRING_A,A1
0000229C  103C 000E               3075      MOVE.B          #14,D0
000022A0  4E4F                    3076      TRAP            #15
000022A2                          3077  
000022A2                          3078  
000022A2  4281                    3079      CLR.L           D1
000022A4  1207                    3080      MOVE.B          D7,D1       * Get the lowest byte of the opcode
000022A6  C23C 0007               3081      AND.B           #$7,D1      * Get the lowest four bits (register #)
000022AA  103C 0003               3082      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
000022AE  4E4F                    3083      TRAP            #15         * Print the register MISC_NUMBER
000022B0                          3084  
000022B0  6000 FB88               3085      BRA             PRINT_OPCODE_LOOP_RETURN
000022B4                          3086  
000022B4                          3087  
000022B4                          3088  *-------------------------------------------------------------------------------
000022B4                          3089  *
000022B4                          3090  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - (ADDRESS REGISTER)
000022B4                          3091  *
000022B4                          3092  *________________________________________
000022B4                          3093  * Register Use Summary:
000022B4                          3094  *
000022B4                          3095  * D0: LOCAL VARIABLE  - Trap task designator
000022B4                          3096  * D1: LOCAL VARIABLE  - Dn Register MISC_NUMBER to display
000022B4                          3097  * D7: CONST PARAMETER - The opcode word
000022B4                          3098  *
000022B4                          3099  * A1: LOCAL VARIABLE  - String address
000022B4                          3100  *-------------------------------------------------------------------------------
000022B4                          3101  PRINT_EA_MODE_ID_AN_INDIRECT
000022B4  43F9 00002B20           3102      LEA             STRING_LEFT_PAREN,A1
000022BA  103C 000E               3103      MOVE.B          #14,D0
000022BE  4E4F                    3104      TRAP            #15
000022C0                          3105  
000022C0  43F9 00002B1C           3106      LEA             STRING_A,A1
000022C6  103C 000E               3107      MOVE.B          #14,D0
000022CA  4E4F                    3108      TRAP            #15
000022CC                          3109  
000022CC  4281                    3110      CLR.L           D1
000022CE  1207                    3111      MOVE.B          D7,D1       * Get the lowest byte of the opcode
000022D0  C23C 0007               3112      AND.B           #$7,D1      * Get the lowest four bits (register #)
000022D4  103C 0003               3113      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
000022D8  4E4F                    3114      TRAP            #15         * Print the register MISC_NUMBER
000022DA                          3115  
000022DA  43F9 00002B22           3116      LEA             STRING_RIGHT_PAREN,A1
000022E0  103C 000E               3117      MOVE.B          #14,D0
000022E4  4E4F                    3118      TRAP            #15
000022E6                          3119  
000022E6  6000 FB52               3120      BRA             PRINT_OPCODE_LOOP_RETURN
000022EA                          3121  
000022EA                          3122  *-------------------------------------------------------------------------------
000022EA                          3123  *
000022EA                          3124  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - (ADDRESS REGISTER)+
000022EA                          3125  *
000022EA                          3126  *________________________________________
000022EA                          3127  * Register Use Summary:
000022EA                          3128  *
000022EA                          3129  * D0: LOCAL VARIABLE  - Trap task designator
000022EA                          3130  * D1: LOCAL VARIABLE  - Dn Register number to display
000022EA                          3131  * D7: CONST PARAMETER - The opcode word
000022EA                          3132  *
000022EA                          3133  * A1: LOCAL VARIABLE  - String address
000022EA                          3134  *-------------------------------------------------------------------------------
000022EA                          3135  PRINT_EA_MODE_ID_AN_POST_INC
000022EA  43F9 00002B20           3136      LEA             STRING_LEFT_PAREN,A1
000022F0  103C 000E               3137      MOVE.B          #14,D0
000022F4  4E4F                    3138      TRAP            #15
000022F6                          3139  
000022F6  43F9 00002B1C           3140      LEA             STRING_A,A1
000022FC  103C 000E               3141      MOVE.B          #14,D0
00002300  4E4F                    3142      TRAP            #15
00002302                          3143  
00002302  4281                    3144      CLR.L           D1
00002304  1207                    3145      MOVE.B          D7,D1       * Get the lowest byte of the opcode
00002306  C23C 0007               3146      AND.B           #$7,D1      * Get the lowest four bits (register #)
0000230A  103C 0003               3147      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
0000230E  4E4F                    3148      TRAP            #15         * Print the register MISC_NUMBER
00002310                          3149  
00002310  43F9 00002B22           3150      LEA             STRING_RIGHT_PAREN,A1
00002316  103C 000E               3151      MOVE.B          #14,D0
0000231A  4E4F                    3152      TRAP            #15
0000231C                          3153  
0000231C  43F9 00002B24           3154      LEA             STRING_PLUS,A1
00002322  103C 000E               3155      MOVE.B          #14,D0
00002326  4E4F                    3156      TRAP            #15
00002328                          3157  
00002328  6000 FB10               3158      BRA             PRINT_OPCODE_LOOP_RETURN
0000232C                          3159  
0000232C                          3160  
0000232C                          3161  
0000232C                          3162  *-------------------------------------------------------------------------------
0000232C                          3163  *
0000232C                          3164  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - -(ADDRESS REGISTER)
0000232C                          3165  *
0000232C                          3166  *________________________________________
0000232C                          3167  * Register Use Summary:
0000232C                          3168  *
0000232C                          3169  * D0: LOCAL VARIABLE  - Trap task designator
0000232C                          3170  * D1: LOCAL VARIABLE  - Dn Register number to display
0000232C                          3171  * D7: CONST PARAMETER - The opcode word
0000232C                          3172  *
0000232C                          3173  * A1: LOCAL VARIABLE  - String address
0000232C                          3174  *-------------------------------------------------------------------------------
0000232C                          3175  PRINT_EA_MODE_ID_AN_PRE_DEC
0000232C  43F9 00002B26           3176      LEA             STRING_MINUS,A1
00002332  103C 000E               3177      MOVE.B          #14,D0
00002336  4E4F                    3178      TRAP            #15
00002338                          3179  
00002338  43F9 00002B20           3180      LEA             STRING_LEFT_PAREN,A1
0000233E  103C 000E               3181      MOVE.B          #14,D0
00002342  4E4F                    3182      TRAP            #15
00002344                          3183  
00002344  43F9 00002B1C           3184      LEA             STRING_A,A1
0000234A  103C 000E               3185      MOVE.B          #14,D0
0000234E  4E4F                    3186      TRAP            #15
00002350                          3187  
00002350  4281                    3188      CLR.L           D1
00002352  1207                    3189      MOVE.B          D7,D1       * Get the lowest byte of the opcode
00002354  C23C 0007               3190      AND.B           #$7,D1      * Get the lowest four bits (register #)
00002358  103C 0003               3191      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
0000235C  4E4F                    3192      TRAP            #15         * Print the register MISC_NUMBER
0000235E                          3193  
0000235E  43F9 00002B22           3194      LEA             STRING_RIGHT_PAREN,A1
00002364  103C 000E               3195      MOVE.B          #14,D0
00002368  4E4F                    3196      TRAP            #15
0000236A                          3197  
0000236A  6000 FACE               3198      BRA             PRINT_OPCODE_LOOP_RETURN
0000236E                          3199  
0000236E                          3200  
0000236E                          3201  
0000236E                          3202  
0000236E                          3203  
0000236E                          3204  *-------------------------------------------------------------------------------
0000236E                          3205  *
0000236E                          3206  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - WORD DATA
0000236E                          3207  *
0000236E                          3208  *________________________________________
0000236E                          3209  * Register Use Summary:
0000236E                          3210  *
0000236E                          3211  * D0: LOCAL VARIABLE  - Trap task designator
0000236E                          3212  * D1: LOCAL VARIABLE  - Dn Register number to display
0000236E                          3213  * D7: CONST PARAMETER - The opcode word
0000236E                          3214  *
0000236E                          3215  * A1: LOCAL VARIABLE  - String address
0000236E                          3216  *-------------------------------------------------------------------------------
0000236E                          3217  PRINT_EA_MODE_ID_IND_SHORT
0000236E  43F9 00002B2A           3218      LEA             STRING_DOLLAR,A1
00002374  103C 000E               3219      MOVE.B          #14,D0
00002378  4E4F                    3220      TRAP            #15
0000237A                          3221  
0000237A  2238 1016               3222      MOVE.L          DATA1,D1
0000237E  4841                    3223      SWAP            D1              * We only want the upper word
00002380  C27C FFFF               3224      AND             #$0000FFFF,D1   * Bit mask for upper word
00002384                          3225  
00002384  700F                    3226      MOVEQ           #15,D0
00002386  7410                    3227      MOVEQ           #16,D2
00002388  4E4F                    3228      TRAP            #15
0000238A                          3229  
0000238A  6000 FAAE               3230      BRA             PRINT_OPCODE_LOOP_RETURN
0000238E                          3231  
0000238E                          3232  *-------------------------------------------------------------------------------
0000238E                          3233  *
0000238E                          3234  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - WORD DATA - DATA2
0000238E                          3235  *
0000238E                          3236  *________________________________________
0000238E                          3237  * Register Use Summary:
0000238E                          3238  *
0000238E                          3239  * D0: LOCAL VARIABLE  - Trap task designator
0000238E                          3240  * D1: LOCAL VARIABLE  - Dn Register number to display
0000238E                          3241  * D7: CONST PARAMETER - The opcode word
0000238E                          3242  *
0000238E                          3243  * A1: LOCAL VARIABLE  - String address
0000238E                          3244  *-------------------------------------------------------------------------------
0000238E                          3245  PRINT_EA_MODE_ID_IND_SHORT_DATA2
0000238E  43F9 00002B2A           3246      LEA             STRING_DOLLAR,A1
00002394  103C 000E               3247      MOVE.B          #14,D0
00002398  4E4F                    3248      TRAP            #15
0000239A                          3249  
0000239A  2238 101C               3250      MOVE.L          DATA2,D1
0000239E  4841                    3251      SWAP            D1              * We only want the upper word
000023A0  C27C FFFF               3252      AND             #$0000FFFF,D1   * Bit mask for upper word
000023A4                          3253  
000023A4  700F                    3254      MOVEQ           #15,D0
000023A6  7410                    3255      MOVEQ           #16,D2
000023A8  4E4F                    3256      TRAP            #15
000023AA                          3257  
000023AA  6000 FA8E               3258      BRA             PRINT_OPCODE_LOOP_RETURN
000023AE                          3259  
000023AE                          3260  *-------------------------------------------------------------------------------
000023AE                          3261  *
000023AE                          3262  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - LONG DATA
000023AE                          3263  *
000023AE                          3264  *________________________________________
000023AE                          3265  * Register Use Summary:
000023AE                          3266  *
000023AE                          3267  * D0: LOCAL VARIABLE  - Trap task designator
000023AE                          3268  * D1: LOCAL VARIABLE  - Dn Register number to display
000023AE                          3269  * D7: CONST PARAMETER - The opcode word
000023AE                          3270  *
000023AE                          3271  * A1: LOCAL VARIABLE  - String address
000023AE                          3272  *-------------------------------------------------------------------------------
000023AE                          3273  PRINT_EA_MODE_ID_IND_LONG
000023AE  43F9 00002B2A           3274      LEA             STRING_DOLLAR,A1
000023B4  103C 000E               3275      MOVE.B          #14,D0
000023B8  4E4F                    3276      TRAP            #15
000023BA                          3277  
000023BA  2238 1016               3278      MOVE.L          DATA1,D1
000023BE  700F                    3279      MOVEQ           #15,D0
000023C0  7410                    3280      MOVEQ           #16,D2
000023C2  4E4F                    3281      TRAP            #15
000023C4                          3282  
000023C4  6000 FA74               3283      BRA             PRINT_OPCODE_LOOP_RETURN
000023C8                          3284  
000023C8                          3285  *-------------------------------------------------------------------------------
000023C8                          3286  *
000023C8                          3287  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - LONG DATA - DATA2
000023C8                          3288  *
000023C8                          3289  *________________________________________
000023C8                          3290  * Register Use Summary:
000023C8                          3291  *
000023C8                          3292  * D0: LOCAL VARIABLE  - Trap task designator
000023C8                          3293  * D1: LOCAL VARIABLE  - Dn Register number to display
000023C8                          3294  * D7: CONST PARAMETER - The opcode word
000023C8                          3295  *
000023C8                          3296  * A1: LOCAL VARIABLE  - String address
000023C8                          3297  *-------------------------------------------------------------------------------
000023C8                          3298  PRINT_EA_MODE_ID_IND_LONG_DATA2
000023C8  43F9 00002B2A           3299      LEA             STRING_DOLLAR,A1
000023CE  103C 000E               3300      MOVE.B          #14,D0
000023D2  4E4F                    3301      TRAP            #15
000023D4                          3302  
000023D4  2238 101C               3303      MOVE.L          DATA2,D1
000023D8  700F                    3304      MOVEQ           #15,D0
000023DA  7410                    3305      MOVEQ           #16,D2
000023DC  4E4F                    3306      TRAP            #15
000023DE                          3307  
000023DE  6000 FA5A               3308      BRA             PRINT_OPCODE_LOOP_RETURN
000023E2                          3309  
000023E2                          3310  *-------------------------------------------------------------------------------
000023E2                          3311  *
000023E2                          3312  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - ABSOLUTE
000023E2                          3313  *
000023E2                          3314  *________________________________________
000023E2                          3315  * Register Use Summary:
000023E2                          3316  *
000023E2                          3317  * D0: LOCAL VARIABLE  - Trap task designator
000023E2                          3318  * D1: LOCAL VARIABLE  - Dn Register number to display
000023E2                          3319  * D7: CONST PARAMETER - The opcode word
000023E2                          3320  *
000023E2                          3321  * A1: LOCAL VARIABLE  - String address
000023E2                          3322  *-------------------------------------------------------------------------------
000023E2                          3323  PRINT_EA_MODE_ID_ABS_DATA
000023E2  43F9 00002B28           3324      LEA             STRING_POUND,A1
000023E8  103C 000E               3325      MOVE.B          #14,D0
000023EC  4E4F                    3326      TRAP            #15
000023EE                          3327  
000023EE  43F9 00002B2A           3328      LEA             STRING_DOLLAR,A1
000023F4  103C 000E               3329      MOVE.B          #14,D0
000023F8  4E4F                    3330      TRAP            #15
000023FA                          3331  
000023FA  2238 1016               3332      MOVE.L          DATA1,D1
000023FE  700F                    3333      MOVEQ           #15,D0
00002400  7410                    3334      MOVEQ           #16,D2
00002402  4E4F                    3335      TRAP            #15
00002404                          3336  
00002404  6000 FA34               3337      BRA             PRINT_OPCODE_LOOP_RETURN
00002408                          3338  
00002408                          3339  *-------------------------------------------------------------------------------
00002408                          3340  *
00002408                          3341  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - ABSOLUTE DATA2
00002408                          3342  *
00002408                          3343  *________________________________________
00002408                          3344  * Register Use Summary:
00002408                          3345  *
00002408                          3346  * D0: LOCAL VARIABLE  - Trap task designator
00002408                          3347  * D1: LOCAL VARIABLE  - Dn Register number to display
00002408                          3348  * D7: CONST PARAMETER - The opcode word
00002408                          3349  *
00002408                          3350  * A1: LOCAL VARIABLE  - String address
00002408                          3351  *-------------------------------------------------------------------------------
00002408                          3352  PRINT_EA_MODE_ID_ABS_DATA2
00002408  43F9 00002B28           3353      LEA             STRING_POUND,A1
0000240E  103C 000E               3354      MOVE.B          #14,D0
00002412  4E4F                    3355      TRAP            #15
00002414                          3356  
00002414  43F9 00002B2A           3357      LEA             STRING_DOLLAR,A1
0000241A  103C 000E               3358      MOVE.B          #14,D0
0000241E  4E4F                    3359      TRAP            #15
00002420                          3360  
00002420  2238 101C               3361      MOVE.L          DATA2,D1
00002424  700F                    3362      MOVEQ           #15,D0
00002426  7410                    3363      MOVEQ           #16,D2
00002428  4E4F                    3364      TRAP            #15
0000242A                          3365  
0000242A  6000 FA0E               3366      BRA             PRINT_OPCODE_LOOP_RETURN
0000242E                          3367  
0000242E                          3368  *-------------------------------------------------------------------------------
0000242E                          3369  *
0000242E                          3370  *       PRINT JSR
0000242E                          3371  *________________________________________
0000242E                          3372  * Register Use Summary:
0000242E                          3373  *
0000242E                          3374  * D0: LOCAL VARIABLE  - Trap task designator
0000242E                          3375  *
0000242E                          3376  * A1: LOCAL VARIABLE  - String address
0000242E                          3377  *-------------------------------------------------------------------------------
0000242E                          3378  PRINT_JSR
0000242E  43F9 00002B78           3379      LEA             STRING_JSR,A1   * Load "JSR" into A1
00002434  103C 000E               3380      MOVE.B          #14,D0      * Set trap task to String
00002438  4E4F                    3381      TRAP            #15
0000243A  6000 F9FE               3382      BRA             PRINT_OPCODE_LOOP_RETURN
0000243E                          3383  
0000243E                          3384  *-------------------------------------------------------------------------------
0000243E                          3385  *
0000243E                          3386  *       PRINT NOT
0000243E                          3387  *________________________________________
0000243E                          3388  * Register Use Summary:
0000243E                          3389  *
0000243E                          3390  * D0: LOCAL VARIABLE  - Trap task designator
0000243E                          3391  *
0000243E                          3392  * A1: LOCAL VARIABLE  - String address
0000243E                          3393  *-------------------------------------------------------------------------------
0000243E                          3394  PRINT_NOT
0000243E  43F9 00002BA6           3395      LEA             STRING_NOT,A1   * Load "NOT" into A1
00002444  103C 000E               3396      MOVE.B          #14,D0      * Set trap task to String
00002448  4E4F                    3397      TRAP            #15
0000244A  6000 F9EE               3398      BRA             PRINT_OPCODE_LOOP_RETURN
0000244E                          3399  
0000244E                          3400  *-------------------------------------------------------------------------------
0000244E                          3401  *
0000244E                          3402  *       PRINT LEA
0000244E                          3403  *________________________________________
0000244E                          3404  * Register Use Summary:
0000244E                          3405  *
0000244E                          3406  * D0: LOCAL VARIABLE  - Trap task designator
0000244E                          3407  *
0000244E                          3408  * A1: LOCAL VARIABLE  - String address
0000244E                          3409  *-------------------------------------------------------------------------------
0000244E                          3410  PRINT_LEA
0000244E  43F9 00002BAA           3411      LEA             STRING_LEA,A1   * Load "LEA" into A1
00002454  103C 000E               3412      MOVE.B          #14,D0      * Set trap task to String
00002458  4E4F                    3413      TRAP            #15
0000245A  6000 F9DE               3414      BRA             PRINT_OPCODE_LOOP_RETURN
0000245E                          3415  
0000245E                          3416  *-------------------------------------------------------------------------------
0000245E                          3417  *
0000245E                          3418  *       PRINT FOURSPACE
0000245E                          3419  *________________________________________
0000245E                          3420  * Register Use Summary:
0000245E                          3421  *
0000245E                          3422  * D0: LOCAL VARIABLE  - Trap task designator
0000245E                          3423  *
0000245E                          3424  * A1: LOCAL VARIABLE  - String address
0000245E                          3425  *-------------------------------------------------------------------------------
0000245E                          3426  PRINT_FOURSPACE
0000245E  43F9 00002B2E           3427      LEA             STRING_FOURSPACE,A1 * Load four spaces into A1
00002464  103C 000E               3428      MOVE.B          #14,D0              * Set trap task to String
00002468  4E4F                    3429      TRAP            #15
0000246A  6000 F9CE               3430      BRA             PRINT_OPCODE_LOOP_RETURN
0000246E                          3431  
0000246E                          3432  *-------------------------------------------------------------------------------
0000246E                          3433  *
0000246E                          3434  *       PRINT SPACE
0000246E                          3435  *________________________________________
0000246E                          3436  * Register Use Summary:
0000246E                          3437  *
0000246E                          3438  * D0: LOCAL VARIABLE  - Trap task designator
0000246E                          3439  *
0000246E                          3440  * A1: LOCAL VARIABLE  - String address
0000246E                          3441  *-------------------------------------------------------------------------------
0000246E                          3442  PRINT_SPACE
0000246E  43F9 00002B2C           3443      LEA             STRING_SPACE,A1 * Load four spaces into A1
00002474  103C 000E               3444      MOVE.B          #14,D0              * Set trap task to String
00002478  4E4F                    3445      TRAP            #15
0000247A  6000 F9BE               3446      BRA             PRINT_OPCODE_LOOP_RETURN
0000247E                          3447  
0000247E                          3448  
0000247E                          3449  *-------------------------------------------------------------------------------
0000247E                          3450  *
0000247E                          3451  *       PRINT COMMA
0000247E                          3452  *________________________________________
0000247E                          3453  * Register Use Summary:
0000247E                          3454  *
0000247E                          3455  * D0: LOCAL VARIABLE  - Trap task designator
0000247E                          3456  *
0000247E                          3457  * A1: LOCAL VARIABLE  - String address
0000247E                          3458  *-------------------------------------------------------------------------------
0000247E                          3459  PRINT_COMMA
0000247E  43F9 00002B1E           3460      LEA             STRING_COMMA,A1 * Load the comma into A1
00002484  103C 000E               3461      MOVE.B          #14,D0              * Set trap task to String
00002488  4E4F                    3462      TRAP            #15
0000248A  6000 F9AE               3463      BRA             PRINT_OPCODE_LOOP_RETURN
0000248E                          3464  
0000248E                          3465  *-------------------------------------------------------------------------------
0000248E                          3466  *
0000248E                          3467  *       PRINT ILLEGAL
0000248E                          3468  *
0000248E                          3469  * Incomplete implementation - final version will depend on opcode logic.
0000248E                          3470  * Currently clears stack entirely, future implementation may need to keep
0000248E                          3471  * some RTS addresses
0000248E                          3472  *
0000248E                          3473  * D7: RTS address (opcode shouldn't be necessary at this point)
0000248E                          3474  *-------------------------------------------------------------------------------
0000248E                          3475  PRINT_ILLEGAL       * INCOMPLETE *
0000248E  2E78 100C               3476      MOVE.L          STACK_BASE,SP
00002492                          3477      * SUBA.L          #4,SP
00002492                          3478  
00002492  43F9 00002B06           3479      LEA             STRING_ILLEGAL,A1
00002498  103C 000D               3480      MOVE.B          #13,D0
0000249C  4E4F                    3481      TRAP            #15
0000249E                          3482  
0000249E                          3483  
0000249E  31FC 0002 1010          3484      MOVE.W  #2,LOOP_INC     * Increment the loop counter by 1 word
000024A4                          3485  
000024A4                          3486  
000024A4  4E75                    3487      RTS
000024A6                          3488  
000024A6                          3489  *-------------------------------------------------------------------------------
000024A6                          3490  *
000024A6                          3491  *       PRINT NON_OPCODE_DATA
000024A6                          3492  *
000024A6                          3493  * Incomplete implementation - final version will depend on opcode logic.
000024A6                          3494  * Currently clears stack entirely, future implementation may need to keep
000024A6                          3495  * some RTS addresses
000024A6                          3496  *
000024A6                          3497  * D5: RTS address
000024A6                          3498  *-------------------------------------------------------------------------------
000024A6                          3499  PRINT_NON_OPCODE_DATA
000024A6  2E78 100C               3500      MOVE.L          STACK_BASE,SP
000024AA                          3501   *    SUBA.L          #4,SP
000024AA                          3502  
000024AA                          3503  * ------ Print "DATA: " ------
000024AA  43F9 00002AFF           3504      LEA             STRING_DATA,A1
000024B0  103C 000E               3505      MOVE.B          #14,D0
000024B4  4E4F                    3506      TRAP            #15
000024B6                          3507  
000024B6                          3508  * ------ Print D7 contents ------
000024B6  2207                    3509      MOVE.L          D7,D1
000024B8  700F                    3510      MOVEQ           #15,D0
000024BA  7410                    3511      MOVEQ           #16,D2
000024BC  4E4F                    3512      TRAP            #15
000024BE                          3513  
000024BE  4EB9 000024E2           3514      JSR             PRINT_IMMEDIATE_NEWLINE
000024C4                          3515  
000024C4  31FC 0002 1010          3516      MOVE.W  #2,LOOP_INC     * Increment the loop counter by 1 word
000024CA                          3517  
000024CA  4E75                    3518      RTS
000024CC                          3519  
000024CC                          3520  
000024CC                          3521  *--------------------------------------------------------------------------------
000024CC                          3522  * PRINTADDR SUBROUTINE
000024CC                          3523  *
000024CC                          3524  * Prints the memory address and some blank spaces before the disassembled
000024CC                          3525  * instruction is appended.
000024CC                          3526  *
000024CC                          3527  * Registers Used:
000024CC                          3528  *   D0: Trap task designator
000024CC                          3529  *   D1: Memory address to display
000024CC                          3530  * D2: Trap task numerical base (Hex = 16)
000024CC                          3531  *
000024CC                          3532  *
000024CC                          3533  * A1: Data memory location
000024CC                          3534  *
000024CC                          3535  *
000024CC                          3536  PRINTADDR
000024CC                          3537  
000024CC  2238 1012               3538      MOVE.L   LOOP_INDEX,D1 * Print the loop index (memory location)
000024D0  700F                    3539      MOVEQ    #15,D0
000024D2  7410                    3540      MOVEQ    #16,D2
000024D4                          3541  
000024D4  4E4F                    3542      TRAP     #15
000024D6                          3543  
000024D6  43F9 00002B2E           3544      LEA      STRING_FOURSPACE,A1 * Print some spaces
000024DC  700E                    3545      MOVEQ      #14,D0
000024DE  4E4F                    3546      TRAP       #15
000024E0                          3547  
000024E0  4E75                    3548      RTS
000024E2                          3549  
000024E2                          3550  *--------------------------------------------------------------------------------
000024E2                          3551  * PRINT_IMMEDIATE_NEWLINE
000024E2                          3552  *
000024E2                          3553  * CANNOT PUSH TO STACK - Used to put a newline after each opcode
000024E2                          3554  *
000024E2                          3555  * Registers Used:
000024E2                          3556  *   D0: Trap task designator
000024E2                          3557  *   D1: Memory address to display
000024E2                          3558  *
000024E2                          3559  * A1: Data memory location
000024E2                          3560  *
000024E2                          3561  PRINT_IMMEDIATE_NEWLINE
000024E2                          3562  
000024E2  43F9 00002B33           3563    LEA        STRING_NEWLINE,A1
000024E8  700E                    3564      MOVEQ      #14,D0
000024EA  4E4F                    3565      TRAP       #15
000024EC                          3566  
000024EC  4E75                    3567    RTS
000024EE                          3568  
000024EE                          3569  
000024EE                          3570  
000024EE                          3571  *--------------------------------------------------------------------------------
000024EE                          3572  * PAUSE_CONSOLE
000024EE                          3573  *
000024EE                          3574  * Takes user input and promptly throws it away
000024EE                          3575  *
000024EE                          3576  *
000024EE                          3577  PAUSE_CONSOLE
000024EE                          3578  
000024EE  7002                    3579    MOVEQ    #2,D0
000024F0  4E4F                    3580      TRAP       #15
000024F2  4241                    3581    CLR.W    D1
000024F4  227C 00000000           3582    MOVEA.L  #0,A1
000024FA                          3583  
000024FA  4E75                    3584    RTS
000024FC                          3585  
000024FC                          3586  
000024FC                          3587  
000024FC                          3588  *--------------------------------------------------------------------------------
000024FC                          3589  * PRINT_MOVEM_STANDARD
000024FC                          3590  *
000024FC                          3591  * Oh no
000024FC                          3592  *
000024FC                          3593  * Registers Used:
000024FC                          3594  *   D0: Trap task designator
000024FC                          3595  *   D1: Memory address to display
000024FC                          3596  *
000024FC                          3597  * A1: Data memory location
000024FC                          3598  *
000024FC                          3599  PRINT_MOVEM_STANDARD
000024FC                          3600  
000024FC  4282                    3601    CLR.L     D2 * D2 is where full data is stored
000024FE  3439 00002BF0           3602    MOVE.W    MISC_OPCODE,D2
00002504                          3603  
00002504  4281                    3604    CLR.L     D1 * D1 is where we'll do the masking
00002506  3202                    3605    MOVE.W    D2,D1
00002508                          3606  
00002508                          3607  PRINT_MOVEM_STANDARD_A7
00002508                          3608  
00002508  C27C 8000               3609    AND.W     #$8000,D1
0000250C  B27C 8000               3610    CMP.W     #$8000,D1
00002510  6600 000C               3611    BNE       PRINT_MOVEM_STANDARD_A6
00002514                          3612  
00002514  43F9 00002BCA           3613    LEA        STRING_A7,A1
0000251A  700E                    3614      MOVEQ      #14,D0
0000251C  4E4F                    3615      TRAP       #15
0000251E                          3616  
0000251E                          3617  PRINT_MOVEM_STANDARD_A6
0000251E                          3618  
0000251E  3202                    3619    MOVE.W    D2,D1
00002520  C27C 4000               3620    AND.W     #$4000,D1
00002524  B27C 4000               3621    CMP.W     #$4000,D1
00002528  6600 000C               3622    BNE       PRINT_MOVEM_STANDARD_A5
0000252C                          3623  
0000252C  43F9 00002BC6           3624    LEA        STRING_A6,A1
00002532  700E                    3625      MOVEQ      #14,D0
00002534  4E4F                    3626      TRAP       #15
00002536                          3627  
00002536                          3628  PRINT_MOVEM_STANDARD_A5
00002536                          3629  
00002536  3202                    3630    MOVE.W    D2,D1
00002538  C27C 2000               3631    AND.W     #$2000,D1
0000253C  B27C 2000               3632    CMP.W     #$2000,D1
00002540  6600 000C               3633    BNE       PRINT_MOVEM_STANDARD_A4
00002544                          3634  
00002544  43F9 00002BC2           3635    LEA        STRING_A5,A1
0000254A  700E                    3636      MOVEQ      #14,D0
0000254C  4E4F                    3637      TRAP       #15
0000254E                          3638  
0000254E                          3639  PRINT_MOVEM_STANDARD_A4
0000254E                          3640  
0000254E  3202                    3641    MOVE.W    D2,D1
00002550  C27C 1000               3642    AND.W     #$1000,D1
00002554  B27C 1000               3643    CMP.W     #$1000,D1
00002558  6600 000C               3644    BNE       PRINT_MOVEM_STANDARD_A3
0000255C                          3645  
0000255C  43F9 00002BBE           3646    LEA        STRING_A4,A1
00002562  700E                    3647      MOVEQ      #14,D0
00002564  4E4F                    3648      TRAP       #15
00002566                          3649  
00002566                          3650  PRINT_MOVEM_STANDARD_A3
00002566                          3651  
00002566  3202                    3652    MOVE.W    D2,D1
00002568  C27C 0800               3653    AND.W     #$0800,D1
0000256C  B27C 0800               3654    CMP.W     #$0800,D1
00002570  6600 000C               3655    BNE       PRINT_MOVEM_STANDARD_A2
00002574                          3656  
00002574  43F9 00002BBA           3657    LEA        STRING_A3,A1
0000257A  700E                    3658      MOVEQ      #14,D0
0000257C  4E4F                    3659      TRAP       #15
0000257E                          3660  
0000257E                          3661  PRINT_MOVEM_STANDARD_A2
0000257E                          3662  
0000257E  3202                    3663    MOVE.W    D2,D1
00002580  C27C 0400               3664    AND.W     #$0400,D1
00002584  B27C 0400               3665    CMP.W     #$0400,D1
00002588  6600 000C               3666    BNE       PRINT_MOVEM_STANDARD_A1
0000258C                          3667  
0000258C  43F9 00002BB6           3668    LEA        STRING_A2,A1
00002592  700E                    3669      MOVEQ      #14,D0
00002594  4E4F                    3670      TRAP       #15
00002596                          3671  
00002596                          3672  PRINT_MOVEM_STANDARD_A1
00002596                          3673  
00002596  3202                    3674    MOVE.W    D2,D1
00002598  C27C 0200               3675    AND.W     #$0200,D1
0000259C  B27C 0200               3676    CMP.W     #$0200,D1
000025A0  6600 000C               3677    BNE       PRINT_MOVEM_STANDARD_A0
000025A4                          3678  
000025A4  43F9 00002BB2           3679    LEA        STRING_A1,A1
000025AA  700E                    3680      MOVEQ      #14,D0
000025AC  4E4F                    3681      TRAP       #15
000025AE                          3682  
000025AE                          3683  PRINT_MOVEM_STANDARD_A0
000025AE                          3684  
000025AE  3202                    3685    MOVE.W    D2,D1
000025B0  C27C 0100               3686    AND.W     #$0100,D1
000025B4  B27C 0100               3687    CMP.W     #$0100,D1
000025B8  6600 000C               3688    BNE       PRINT_MOVEM_STANDARD_D7
000025BC                          3689  
000025BC  43F9 00002BAE           3690    LEA        STRING_A0,A1
000025C2  700E                    3691      MOVEQ      #14,D0
000025C4  4E4F                    3692      TRAP       #15
000025C6                          3693  
000025C6                          3694  PRINT_MOVEM_STANDARD_D7
000025C6                          3695  
000025C6  3202                    3696    MOVE.W    D2,D1
000025C8  C27C 0080               3697    AND.W     #$0080,D1
000025CC  B27C 0080               3698    CMP.W     #$0080,D1
000025D0  6600 000C               3699    BNE       PRINT_MOVEM_STANDARD_D6
000025D4                          3700  
000025D4  43F9 00002BEA           3701    LEA        STRING_D7,A1
000025DA  700E                    3702      MOVEQ      #14,D0
000025DC  4E4F                    3703      TRAP       #15
000025DE                          3704  
000025DE                          3705  PRINT_MOVEM_STANDARD_D6
000025DE                          3706  
000025DE  3202                    3707    MOVE.W    D2,D1
000025E0  C27C 0040               3708    AND.W     #$0040,D1
000025E4  B27C 0040               3709    CMP.W     #$0040,D1
000025E8  6600 000C               3710    BNE       PRINT_MOVEM_STANDARD_D5
000025EC                          3711  
000025EC  43F9 00002BE6           3712    LEA        STRING_D6,A1
000025F2  700E                    3713      MOVEQ      #14,D0
000025F4  4E4F                    3714      TRAP       #15
000025F6                          3715  
000025F6                          3716  PRINT_MOVEM_STANDARD_D5
000025F6                          3717  
000025F6  3202                    3718    MOVE.W    D2,D1
000025F8  C27C 0020               3719    AND.W     #$0020,D1
000025FC  B27C 0020               3720    CMP.W     #$0020,D1
00002600  6600 000C               3721    BNE       PRINT_MOVEM_STANDARD_D4
00002604                          3722  
00002604  43F9 00002BE2           3723    LEA        STRING_D5,A1
0000260A  700E                    3724      MOVEQ      #14,D0
0000260C  4E4F                    3725      TRAP       #15
0000260E                          3726  
0000260E                          3727  PRINT_MOVEM_STANDARD_D4
0000260E                          3728  
0000260E  3202                    3729    MOVE.W    D2,D1
00002610  C27C 0010               3730    AND.W     #$0010,D1
00002614  B27C 0010               3731    CMP.W     #$0010,D1
00002618  6600 000C               3732    BNE       PRINT_MOVEM_STANDARD_D3
0000261C                          3733  
0000261C  43F9 00002BDE           3734    LEA        STRING_D4,A1
00002622  700E                    3735      MOVEQ      #14,D0
00002624  4E4F                    3736      TRAP       #15
00002626                          3737  
00002626                          3738  PRINT_MOVEM_STANDARD_D3
00002626                          3739  
00002626  3202                    3740    MOVE.W    D2,D1
00002628  C27C 0008               3741    AND.W     #$0008,D1
0000262C  B27C 0008               3742    CMP.W     #$0008,D1
00002630  6600 000C               3743    BNE       PRINT_MOVEM_STANDARD_D2
00002634                          3744  
00002634  43F9 00002BDA           3745    LEA        STRING_D3,A1
0000263A  700E                    3746      MOVEQ      #14,D0
0000263C  4E4F                    3747      TRAP       #15
0000263E                          3748  
0000263E                          3749  PRINT_MOVEM_STANDARD_D2
0000263E                          3750  
0000263E  3202                    3751    MOVE.W    D2,D1
00002640  C27C 0004               3752    AND.W     #$0004,D1
00002644  B27C 0004               3753    CMP.W     #$0004,D1
00002648  6600 000C               3754    BNE       PRINT_MOVEM_STANDARD_D1
0000264C                          3755  
0000264C  43F9 00002BD6           3756    LEA        STRING_D2,A1
00002652  700E                    3757      MOVEQ      #14,D0
00002654  4E4F                    3758      TRAP       #15
00002656                          3759  
00002656                          3760  PRINT_MOVEM_STANDARD_D1
00002656                          3761  
00002656  3202                    3762    MOVE.W    D2,D1
00002658  C27C 0002               3763    AND.W     #$0002,D1
0000265C  B27C 0002               3764    CMP.W     #$0002,D1
00002660  6600 000C               3765    BNE       PRINT_MOVEM_STANDARD_D0
00002664                          3766  
00002664  43F9 00002BD2           3767    LEA        STRING_D1,A1
0000266A  700E                    3768      MOVEQ      #14,D0
0000266C  4E4F                    3769      TRAP       #15
0000266E                          3770  
0000266E                          3771  PRINT_MOVEM_STANDARD_D0
0000266E                          3772  
0000266E  3202                    3773    MOVE.W    D2,D1
00002670  C27C 0001               3774    AND.W     #$0001,D1
00002674  B27C 0001               3775    CMP.W     #$0001,D1
00002678  6600 000C               3776    BNE       PRINT_MOVEM_STANDARD_END
0000267C                          3777  
0000267C  43F9 00002BCE           3778    LEA        STRING_D0,A1
00002682  700E                    3779      MOVEQ      #14,D0
00002684  4E4F                    3780      TRAP       #15
00002686                          3781  
00002686                          3782  PRINT_MOVEM_STANDARD_END
00002686                          3783  
00002686  43F9 00002B2C           3784    LEA        STRING_SPACE,A1
0000268C  700E                    3785    MOVEQ    #14,D0
0000268E  4E4F                    3786    TRAP     #15
00002690                          3787  
00002690                          3788  
00002690  6000 F7A8               3789    BRA      PRINT_OPCODE_LOOP_RETURN
00002694                          3790  
00002694                          3791  
00002694                          3792  *--------------------------------------------------------------------------------
00002694                          3793  * PRINT_MOVEM_REVERSE
00002694                          3794  *
00002694                          3795  * it hurts
00002694                          3796  *
00002694                          3797  * Registers Used:
00002694                          3798  *   D0: Trap task designator
00002694                          3799  *   D1: Memory address to display
00002694                          3800  *
00002694                          3801  * A1: Data memory location
00002694                          3802  *
00002694                          3803  PRINT_MOVEM_REVERSE
00002694                          3804  
00002694                          3805  
00002694  4282                    3806    CLR.L     D2 * D2 is where full data is stored
00002696  3439 00002BF0           3807    MOVE.W    MISC_OPCODE,D2
0000269C                          3808  
0000269C  4281                    3809    CLR.L     D1 * D1 is where we'll do the masking
0000269E  3202                    3810    MOVE.W    D2,D1
000026A0                          3811  
000026A0                          3812  PRINT_MOVEM_REVERSE_D0
000026A0                          3813  
000026A0  C27C 8000               3814    AND.W     #$8000,D1
000026A4  B27C 8000               3815    CMP.W     #$8000,D1
000026A8  6600 000C               3816    BNE       PRINT_MOVEM_REVERSE_D1
000026AC                          3817  
000026AC  43F9 00002BCE           3818    LEA        STRING_D0,A1
000026B2  700E                    3819      MOVEQ      #14,D0
000026B4  4E4F                    3820      TRAP       #15
000026B6                          3821  
000026B6                          3822  PRINT_MOVEM_REVERSE_D1
000026B6                          3823  
000026B6  3202                    3824    MOVE.W    D2,D1
000026B8  C27C 4000               3825    AND.W     #$4000,D1
000026BC  B27C 4000               3826    CMP.W     #$4000,D1
000026C0  6600 000C               3827    BNE       PRINT_MOVEM_REVERSE_D2
000026C4                          3828  
000026C4  43F9 00002BD2           3829    LEA        STRING_D1,A1
000026CA  700E                    3830      MOVEQ      #14,D0
000026CC  4E4F                    3831      TRAP       #15
000026CE                          3832  
000026CE                          3833  PRINT_MOVEM_REVERSE_D2
000026CE                          3834  
000026CE  3202                    3835    MOVE.W    D2,D1
000026D0  C27C 2000               3836    AND.W     #$2000,D1
000026D4  B27C 2000               3837    CMP.W     #$2000,D1
000026D8  6600 000C               3838    BNE       PRINT_MOVEM_REVERSE_D3
000026DC                          3839  
000026DC  43F9 00002BD6           3840    LEA        STRING_D2,A1
000026E2  700E                    3841      MOVEQ      #14,D0
000026E4  4E4F                    3842      TRAP       #15
000026E6                          3843  
000026E6                          3844  PRINT_MOVEM_REVERSE_D3
000026E6                          3845  
000026E6  3202                    3846    MOVE.W    D2,D1
000026E8  C27C 1000               3847    AND.W     #$1000,D1
000026EC  B27C 1000               3848    CMP.W     #$1000,D1
000026F0  6600 000C               3849    BNE       PRINT_MOVEM_REVERSE_D4
000026F4                          3850  
000026F4  43F9 00002BDA           3851    LEA        STRING_D3,A1
000026FA  700E                    3852      MOVEQ      #14,D0
000026FC  4E4F                    3853      TRAP       #15
000026FE                          3854  
000026FE                          3855  PRINT_MOVEM_REVERSE_D4
000026FE                          3856  
000026FE  3202                    3857    MOVE.W    D2,D1
00002700  C27C 0800               3858    AND.W     #$0800,D1
00002704  B27C 0800               3859    CMP.W     #$0800,D1
00002708  6600 000C               3860    BNE       PRINT_MOVEM_REVERSE_D5
0000270C                          3861  
0000270C  43F9 00002BDE           3862    LEA        STRING_D4,A1
00002712  700E                    3863      MOVEQ      #14,D0
00002714  4E4F                    3864      TRAP       #15
00002716                          3865  
00002716                          3866  PRINT_MOVEM_REVERSE_D5
00002716                          3867  
00002716  3202                    3868    MOVE.W    D2,D1
00002718  C27C 0400               3869    AND.W     #$0400,D1
0000271C  B27C 0400               3870    CMP.W     #$0400,D1
00002720  6600 000C               3871    BNE       PRINT_MOVEM_REVERSE_D6
00002724                          3872  
00002724  43F9 00002BE2           3873    LEA        STRING_D5,A1
0000272A  700E                    3874      MOVEQ      #14,D0
0000272C  4E4F                    3875      TRAP       #15
0000272E                          3876  
0000272E                          3877  PRINT_MOVEM_REVERSE_D6
0000272E                          3878  
0000272E  3202                    3879    MOVE.W    D2,D1
00002730  C27C 0200               3880    AND.W     #$0200,D1
00002734  B27C 0200               3881    CMP.W     #$0200,D1
00002738  6600 000C               3882    BNE       PRINT_MOVEM_REVERSE_D7
0000273C                          3883  
0000273C  43F9 00002BE6           3884    LEA        STRING_D6,A1
00002742  700E                    3885      MOVEQ      #14,D0
00002744  4E4F                    3886      TRAP       #15
00002746                          3887  
00002746                          3888  PRINT_MOVEM_REVERSE_D7
00002746                          3889  
00002746  3202                    3890    MOVE.W    D2,D1
00002748  C27C 0100               3891    AND.W     #$0100,D1
0000274C  B27C 0100               3892    CMP.W     #$0100,D1
00002750  6600 000C               3893    BNE       PRINT_MOVEM_REVERSE_A0
00002754                          3894  
00002754  43F9 00002BEA           3895    LEA        STRING_D7,A1
0000275A  700E                    3896      MOVEQ      #14,D0
0000275C  4E4F                    3897      TRAP       #15
0000275E                          3898  
0000275E                          3899  PRINT_MOVEM_REVERSE_A0
0000275E                          3900  
0000275E  3202                    3901    MOVE.W    D2,D1
00002760  C27C 0080               3902    AND.W     #$0080,D1
00002764  B27C 0080               3903    CMP.W     #$0080,D1
00002768  6600 000C               3904    BNE       PRINT_MOVEM_REVERSE_A1
0000276C                          3905  
0000276C  43F9 00002BAE           3906    LEA        STRING_A0,A1
00002772  700E                    3907      MOVEQ      #14,D0
00002774  4E4F                    3908      TRAP       #15
00002776                          3909  
00002776                          3910  PRINT_MOVEM_REVERSE_A1
00002776                          3911  
00002776  3202                    3912    MOVE.W    D2,D1
00002778  C27C 0040               3913    AND.W     #$0040,D1
0000277C  B27C 0040               3914    CMP.W     #$0040,D1
00002780  6600 000C               3915    BNE       PRINT_MOVEM_REVERSE_A2
00002784                          3916  
00002784  43F9 00002BB2           3917    LEA        STRING_A1,A1
0000278A  700E                    3918      MOVEQ      #14,D0
0000278C  4E4F                    3919      TRAP       #15
0000278E                          3920  
0000278E                          3921  PRINT_MOVEM_REVERSE_A2
0000278E                          3922  
0000278E  3202                    3923    MOVE.W    D2,D1
00002790  C27C 0020               3924    AND.W     #$0020,D1
00002794  B27C 0020               3925    CMP.W     #$0020,D1
00002798  6600 000C               3926    BNE       PRINT_MOVEM_REVERSE_A3
0000279C                          3927  
0000279C  43F9 00002BB6           3928    LEA        STRING_A2,A1
000027A2  700E                    3929      MOVEQ      #14,D0
000027A4  4E4F                    3930      TRAP       #15
000027A6                          3931  
000027A6                          3932  PRINT_MOVEM_REVERSE_A3
000027A6                          3933  
000027A6  3202                    3934    MOVE.W    D2,D1
000027A8  C27C 0010               3935    AND.W     #$0010,D1
000027AC  B27C 0010               3936    CMP.W     #$0010,D1
000027B0  6600 000C               3937    BNE       PRINT_MOVEM_REVERSE_A4
000027B4                          3938  
000027B4  43F9 00002BBA           3939    LEA        STRING_A3,A1
000027BA  700E                    3940      MOVEQ      #14,D0
000027BC  4E4F                    3941      TRAP       #15
000027BE                          3942  
000027BE                          3943  PRINT_MOVEM_REVERSE_A4
000027BE                          3944  
000027BE  3202                    3945    MOVE.W    D2,D1
000027C0  C27C 0008               3946    AND.W     #$0008,D1
000027C4  B27C 0008               3947    CMP.W     #$0008,D1
000027C8  6600 000C               3948    BNE       PRINT_MOVEM_REVERSE_A5
000027CC                          3949  
000027CC  43F9 00002BBE           3950    LEA        STRING_A4,A1
000027D2  700E                    3951      MOVEQ      #14,D0
000027D4  4E4F                    3952      TRAP       #15
000027D6                          3953  
000027D6                          3954  PRINT_MOVEM_REVERSE_A5
000027D6                          3955  
000027D6  3202                    3956    MOVE.W    D2,D1
000027D8  C27C 0004               3957    AND.W     #$0004,D1
000027DC  B27C 0004               3958    CMP.W     #$0004,D1
000027E0  6600 000C               3959    BNE       PRINT_MOVEM_REVERSE_A6
000027E4                          3960  
000027E4  43F9 00002BC2           3961    LEA        STRING_A5,A1
000027EA  700E                    3962      MOVEQ      #14,D0
000027EC  4E4F                    3963      TRAP       #15
000027EE                          3964  
000027EE                          3965  PRINT_MOVEM_REVERSE_A6
000027EE                          3966  
000027EE  3202                    3967    MOVE.W    D2,D1
000027F0  C27C 0002               3968    AND.W     #$0002,D1
000027F4  B27C 0002               3969    CMP.W     #$0002,D1
000027F8  6600 000C               3970    BNE       PRINT_MOVEM_REVERSE_A7
000027FC                          3971  
000027FC  43F9 00002BC6           3972    LEA        STRING_A6,A1
00002802  700E                    3973      MOVEQ      #14,D0
00002804  4E4F                    3974      TRAP       #15
00002806                          3975  
00002806                          3976  PRINT_MOVEM_REVERSE_A7
00002806                          3977  
00002806  3202                    3978    MOVE.W    D2,D1
00002808  C27C 0001               3979    AND.W     #$0001,D1
0000280C  B27C 0001               3980    CMP.W     #$0001,D1
00002810  6600 000C               3981    BNE       PRINT_MOVEM_REVERSE_END
00002814                          3982  
00002814  43F9 00002BCA           3983    LEA        STRING_A7,A1
0000281A  700E                    3984      MOVEQ      #14,D0
0000281C  4E4F                    3985      TRAP       #15
0000281E                          3986  
0000281E                          3987  PRINT_MOVEM_REVERSE_END
0000281E                          3988  
0000281E  43F9 00002B2C           3989    LEA        STRING_SPACE,A1
00002824  700E                    3990      MOVEQ      #14,D0
00002826  4E4F                    3991      TRAP       #15
00002828                          3992  
00002828                          3993  
00002828  6000 F610               3994    BRA   PRINT_OPCODE_LOOP_RETURN
0000282C                          3995  
0000282C                          3996  
0000282C                          3997  *-----------------------------------------------------------------
0000282C                          3998  * GET_INPUT
0000282C                          3999  *
0000282C                          4000  * Called before anything else, clears what it uses
0000282C                          4001  *-----------------------------------------------------------------
0000282C                          4002  GET_INPUT
0000282C                          4003  
0000282C  21FC 00000000 1000      4004      MOVE.L  #0,START_ADDR
00002834  21FC 00000000 1004      4005      MOVE.L  #0,END_ADDR
0000283C                          4006  
0000283C  4283                    4007      CLR.L   D3
0000283E                          4008  
0000283E  43F9 000029EE           4009      LEA     STRING_ENTER_START,A1
00002844  103C 000D               4010      MOVE.B  #13,D0
00002848  4E4F                    4011      TRAP    #15
0000284A                          4012  
0000284A  327C 0000               4013      MOVEA   #0,A1
0000284E  103C 0002               4014      MOVE.B  #2,D0
00002852  4E4F                    4015      TRAP    #15
00002854                          4016  
00002854  4EB9 000028A4           4017      JSR     STRING_TO_HEX
0000285A  21C3 1000               4018      MOVE.L  D3,START_ADDR
0000285E                          4019  
0000285E  4283                    4020      CLR.L   D3
00002860                          4021  
00002860  43F9 00002A15           4022      LEA     STRING_ENTER_END,A1
00002866  103C 000D               4023      MOVE.B  #13,D0
0000286A  4E4F                    4024      TRAP    #15
0000286C                          4025  
0000286C  327C 0000               4026      MOVEA   #0,A1
00002870  103C 0002               4027      MOVE.B  #2,D0
00002874  4E4F                    4028      TRAP    #15
00002876                          4029  
00002876  4EB9 000028A4           4030      JSR     STRING_TO_HEX
0000287C  21C3 1004               4031      MOVE.L  D3,END_ADDR
00002880                          4032  
00002880  2438 1000               4033      MOVE.L  START_ADDR,D2
00002884  B682                    4034      CMP.L   D2,D3
00002886  6D00 000C               4035      BLT     OUT_OF_ORDER
0000288A                          4036  
0000288A  4280                    4037      CLR.L     D0
0000288C  4281                    4038      CLR.L     D1
0000288E  4282                    4039      CLR.L     D2
00002890  4283                    4040      CLR.L     D3
00002892                          4041  
00002892  4E75                    4042      RTS
00002894                          4043  
00002894                          4044  OUT_OF_ORDER
00002894                          4045  
00002894  43F9 00002A7C           4046      LEA     STRING_OUT_OF_ORDER,A1
0000289A  103C 000D               4047      MOVE.B  #13,D0
0000289E  4E4F                    4048      TRAP    #15
000028A0                          4049  
000028A0  4EF8 282C               4050      JMP     GET_INPUT
000028A4                          4051  
000028A4                          4052  STRING_TO_HEX
000028A4                          4053  
000028A4  4282                    4054      CLR.L   D2
000028A6  B23C 0000               4055      CMP.B   #0,D1
000028AA  6700 0012               4056      BEQ     STH_END
000028AE  4EB9 000028D8           4057      JSR     STH_SET_VALUE
000028B4  4EF8 28A4               4058      JMP     STRING_TO_HEX
000028B8                          4059  
000028B8                          4060  STH_UPDATE
000028B8                          4061  
000028B8  5341                    4062      SUB.W   #1,D1
000028BA  5249                    4063      ADDA.W  #1,A1
000028BC  4E75                    4064      RTS
000028BE                          4065  
000028BE  4E75                    4066  STH_END     RTS
000028C0                          4067  
000028C0                          4068  STH_BAD_INPUT
000028C0                          4069  
000028C0  43F9 00002A3A           4070      LEA     STRING_INVALID_INPUT,A1
000028C6  103C 000D               4071      MOVE.B  #13,D0
000028CA  4E4F                    4072      TRAP    #15
000028CC                          4073  
000028CC  327C 0000               4074      MOVEA   #0,A1
000028D0  103C 0002               4075      MOVE.B  #2,D0
000028D4  4E4F                    4076      TRAP    #15
000028D6                          4077  
000028D6  4E75                    4078      RTS
000028D8                          4079  
000028D8                          4080  STH_SET_VALUE
000028D8                          4081  
000028D8  7400                    4082      MOVE.L  #$0,D2
000028DA  0C11 0030               4083      CMP.B   #$30,(A1)
000028DE  6700 009C               4084      BEQ     STH_SHIFT_BITS
000028E2                          4085  
000028E2  7401                    4086      MOVE.L  #$1,D2
000028E4  0C11 0031               4087      CMP.B   #$31,(A1)
000028E8  6700 0092               4088      BEQ     STH_SHIFT_BITS
000028EC                          4089  
000028EC  7402                    4090      MOVE.L  #$2,D2
000028EE  0C11 0032               4091      CMP.B   #$32,(A1)
000028F2  6700 0088               4092      BEQ     STH_SHIFT_BITS
000028F6                          4093  
000028F6  7403                    4094      MOVE.L  #$3,D2
000028F8  0C11 0033               4095      CMP.B   #$33,(A1)
000028FC  6700 007E               4096      BEQ     STH_SHIFT_BITS
00002900                          4097  
00002900  7404                    4098      MOVE.L  #$4,D2
00002902  0C11 0034               4099      CMP.B   #$34,(A1)
00002906  6700 0074               4100      BEQ     STH_SHIFT_BITS
0000290A                          4101  
0000290A  7405                    4102      MOVE.L  #$5,D2
0000290C  0C11 0035               4103      CMP.B   #$35,(A1)
00002910  6700 006A               4104      BEQ     STH_SHIFT_BITS
00002914                          4105  
00002914  7406                    4106      MOVE.L  #$6,D2
00002916  0C11 0036               4107      CMP.B   #$36,(A1)
0000291A  6700 0060               4108      BEQ     STH_SHIFT_BITS
0000291E                          4109  
0000291E  7407                    4110      MOVE.L  #$7,D2
00002920  0C11 0037               4111      CMP.B   #$37,(A1)
00002924  6700 0056               4112      BEQ     STH_SHIFT_BITS
00002928                          4113  
00002928  7408                    4114      MOVE.L  #$8,D2
0000292A  0C11 0038               4115      CMP.B   #$38,(A1)
0000292E  6700 004C               4116      BEQ     STH_SHIFT_BITS
00002932                          4117  
00002932  7409                    4118      MOVE.L  #$9,D2
00002934  0C11 0039               4119      CMP.B   #$39,(A1)
00002938  6700 0042               4120      BEQ     STH_SHIFT_BITS
0000293C                          4121  
0000293C  740A                    4122      MOVE.L  #$A,D2
0000293E  0C11 0041               4123      CMP.B   #$41,(A1)
00002942  6700 0038               4124      BEQ     STH_SHIFT_BITS
00002946                          4125  
00002946  740B                    4126      MOVE.L  #$B,D2
00002948  0C11 0042               4127      CMP.B   #$42,(A1)
0000294C  6700 002E               4128      BEQ     STH_SHIFT_BITS
00002950                          4129  
00002950  740C                    4130      MOVE.L  #$C,D2
00002952  0C11 0043               4131      CMP.B   #$43,(A1)
00002956  6700 0024               4132      BEQ     STH_SHIFT_BITS
0000295A                          4133  
0000295A  740D                    4134      MOVE.L  #$D,D2
0000295C  0C11 0044               4135      CMP.B   #$44,(A1)
00002960  6700 001A               4136      BEQ     STH_SHIFT_BITS
00002964                          4137  
00002964  740E                    4138      MOVE.L  #$E,D2
00002966  0C11 0045               4139      CMP.B   #$45,(A1)
0000296A  6700 0010               4140      BEQ     STH_SHIFT_BITS
0000296E                          4141  
0000296E  740F                    4142      MOVE.L  #$F,D2
00002970  0C11 0046               4143      CMP.B   #$46,(A1)
00002974  6700 0006               4144      BEQ     STH_SHIFT_BITS
00002978                          4145  
00002978  4EF8 28C0               4146      JMP     STH_BAD_INPUT
0000297C                          4147  
0000297C                          4148  STH_SHIFT_BITS
0000297C                          4149  
0000297C  B23C 0001               4150      CMP.B   #1,D1
00002980  6700 0038               4151      BEQ     STH_INCREASE_VALUE
00002984                          4152  
00002984  E99A                    4153      ROL.L   #4,D2
00002986  B23C 0002               4154      CMP.B   #2,D1
0000298A  6700 002E               4155      BEQ     STH_INCREASE_VALUE
0000298E                          4156  
0000298E  E99A                    4157      ROL.L   #4,D2
00002990  B23C 0003               4158      CMP.B   #3,D1
00002994  6700 0024               4159      BEQ     STH_INCREASE_VALUE
00002998                          4160  
00002998  E99A                    4161      ROL.L   #4,D2
0000299A  B23C 0004               4162      CMP.B   #4,D1
0000299E  6700 001A               4163      BEQ     STH_INCREASE_VALUE
000029A2                          4164  
000029A2  E99A                    4165      ROL.L   #4,D2
000029A4  B23C 0005               4166      CMP.B   #5,D1
000029A8  6700 0010               4167      BEQ     STH_INCREASE_VALUE
000029AC                          4168  
000029AC  E99A                    4169      ROL.L   #4,D2
000029AE  B23C 0006               4170      CMP.B   #6,D1
000029B2  6700 0006               4171      BEQ     STH_INCREASE_VALUE
000029B6                          4172  
000029B6  4EF8 28C0               4173      JMP     STH_BAD_INPUT
000029BA                          4174  
000029BA                          4175  STH_INCREASE_VALUE
000029BA                          4176  
000029BA  D682                    4177      ADD.L   D2,D3
000029BC  4EF8 28B8               4178      JMP     STH_UPDATE
000029C0                          4179  
000029C0                          4180  * END OF GET_INPUT -----------------------------------------------
000029C0                          4181  
000029C0                          4182  *-----------------------------------------------------------------
000029C0                          4183  * QUERY_CONTINUE
000029C0                          4184  *
000029C0                          4185  * Called before anything else, clears what it uses
000029C0                          4186  *-----------------------------------------------------------------
000029C0                          4187  QUERY_CONTINUE
000029C0                          4188  
000029C0  43F9 00002AA8           4189      LEA     STRING_QUERY_CONTINUE,A1
000029C6  103C 000D               4190      MOVE.B  #13,D0
000029CA  4E4F                    4191      TRAP    #15
000029CC                          4192  
000029CC  327C 0000               4193      MOVEA   #0,A1
000029D0  103C 0002               4194      MOVE.B  #2,D0
000029D4  4E4F                    4195      TRAP    #15
000029D6                          4196  
000029D6  0C11 0079               4197      CMP.B   #$79,(A1)
000029DA  6700 E644               4198      BEQ     INITIALIZE
000029DE                          4199  
000029DE  43F9 00002AE2           4200      LEA     STRING_EXITING,A1
000029E4  103C 000D               4201      MOVE.B  #13,D0
000029E8  4E4F                    4202      TRAP    #15
000029EA                          4203  
000029EA  FFFF FFFF               4204      SIMHALT
000029EE                          4205  
000029EE                          4206  *-------------------------------------------------------------------------------
000029EE                          4207  *                ________  ________  _________  ________
000029EE                          4208  *               |\   ___ \|\   __  \|\___   ___\\   __  \
000029EE                          4209  *               \ \  \_|\ \ \  \|\  \|___ \  \_\ \  \|\  \
000029EE                          4210  *                \ \  \ \\ \ \   __  \   \ \  \ \ \   __  \
000029EE                          4211  *                 \ \  \_\\ \ \  \ \  \   \ \  \ \ \  \ \  \
000029EE                          4212  *                  \ \_______\ \__\ \__\   \ \__\ \ \__\ \__\
000029EE                          4213  *                   \|_______|\|__|\|__|    \|__|  \|__|\|__|
000029EE                          4214  *
000029EE                          4215  *-------------------------------------------------------------------------------
000029EE                          4216  
000029EE                          4217  
000029EE                          4218  * Data for GET_INPUT and QUERY_CONTINUE ----------
000029EE= 50 6C 65 61 73 65 ...   4219  STRING_ENTER_START      DC.B    'Please enter a start address, eg. 4A6C',0
00002A15= 50 6C 65 61 73 65 ...   4220  STRING_ENTER_END        DC.B    'Please enter a end address, eg. 5D3F',0
00002A3A= 49 4E 56 41 4C 49 ...   4221  STRING_INVALID_INPUT    DC.B    'INVALID INPUT, must be a valid EASy68k hexidecimal memory address',0
00002A7C= 53 74 61 72 74 20 ...   4222  STRING_OUT_OF_ORDER     DC.B    'Start address must be less than end address',0
00002AA8= 57 6F 75 6C 64 20 ...   4223  STRING_QUERY_CONTINUE   DC.B    'Would you like to disassemble another memory image? (y/n)',0
00002AE2= 4E 6F 77 20 65 78 ...   4224  STRING_EXITING          DC.B    'Now exiting, have a nice day',0
00002AFF                          4225  * -------------------------------------------------
00002AFF                          4226  
00002AFF= 44 41 54 41 3A 20 00    4227  STRING_DATA                 DC.B    'DATA: ',0
00002B06= 49 4C 4C 45 47 41 ...   4228  STRING_ILLEGAL              DC.B    'ILLEGAL',0
00002B0E= 2E 42 20 00             4229  STRING_BYTE_DESIGNATOR      DC.B    '.B ',0
00002B12= 2E 57 20 00             4230  STRING_WORD_DESIGNATOR      DC.B    '.W ',0
00002B16= 2E 4C 20 00             4231  STRING_LONG_DESIGNATOR      DC.B    '.L ',0
00002B1A= 44 00                   4232  STRING_D                    DC.B    'D',0
00002B1C= 41 00                   4233  STRING_A                    DC.B    'A',0
00002B1E= 2C 00                   4234  STRING_COMMA                DC.B    ',',0
00002B20= 28 00                   4235  STRING_LEFT_PAREN           DC.B    '(',0
00002B22= 29 00                   4236  STRING_RIGHT_PAREN          DC.B    ')',0
00002B24= 2B 00                   4237  STRING_PLUS                 DC.B    '+',0
00002B26= 2D 00                   4238  STRING_MINUS                DC.B    '-',0
00002B28= 23 00                   4239  STRING_POUND                DC.B    '#',0
00002B2A= 24 00                   4240  STRING_DOLLAR               DC.B    '$',0
00002B2C                          4241  
00002B2C= 20 00                   4242  STRING_SPACE                DC.B    ' ',0
00002B2E= 20 20 20 20 00          4243  STRING_FOURSPACE            DC.B    '    ',0
00002B33= 0D 0A 00                4244  STRING_NEWLINE              DC.B    '',CR,LF,0
00002B36                          4245  
00002B36= 41 53 52 00             4246  STRING_ASR                  DC.B    'ASR',0
00002B3A= 41 53 4C 00             4247  STRING_ASL                  DC.B    'ASL',0
00002B3E= 4C 53 52 00             4248  STRING_LSR                  DC.B    'LSR',0
00002B42= 4C 53 4C 00             4249  STRING_LSL                  DC.B    'LSL',0
00002B46= 52 4F 52 00             4250  STRING_ROR                  DC.B    'ROR',0
00002B4A= 52 4F 4C 00             4251  STRING_ROL                  DC.B    'ROL',0
00002B4E= 4E 4F 50 00             4252  STRING_NOP                  DC.B    'NOP',0
00002B52= 52 54 53 00             4253  STRING_RTS                  DC.B    'RTS',0
00002B56= 41 44 44 51 00          4254  STRING_ADDQ                 DC.B    'ADDQ',0
00002B5B= 41 44 44 00             4255  STRING_ADD                  DC.B    'ADD',0
00002B5F= 41 44 44 41 00          4256  STRING_ADDA                 DC.B    'ADDA',0
00002B64= 42 45 51 20 00          4257  STRING_BEQ                  DC.B    'BEQ ',0
00002B69= 42 4C 45 20 00          4258  STRING_BLE                  DC.B    'BLE ',0
00002B6E= 42 52 41 20 00          4259  STRING_BRA                  DC.B    'BRA ',0
00002B73= 42 47 54 20 00          4260  STRING_BGT                  DC.B    'BGT ',0
00002B78= 4A 53 52 20 20 20 ...   4261  STRING_JSR                  DC.B    'JSR    ',0
00002B80= 4D 4F 56 45 00          4262  STRING_MOVE                 DC.B    'MOVE',0
00002B85= 4D 4F 56 45 41 00       4263  STRING_MOVEA                DC.B    'MOVEA',0
00002B8B= 4D 4F 56 45 51 20 ...   4264  STRING_MOVEQ                DC.B    'MOVEQ    ',0
00002B95= 4D 4F 56 45 4D 00       4265  STRING_MOVEM                DC.B    'MOVEM',0
00002B9B= 53 55 42 00             4266  STRING_SUB                  DC.B    'SUB',0
00002B9F= 41 4E 44 00             4267  STRING_AND                  DC.B    'AND',0
00002BA3= 4F 52 00                4268  STRING_OR                   DC.B    'OR',0
00002BA6= 4E 4F 54 00             4269  STRING_NOT                  DC.B    'NOT',0
00002BAA= 4C 45 41 00             4270  STRING_LEA                  DC.B    'LEA',0
00002BAE                          4271  
00002BAE= 41 30 2C 00             4272  STRING_A0                   DC.B    'A0,',0
00002BB2= 41 31 2C 00             4273  STRING_A1                   DC.B    'A1,',0
00002BB6= 41 32 2C 00             4274  STRING_A2                   DC.B    'A2,',0
00002BBA= 41 33 2C 00             4275  STRING_A3                   DC.B    'A3,',0
00002BBE= 41 34 2C 00             4276  STRING_A4                   DC.B    'A4,',0
00002BC2= 41 35 2C 00             4277  STRING_A5                   DC.B    'A5,',0
00002BC6= 41 36 2C 00             4278  STRING_A6                   DC.B    'A6,',0
00002BCA= 41 37 2C 00             4279  STRING_A7                   DC.B    'A7,',0
00002BCE                          4280  
00002BCE= 44 30 2C 00             4281  STRING_D0                   DC.B    'D0,',0
00002BD2= 44 31 2C 00             4282  STRING_D1                   DC.B    'D1,',0
00002BD6= 44 32 2C 00             4283  STRING_D2                   DC.B    'D2,',0
00002BDA= 44 33 2C 00             4284  STRING_D3                   DC.B    'D3,',0
00002BDE= 44 34 2C 00             4285  STRING_D4                   DC.B    'D4,',0
00002BE2= 44 35 2C 00             4286  STRING_D5                   DC.B    'D5,',0
00002BE6= 44 36 2C 00             4287  STRING_D6                   DC.B    'D6,',0
00002BEA= 44 37 2C 00             4288  STRING_D7                   DC.B    'D7,',0
00002BEE                          4289  
00002BEE                          4290  MISC_NUMBER  DS.B    1    * MISC_NUMBER to be printed
00002BF0                          4291  MISC_OPCODE  DS.W    1
00002BF2                          4292  MISC_REGISTER DS.B   1
00002BF4                          4293  LINE_COUNT    DS.W    1    * How many lines are currently displayed onscreen
00002BF6                          4294  
00002BF6                          4295  
00002BF6                          4296  
00002BF6                          4297      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 1C78
ADDA                1BF8
ADDA_CONTINUE       1C40
ADDA_L              1C20
ADDA_W              1C30
ADDQ                1D0C
ADDQ_NOT_ZERO       1D50
ADD_ADDA            1BE2
ADD_DN_FIRST        1CD4
ADD_EA_FIRST        1C9C
AND                 1328
AND_DN_FIRST        13A0
AND_EA_FIRST        1356
ASL                 19C0
ASR                 19B0
ASX                 199E
BCC                 1B1A
BCC_16              1BAE
BCC_32              1BC8
BCC_CONTINUE        1B84
BCC_END             1BD2
BEQ                 1B74
BGT                 1B54
BLE                 1B64
BRA                 1B44
BRANCHBLOCK         1162
BRANCHBLOCK_MOVEQ_END  11B4
CR                  D
DATA1               1016
DATA1_IN_USE        101A
DATA2               101C
DONE                1154
END_ADDR            1004
GET_INPUT           282C
INITIALIZE          1020
JSR                 1DB4
JSR_EA_MODE_ELSE    1DDE
JSR_FINISH          1E18
JSR_PUSH_EA_MODE_ID_AN_INDIRECT  1DFA
JSR_PUSH_EA_MODE_ID_IND_LONG  1E0E
JSR_PUSH_EA_MODE_ID_IND_SHORT  1E04
LEA                 126E
LF                  A
LINE_COUNT          2BF4
LOOP_INC            1010
LOOP_INDEX          1012
LSL                 198E
LSR                 197E
LSX                 196C
LSX_ASX_ROX         192C
LSX_ASX_ROX_CONTINUE  1A02
LSX_ASX_ROX_FINISH  1B0A
LSX_ASX_ROX_MEM     1AE4
LSX_ASX_ROX_REGISTER  1AAA
LSX_ASX_ROX_RESET_D7  1B14
LSX_ASX_ROX_SHIFT   1A30
LSX_ASX_ROX_SHIFT_8  1A7A
MISC_NUMBER         2BEE
MISC_OPCODE         2BF0
MISC_REGISTER       2BF2
MOVE                1758
MOVEA               18AC
MOVEA_L             18E6
MOVEA_SIZE_CONTINUE  18F4
MOVEA_W             18D8
MOVEM               1526
MOVEM_MEM2REG       15AA
MOVEM_MEM2REG_AN_IND  15F2
MOVEM_MEM2REG_EA_FINISH  161A
MOVEM_MEM2REG_ELSE  15D6
MOVEM_MEM2REG_IND_LONG  1610
MOVEM_MEM2REG_IND_SHORT  1606
MOVEM_MEM2REG_POST_INC  15FC
MOVEM_REG2MEM       1646
MOVEM_REG2MEM_AN_IND  168C
MOVEM_REG2MEM_EA_FINISH  16E4
MOVEM_REG2MEM_ELSE  1670
MOVEM_REG2MEM_IND_LONG  16CE
MOVEM_REG2MEM_IND_SHORT  16B8
MOVEM_REG2MEM_PRE_DEC  16A2
MOVEM_SIZE_CONTINUE  1592
MOVEM_SIZE_LONG     1572
MOVEM_SIZE_WORD     1582
MOVEQ               16EC
MOVE_B              178C
MOVE_L              17A8
MOVE_MODE_AN_INDIRECT  1818
MOVE_MODE_AN_POST_INC  1822
MOVE_MODE_AN_PRE_DEC  182C
MOVE_MODE_DN        180E
MOVE_MODE_ELSE      1836
MOVE_MODE_FINISH    189E
MOVE_MODE_IND_LONG  1872
MOVE_MODE_IND_LONG_DATA2  1890
MOVE_MODE_IND_SHORT  1846
MOVE_MODE_IND_SHORT_DATA2  1864
MOVE_MOVEA          1742
MOVE_SIZE_CONTINUE  17B6
MOVE_W              179A
NOP                 1D80
NOT                 12E8
OPCODE_LOOP         10C8
OPCODE_LOOP_CONTINUE  1150
OPCODE_LOOP_PAUSE   1142
OR                  13D8
OR_DN_FIRST         1450
OR_EA_FIRST         1406
OUT_OF_ORDER        2894
PAUSE_CONSOLE       24EE
PRINTADDR           24CC
PRINT_ADD           2028
PRINT_ADDA          2038
PRINT_ADDQ          21C8
PRINT_AND           2228
PRINT_ASL           1F9E
PRINT_ASR           1F8E
PRINT_BEQ           2008
PRINT_BGT           1FE8
PRINT_BLE           1FF8
PRINT_BRA           2018
PRINT_BYTE_DESIGNATOR  2248
PRINT_COMMA         247E
PRINT_COUNT         1008
PRINT_DATA1_LONG    1FCE
PRINT_DATA1_WORD    1FD8
PRINT_EA_MODE_ID_ABS_DATA  23E2
PRINT_EA_MODE_ID_ABS_DATA2  2408
PRINT_EA_MODE_ID_AN  2296
PRINT_EA_MODE_ID_AN_INDIRECT  22B4
PRINT_EA_MODE_ID_AN_POST_INC  22EA
PRINT_EA_MODE_ID_AN_PRE_DEC  232C
PRINT_EA_MODE_ID_DN  2278
PRINT_EA_MODE_ID_IND_LONG  23AE
PRINT_EA_MODE_ID_IND_LONG_DATA2  23C8
PRINT_EA_MODE_ID_IND_SHORT  236E
PRINT_EA_MODE_ID_IND_SHORT_DATA2  238E
PRINT_FOURSPACE     245E
PRINT_ILLEGAL       248E
PRINT_IMMEDIATE_NEWLINE  24E2
PRINT_JSR           242E
PRINT_LEA           244E
PRINT_LONG_DESIGNATOR  2268
PRINT_LSL           1F7E
PRINT_LSR           1F6E
PRINT_MISC_ADDRESS_IND  2164
PRINT_MISC_NUMBER   2048
PRINT_MISC_NUMBER_AS_ADDRESS  205E
PRINT_MISC_NUMBER_AS_DATA  21A2
PRINT_MISC_NUMBER_AS_REGISTER  2084
PRINT_MISC_POST_INC  211A
PRINT_MISC_PRE_DEC  20D0
PRINT_MISC_REGISTER  20AA
PRINT_MOVE          21D8
PRINT_MOVEA         21E8
PRINT_MOVEM         2208
PRINT_MOVEM_REVERSE  2694
PRINT_MOVEM_REVERSE_A0  275E
PRINT_MOVEM_REVERSE_A1  2776
PRINT_MOVEM_REVERSE_A2  278E
PRINT_MOVEM_REVERSE_A3  27A6
PRINT_MOVEM_REVERSE_A4  27BE
PRINT_MOVEM_REVERSE_A5  27D6
PRINT_MOVEM_REVERSE_A6  27EE
PRINT_MOVEM_REVERSE_A7  2806
PRINT_MOVEM_REVERSE_D0  26A0
PRINT_MOVEM_REVERSE_D1  26B6
PRINT_MOVEM_REVERSE_D2  26CE
PRINT_MOVEM_REVERSE_D3  26E6
PRINT_MOVEM_REVERSE_D4  26FE
PRINT_MOVEM_REVERSE_D5  2716
PRINT_MOVEM_REVERSE_D6  272E
PRINT_MOVEM_REVERSE_D7  2746
PRINT_MOVEM_REVERSE_END  281E
PRINT_MOVEM_STANDARD  24FC
PRINT_MOVEM_STANDARD_A0  25AE
PRINT_MOVEM_STANDARD_A1  2596
PRINT_MOVEM_STANDARD_A2  257E
PRINT_MOVEM_STANDARD_A3  2566
PRINT_MOVEM_STANDARD_A4  254E
PRINT_MOVEM_STANDARD_A5  2536
PRINT_MOVEM_STANDARD_A6  251E
PRINT_MOVEM_STANDARD_A7  2508
PRINT_MOVEM_STANDARD_D0  266E
PRINT_MOVEM_STANDARD_D1  2656
PRINT_MOVEM_STANDARD_D2  263E
PRINT_MOVEM_STANDARD_D3  2626
PRINT_MOVEM_STANDARD_D4  260E
PRINT_MOVEM_STANDARD_D5  25F6
PRINT_MOVEM_STANDARD_D6  25DE
PRINT_MOVEM_STANDARD_D7  25C6
PRINT_MOVEM_STANDARD_END  2686
PRINT_MOVEQ         21F8
PRINT_NON_OPCODE_DATA  24A6
PRINT_NOT           243E
PRINT_OPCODE        1E20
PRINT_OPCODE_LOOP   1E2A
PRINT_OPCODE_LOOP_FINISH  1E40
PRINT_OPCODE_LOOP_INDEX  100A
PRINT_OPCODE_LOOP_RETURN  1E3A
PRINT_OR            2238
PRINT_ROL           1FBE
PRINT_ROR           1FAE
PRINT_SPACE         246E
PRINT_SUB           2218
PRINT_WORD_DESIGNATOR  2258
PUSH_BWL            1F26
PUSH_BWL_BYTE       1F42
PUSH_BWL_FINISH     1F60
PUSH_BWL_LONG       1F56
PUSH_BWL_WORD       1F4C
PUSH_EA_MODE_ID     1E4C
PUSH_EA_MODE_ID_ABS_DATA  1F04
PUSH_EA_MODE_ID_AN  1E92
PUSH_EA_MODE_ID_AN_INDIRECT  1E9C
PUSH_EA_MODE_ID_AN_POST_INC  1EA6
PUSH_EA_MODE_ID_AN_PRE_DEC  1EB0
PUSH_EA_MODE_ID_DN  1E88
PUSH_EA_MODE_ID_ELSE  1EBA
PUSH_EA_MODE_ID_FINISH  1F18
PUSH_EA_MODE_ID_IND_LONG  1EF0
PUSH_EA_MODE_ID_IND_SHORT  1EDC
QUERY_CONTINUE      29C0
ROL                 19F2
ROR                 19E2
ROX                 19D0
RTS                 1D9A
STACK_BASE          100C
START               1020
START_ADDR          1000
STH_BAD_INPUT       28C0
STH_END             28BE
STH_INCREASE_VALUE  29BA
STH_SET_VALUE       28D8
STH_SHIFT_BITS      297C
STH_UPDATE          28B8
STRING_A            2B1C
STRING_A0           2BAE
STRING_A1           2BB2
STRING_A2           2BB6
STRING_A3           2BBA
STRING_A4           2BBE
STRING_A5           2BC2
STRING_A6           2BC6
STRING_A7           2BCA
STRING_ADD          2B5B
STRING_ADDA         2B5F
STRING_ADDQ         2B56
STRING_AND          2B9F
STRING_ASL          2B3A
STRING_ASR          2B36
STRING_BEQ          2B64
STRING_BGT          2B73
STRING_BLE          2B69
STRING_BRA          2B6E
STRING_BYTE_DESIGNATOR  2B0E
STRING_COMMA        2B1E
STRING_D            2B1A
STRING_D0           2BCE
STRING_D1           2BD2
STRING_D2           2BD6
STRING_D3           2BDA
STRING_D4           2BDE
STRING_D5           2BE2
STRING_D6           2BE6
STRING_D7           2BEA
STRING_DATA         2AFF
STRING_DOLLAR       2B2A
STRING_ENTER_END    2A15
STRING_ENTER_START  29EE
STRING_EXITING      2AE2
STRING_FOURSPACE    2B2E
STRING_ILLEGAL      2B06
STRING_INVALID_INPUT  2A3A
STRING_JSR          2B78
STRING_LEA          2BAA
STRING_LEFT_PAREN   2B20
STRING_LONG_DESIGNATOR  2B16
STRING_LSL          2B42
STRING_LSR          2B3E
STRING_MINUS        2B26
STRING_MOVE         2B80
STRING_MOVEA        2B85
STRING_MOVEM        2B95
STRING_MOVEQ        2B8B
STRING_NEWLINE      2B33
STRING_NOP          2B4E
STRING_NOT          2BA6
STRING_OR           2BA3
STRING_OUT_OF_ORDER  2A7C
STRING_PLUS         2B24
STRING_POUND        2B28
STRING_QUERY_CONTINUE  2AA8
STRING_RIGHT_PAREN  2B22
STRING_ROL          2B4A
STRING_ROR          2B46
STRING_RTS          2B52
STRING_SPACE        2B2C
STRING_SUB          2B9B
STRING_TO_HEX       28A4
STRING_WORD_DESIGNATOR  2B12
SUB                 1488
SUB_DN_FIRST        14EE
SUB_EA_FIRST        14B6
