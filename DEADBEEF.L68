0000101E Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 6/6/2020 5:19:51 AM

00000000                             1  *-------------------------------------------------------------------------------
00000000                             2  * Title      : PUSH_BWT / EA_MODE_ID Development
00000000                             3  * Written by : Ihsan Halimun, Camden Brewster, Matthew Munson
00000000                             4  * Date       : May 16th 2020
00000000                             5  * Description: It's the whole damn thing!
00000000                             6  *-------------------------------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  *-------------------------------------------------------------------------------
00001000                             9  *      ________   ___        ________   ________   ________   ___
00001000                            10  *     |\   ____\ |\  \      |\   __  \ |\   __  \ |\   __  \ |\  \
00001000                            11  *     \ \  \___| \ \  \     \ \  \|\  \\ \  \|\ /_\ \  \|\  \\ \  \
00001000                            12  *      \ \  \  ___\ \  \     \ \  \\\  \\ \   __  \\ \   __  \\ \  \
00001000                            13  *       \ \  \|\  \\ \  \____ \ \  \\\  \\ \  \|\  \\ \  \ \  \\ \  \____
00001000                            14  *        \ \_______\\ \_______\\ \_______\\ \_______\\ \__\ \__\\ \_______\
00001000                            15  *         \|_______| \|_______| \|_______| \|_______| \|__|\|__| \|_______|
00001000                            16  *-------------------------------------------------------------------------------
00001000                            17  
00001000                            18  START_ADDR   DS.L  1   *User defined memory start address
00001004                            19  END_ADDR     DS.L  1   *User defined memory end address
00001008                            20  
00001008  =0000000D                 21  CR    EQU   $0D
00001008  =0000000A                 22  LF    EQU   $0A
00001008                            23  
00001008                            24  PRINT_COUNT    DS.W    1    *How many print statements are sitting in the stack
0000100A                            25  PRINT_OPCODE_LOOP_INDEX  DS.W  1   * The print loop index
0000100C                            26  STACK_BASE     DS.L    1    *Where we begin putting print calls into stack
00001010                            27  
00001010                            28  LOOP_INC       DS.W    1    * How many words to skip to find the next opcode
00001012                            29  LOOP_INDEX     DS.L    1    * The opcode loop's index
00001016                            30  
00001016                            31  DATA1          DS.L    1    * The first line of opcode data
0000101A                            32  DATA2          DS.L    1    * The second line of opcode data
0000101E                            33  
0000101E                            34  START:
0000101E                            35  
0000101E                            36  *-------------------------------------------------------------------------------
0000101E                            37  *                ________  ________  ________  _______
0000101E                            38  *               |\   ____\|\   __  \|\   ___ \|\  ___ \
0000101E                            39  *               \ \  \___|\ \  \|\  \ \  \_|\ \ \   __/|
0000101E                            40  *                \ \  \    \ \  \\\  \ \  \ \\ \ \  \_|/__
0000101E                            41  *                 \ \  \____\ \  \\\  \ \  \_\\ \ \  \_|\ \
0000101E                            42  *                  \ \_______\ \_______\ \_______\ \_______\
0000101E                            43  *                   \|_______|\|_______|\|_______|\|_______|
0000101E                            44  *
0000101E                            45  *-------------------------------------------------------------------------------
0000101E                            46  
0000101E                            47  *-------------------------------------------------------------------------------
0000101E                            48  INITIALIZE
0000101E                            49  
0000101E                            50  * ------ Test Initializations ------
0000101E                            51  
0000101E                            52  *  MOVE.W    #$4E91, $4000   * JSR Opcode
0000101E                            53  *  MOVE.W    #$4EB9,$4000      * JSR 1016 (1)
0000101E                            54  *  MOVE.L    #$00001016, $4002 * JSR 1016 (2)
0000101E                            55  *  (^ Add 8 to memory address if you want something after this ^)
0000101E                            56  
0000101E                            57  *  MOVE.W    #$4E71, $4002   * NOP Opcode
0000101E                            58  *  MOVE.W    #$4E75, $4004   * RTS Opcode
0000101E                            59  *  MOVE.W    #$5241, $4000   * ADDQ Opcode
0000101E                            60  *  MOVE.W    #$D240, $4000   * ADD Opcode
0000101E                            61  *  MOVE.W    #$D5C9, $4000   * ADDA Opcode (ADDA.L A1,A2)
0000101E                            62  *   MOVE.L    #$60000002, $4000   * BRA Opcode
0000101E                            63   *  MOVE.L    #$6E000018, $4004   * BRA Opcode
0000101E                            64    * MOVE.W    #$6FE6, $4008
0000101E                            65     *MOVE.W    #$67E2, $400A
0000101E  31FC E940 4000            66     MOVE.W     #$E940,$4000     * ASR.L #8,D0 Opcode
00001024  31FC E061 4004            67     MOVE.W     #$E061,$4004
0000102A  31FC EB49 4008            68     MOVE.W     #$EB49,$4008
00001030  31FC E26A 400C            69     MOVE.W     #$E26A,$400C
00001036  31FC E31B 4010            70     MOVE.W     #$E31B,$4010
0000103C  31FC E55C 4014            71     MOVE.W     #$E55C,$4014
00001042  31FC E79D 4018            72     MOVE.W     #$E79D,$4018
00001048  31FC E21B 401C            73     MOVE.W     #$E21B,$401C
0000104E  31FC E45C 4020            74     MOVE.W     #$E45C,$4020
00001054  31FC E69D 4024            75     MOVE.W     #$E69D,$4024
0000105A  31FC E1D1 4028            76     MOVE.W     #$E1D1,$4028
00001060  31FC E0D2 402C            77     MOVE.W     #$E0D2,$402C
00001066  31FC E3E3 4030            78     MOVE.W     #$E3E3,$4030
0000106C  31FC E2DC 4034            79     MOVE.W     #$E2DC,$4034
00001072  31FC E7D5 4038            80     MOVE.W     #$E7D5,$4038
00001078  31FC E6D6 403C            81     MOVE.W     #$E6D6,$403C
0000107E                            82     
0000107E  21FC 00004000 1000        83    MOVE.L    #$4000, START_ADDR
00001086  21FC 00005000 1004        84    MOVE.L    #$5000, END_ADDR
0000108E                            85  
0000108E                            86  
0000108E                            87  * ------ Standard Initializations ------
0000108E  31FC 0000 1008            88    MOVE.W    #0, PRINT_COUNT
00001094  13FC 0000 00001D06        89    MOVE.B    #0, MISC_NUMBER
0000109C                            90  
0000109C                            91    * JSR GET_INPUT
0000109C                            92  
0000109C  2078 1000                 93    MOVEA.L  START_ADDR,A0
000010A0  21C8 1012                 94    MOVE.L   A0,LOOP_INDEX * Both A0 and LOOP_INDEX contain the start address
000010A4                            95  
000010A4                            96  
000010A4                            97  
000010A4                            98  *-------------------------------------------------------------------------------
000010A4                            99  *    OPCODE LOOP
000010A4                           100  *
000010A4                           101  *    The disassembler's main loop. Gets the contents of a memory location,
000010A4                           102  *    sends it to BRANCHBLOCK to be decoded and printed, and checks if we're
000010A4                           103  *    at the user defined endpoint.
000010A4                           104  *
000010A4                           105  * ________________________________________
000010A4                           106  * Register Use Summary:
000010A4                           107  *
000010A4                           108  * D7: CONST - The opcode to decode. Set before BRANCHBLOCK
000010A4                           109  *
000010A4                           110  * A0: The current Loop Index, updated before and after BRANCHBLOCK
000010A4                           111  * A1: How much we should increment the loop index
000010A4                           112  * A2: Local Variable - used for retrieving DATA
000010A4                           113  *-------------------------------------------------------------------------------
000010A4                           114  OPCODE_LOOP
000010A4                           115  
000010A4  2078 1012                116      MOVEA.L LOOP_INDEX,A0
000010A8  B1F8 1004                117      CMPA.L  END_ADDR, A0  * Check to see if we're done
000010AC  6E00 003C                118      BGT     DONE
000010B0                           119  
000010B0                           120  * ------ Reset Loop Variables ------
000010B0  31FC 0000 1008           121      MOVE.W  #0,PRINT_COUNT  * Reset print count to zero
000010B6  31FC 0000 1010           122      MOVE.W  #0,LOOP_INC     * Reset loop index increment to zero
000010BC  4287                     123      CLR.L   D7
000010BE                           124  
000010BE                           125  * ------ Get memory at loop index ------
000010BE  3E10                     126      MOVE.W  (A0),D7
000010C0                           127  
000010C0                           128  * ------ Fill DATA1 and DATA2 ------
000010C0  2448                     129      MOVEA.L  A0,A2
000010C2  544A                     130      ADDA     #2,A2        * Increment by 1 word to get the long afterwards
000010C4  21D2 1016                131      MOVE.L  (A2),DATA1   * Fill DATA1 with the long after the opcode
000010C8  584A                     132      ADDA     #4,A2
000010CA  21D2 101A                133      MOVE.L  (A2),DATA2   * Fill DATA2 with the long after DATA1
000010CE                           134  
000010CE                           135  
000010CE                           136  * ------ Execute Subroutines ------
000010CE  4EB9 00001A1A            137      JSR     PRINTADDR             * Print the memory address
000010D4  4EB9 000010EE            138      JSR     BRANCHBLOCK           * Figure out what opcode this is and print
000010DA                           139  
000010DA                           140  
000010DA                           141  * ------ Increment Loop ------
000010DA  2078 1012                142      MOVEA.L     LOOP_INDEX,A0
000010DE  3278 1010                143      MOVEA.W     LOOP_INC,A1
000010E2  D0C9                     144      ADDA    A1,A0  * Move the index to the next opcode
000010E4  21C8 1012                145      MOVE.L  A0,LOOP_INDEX
000010E8                           146  
000010E8  60BA                     147      BRA     OPCODE_LOOP
000010EA                           148  
000010EA                           149  DONE
000010EA                           150  
000010EA                           151      * This will eventually RTE to the user input section
000010EA                           152  
000010EA  FFFF FFFF                153      SIMHALT
000010EE                           154  
000010EE                           155  
000010EE                           156  
000010EE                           157  *-------------------------------------------------------------------------------
000010EE                           158  *     BRANCHBLOCK
000010EE                           159  *
000010EE                           160  *  Decodes the opcode in D7 and jumps to the corresponding opcode subroutine
000010EE                           161  *
000010EE                           162  *  Because 1 line is pulled out of memory at a time, it's possible that the
000010EE                           163  *  next opcode only takes up one word, and it's in the upper word of the
000010EE                           164  *  opcode long (eg.4E71FFFF is NOP then empty). We must check for single word
000010EE                           165  *  opcodes before we use any of the data in the lower word of D7.
000010EE                           166  *________________________________________
000010EE                           167  * Register Use Summary:
000010EE                           168  *
000010EE                           169  * D0: General variable, cleared every use to be safe
000010EE                           170  * D1:
000010EE                           171  * D2:
000010EE                           172  * D3:
000010EE                           173  * D4: (Keep in mind this is parameter for BWL)
000010EE                           174  * D5:
000010EE                           175  * D6:
000010EE                           176  * D7: CONST - The opcode to decode - NO TOUCH
000010EE                           177  *________________________________________
000010EE                           178  * A0:
000010EE                           179  * A1:
000010EE                           180  * A2:
000010EE                           181  * A3:
000010EE                           182  * A4:
000010EE                           183  * A5:
000010EE                           184  * A6:
000010EE                           185  * A7:
000010EE                           186  *-------------------------------------------------------------------------------
000010EE                           187  BRANCHBLOCK
000010EE                           188  
000010EE  21CF 100C                189    MOVE.L  SP,STACK_BASE   * Save the position of the stack for later
000010F2                           190  
000010F2                           191  * ---- DEBUG ----
000010F2  BEBC 0000FFFF            192    CMP.L   #$FFFF,D7
000010F8  67F0                     193    BEQ   DONE * For debug only! Exit if memory is unset
000010FA                           194  
000010FA                           195  * ---- CONSTANT OPCODES ----
000010FA  BE7C 4E71                196    CMP.W   #$4E71,D7
000010FE  6700 03E8                197    BEQ   NOP
00001102                           198  
00001102  BE7C 4E75                199    CMP.W   #$4E75,D7
00001106  6700 03FA                200    BEQ   RTS
0000110A                           201  
0000110A                           202  * ---- ADDQ ----
0000110A  4280                     203    CLR.L   D0
0000110C  3007                     204    MOVE.W  D7,D0
0000110E  4840                     205    SWAP    D0
00001110  E998                     206    ROL.L   #$04,D0
00001112  C03C 000F                207    AND.B   #$F,D0
00001116  B03C 0005                208    CMP.B   #5,D0
0000111A  6700 0400                209    BEQ     ADDQ
0000111E                           210  
0000111E                           211  * ---- ADDA ----
0000111E  4280                     212    CLR.L   D0
00001120  2007                     213    MOVE.L  D7,D0   *DXXX
00001122  C07C F000                214    AND.W   #$F000,D0
00001126  B07C D000                215    CMP.W   #$D000,D0
0000112A  6700 02CC                216    BEQ     ADD_ADDA
0000112E                           217  
0000112E                           218  * ---- BCC ----
0000112E  4280                     219    CLR.L   D0
00001130  2007                     220    MOVE.L  D7,D0
00001132  C07C F000                221    AND.W   #$F000,D0
00001136  B07C 6000                222    CMP.W   #$6000,D0
0000113A  6700 01F4                223    BEQ     BCC
0000113E                           224  
0000113E                           225  * ---- LSX_ASX_ROR ----
0000113E  4280                     226    CLR.L   D0
00001140  2007                     227    MOVE.L  D7,D0
00001142  C07C F000                228    AND.W   #$F000,D0
00001146  B07C E000                229    CMP.W   #$E000,D0
0000114A  6700 0018                230    BEQ     LSX_ASX_ROX
0000114E                           231    
0000114E                           232  * ---- 10 BIT OPCODES ----
0000114E  4280                     233    CLR.L   D0
00001150  3007                     234    MOVE.W  D7,D0
00001152  C07C FFC0                235    AND.W   #$FFC0,D0   * Mask opcode to get first 10 bits only
00001156                           236  
00001156  EC40                     237    ASR.W   #6,D0
00001158  B07C 013A                238    CMP     #$13A,D0
0000115C  6700 041A                239    BEQ     JSR
00001160                           240  
00001160                           241  
00001160                           242  * ---- UH OH ----
00001160                           243  
00001160  6000 089A                244    BRA     PRINT_ILLEGAL
00001164                           245  
00001164                           246  
00001164                           247  *-------------------------------------------------------------------------------
00001164                           248  * ________   ________   ________   ________   ________   _______
00001164                           249  *|\   __  \ |\   __  \ |\   ____\ |\   __  \ |\   ___ \ |\  ___ \
00001164                           250  *\ \  \|\  \\ \  \|\  \\ \  \___| \ \  \|\  \\ \  \_|\ \\ \   __/|
00001164                           251  * \ \  \\\  \\ \   ____\\ \  \     \ \  \\\  \\ \  \ \\ \\ \  \_|/__
00001164                           252  *  \ \  \\\  \\ \  \___| \ \  \____ \ \  \\\  \\ \  \_\\ \\ \  \_|\ \
00001164                           253  *   \ \_______\\ \__\     \ \_______\\ \_______\\ \_______\\ \_______\
00001164                           254  *    \|_______| \|__|      \|_______| \|_______| \|_______| \|_______|
00001164                           255  *
00001164                           256  *-------------------------------------------------------------------------------
00001164                           257  *-------------------------------------------------------------------------------
00001164                           258  *   LSX_ASX_ROX
00001164                           259  *
00001164                           260  *
00001164                           261  *-------------------------------------------------------------------------------
00001164                           262  LSX_ASX_ROX
00001164  2007                     263    MOVE.L    D7,D0      * Reset D0
00001166  C07C 0018                264    AND.W     #$18,D0  * Isolate bits 4,3
0000116A                           265    
0000116A  B07C 0000                266    CMP.W #0,D0
0000116E  6700 0044                267    BEQ   ASX
00001172                           268    
00001172  B07C 0008                269    CMP.W #8,D0
00001176  6700 000A                270    BEQ   LSX
0000117A                           271    
0000117A  B07C 0018                272    CMP.W #$18,D0
0000117E  6700 0066                273    BEQ   ROX
00001182                           274  
00001182                           275  LSX
00001182  2007                     276    MOVE.L    D7,D0      * Reset D0
00001184  C07C 0100                277    AND.W     #$100,D0   * Isolate bit 8
00001188  B07C 0000                278    CMP.W     #0,D0    
0000118C  6700 0006                279    BEQ       LSR
00001190  6000 0012                280    BRA       LSL
00001194                           281    
00001194                           282  LSR
00001194  4BF9 00001720            283    LEA     PRINT_LSR,A5    * Load the print subroutine into intermediate address
0000119A  2F0D                     284    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000119C  5878 1008                285    ADD.W   #4,PRINT_COUNT
000011A0                           286  
000011A0  6000 0076                287    BRA     LSX_ASX_ROX_CONTINUE
000011A4                           288  
000011A4                           289  LSL
000011A4  4BF9 00001730            290    LEA     PRINT_LSL,A5    * Load the print subroutine into intermediate address
000011AA  2F0D                     291    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000011AC  5878 1008                292    ADD.W   #4,PRINT_COUNT
000011B0                           293  
000011B0  6000 0066                294    BRA     LSX_ASX_ROX_CONTINUE
000011B4                           295  
000011B4                           296  ASX
000011B4  2007                     297    MOVE.L    D7,D0      * Reset D0
000011B6  C07C 0100                298    AND.W     #$100,D0   * Isolate bit 8
000011BA  B07C 0000                299    CMP.W     #0,D0    
000011BE  6700 0006                300    BEQ       ASR
000011C2  6000 0012                301    BRA       ASL
000011C6                           302    
000011C6                           303  ASR
000011C6  4BF9 00001740            304    LEA     PRINT_ASR,A5    * Load the print subroutine into intermediate address
000011CC  2F0D                     305    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000011CE  5878 1008                306    ADD.W   #4,PRINT_COUNT
000011D2                           307  
000011D2  6000 0044                308    BRA     LSX_ASX_ROX_CONTINUE
000011D6                           309  
000011D6                           310  ASL
000011D6  4BF9 00001750            311    LEA     PRINT_ASL,A5    * Load the print subroutine into intermediate address
000011DC  2F0D                     312    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000011DE  5878 1008                313    ADD.W   #4,PRINT_COUNT
000011E2                           314    
000011E2  6000 0034                315    BRA     LSX_ASX_ROX_CONTINUE
000011E6                           316  
000011E6                           317  ROX
000011E6  2007                     318    MOVE.L    D7,D0      * Reset D0
000011E8  C07C 0100                319    AND.W     #$100,D0   * Isolate bit 8
000011EC  B07C 0000                320    CMP.W     #0,D0    
000011F0  6700 0006                321    BEQ       ROR
000011F4  6000 0012                322    BRA       ROL
000011F8                           323    
000011F8                           324  ROR
000011F8  4BF9 00001760            325    LEA     PRINT_ROR,A5    * Load the print subroutine into intermediate address
000011FE  2F0D                     326    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001200  5878 1008                327    ADD.W   #4,PRINT_COUNT
00001204                           328  
00001204  6000 0012                329    BRA     LSX_ASX_ROX_CONTINUE
00001208                           330  
00001208                           331  ROL
00001208  4BF9 00001770            332    LEA     PRINT_ROL,A5    * Load the print subroutine into intermediate address
0000120E  2F0D                     333    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001210  5878 1008                334    ADD.W   #4,PRINT_COUNT
00001214                           335  
00001214  6000 0002                336    BRA     LSX_ASX_ROX_CONTINUE
00001218                           337  
00001218                           338  LSX_ASX_ROX_CONTINUE
00001218  2007                     339    MOVE.L    D7,D0      * Reset D0
0000121A  EC98                     340    ROR.L     #$06,D0    * Isolate bits 7,6
0000121C  C0BC 00000003            341    AND.L     #3,D0
00001222  4284                     342    CLR.L     D4
00001224  1800                     343    MOVE.B    D0,D4      * Move bits 7,6 to D4 for BWL
00001226                           344    
00001226  B03C 0003                345    CMP.B     #3,D0
0000122A  6700 00DC                346    BEQ       LSX_ASX_ROX_MEM
0000122E                           347  
0000122E  4EB9 000016D8            348    JSR PUSH_BWL
00001234                           349    
00001234  2007                     350    MOVE.L    D7,D0      * Reset D0
00001236  C07C 0020                351    AND.W     #$20,D0    * Isolate bit 5
0000123A  B07C 0000                352    CMP.W     #0,D0
0000123E  6700 0006                353    BEQ       LSX_ASX_ROX_SHIFT
00001242  6000 007C                354    BRA       LSX_ASX_ROX_REGISTER
00001246                           355    
00001246                           356  LSX_ASX_ROX_SHIFT
00001246  2007                     357    MOVE.L  D7,D0             * Reset D0
00001248  C0BC 00000E00            358    AND.L   #$E00,D0           * Get bits 11 - 9
0000124E  B0BC 00000000            359    CMP.L   #0,D0
00001254  6700 003A                360    BEQ     LSX_ASX_ROX_SHIFT_8  * If 0, shift count is 8
00001258                           361    
00001258  21FC 00000000 1016       362    MOVE.L  #0,DATA1
00001260  E080                     363    ASR.L   #$8,D0
00001262  E280                     364    ASR.L   #$1,D0
00001264  21C0 1016                365    MOVE.L  D0,DATA1
00001268                           366  
00001268  4BF9 000019A6            367    LEA PRINT_EA_MODE_ID_ABS_DATA,A5 * Print shift count
0000126E  2F0D                     368    MOVE.L    A5, -(SP)
00001270  5878 1008                369    ADD.W     #4, PRINT_COUNT
00001274                           370      
00001274  4BF9 000019EC            371    LEA     PRINT_COMMA,A5   * Load the print subroutine
0000127A  2F0D                     372    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000127C  5878 1008                373    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001280                           374  
00001280  4BF9 00001876            375    LEA   PRINT_EA_MODE_ID_DN,A5  * Print data register
00001286  2F0D                     376    MOVE.L    A5, -(SP)
00001288  5878 1008                377    ADD.W     #4, PRINT_COUNT
0000128C                           378    
0000128C  6000 0092                379    BRA LSX_ASX_ROX_CONTINUE2
00001290                           380  
00001290                           381  LSX_ASX_ROX_SHIFT_8
00001290  21FC 00000008 1016       382    MOVE.L  #8,DATA1
00001298  4BF9 000019A6            383    LEA PRINT_EA_MODE_ID_ABS_DATA,A5  * Print shift count 8
0000129E  2F0D                     384    MOVE.L    A5, -(SP)
000012A0  5878 1008                385    ADD.W     #4, PRINT_COUNT
000012A4                           386    
000012A4  4BF9 000019EC            387    LEA     PRINT_COMMA,A5   * Load the print subroutine
000012AA  2F0D                     388    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000012AC  5878 1008                389    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000012B0                           390  
000012B0                           391    
000012B0  4BF9 00001876            392    LEA   PRINT_EA_MODE_ID_DN,A5  * Print data register
000012B6  2F0D                     393    MOVE.L    A5, -(SP)
000012B8  5878 1008                394    ADD.W     #4, PRINT_COUNT
000012BC                           395    
000012BC  6000 0062                396    BRA LSX_ASX_ROX_CONTINUE2
000012C0                           397    
000012C0                           398  LSX_ASX_ROX_REGISTER
000012C0  2007                     399    MOVE.L    D7,D0      * Reset D0
000012C2  C0BC 00000E00            400    AND.L   #$E00,D0           * Get bits 11 - 9  LEA PRINT_FOURSPACE,A5
000012C8  2F0D                     401    MOVE.L    A5,-(SP)
000012CA  5878 1008                402    ADD.W    #4,PRINT_COUNT
000012CE  E080                     403    ASR.L   #$8,D0
000012D0  E280                     404    ASR.L   #$1,D0
000012D2                           405    
000012D2  2E00                     406    MOVE.L  D0,D7  
000012D4  4BF9 00001876            407    LEA   PRINT_EA_MODE_ID_DN,A5  * Print data register
000012DA  2F0D                     408    MOVE.L    A5, -(SP)
000012DC  5878 1008                409    ADD.W     #4, PRINT_COUNT
000012E0                           410    
000012E0  4BF9 0000132A            411    LEA LSX_ASX_ROX_RESET_D7,A5
000012E6  2F0D                     412    MOVE.L    A5, -(SP)
000012E8  5878 1008                413    ADD.W     #4, PRINT_COUNT
000012EC                           414  
000012EC  4BF9 000019EC            415    LEA     PRINT_COMMA,A5   * Load the print subroutine
000012F2  2F0D                     416    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000012F4  5878 1008                417    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000012F8                           418  
000012F8  4BF9 00001876            419    LEA   PRINT_EA_MODE_ID_DN,A5  * Print data register
000012FE  2F0D                     420    MOVE.L    A5, -(SP)
00001300  5878 1008                421    ADD.W     #4, PRINT_COUNT
00001304                           422  
00001304  6000 001A                423    BRA LSX_ASX_ROX_CONTINUE2
00001308                           424    
00001308                           425  LSX_ASX_ROX_MEM
00001308  2C07                     426    MOVE.L D7,D6
0000130A                           427  
0000130A  4BF9 000019DC            428    LEA PRINT_FOURSPACE,A5
00001310  2F0D                     429    MOVE.L    A5,-(SP)
00001312  5878 1008                430    ADD.W    #4,PRINT_COUNT
00001316                           431    
00001316  4EB9 00001610            432    JSR     PUSH_EA_MODE_ID
0000131C  6000 0002                433    BRA LSX_ASX_ROX_CONTINUE2
00001320                           434  
00001320                           435  
00001320                           436  LSX_ASX_ROX_CONTINUE2  
00001320  31FC 0004 1010           437    MOVE.W  #4,LOOP_INC
00001326  6000 02BC                438    BRA   PRINT_OPCODE
0000132A                           439  
0000132A                           440  LSX_ASX_ROX_RESET_D7
0000132A  2007                     441      MOVE.L    D7,D0
0000132C  6000 02D0                442      BRA   PRINT_OPCODE_LOOP_RETURN
00001330                           443      
00001330                           444  *-------------------------------------------------------------------------------
00001330                           445  *   BCC
00001330                           446  *
00001330                           447  *
00001330                           448  *-------------------------------------------------------------------------------
00001330                           449  BCC
00001330  2007                     450    MOVE.L    D7,D0      * Reset D0
00001332  C07C 0F00                451    AND.W     #$0F00,D0  * Isolate bits 11-8
00001336  B07C 0000                452    CMP.W     #0,D0
0000133A  6700 001E                453    BEQ       BRA
0000133E                           454  
0000133E  B07C 0E00                455    CMP.W     #$E00,D0
00001342  6700 0026                456    BEQ       BGT
00001346                           457  
00001346  B07C 0F00                458    CMP.W     #$F00,D0
0000134A  6700 002E                459    BEQ       BLE
0000134E                           460  
0000134E  B07C 0700                461    CMP.W     #$700,D0
00001352  6700 0036                462    BEQ       BEQ
00001356                           463  
00001356  6000 06A4                464    BRA       PRINT_ILLEGAL
0000135A                           465  
0000135A                           466  BRA
0000135A  4BF9 000017CA            467    LEA     PRINT_BRA,A5    * Load the print subroutine into intermediate address
00001360  2F0D                     468    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001362  5878 1008                469    ADD.W   #4,PRINT_COUNT
00001366                           470  
00001366  6000 0032                471    BRA   BCC_CONTINUE
0000136A                           472  
0000136A                           473  BGT
0000136A  4BF9 0000179A            474    LEA     PRINT_BGT,A5    * Load the print subroutine into intermediate address
00001370  2F0D                     475    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001372  5878 1008                476    ADD.W   #4,PRINT_COUNT
00001376                           477  
00001376  6000 0022                478    BRA   BCC_CONTINUE
0000137A                           479  
0000137A                           480  BLE
0000137A  4BF9 000017AA            481    LEA     PRINT_BLE,A5    * Load the print subroutine into intermediate address
00001380  2F0D                     482    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001382  5878 1008                483    ADD.W   #4,PRINT_COUNT
00001386                           484  
00001386  6000 0012                485    BRA   BCC_CONTINUE
0000138A                           486  
0000138A                           487  BEQ
0000138A  4BF9 000017BA            488    LEA     PRINT_BEQ,A5    * Load the print subroutine into intermediate address
00001390  2F0D                     489    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001392  5878 1008                490    ADD.W   #4,PRINT_COUNT
00001396                           491  
00001396  6000 0002                492    BRA   BCC_CONTINUE
0000139A                           493  
0000139A                           494  BCC_CONTINUE
0000139A  7000                     495    MOVE.L    #0,D0
0000139C  1007                     496    MOVE.B    D7,D0      * Reset D0
0000139E  B03C 0000                497    CMP.B     #0,D0
000013A2  6700 0020                498    BEQ       BCC_16     * if 16 bit displacement, print the following short
000013A6                           499  
000013A6  B03C 00FF                500    CMP.B     #$FF,D0    * if 32 bit displacement, print the following long
000013AA  6700 0032                501    BEQ       BCC_32
000013AE                           502  
000013AE  21FC 00000000 1016       503    MOVE.L    #0,DATA1
000013B6                           504    *ROR.L     #4,D0
000013B6  21C0 1016                505    MOVE.L    D0,DATA1
000013BA                           506  
000013BA  31FC 0002 1010           507    MOVE.W  #2,LOOP_INC
000013C0                           508  
000013C0  6000 0026                509    BRA     BCC_END
000013C4                           510  
000013C4                           511  BCC_16
000013C4  2238 1016                512    MOVE.L          DATA1,D1
000013C8  4841                     513    SWAP            D1              * We only want the upper word
000013CA  C2BC 0000FFFF            514    AND.L           #$0000FFFF,D1   * Bit mask for upper word
000013D0  21C1 1016                515    MOVE.L          D1,DATA1
000013D4                           516  
000013D4  31FC 0004 1010           517    MOVE.W  #4,LOOP_INC
000013DA                           518  
000013DA  6000 000C                519    BRA     BCC_END
000013DE                           520  
000013DE                           521  BCC_32
000013DE  31FC 0006 1010           522    MOVE.W  #6,LOOP_INC
000013E4  6000 0002                523    BRA     BCC_END
000013E8                           524  
000013E8                           525  BCC_END
000013E8  4BF9 000019A6            526    LEA     PRINT_EA_MODE_ID_ABS_DATA,A5
000013EE  2F0D                     527    MOVE.L  A5, -(SP)
000013F0  5878 1008                528    ADD.W   #4, PRINT_COUNT
000013F4                           529  
000013F4  6000 01EE                530    BRA   PRINT_OPCODE
000013F8                           531  
000013F8                           532  
000013F8                           533  *-------------------------------------------------------------------------------
000013F8                           534  *   ADD ADDA
000013F8                           535  *
000013F8                           536  *
000013F8                           537  *-------------------------------------------------------------------------------
000013F8                           538  ADD_ADDA * Figure out whether we're dealing with ADD or ADDA
000013F8  2007                     539    MOVE.L  D7,D0
000013FA  EC58                     540    ROR.W   #06,D0     * Get bits 7,6 on end
000013FC  C03C 0003                541    AND.B   #03,D0     * Isolate bits 7,6
00001400  B03C 0003                542    CMP.B   #03,D0
00001404  6700 0020                543    BEQ   ADDA
00001408                           544  
00001408  6000 009C                545    BRA   ADD          * Else it's ADD
0000140C                           546  *-------------------------------------------------------------------------------
0000140C                           547  
0000140C                           548  
0000140C                           549  
0000140C                           550  
0000140C                           551  RESUME_ADD
0000140C  363C 0000                552    MOVE.W #0,D3    * MISC_NUMBER for LOOP_INC
00001410                           553  
00001410                           554  
00001410  5403                     555    ADD.B  #2, D3
00001412                           556  
00001412                           557  ADD_ADDA_LOOP_ADD_W
00001412  5403                     558    ADD.B  #2, D3
00001414                           559  
00001414                           560  ADD_ADDA_LOOP_NO_ADD
00001414  5403                     561    ADD.B #2, D3
00001416  E41B                     562    ROR.B #2, D3
00001418  C63C 000C                563    AND.B #$C,D3
0000141C                           564  
0000141C  11C3 1010                565    MOVE.B  D3,LOOP_INC
00001420                           566  
00001420  6000 01C2                567    BRA   PRINT_OPCODE
00001424                           568  
00001424                           569  
00001424  4E75                     570    RTS
00001426                           571  *-------------------------------------------------------------------------------
00001426                           572  *   ADDA
00001426                           573  *
00001426                           574  *
00001426                           575  *-------------------------------------------------------------------------------
00001426                           576  ADDA
00001426                           577  
00001426  2007                     578    MOVE.L  D7,D0         * Reset D0
00001428                           579  
00001428  4BF9 000017EA            580    LEA     PRINT_ADDA,A5    * Load the print subroutine into intermediate address
0000142E  2F0D                     581    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001430  5878 1008                582    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001434                           583  
00001434  EC58                     584    ROR.W   #$6,D0        * Get bits 9,8,7,6 on end byte
00001436  C03C 0007                585    AND.B   #7,D0         * Isolate bits 8,7,6
0000143A                           586  
0000143A  B03C 0003                587    CMP.B   #3,D0         * If 8,7,6 == 011
0000143E  6700 001E                588    BEQ     ADDA_W
00001442                           589  
00001442  B03C 0007                590    CMP.B   #7,D0         * If 8,7,6 == 111
00001446  6700 0006                591    BEQ     ADDA_L
0000144A                           592  
0000144A  6000 05B0                593    BRA     PRINT_ILLEGAL
0000144E                           594  
0000144E                           595  * ------ Long Opmode ------
0000144E                           596  ADDA_L
0000144E                           597  
0000144E  4BF9 00001866            598    LEA     PRINT_LONG_DESIGNATOR,A5 * Load the ".L" print subroutine
00001454  2F0D                     599    MOVE.L  A5, -(SP)       * Put the subroutine onto the stack
00001456  5878 1008                600    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000145A                           601  
0000145A  6000 0012                602    BRA     ADDA_CONTINUE
0000145E                           603  
0000145E                           604  * ------ Word Opmode ------
0000145E                           605  ADDA_W
0000145E                           606  
0000145E  4BF9 00001856            607    LEA     PRINT_WORD_DESIGNATOR,A5 * Load the ".W" print subroutine
00001464  2F0D                     608    MOVE.L  A5, -(SP)         * Put the subroutine onto the stack
00001466  5878 1008                609    ADD.W   #4,PRINT_COUNT    * Increment Print Count by 1 long
0000146A                           610  
0000146A  6000 0002                611    BRA     ADDA_CONTINUE
0000146E                           612  
0000146E                           613  * ------ Continue ------
0000146E                           614  ADDA_CONTINUE
0000146E                           615  
0000146E                           616  * Push the effective address print subroutine onto the stack
0000146E  2C07                     617    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001470  4EB9 00001610            618    JSR     PUSH_EA_MODE_ID
00001476                           619  
00001476                           620  
00001476  4BF9 000019EC            621    LEA     PRINT_COMMA,A5   * Load the print subroutine
0000147C  2F0D                     622    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000147E  5878 1008                623    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001482                           624  
00001482                           625  
00001482                           626  
00001482                           627  * Reset and push the address register print subroutine onto the stack
00001482  2007                     628    MOVE.L D7,D0    * Reset D0
00001484                           629  
00001484  E080                     630    ASR.L   #$8,D0
00001486  E280                     631    ASR.L   #$1,D0
00001488  C03C 0007                632    AND.B   #$7,D0
0000148C                           633  
0000148C  13C0 00001D06            634    MOVE.B  D0,MISC_NUMBER
00001492                           635  
00001492  4BF9 00001810            636    LEA     PRINT_MISC_NUMBER_AS_ADDRESS,A5   * Load the print subroutine
00001498  2F0D                     637    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000149A  5878 1008                638    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000149E                           639  
0000149E  5478 1010                640    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
000014A2                           641  
000014A2  6000 0140                642    BRA   PRINT_OPCODE
000014A6                           643  
000014A6                           644  *-------------------------------------------------------------------------------
000014A6                           645  *   ADD
000014A6                           646  *
000014A6                           647  *
000014A6                           648  *-------------------------------------------------------------------------------
000014A6                           649  ADD
000014A6                           650  
000014A6  4BF9 000017DA            651    LEA     PRINT_ADD,A5    * Load the print subroutine into intermediate address
000014AC  2F0D                     652    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000014AE  5878 1008                653    ADD.W   #4,PRINT_COUNT
000014B2                           654  
000014B2  1800                     655    MOVE.B   D0,D4            * Move bits 7,6 to D4 for BWL
000014B4                           656  
000014B4  4BF9 000016D8            657    LEA     PUSH_BWL,A5    * Load the PUSH_BWL subroutine into intermediate address
000014BA  2F0D                     658    MOVE.L  A5, -(SP)       * Put the PUSH_BWL subroutine jump onto the stack
000014BC  5878 1008                659    ADD.W   #4,PRINT_COUNT
000014C0                           660  
000014C0  2C07                     661    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
000014C2  4EB9 00001610            662    JSR     PUSH_EA_MODE_ID
000014C8                           663  
000014C8  3007                     664    MOVE D7,D0    * Reset D0
000014CA                           665  
000014CA  E080                     666    ASR.L   #$8,D0
000014CC  E280                     667    ASR.L   #$1,D0
000014CE  C03C 0007                668    AND.B   #$7,D0
000014D2                           669  
000014D2  13C0 00001D0A            670    MOVE.B  D0,MISC_REGISTER
000014D8  4EB9 0000164C            671    JSR     PUSH_EA_MODE_ID_DN
000014DE  31FC 0004 1010           672    MOVE.W  #4,LOOP_INC     * Increment the loop counter by 4 bytes
000014E4                           673  
000014E4  6000 FF26                674    BRA   RESUME_ADD
000014E8                           675  
000014E8                           676  *-------------------------------------------------------------------------------
000014E8                           677  *   NOP
000014E8                           678  *
000014E8                           679  *   NONSTANDARD OPCODE! Don't base your design off of this :)
000014E8                           680  *
000014E8                           681  *-------------------------------------------------------------------------------
000014E8                           682  NOP
000014E8                           683  
000014E8  43F9 00001CD4            684    LEA     STRING_NOP,A1
000014EE  103C 000E                685    MOVE.B  #14,D0
000014F2  4E4F                     686    TRAP    #15
000014F4                           687  
000014F4  31FC 0002 1010           688    MOVE.W  #2,LOOP_INC   * Increment the loop counter by 2 bytes
000014FA                           689  
000014FA  4EB9 00001A30            690    JSR     PRINT_IMMEDIATE_NEWLINE
00001500                           691  
00001500  4E75                     692    RTS
00001502                           693  
00001502                           694  *-------------------------------------------------------------------------------
00001502                           695  *   RTS
00001502                           696  *
00001502                           697  *   NONSTANDARD OPCODE! Don't base your design off of this :)
00001502                           698  *
00001502                           699  *-------------------------------------------------------------------------------
00001502                           700  RTS
00001502                           701  
00001502  43F9 00001CD8            702    LEA     STRING_RTS,A1
00001508  103C 000E                703    MOVE.B  #14,D0
0000150C  4E4F                     704    TRAP    #15
0000150E                           705  
0000150E  31FC 0002 1010           706    MOVE.W  #2,LOOP_INC   * Increment the loop counter by 2 bytes
00001514                           707  
00001514  4EB9 00001A30            708    JSR     PRINT_IMMEDIATE_NEWLINE
0000151A                           709  
0000151A  4E75                     710    RTS
0000151C                           711  
0000151C                           712  *-------------------------------------------------------------------------------
0000151C                           713  *   ADDQ
0000151C                           714  *
0000151C                           715  *
0000151C                           716  *-------------------------------------------------------------------------------
0000151C                           717  ADDQ
0000151C                           718  
0000151C  2007                     719    MOVE.L  D7,D0             * Reset bit shit
0000151E  E998                     720    ROL.L   #$04,D0
00001520                           721  
00001520  E998                     722    ROL.L   #$04,D0           * Isolate bits 11 - 8
00001522  C03C 0001                723    AND.B   #1,D0
00001526  B03C 0000                724    CMP.B   #0,D0             * Check for 0 in 8th bit
0000152A  6600 04D0                725    BNE     PRINT_ILLEGAL
0000152E                           726  
0000152E  4BF9 00001836            727    LEA     PRINT_ADDQ,A5    * Load the print subroutine into intermediate address
00001534  2F0D                     728    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001536  5478 1008                729    ADD.W   #2,PRINT_COUNT
0000153A                           730  
0000153A  E598                     731    ROL.L   #$02,D0           * Isolate bits 7 - 6
0000153C  4284                     732    CLR.L   D4
0000153E  1800                     733    MOVE.B   D0,D4            * Move bits 7,6 to D4 for BWL
00001540                           734  
00001540  4BF9 000016D8            735    LEA     PUSH_BWL,A5    * Load the PUSH_BWL subroutine into intermediate address
00001546  2F0D                     736    MOVE.L  A5, -(SP)       * Put the PUSH_BWL subroutine jump onto the stack
00001548  5478 1008                737    ADD.W   #2,PRINT_COUNT
0000154C                           738  
0000154C  2007                     739    MOVE.L  D7,D0             * Reset D0
0000154E  EF98                     740    ROL.L   #$7, D0           * Get bits 11 - 9
00001550  C03C 0007                741    AND.B   #$7, D0           * Clear bit 11
00001554                           742  
00001554  13C0 00001D06            743    MOVE.B  D0,MISC_NUMBER
0000155A  4BF9 000017FA            744    LEA     PRINT_MISC_NUMBER,A5
00001560  2F0D                     745    MOVE.L  A5, -(SP)
00001562  5878 1008                746    ADD.W   #4, PRINT_COUNT
00001566                           747  
00001566                           748  
00001566  2C07                     749    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001568  4EB9 00001610            750    JSR     PUSH_EA_MODE_ID
0000156E  31FC 0004 1010           751    MOVE.W  #4,LOOP_INC     * Increment the loop counter by 4 bytes
00001574                           752  
00001574                           753  
00001574  6000 006E                754    BRA     PRINT_OPCODE    * Always put this at the end
00001578                           755  
00001578                           756  
00001578                           757  *-------------------------------------------------------------------------------
00001578                           758  *   JSR
00001578                           759  *
00001578                           760  *
00001578                           761  *-------------------------------------------------------------------------------
00001578                           762  JSR
00001578                           763  
00001578  4BF9 000019CC            764    LEA     PRINT_JSR,A5    * Load the print subroutine into intermediate address
0000157E  2F0D                     765    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001580  5878 1008                766    ADD.W           #4,PRINT_COUNT
00001584                           767  
00001584                           768  * ---- Custom Branching Block ----
00001584                           769  * Supported Modes: (An), Indirect short, Indirect Long
00001584                           770  
00001584  4280                     771    CLR.L     D0
00001586  1007                     772    MOVE.B    D7,D0 * Copy opcode into local variable
00001588  C03C 0038                773    AND.B     #$38,D0 * Mask D0 with 0111000 to get MODE bits only
0000158C  E600                     774    ASR.B   #3,D0 * Shift the result so D0 ranges between 000 and 111
0000158E                           775  
0000158E  B03C 0002                776    CMP.B   #2,D0         *010 -> Address Register   Indirect
00001592  6700 002A                777    BEQ   JSR_PUSH_EA_MODE_ID_AN_INDIRECT
00001596  B03C 0007                778    CMP.B   #7,D0         *111 -> All Data Operations
0000159A  6700 0006                779    BEQ     JSR_EA_MODE_ELSE
0000159E                           780  
0000159E  6000 045C                781    BRA     PRINT_ILLEGAL
000015A2                           782  
000015A2                           783  
000015A2                           784  *________________________________________
000015A2                           785  * Handle Data Branching Logic
000015A2                           786  * Only short and long indirect allowed
000015A2                           787  *----------------------------------------
000015A2                           788  JSR_EA_MODE_ELSE
000015A2                           789  
000015A2  4280                     790    CLR.L   D0
000015A4  1007                     791    MOVE.B  D7,D0
000015A6  C03C 0007                792    AND.B   #7,D0
000015AA                           793  
000015AA  B03C 0000                794    CMP.B   #0,D0
000015AE  6700 0018                795    BEQ     JSR_PUSH_EA_MODE_ID_IND_SHORT
000015B2                           796  
000015B2  B03C 0001                797    CMP.B   #1,D0
000015B6  6700 001A                798    BEQ     JSR_PUSH_EA_MODE_ID_IND_LONG
000015BA                           799  
000015BA  6000 0440                800    BRA     PRINT_ILLEGAL
000015BE                           801  
000015BE                           802  *________________________________________
000015BE                           803  * Jump directly into the middle of
000015BE                           804  * the PUSH_EA_MODE subroutine
000015BE                           805  *----------------------------------------
000015BE                           806  JSR_PUSH_EA_MODE_ID_AN_INDIRECT
000015BE  4EB9 00001660            807    JSR   PUSH_EA_MODE_ID_AN_INDIRECT
000015C4  6000 0016                808    BRA   JSR_FINISH
000015C8                           809  
000015C8                           810  *________________________________________
000015C8                           811  * Jump directly into the middle of
000015C8                           812  * the PUSH_EA_MODE subroutine
000015C8                           813  *----------------------------------------
000015C8                           814  JSR_PUSH_EA_MODE_ID_IND_SHORT
000015C8  4EB9 000016A0            815    JSR   PUSH_EA_MODE_ID_IND_SHORT
000015CE  6000 000C                816    BRA   JSR_FINISH
000015D2                           817  
000015D2                           818  *________________________________________
000015D2                           819  * Jump directly into the middle of
000015D2                           820  * the PUSH_EA_MODE subroutine
000015D2                           821  *----------------------------------------
000015D2                           822  JSR_PUSH_EA_MODE_ID_IND_LONG
000015D2  4EB9 000016AE            823    JSR   PUSH_EA_MODE_ID_IND_LONG
000015D8  6000 0002                824    BRA   JSR_FINISH
000015DC                           825  
000015DC                           826  JSR_FINISH
000015DC                           827  
000015DC  5478 1010                828    ADD.W   #2,LOOP_INC     * Increment the loop counter by 1 word
000015E0                           829  
000015E0  6000 0002                830    BRA     PRINT_OPCODE    * Always put this at the end
000015E4                           831  
000015E4                           832  *-------------------------------------------------------------------------------
000015E4                           833  *   PRINT OPCODE
000015E4                           834  *-------------------------------------------------------------------------------
000015E4                           835  
000015E4                           836  PRINT_OPCODE
000015E4                           837  
000015E4  2E78 100C                838    MOVE.L  STACK_BASE,SP * Put the stack back to where it was when we started
000015E8  31FC 0000 100A           839    MOVE.W  #0,PRINT_OPCODE_LOOP_INDEX
000015EE                           840  
000015EE                           841  PRINT_OPCODE_LOOP
000015EE                           842  
000015EE  3278 100A                843    MOVEA.W   PRINT_OPCODE_LOOP_INDEX,A1
000015F2                           844  
000015F2  B2F8 1008                845    CMPA.W   PRINT_COUNT,A1 * Check if we're done
000015F6  6C00 000C                846    BGE     PRINT_OPCODE_LOOP_FINISH
000015FA                           847  
000015FA  2467                     848    MOVE.L  -(SP),A2  * Pop the next item on the stack and put it in A1
000015FC  4ED2                     849    JMP     (A2)        * Jump to the routine we stored on the stack
000015FE                           850  
000015FE                           851  PRINT_OPCODE_LOOP_RETURN * Print methods come back here
000015FE                           852  
000015FE  5878 100A                853    ADD.W    #4,PRINT_OPCODE_LOOP_INDEX
00001602                           854  
00001602  60EA                     855    BRA     PRINT_OPCODE_LOOP
00001604                           856  
00001604                           857  PRINT_OPCODE_LOOP_FINISH
00001604                           858  
00001604  2E78 100C                859    MOVE.L  STACK_BASE,SP  * Return the stack to normal so we can RTS
00001608                           860  
00001608  4EB9 00001A30            861    JSR     PRINT_IMMEDIATE_NEWLINE
0000160E  4E75                     862    RTS
00001610                           863  
00001610                           864  *-------------------------------------------------------------------------------
00001610                           865  
00001610                           866  
00001610                           867  
00001610                           868  
00001610                           869  
00001610                           870  
00001610                           871  
00001610                           872  
00001610                           873  
00001610                           874  
00001610                           875  *-------------------------------------------------------------------------------
00001610                           876  *     _______    ________
00001610                           877  *    |\  ___ \  |\   __  \
00001610                           878  *    \ \   __/| \ \  \|\  \
00001610                           879  *     \ \  \_|/__\ \   __  \
00001610                           880  *      \ \  \_|\ \\ \  \ \  \
00001610                           881  *       \ \_______\\ \__\ \__\
00001610                           882  *        \|_______| \|__|\|__|
00001610                           883  *
00001610                           884  *-------------------------------------------------------------------------------
00001610                           885  
00001610                           886  *-------------------------------------------------------------------------------
00001610                           887  *
00001610                           888  *       PUSH EFFECTIVE ADDRESS MODE IDENTIFIER
00001610                           889  *
00001610                           890  * Determines the addressing mode of the effective address. Used for opcodes
00001610                           891  * with the last five bits dedicated to the effective address.
00001610                           892  *
00001610                           893  * TODO: Implement a counter for how many prints we've made
00001610                           894  *
00001610                           895  *________________________________________
00001610                           896  * Register Use Summary:
00001610                           897  *
00001610                           898  * D0: LOCAL VARIABLE - low byte of opcode
00001610                           899  * D6: PARAMETER - The effective address bits. Assumes bits are shifted into
00001610                           900  *                 the lowest 6 bits of the register.
00001610                           901  *
00001610                           902  * A4: LOCAL VARIABLE - RTS value temporary storage - must be swapped
00001610                           903  * A5: LOCAL VARIABLE - Print Label to be pushed to stack
00001610                           904  *
00001610                           905  *-------------------------------------------------------------------------------
00001610                           906  PUSH_EA_MODE_ID
00001610                           907  
00001610                           908  
00001610                           909  * ---- Input Processing ----
00001610                           910  
00001610  1006                     911      MOVE.B  D6,D0   * Put opcode in D0
00001612  C03C 0038                912      AND.B   #$38,D0 * Mask D0 with 0111000 to get MODE bits only
00001616  E600                     913      ASR.B   #3,D0   * Shift the result so D0 ranges between 000 and 111
00001618                           914  
00001618                           915  
00001618                           916  * ---- Branching Block ----
00001618                           917  
00001618  B03C 0000                918      CMP.B   #0,D0           *000 -> Register
0000161C  6700 002E                919      BEQ     PUSH_EA_MODE_ID_DN
00001620  B03C 0001                920      CMP.B   #1,D0           *001 -> Address Register
00001624  6700 0030                921      BEQ     PUSH_EA_MODE_ID_AN
00001628  B03C 0002                922      CMP.B   #2,D0           *010 -> Address Register   Indirect
0000162C  6700 0032                923      BEQ     PUSH_EA_MODE_ID_AN_INDIRECT
00001630  B03C 0003                924      CMP.B   #3,D0           *011 -> Address Register  (Indirect)+
00001634  6700 0034                925      BEQ     PUSH_EA_MODE_ID_AN_POST_INC
00001638  B03C 0004                926      CMP.B   #4,D0           *100 -> Address Register -(Indirect)
0000163C  6700 0036                927      BEQ     PUSH_EA_MODE_ID_AN_PRE_DEC
00001640  B03C 0007                928      CMP.B   #7,D0           *111 -> All Data Operations
00001644  6700 0038                929      BEQ     PUSH_EA_MODE_ID_ELSE
00001648                           930  
00001648  6000 03B2                931      BRA     PRINT_ILLEGAL
0000164C                           932  
0000164C                           933  *________________________________________
0000164C                           934  * Load Register Print Label
0000164C                           935  *----------------------------------------
0000164C                           936  PUSH_EA_MODE_ID_DN
0000164C  4BF9 00001876            937      LEA     PRINT_EA_MODE_ID_DN,A5
00001652  6000 0076                938      BRA     PUSH_EA_MODE_ID_FINISH
00001656                           939  
00001656                           940  *________________________________________
00001656                           941  * Load Address Register Print Label
00001656                           942  *----------------------------------------
00001656                           943  PUSH_EA_MODE_ID_AN
00001656  4BF9 00001894            944      LEA     PRINT_EA_MODE_ID_AN,A5
0000165C  6000 006C                945      BRA     PUSH_EA_MODE_ID_FINISH
00001660                           946  
00001660                           947  *________________________________________
00001660                           948  * Load (Address Register) Print Label
00001660                           949  *----------------------------------------
00001660                           950  PUSH_EA_MODE_ID_AN_INDIRECT
00001660  4BF9 000018B2            951      LEA     PRINT_EA_MODE_ID_AN_INDIRECT,A5
00001666  6000 0062                952      BRA     PUSH_EA_MODE_ID_FINISH
0000166A                           953  
0000166A                           954  *________________________________________
0000166A                           955  * Load (Address Register)+ Print Label
0000166A                           956  *----------------------------------------
0000166A                           957  PUSH_EA_MODE_ID_AN_POST_INC
0000166A  4BF9 000018E8            958      LEA     PRINT_EA_MODE_ID_AN_POST_INC,A5
00001670  6000 0058                959      BRA     PUSH_EA_MODE_ID_FINISH
00001674                           960  
00001674                           961  *________________________________________
00001674                           962  * Load -(Address Register) Print Label
00001674                           963  *----------------------------------------
00001674                           964  PUSH_EA_MODE_ID_AN_PRE_DEC
00001674  4BF9 0000192A            965      LEA     PRINT_EA_MODE_ID_AN_PRE_DEC,A5
0000167A  6000 004E                966      BRA     PUSH_EA_MODE_ID_FINISH
0000167E                           967  
0000167E                           968  *________________________________________
0000167E                           969  * Handle Data Branching Logic
0000167E                           970  *----------------------------------------
0000167E                           971  PUSH_EA_MODE_ID_ELSE
0000167E  1006                     972      MOVE.B  D6,D0
00001680  C03C 0007                973      AND.B   #7,D0
00001684                           974  
00001684  B03C 0000                975      CMP.B   #0,D0
00001688  6700 0016                976      BEQ     PUSH_EA_MODE_ID_IND_SHORT
0000168C                           977  
0000168C  B03C 0001                978      CMP.B   #1,D0
00001690  6700 001C                979      BEQ     PUSH_EA_MODE_ID_IND_LONG
00001694                           980  
00001694  B03C 0004                981      CMP.B   #4,D0
00001698  6700 0022                982      BEQ     PUSH_EA_MODE_ID_ABS_DATA
0000169C                           983  
0000169C  6000 035E                984      BRA     PRINT_ILLEGAL
000016A0                           985  
000016A0                           986  PUSH_EA_MODE_ID_IND_SHORT
000016A0  4BF9 0000196C            987      LEA     PRINT_EA_MODE_ID_IND_SHORT,A5
000016A6  5878 1010                988      ADD.W           #4, LOOP_INC * Adjust the Loop increment to skip the data
000016AA  6000 001E                989      BRA     PUSH_EA_MODE_ID_FINISH
000016AE                           990  
000016AE                           991  PUSH_EA_MODE_ID_IND_LONG
000016AE  4BF9 0000198C            992      LEA     PRINT_EA_MODE_ID_IND_LONG,A5
000016B4  5078 1010                993      ADD.W           #8,LOOP_INC * Adjust the Loop increment to skip the data
000016B8  6000 0010                994      BRA     PUSH_EA_MODE_ID_FINISH
000016BC                           995  
000016BC                           996  PUSH_EA_MODE_ID_ABS_DATA
000016BC  4BF9 000019A6            997      LEA     PRINT_EA_MODE_ID_ABS_DATA,A5
000016C2  5078 1010                998      ADD.W           #8,LOOP_INC * Adjust the Loop increment to skip the data
000016C6  6000 0002                999      BRA     PUSH_EA_MODE_ID_FINISH
000016CA                          1000  
000016CA                          1001  *________________________________________
000016CA                          1002  PUSH_EA_MODE_ID_FINISH
000016CA  2857                    1003      MOVEA.L         (SP),A4 * Store the value we're going to RTS to
000016CC  588F                    1004      ADD.L           #4,SP   * Move the stack pointer down to the RTS value
000016CE  2F0D                    1005      MOVE.L          A5,-(SP)    * Overwrite the RTS value with the print label
000016D0  2F0C                    1006      MOVE.L          A4,-(SP)    * Push the RTS so we can return like normal
000016D2                          1007  
000016D2  5878 1008               1008      ADD.W           #4,PRINT_COUNT
000016D6                          1009  
000016D6  4E75                    1010      RTS
000016D8                          1011  
000016D8                          1012  *-------------------------------------------------------------------------------
000016D8                          1013  *                 ________  ___       __   ___
000016D8                          1014  *                |\   __  \|\  \     |\  \|\  \
000016D8                          1015  *                \ \  \|\ /\ \  \    \ \  \ \  \
000016D8                          1016  *                 \ \   __  \ \  \  __\ \  \ \  \
000016D8                          1017  *                  \ \  \|\  \ \  \|\__\_\  \ \  \____
000016D8                          1018  *                   \ \_______\ \____________\ \_______\
000016D8                          1019  *                    \|_______|\|____________|\|_______|
000016D8                          1020  *
000016D8                          1021  
000016D8                          1022  *-------------------------------------------------------------------------------
000016D8                          1023  
000016D8                          1024  *-------------------------------------------------------------------------------
000016D8                          1025  *
000016D8                          1026  *       PUSH BYTE, WORD, OR LONG
000016D8                          1027  *
000016D8                          1028  * TODO: Implement a counter for how many prints we've made
000016D8                          1029  *________________________________________
000016D8                          1030  * Register Use Summary:
000016D8                          1031  *
000016D8                          1032  * D4: PARAMETER       - The size bits to print
000016D8                          1033  * D7: CONST PARAMETER - The opcode word
000016D8                          1034  *
000016D8                          1035  * A4: LOCAL VARIABLE  - Temp RTS location
000016D8                          1036  * A5: LOCAL VARIABLE  - Label for the print routine to store on the stack
000016D8                          1037  *-------------------------------------------------------------------------------
000016D8                          1038  PUSH_BWL
000016D8                          1039  
000016D8                          1040  * ---- Branching Block ----
000016D8                          1041  
000016D8  B83C 0000               1042      CMP.B           #0,D4       *00 -> Byte
000016DC  6700 0016               1043      BEQ             PUSH_BWL_BYTE
000016E0  B83C 0001               1044      CMP.B           #1,D4       *01 -> Word
000016E4  6700 0018               1045      BEQ             PUSH_BWL_WORD
000016E8  B83C 0002               1046      CMP.B           #2,D4       *10 -> Long
000016EC  6700 001A               1047      BEQ             PUSH_BWL_LONG
000016F0                          1048  
000016F0  6000 030A               1049      BRA             PRINT_ILLEGAL
000016F4                          1050  
000016F4                          1051  *________________________________________
000016F4                          1052  * Load Byte Print Label
000016F4                          1053  *----------------------------------------
000016F4                          1054  PUSH_BWL_BYTE
000016F4  4BF9 00001846           1055      LEA             PRINT_BYTE_DESIGNATOR,A5
000016FA  6000 0016               1056      BRA             PUSH_BWL_FINISH
000016FE                          1057  *________________________________________
000016FE                          1058  * Load Word Print Label
000016FE                          1059  *----------------------------------------
000016FE                          1060  PUSH_BWL_WORD
000016FE  4BF9 00001856           1061      LEA             PRINT_WORD_DESIGNATOR,A5
00001704  6000 000C               1062      BRA             PUSH_BWL_FINISH
00001708                          1063  
00001708                          1064  *________________________________________
00001708                          1065  * Load Long Print Label
00001708                          1066  *----------------------------------------
00001708                          1067  PUSH_BWL_LONG
00001708  4BF9 00001866           1068      LEA             PRINT_LONG_DESIGNATOR,A5
0000170E  6000 0002               1069      BRA             PUSH_BWL_FINISH
00001712                          1070  
00001712                          1071  *________________________________________
00001712                          1072  PUSH_BWL_FINISH
00001712                          1073  
00001712  2857                    1074      MOVEA.L         (SP),A4 * Store the value we're going to RTS to
00001714  588F                    1075      ADD.L           #4,SP   * Move the stack pointer down to the RTS value
00001716  2F0D                    1076      MOVE.L          A5,-(SP)    * Overwrite the RTS value with the print label
00001718  2F0C                    1077      MOVE.L          A4,-(SP)    * Push the RTS so we can return like normal
0000171A                          1078  
0000171A  5878 1008               1079      ADD.W           #4,PRINT_COUNT
0000171E                          1080  
0000171E  4E75                    1081      RTS
00001720                          1082  
00001720                          1083  
00001720                          1084  *-------------------------------------------------------------------------------
00001720                          1085  *     ________   ________   ___   ________    _________
00001720                          1086  *    |\   __  \ |\   __  \ |\  \ |\   ___  \ |\___   ___\
00001720                          1087  *    \ \  \|\  \\ \  \|\  \\ \  \\ \  \\ \  \\|___ \  \_|
00001720                          1088  *     \ \   ____\\ \   _  _\\ \  \\ \  \\ \  \    \ \  \
00001720                          1089  *      \ \  \___| \ \  \\  \|\ \  \\ \  \\ \  \    \ \  \
00001720                          1090  *       \ \__\     \ \__\\ _\ \ \__\\ \__\\ \__\    \ \__\
00001720                          1091  *        \|__|      \|__|\|__| \|__| \|__| \|__|     \|__|
00001720                          1092  *
00001720                          1093  *-------------------------------------------------------------------------------
00001720                          1094  *-------------------------------------------------------------------------------
00001720                          1095  *
00001720                          1096  *       PRINT LSR
00001720                          1097  *________________________________________
00001720                          1098  * Register Use Summary:
00001720                          1099  *
00001720                          1100  * D0: LOCAL VARIABLE  - Trap task designator
00001720                          1101  *
00001720                          1102  * A1: LOCAL VARIABLE  - String address
00001720                          1103  *-------------------------------------------------------------------------------
00001720                          1104  PRINT_LSR
00001720  43F9 00001CC4           1105      LEA             STRING_LSR,A1   * Load "LSR" into A1
00001726  103C 000E               1106      MOVE.B          #14,D0      * Set trap task to String
0000172A  4E4F                    1107      TRAP            #15         * Print "LSR "
0000172C  6000 FED0               1108      BRA             PRINT_OPCODE_LOOP_RETURN
00001730                          1109      
00001730                          1110  *-------------------------------------------------------------------------------
00001730                          1111  *
00001730                          1112  *       PRINT LSL
00001730                          1113  *________________________________________
00001730                          1114  * Register Use Summary:
00001730                          1115  *
00001730                          1116  * D0: LOCAL VARIABLE  - Trap task designator
00001730                          1117  *
00001730                          1118  * A1: LOCAL VARIABLE  - String address
00001730                          1119  *-------------------------------------------------------------------------------
00001730                          1120  PRINT_LSL
00001730  43F9 00001CC8           1121      LEA             STRING_LSL,A1   * Load "LSL" into A1
00001736  103C 000E               1122      MOVE.B          #14,D0      * Set trap task to String
0000173A  4E4F                    1123      TRAP            #15         * Print "LSL "
0000173C  6000 FEC0               1124      BRA             PRINT_OPCODE_LOOP_RETURN
00001740                          1125      
00001740                          1126  *-------------------------------------------------------------------------------
00001740                          1127  *
00001740                          1128  *       PRINT ASR
00001740                          1129  *________________________________________
00001740                          1130  * Register Use Summary:
00001740                          1131  *
00001740                          1132  * D0: LOCAL VARIABLE  - Trap task designator
00001740                          1133  *
00001740                          1134  * A1: LOCAL VARIABLE  - String address
00001740                          1135  *-------------------------------------------------------------------------------
00001740                          1136  PRINT_ASR
00001740  43F9 00001CBC           1137      LEA             STRING_ASR,A1   * Load "ASR" into A1
00001746  103C 000E               1138      MOVE.B          #14,D0      * Set trap task to String
0000174A  4E4F                    1139      TRAP            #15         * Print "ASR "
0000174C  6000 FEB0               1140      BRA             PRINT_OPCODE_LOOP_RETURN
00001750                          1141      
00001750                          1142  *-------------------------------------------------------------------------------
00001750                          1143  *
00001750                          1144  *       PRINT ASL
00001750                          1145  *________________________________________
00001750                          1146  * Register Use Summary:
00001750                          1147  *
00001750                          1148  * D0: LOCAL VARIABLE  - Trap task designator
00001750                          1149  *
00001750                          1150  * A1: LOCAL VARIABLE  - String address
00001750                          1151  *-------------------------------------------------------------------------------
00001750                          1152  PRINT_ASL
00001750  43F9 00001CC0           1153      LEA             STRING_ASL,A1   * Load "ASL" into A1
00001756  103C 000E               1154      MOVE.B          #14,D0      * Set trap task to String
0000175A  4E4F                    1155      TRAP            #15         * Print "ASL "
0000175C  6000 FEA0               1156      BRA             PRINT_OPCODE_LOOP_RETURN
00001760                          1157  
00001760                          1158  *-------------------------------------------------------------------------------
00001760                          1159  *
00001760                          1160  *       PRINT ROR
00001760                          1161  *________________________________________
00001760                          1162  * Register Use Summary:
00001760                          1163  *
00001760                          1164  * D0: LOCAL VARIABLE  - Trap task designator
00001760                          1165  *
00001760                          1166  * A1: LOCAL VARIABLE  - String address
00001760                          1167  *-------------------------------------------------------------------------------
00001760                          1168  PRINT_ROR
00001760  43F9 00001CCC           1169      LEA             STRING_ROR,A1   * Load "ROR" into A1
00001766  103C 000E               1170      MOVE.B          #14,D0      * Set trap task to String
0000176A  4E4F                    1171      TRAP            #15         * Print "ROR "
0000176C  6000 FE90               1172      BRA             PRINT_OPCODE_LOOP_RETURN
00001770                          1173      
00001770                          1174  *-------------------------------------------------------------------------------
00001770                          1175  *
00001770                          1176  *       PRINT ROL
00001770                          1177  *________________________________________
00001770                          1178  * Register Use Summary:
00001770                          1179  *
00001770                          1180  * D0: LOCAL VARIABLE  - Trap task designator
00001770                          1181  *
00001770                          1182  * A1: LOCAL VARIABLE  - String address
00001770                          1183  *-------------------------------------------------------------------------------
00001770                          1184  PRINT_ROL
00001770  43F9 00001CD0           1185      LEA             STRING_ROL,A1   * Load "ROL" into A1
00001776  103C 000E               1186      MOVE.B          #14,D0      * Set trap task to String
0000177A  4E4F                    1187      TRAP            #15         * Print "ROL"
0000177C  6000 FE80               1188      BRA             PRINT_OPCODE_LOOP_RETURN
00001780                          1189  
00001780                          1190  *-------------------------------------------------------------------------------
00001780                          1191  *
00001780                          1192  *       PRINT DATA1_WORD
00001780                          1193  *________________________________________
00001780                          1194  * Register Use Summary:
00001780                          1195  *
00001780                          1196  * D0: LOCAL VARIABLE  - Trap task designator
00001780                          1197  *
00001780                          1198  * D1: LOCAL VARIABLE  - DATA1 local copy
00001780                          1199  *
00001780                          1200  * D2: LOCAL VARIABLE  - Base in which to print
00001780                          1201  *
00001780                          1202  * A1: LOCAL VARIABLE  - String address
00001780                          1203  *-------------------------------------------------------------------------------
00001780                          1204  PRINT_DATA1_LONG
00001780  2238 1016               1205      MOVE.L          DATA1,D1
00001784  700F                    1206      MOVEQ           #15,D0
00001786  7410                    1207      MOVEQ           #16,D2
00001788  4E4F                    1208      TRAP            #15
0000178A                          1209  
0000178A                          1210  *-------------------------------------------------------------------------------
0000178A                          1211  *
0000178A                          1212  *       PRINT DATA1_WORD
0000178A                          1213  *________________________________________
0000178A                          1214  * Register Use Summary:
0000178A                          1215  *
0000178A                          1216  * D0: LOCAL VARIABLE  - Trap task designator
0000178A                          1217  *
0000178A                          1218  * D1: LOCAL VARIABLE  - DATA1 local copy
0000178A                          1219  *
0000178A                          1220  * D2: LOCAL VARIABLE  - Base in which to print
0000178A                          1221  *
0000178A                          1222  * A1: LOCAL VARIABLE  - String address
0000178A                          1223  *-------------------------------------------------------------------------------
0000178A                          1224  PRINT_DATA1_WORD
0000178A  2238 1016               1225      MOVE.L          DATA1,D1
0000178E  4841                    1226      SWAP            D1              * We only want the upper word
00001790  C27C FFFF               1227      AND             #$0000FFFF,D1   * Bit mask for upper word
00001794  700F                    1228      MOVEQ           #15,D0
00001796  7410                    1229      MOVEQ           #16,D2
00001798  4E4F                    1230      TRAP            #15
0000179A                          1231  
0000179A                          1232  *-------------------------------------------------------------------------------
0000179A                          1233  *
0000179A                          1234  *       PRINT BGT
0000179A                          1235  *________________________________________
0000179A                          1236  * Register Use Summary:
0000179A                          1237  *
0000179A                          1238  * D0: LOCAL VARIABLE  - Trap task designator
0000179A                          1239  *
0000179A                          1240  * A1: LOCAL VARIABLE  - String address
0000179A                          1241  *-------------------------------------------------------------------------------
0000179A                          1242  PRINT_BGT
0000179A  43F9 00001CF9           1243      LEA             STRING_BGT,A1   * Load "BGT" into A1
000017A0  103C 000E               1244      MOVE.B          #14,D0      * Set trap task to String
000017A4  4E4F                    1245      TRAP            #15         * Print "BGT "
000017A6  6000 FE56               1246      BRA             PRINT_OPCODE_LOOP_RETURN
000017AA                          1247  
000017AA                          1248  *-------------------------------------------------------------------------------
000017AA                          1249  *
000017AA                          1250  *       PRINT BLE
000017AA                          1251  *________________________________________
000017AA                          1252  * Register Use Summary:
000017AA                          1253  *
000017AA                          1254  * D0: LOCAL VARIABLE  - Trap task designator
000017AA                          1255  *
000017AA                          1256  * A1: LOCAL VARIABLE  - String address
000017AA                          1257  *-------------------------------------------------------------------------------
000017AA                          1258  PRINT_BLE
000017AA  43F9 00001CEF           1259      LEA             STRING_BLE,A1   * Load "BLE" into A1
000017B0  103C 000E               1260      MOVE.B          #14,D0      * Set trap task to String
000017B4  4E4F                    1261      TRAP            #15         * Print "BLE "
000017B6  6000 FE46               1262      BRA             PRINT_OPCODE_LOOP_RETURN
000017BA                          1263  
000017BA                          1264  *-------------------------------------------------------------------------------
000017BA                          1265  *
000017BA                          1266  *       PRINT BEQ
000017BA                          1267  *________________________________________
000017BA                          1268  * Register Use Summary:
000017BA                          1269  *
000017BA                          1270  * D0: LOCAL VARIABLE  - Trap task designator
000017BA                          1271  *
000017BA                          1272  * A1: LOCAL VARIABLE  - String address
000017BA                          1273  *-------------------------------------------------------------------------------
000017BA                          1274  PRINT_BEQ
000017BA  43F9 00001CEA           1275      LEA             STRING_BEQ,A1   * Load "BEQ" into A1
000017C0  103C 000E               1276      MOVE.B          #14,D0      * Set trap task to String
000017C4  4E4F                    1277      TRAP            #15         * Print "BEQ "
000017C6  6000 FE36               1278      BRA             PRINT_OPCODE_LOOP_RETURN
000017CA                          1279  
000017CA                          1280  
000017CA                          1281  *-------------------------------------------------------------------------------
000017CA                          1282  *
000017CA                          1283  *       PRINT BRA
000017CA                          1284  *________________________________________
000017CA                          1285  * Register Use Summary:
000017CA                          1286  *
000017CA                          1287  * D0: LOCAL VARIABLE  - Trap task designator
000017CA                          1288  *
000017CA                          1289  * A1: LOCAL VARIABLE  - String address
000017CA                          1290  *-------------------------------------------------------------------------------
000017CA                          1291  PRINT_BRA
000017CA  43F9 00001CF4           1292      LEA             STRING_BRA,A1   * Load "BRA" into A1
000017D0  103C 000E               1293      MOVE.B          #14,D0      * Set trap task to String
000017D4  4E4F                    1294      TRAP            #15         * Print "BRA "
000017D6  6000 FE26               1295      BRA             PRINT_OPCODE_LOOP_RETURN
000017DA                          1296  
000017DA                          1297  
000017DA                          1298  *-------------------------------------------------------------------------------
000017DA                          1299  *
000017DA                          1300  *       PRINT ADD
000017DA                          1301  *________________________________________
000017DA                          1302  * Register Use Summary:
000017DA                          1303  *
000017DA                          1304  * D0: LOCAL VARIABLE  - Trap task designator
000017DA                          1305  *
000017DA                          1306  * A1: LOCAL VARIABLE  - String address
000017DA                          1307  *-------------------------------------------------------------------------------
000017DA                          1308  PRINT_ADD
000017DA  43F9 00001CE1           1309      LEA             STRING_ADD,A1   * Load "ADD" into A1
000017E0  103C 000E               1310      MOVE.B          #14,D0      * Set trap task to String
000017E4  4E4F                    1311      TRAP            #15         * Print "ADD "
000017E6  6000 FE16               1312      BRA             PRINT_OPCODE_LOOP_RETURN
000017EA                          1313  
000017EA                          1314  
000017EA                          1315  *-------------------------------------------------------------------------------
000017EA                          1316  *
000017EA                          1317  *       PRINT ADDA
000017EA                          1318  *________________________________________
000017EA                          1319  * Register Use Summary:
000017EA                          1320  *
000017EA                          1321  * D0: LOCAL VARIABLE  - Trap task designator
000017EA                          1322  *
000017EA                          1323  * A1: LOCAL VARIABLE  - String address
000017EA                          1324  *-------------------------------------------------------------------------------
000017EA                          1325  PRINT_ADDA
000017EA  43F9 00001CE5           1326      LEA             STRING_ADDA,A1  * Load "ADDA" into A1
000017F0  103C 000E               1327      MOVE.B          #14,D0      * Set trap task to String
000017F4  4E4F                    1328      TRAP            #15         * Print "ADDA "
000017F6  6000 FE06               1329      BRA             PRINT_OPCODE_LOOP_RETURN
000017FA                          1330  
000017FA                          1331  
000017FA                          1332  *-------------------------------------------------------------------------------
000017FA                          1333  *
000017FA                          1334  *       PRINT MISC_NUMBER
000017FA                          1335  *________________________________________
000017FA                          1336  * Register Use Summary:
000017FA                          1337  *
000017FA                          1338  * D0: LOCAL VARIABLE  - Trap task designator
000017FA                          1339  *
000017FA                          1340  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
000017FA                          1341  *
000017FA                          1342  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
000017FA                          1343  *
000017FA                          1344  * A1: LOCAL VARIABLE  - String address
000017FA                          1345  *-------------------------------------------------------------------------------
000017FA                          1346  PRINT_MISC_NUMBER
000017FA  4281                    1347      CLR.L   D1
000017FC                          1348  
000017FC  103C 000F               1349      MOVE.B  #15,D0
00001800  1239 00001D06           1350      MOVE.B  MISC_NUMBER,D1
00001806  143C 000A               1351      MOVE.B  #10,D2
0000180A  4E4F                    1352      TRAP #15
0000180C                          1353  
0000180C  6000 FDF0               1354      BRA     PRINT_OPCODE_LOOP_RETURN
00001810                          1355  
00001810                          1356  *-------------------------------------------------------------------------------
00001810                          1357  *
00001810                          1358  *       PRINT MISC_NUMBER_AS_ADDRESS
00001810                          1359  *________________________________________
00001810                          1360  * Register Use Summary:
00001810                          1361  *
00001810                          1362  * D0: LOCAL VARIABLE  - Trap task designator
00001810                          1363  *
00001810                          1364  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
00001810                          1365  *
00001810                          1366  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
00001810                          1367  *
00001810                          1368  * A1: LOCAL VARIABLE  - String address
00001810                          1369  *-------------------------------------------------------------------------------
00001810                          1370  PRINT_MISC_NUMBER_AS_ADDRESS
00001810                          1371  
00001810  43F9 00001CA4           1372      LEA             STRING_A,A1
00001816  103C 000E               1373      MOVE.B          #14,D0
0000181A  4E4F                    1374      TRAP            #15
0000181C                          1375  
0000181C  4280                    1376      CLR.L   D0
0000181E  4281                    1377      CLR.L   D1
00001820  4282                    1378      CLR.L   D2
00001822                          1379  
00001822  103C 000F               1380      MOVE.B  #15,D0
00001826  1239 00001D06           1381      MOVE.B  MISC_NUMBER,D1
0000182C  143C 000A               1382      MOVE.B  #10,D2
00001830  4E4F                    1383      TRAP #15
00001832                          1384  
00001832  6000 FDCA               1385      BRA     PRINT_OPCODE_LOOP_RETURN
00001836                          1386  
00001836                          1387  
00001836                          1388  *-------------------------------------------------------------------------------
00001836                          1389  *
00001836                          1390  *       PRINT ADDQ
00001836                          1391  *________________________________________
00001836                          1392  * Register Use Summary:
00001836                          1393  *
00001836                          1394  * D0: LOCAL VARIABLE  - Trap task designator
00001836                          1395  *
00001836                          1396  * A1: LOCAL VARIABLE  - String address
00001836                          1397  *-------------------------------------------------------------------------------
00001836                          1398  PRINT_ADDQ
00001836  43F9 00001CDC           1399      LEA             STRING_ADDQ,A1  * Load "ADDQ" into A1
0000183C  103C 000E               1400      MOVE.B          #14,D0      * Set trap task to String
00001840  4E4F                    1401      TRAP            #15         * Print ", "
00001842  6000 FDBA               1402      BRA             PRINT_OPCODE_LOOP_RETURN
00001846                          1403  
00001846                          1404  
00001846                          1405  *-------------------------------------------------------------------------------
00001846                          1406  *
00001846                          1407  *       PRINT BYTE DESIGNATOR
00001846                          1408  *________________________________________
00001846                          1409  * Register Use Summary:
00001846                          1410  *
00001846                          1411  * D0: LOCAL VARIABLE  - low byte of opcode
00001846                          1412  * A1: LOCAL VARIABLE  - String address
00001846                          1413  *-------------------------------------------------------------------------------
00001846                          1414  PRINT_BYTE_DESIGNATOR
00001846  43F9 00001C96           1415      LEA             STRING_BYTE_DESIGNATOR,A1
0000184C  103C 000E               1416      MOVE.B          #14,D0
00001850  4E4F                    1417      TRAP            #15
00001852  6000 FDAA               1418      BRA             PRINT_OPCODE_LOOP_RETURN
00001856                          1419  
00001856                          1420  *-------------------------------------------------------------------------------
00001856                          1421  *
00001856                          1422  *       PRINT WORD DESIGNATOR
00001856                          1423  *________________________________________
00001856                          1424  * Register Use Summary:
00001856                          1425  *
00001856                          1426  * D0: LOCAL VARIABLE  - low byte of opcode
00001856                          1427  * A1: LOCAL VARIABLE  - String address
00001856                          1428  *-------------------------------------------------------------------------------
00001856                          1429  PRINT_WORD_DESIGNATOR
00001856  43F9 00001C9A           1430      LEA             STRING_WORD_DESIGNATOR,A1
0000185C  103C 000E               1431      MOVE.B          #14,D0
00001860  4E4F                    1432      TRAP            #15
00001862  6000 FD9A               1433      BRA             PRINT_OPCODE_LOOP_RETURN
00001866                          1434  
00001866                          1435  *-------------------------------------------------------------------------------
00001866                          1436  *
00001866                          1437  *       PRINT LONG DESIGNATOR
00001866                          1438  *________________________________________
00001866                          1439  * Register Use Summary:
00001866                          1440  *
00001866                          1441  * D0: LOCAL VARIABLE  - low byte of opcode
00001866                          1442  * A1: LOCAL VARIABLE  - String address
00001866                          1443  *-------------------------------------------------------------------------------
00001866                          1444  PRINT_LONG_DESIGNATOR
00001866  43F9 00001C9E           1445      LEA             STRING_LONG_DESIGNATOR,A1
0000186C  103C 000E               1446      MOVE.B          #14,D0
00001870  4E4F                    1447      TRAP            #15
00001872  6000 FD8A               1448      BRA             PRINT_OPCODE_LOOP_RETURN
00001876                          1449  
00001876                          1450  *-------------------------------------------------------------------------------
00001876                          1451  *
00001876                          1452  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - Dn REGISTER
00001876                          1453  *
00001876                          1454  * Prints "Dx, " where x ranges between 0 and 7. This is determined by masking
00001876                          1455  * the last four bits of the current opcode stored in D7.
00001876                          1456  *
00001876                          1457  *________________________________________
00001876                          1458  * Register Use Summary:
00001876                          1459  *
00001876                          1460  * D0: LOCAL VARIABLE  - Trap task designator
00001876                          1461  * D1: LOCAL VARIABLE  - Dn Register number to display
00001876                          1462  * D7: CONST PARAMETER - The opcode word
00001876                          1463  *
00001876                          1464  * A1: LOCAL VARIABLE  - String address
00001876                          1465  *-------------------------------------------------------------------------------
00001876                          1466  PRINT_EA_MODE_ID_DN
00001876  43F9 00001CA2           1467      LEA             STRING_D,A1     * Load "D" into A1
0000187C  103C 000E               1468      MOVE.B          #14,D0      * Set trap task to String
00001880  4E4F                    1469      TRAP            #15         * Print "D"
00001882                          1470  
00001882  4281                    1471      CLR.L           D1
00001884  1207                    1472      MOVE.B          D7,D1       * Get the lowest byte of the opcode
00001886  C23C 0007               1473      AND.B           #$7,D1      * Get the lowest four bits (register #)
0000188A  103C 0003               1474      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
0000188E  4E4F                    1475      TRAP            #15         * Print the register MISC_NUMBER
00001890                          1476  
00001890  6000 FD6C               1477      BRA             PRINT_OPCODE_LOOP_RETURN
00001894                          1478  
00001894                          1479  *-------------------------------------------------------------------------------
00001894                          1480  *
00001894                          1481  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - ADDRESS REGISTER
00001894                          1482  *
00001894                          1483  * Prints "Ax, " where x ranges between 0 and 7. This is determined by masking
00001894                          1484  * the last four bits of the current opcode stored in D7.
00001894                          1485  *
00001894                          1486  *________________________________________
00001894                          1487  * Register Use Summary:
00001894                          1488  *
00001894                          1489  * D0: LOCAL VARIABLE  - Trap task designator
00001894                          1490  * D1: LOCAL VARIABLE  - Dn Register number to display
00001894                          1491  * D7: CONST PARAMETER - The opcode word
00001894                          1492  *
00001894                          1493  * A1: LOCAL VARIABLE  - String address
00001894                          1494  *-------------------------------------------------------------------------------
00001894                          1495  PRINT_EA_MODE_ID_AN
00001894  43F9 00001CA4           1496      LEA             STRING_A,A1
0000189A  103C 000E               1497      MOVE.B          #14,D0
0000189E  4E4F                    1498      TRAP            #15
000018A0                          1499  
000018A0                          1500  
000018A0  4281                    1501      CLR.L           D1
000018A2  1207                    1502      MOVE.B          D7,D1       * Get the lowest byte of the opcode
000018A4  C23C 0007               1503      AND.B           #$7,D1      * Get the lowest four bits (register #)
000018A8  103C 0003               1504      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
000018AC  4E4F                    1505      TRAP            #15         * Print the register MISC_NUMBER
000018AE                          1506  
000018AE  6000 FD4E               1507      BRA             PRINT_OPCODE_LOOP_RETURN
000018B2                          1508  
000018B2                          1509  
000018B2                          1510  *-------------------------------------------------------------------------------
000018B2                          1511  *
000018B2                          1512  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - (ADDRESS REGISTER)
000018B2                          1513  *
000018B2                          1514  *________________________________________
000018B2                          1515  * Register Use Summary:
000018B2                          1516  *
000018B2                          1517  * D0: LOCAL VARIABLE  - Trap task designator
000018B2                          1518  * D1: LOCAL VARIABLE  - Dn Register MISC_NUMBER to display
000018B2                          1519  * D7: CONST PARAMETER - The opcode word
000018B2                          1520  *
000018B2                          1521  * A1: LOCAL VARIABLE  - String address
000018B2                          1522  *-------------------------------------------------------------------------------
000018B2                          1523  PRINT_EA_MODE_ID_AN_INDIRECT
000018B2  43F9 00001CA8           1524      LEA             STRING_LEFT_PAREN,A1
000018B8  103C 000E               1525      MOVE.B          #14,D0
000018BC  4E4F                    1526      TRAP            #15
000018BE                          1527  
000018BE  43F9 00001CA4           1528      LEA             STRING_A,A1
000018C4  103C 000E               1529      MOVE.B          #14,D0
000018C8  4E4F                    1530      TRAP            #15
000018CA                          1531  
000018CA  4281                    1532      CLR.L           D1
000018CC  1207                    1533      MOVE.B          D7,D1       * Get the lowest byte of the opcode
000018CE  C23C 0007               1534      AND.B           #$7,D1      * Get the lowest four bits (register #)
000018D2  103C 0003               1535      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
000018D6  4E4F                    1536      TRAP            #15         * Print the register MISC_NUMBER
000018D8                          1537  
000018D8  43F9 00001CAA           1538      LEA             STRING_RIGHT_PAREN,A1
000018DE  103C 000E               1539      MOVE.B          #14,D0
000018E2  4E4F                    1540      TRAP            #15
000018E4                          1541  
000018E4  6000 FD18               1542      BRA             PRINT_OPCODE_LOOP_RETURN
000018E8                          1543  
000018E8                          1544  *-------------------------------------------------------------------------------
000018E8                          1545  *
000018E8                          1546  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - (ADDRESS REGISTER)+
000018E8                          1547  *
000018E8                          1548  *________________________________________
000018E8                          1549  * Register Use Summary:
000018E8                          1550  *
000018E8                          1551  * D0: LOCAL VARIABLE  - Trap task designator
000018E8                          1552  * D1: LOCAL VARIABLE  - Dn Register number to display
000018E8                          1553  * D7: CONST PARAMETER - The opcode word
000018E8                          1554  *
000018E8                          1555  * A1: LOCAL VARIABLE  - String address
000018E8                          1556  *-------------------------------------------------------------------------------
000018E8                          1557  PRINT_EA_MODE_ID_AN_POST_INC
000018E8  43F9 00001CA8           1558      LEA             STRING_LEFT_PAREN,A1
000018EE  103C 000E               1559      MOVE.B          #14,D0
000018F2  4E4F                    1560      TRAP            #15
000018F4                          1561  
000018F4  43F9 00001CA4           1562      LEA             STRING_A,A1
000018FA  103C 000E               1563      MOVE.B          #14,D0
000018FE  4E4F                    1564      TRAP            #15
00001900                          1565  
00001900  4281                    1566      CLR.L           D1
00001902  1207                    1567      MOVE.B          D7,D1       * Get the lowest byte of the opcode
00001904  C23C 0007               1568      AND.B           #$7,D1      * Get the lowest four bits (register #)
00001908  103C 0003               1569      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
0000190C  4E4F                    1570      TRAP            #15         * Print the register MISC_NUMBER
0000190E                          1571  
0000190E  43F9 00001CAA           1572      LEA             STRING_RIGHT_PAREN,A1
00001914  103C 000E               1573      MOVE.B          #14,D0
00001918  4E4F                    1574      TRAP            #15
0000191A                          1575  
0000191A  43F9 00001CAC           1576      LEA             STRING_PLUS,A1
00001920  103C 000E               1577      MOVE.B          #14,D0
00001924  4E4F                    1578      TRAP            #15
00001926                          1579  
00001926  6000 FCD6               1580      BRA             PRINT_OPCODE_LOOP_RETURN
0000192A                          1581  
0000192A                          1582  
0000192A                          1583  
0000192A                          1584  *-------------------------------------------------------------------------------
0000192A                          1585  *
0000192A                          1586  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - -(ADDRESS REGISTER)
0000192A                          1587  *
0000192A                          1588  *________________________________________
0000192A                          1589  * Register Use Summary:
0000192A                          1590  *
0000192A                          1591  * D0: LOCAL VARIABLE  - Trap task designator
0000192A                          1592  * D1: LOCAL VARIABLE  - Dn Register number to display
0000192A                          1593  * D7: CONST PARAMETER - The opcode word
0000192A                          1594  *
0000192A                          1595  * A1: LOCAL VARIABLE  - String address
0000192A                          1596  *-------------------------------------------------------------------------------
0000192A                          1597  PRINT_EA_MODE_ID_AN_PRE_DEC
0000192A  43F9 00001CAE           1598      LEA             STRING_MINUS,A1
00001930  103C 000E               1599      MOVE.B          #14,D0
00001934  4E4F                    1600      TRAP            #15
00001936                          1601  
00001936  43F9 00001CA8           1602      LEA             STRING_LEFT_PAREN,A1
0000193C  103C 000E               1603      MOVE.B          #14,D0
00001940  4E4F                    1604      TRAP            #15
00001942                          1605  
00001942  43F9 00001CA4           1606      LEA             STRING_A,A1
00001948  103C 000E               1607      MOVE.B          #14,D0
0000194C  4E4F                    1608      TRAP            #15
0000194E                          1609  
0000194E  4281                    1610      CLR.L           D1
00001950  1207                    1611      MOVE.B          D7,D1       * Get the lowest byte of the opcode
00001952  C23C 0007               1612      AND.B           #$7,D1      * Get the lowest four bits (register #)
00001956  103C 0003               1613      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
0000195A  4E4F                    1614      TRAP            #15         * Print the register MISC_NUMBER
0000195C                          1615  
0000195C  43F9 00001CAA           1616      LEA             STRING_RIGHT_PAREN,A1
00001962  103C 000E               1617      MOVE.B          #14,D0
00001966  4E4F                    1618      TRAP            #15
00001968                          1619  
00001968  6000 FC94               1620      BRA             PRINT_OPCODE_LOOP_RETURN
0000196C                          1621  
0000196C                          1622  
0000196C                          1623  
0000196C                          1624  
0000196C                          1625  
0000196C                          1626  *-------------------------------------------------------------------------------
0000196C                          1627  *
0000196C                          1628  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - WORD DATA
0000196C                          1629  *
0000196C                          1630  *________________________________________
0000196C                          1631  * Register Use Summary:
0000196C                          1632  *
0000196C                          1633  * D0: LOCAL VARIABLE  - Trap task designator
0000196C                          1634  * D1: LOCAL VARIABLE  - Dn Register number to display
0000196C                          1635  * D7: CONST PARAMETER - The opcode word
0000196C                          1636  *
0000196C                          1637  * A1: LOCAL VARIABLE  - String address
0000196C                          1638  *-------------------------------------------------------------------------------
0000196C                          1639  PRINT_EA_MODE_ID_IND_SHORT
0000196C  43F9 00001CB2           1640      LEA             STRING_DOLLAR,A1
00001972  103C 000E               1641      MOVE.B          #14,D0
00001976  4E4F                    1642      TRAP            #15
00001978                          1643  
00001978  2238 1016               1644      MOVE.L          DATA1,D1
0000197C  4841                    1645      SWAP            D1              * We only want the upper word
0000197E  C27C FFFF               1646      AND             #$0000FFFF,D1   * Bit mask for upper word
00001982                          1647  
00001982  700F                    1648      MOVEQ           #15,D0
00001984  7410                    1649      MOVEQ           #16,D2
00001986  4E4F                    1650      TRAP            #15
00001988                          1651  
00001988  6000 FC74               1652      BRA             PRINT_OPCODE_LOOP_RETURN
0000198C                          1653  
0000198C                          1654  *-------------------------------------------------------------------------------
0000198C                          1655  *
0000198C                          1656  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - LONG DATA
0000198C                          1657  *
0000198C                          1658  *________________________________________
0000198C                          1659  * Register Use Summary:
0000198C                          1660  *
0000198C                          1661  * D0: LOCAL VARIABLE  - Trap task designator
0000198C                          1662  * D1: LOCAL VARIABLE  - Dn Register number to display
0000198C                          1663  * D7: CONST PARAMETER - The opcode word
0000198C                          1664  *
0000198C                          1665  * A1: LOCAL VARIABLE  - String address
0000198C                          1666  *-------------------------------------------------------------------------------
0000198C                          1667  PRINT_EA_MODE_ID_IND_LONG
0000198C  43F9 00001CB2           1668      LEA             STRING_DOLLAR,A1
00001992  103C 000E               1669      MOVE.B          #14,D0
00001996  4E4F                    1670      TRAP            #15
00001998                          1671  
00001998  2238 1016               1672      MOVE.L          DATA1,D1
0000199C  700F                    1673      MOVEQ           #15,D0
0000199E  7410                    1674      MOVEQ           #16,D2
000019A0  4E4F                    1675      TRAP            #15
000019A2                          1676  
000019A2  6000 FC5A               1677      BRA             PRINT_OPCODE_LOOP_RETURN
000019A6                          1678  
000019A6                          1679  *-------------------------------------------------------------------------------
000019A6                          1680  *
000019A6                          1681  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - ABSOLUTE
000019A6                          1682  *
000019A6                          1683  *________________________________________
000019A6                          1684  * Register Use Summary:
000019A6                          1685  *
000019A6                          1686  * D0: LOCAL VARIABLE  - Trap task designator
000019A6                          1687  * D1: LOCAL VARIABLE  - Dn Register number to display
000019A6                          1688  * D7: CONST PARAMETER - The opcode word
000019A6                          1689  *
000019A6                          1690  * A1: LOCAL VARIABLE  - String address
000019A6                          1691  *-------------------------------------------------------------------------------
000019A6                          1692  PRINT_EA_MODE_ID_ABS_DATA
000019A6  43F9 00001CB0           1693      LEA             STRING_POUND,A1
000019AC  103C 000E               1694      MOVE.B          #14,D0
000019B0  4E4F                    1695      TRAP            #15
000019B2                          1696  
000019B2  43F9 00001CB2           1697      LEA             STRING_DOLLAR,A1
000019B8  103C 000E               1698      MOVE.B          #14,D0
000019BC  4E4F                    1699      TRAP            #15
000019BE                          1700  
000019BE  2238 1016               1701      MOVE.L          DATA1,D1
000019C2  700F                    1702      MOVEQ           #15,D0
000019C4  7410                    1703      MOVEQ           #16,D2
000019C6  4E4F                    1704      TRAP            #15
000019C8                          1705  
000019C8  6000 FC34               1706      BRA             PRINT_OPCODE_LOOP_RETURN
000019CC                          1707  
000019CC                          1708  *-------------------------------------------------------------------------------
000019CC                          1709  *
000019CC                          1710  *       PRINT JSR
000019CC                          1711  *________________________________________
000019CC                          1712  * Register Use Summary:
000019CC                          1713  *
000019CC                          1714  * D0: LOCAL VARIABLE  - Trap task designator
000019CC                          1715  *
000019CC                          1716  * A1: LOCAL VARIABLE  - String address
000019CC                          1717  *-------------------------------------------------------------------------------
000019CC                          1718  PRINT_JSR
000019CC  43F9 00001CFE           1719      LEA             STRING_JSR,A1   * Load "JSR" into A1
000019D2  103C 000E               1720      MOVE.B          #14,D0      * Set trap task to String
000019D6  4E4F                    1721      TRAP            #15
000019D8  6000 FC24               1722      BRA             PRINT_OPCODE_LOOP_RETURN
000019DC                          1723  
000019DC                          1724  
000019DC                          1725  *-------------------------------------------------------------------------------
000019DC                          1726  *
000019DC                          1727  *       PRINT FOURSPACE
000019DC                          1728  *________________________________________
000019DC                          1729  * Register Use Summary:
000019DC                          1730  *
000019DC                          1731  * D0: LOCAL VARIABLE  - Trap task designator
000019DC                          1732  *
000019DC                          1733  * A1: LOCAL VARIABLE  - String address
000019DC                          1734  *-------------------------------------------------------------------------------
000019DC                          1735  PRINT_FOURSPACE
000019DC  43F9 00001CB4           1736      LEA             STRING_FOURSPACE,A1 * Load four spaces into A1
000019E2  103C 000E               1737      MOVE.B          #14,D0              * Set trap task to String
000019E6  4E4F                    1738      TRAP            #15
000019E8  6000 FC14               1739      BRA             PRINT_OPCODE_LOOP_RETURN
000019EC                          1740  
000019EC                          1741  
000019EC                          1742  *-------------------------------------------------------------------------------
000019EC                          1743  *
000019EC                          1744  *       PRINT COMMA
000019EC                          1745  *________________________________________
000019EC                          1746  * Register Use Summary:
000019EC                          1747  *
000019EC                          1748  * D0: LOCAL VARIABLE  - Trap task designator
000019EC                          1749  *
000019EC                          1750  * A1: LOCAL VARIABLE  - String address
000019EC                          1751  *-------------------------------------------------------------------------------
000019EC                          1752  PRINT_COMMA
000019EC  43F9 00001CA6           1753      LEA             STRING_COMMA,A1 * Load the comma into A1
000019F2  103C 000E               1754      MOVE.B          #14,D0              * Set trap task to String
000019F6  4E4F                    1755      TRAP            #15
000019F8  6000 FC04               1756      BRA             PRINT_OPCODE_LOOP_RETURN
000019FC                          1757  
000019FC                          1758  *-------------------------------------------------------------------------------
000019FC                          1759  *
000019FC                          1760  *       PRINT ILLEGAL
000019FC                          1761  *
000019FC                          1762  * Incomplete implementation - final version will depend on opcode logic.
000019FC                          1763  * Currently clears stack entirely, future implementation may need to keep
000019FC                          1764  * some RTS addresses
000019FC                          1765  *
000019FC                          1766  * D7: RTS address (opcode shouldn't be necessary at this point)
000019FC                          1767  *-------------------------------------------------------------------------------
000019FC                          1768  PRINT_ILLEGAL       * INCOMPLETE *
000019FC  2E17                    1769      MOVE.L          (SP),D7
000019FE                          1770  
000019FE  2E7C 00000000           1771      MOVE.L          #0,SP
00001A04  43F9 00001C8E           1772      LEA             STRING_ILLEGAL,A1
00001A0A  103C 000D               1773      MOVE.B          #13,D0
00001A0E  4E4F                    1774      TRAP            #15
00001A10                          1775  
00001A10  2E87                    1776      MOVE.L          D7,(SP)
00001A12                          1777  
00001A12  31FC 0002 1010          1778      MOVE.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
00001A18                          1779  
00001A18                          1780  
00001A18  4E75                    1781      RTS
00001A1A                          1782  
00001A1A                          1783  *--------------------------------------------------------------------------------
00001A1A                          1784  * PRINTADDR SUBROUTINE
00001A1A                          1785  *
00001A1A                          1786  * Prints the memory address and some blank spaces before the disassembled
00001A1A                          1787  * instruction is appended.
00001A1A                          1788  *
00001A1A                          1789  * Registers Used:
00001A1A                          1790  *   D0: Trap task designator
00001A1A                          1791  *   D1: Memory address to display
00001A1A                          1792  * D2: Trap task numerical base (Hex = 16)
00001A1A                          1793  *
00001A1A                          1794  *
00001A1A                          1795  * A1: Data memory location
00001A1A                          1796  *
00001A1A                          1797  *
00001A1A                          1798  PRINTADDR
00001A1A                          1799  
00001A1A  2238 1012               1800      MOVE.L   LOOP_INDEX,D1 * Print the loop index (memory location)
00001A1E  700F                    1801      MOVEQ    #15,D0
00001A20  7410                    1802      MOVEQ    #16,D2
00001A22                          1803  
00001A22  4E4F                    1804      TRAP     #15
00001A24                          1805  
00001A24  43F9 00001CB4           1806      LEA      STRING_FOURSPACE,A1 * Print some spaces
00001A2A  700E                    1807      MOVEQ      #14,D0
00001A2C  4E4F                    1808      TRAP       #15
00001A2E                          1809  
00001A2E  4E75                    1810      RTS
00001A30                          1811  
00001A30                          1812  *--------------------------------------------------------------------------------
00001A30                          1813  * PRINT_IMMEDIATE_NEWLINE
00001A30                          1814  *
00001A30                          1815  * CANNOT PUSH TO STACK - Used to put a newline after each opcode
00001A30                          1816  *
00001A30                          1817  * Registers Used:
00001A30                          1818  *   D0: Trap task designator
00001A30                          1819  *   D1: Memory address to display
00001A30                          1820  *
00001A30                          1821  * A1: Data memory location
00001A30                          1822  *
00001A30                          1823  PRINT_IMMEDIATE_NEWLINE
00001A30                          1824  
00001A30  43F9 00001CB9           1825    LEA        STRING_NEWLINE,A1
00001A36  700E                    1826      MOVEQ      #14,D0
00001A38  4E4F                    1827      TRAP       #15
00001A3A                          1828  
00001A3A  4E75                    1829    RTS
00001A3C                          1830  
00001A3C                          1831  *-----------------------------------------------------------------
00001A3C                          1832  * GET_INPUT
00001A3C                          1833  *
00001A3C                          1834  * Called before anything else, clears what it uses
00001A3C                          1835  *-----------------------------------------------------------------
00001A3C                          1836  GET_INPUT
00001A3C                          1837  
00001A3C  21FC 00000000 1000      1838      MOVE.L  #0,START_ADDR
00001A44  21FC 00000000 1004      1839      MOVE.L  #0,END_ADDR
00001A4C                          1840  
00001A4C  4283                    1841      CLR.L   D3
00001A4E                          1842  
00001A4E  43F9 00001BD4           1843      LEA     STRING_ENTER_START,A1
00001A54  103C 000D               1844      MOVE.B  #13,D0
00001A58  4E4F                    1845      TRAP    #15
00001A5A                          1846  
00001A5A  327C 0000               1847      MOVEA   #0,A1
00001A5E  103C 0002               1848      MOVE.B  #2,D0
00001A62  4E4F                    1849      TRAP    #15
00001A64                          1850  
00001A64  4EB9 00001AB4           1851      JSR     STRING_TO_HEX
00001A6A  21C3 1000               1852      MOVE.L  D3,START_ADDR
00001A6E                          1853  
00001A6E  4283                    1854      CLR.L   D3
00001A70                          1855  
00001A70  43F9 00001BFB           1856      LEA     STRING_ENTER_END,A1
00001A76  103C 000D               1857      MOVE.B  #13,D0
00001A7A  4E4F                    1858      TRAP    #15
00001A7C                          1859  
00001A7C  327C 0000               1860      MOVEA   #0,A1
00001A80  103C 0002               1861      MOVE.B  #2,D0
00001A84  4E4F                    1862      TRAP    #15
00001A86                          1863  
00001A86  4EB9 00001AB4           1864      JSR     STRING_TO_HEX
00001A8C  21C3 1004               1865      MOVE.L  D3,END_ADDR
00001A90                          1866  
00001A90  2438 1000               1867      MOVE.L  START_ADDR,D2
00001A94  B682                    1868      CMP.L   D2,D3
00001A96  6D00 000C               1869      BLT     OUT_OF_ORDER
00001A9A                          1870  
00001A9A  4280                    1871      CLR.L     D0
00001A9C  4281                    1872      CLR.L     D1
00001A9E  4282                    1873      CLR.L     D2
00001AA0  4283                    1874      CLR.L     D3
00001AA2                          1875  
00001AA2  4E75                    1876      RTS
00001AA4                          1877  
00001AA4                          1878  OUT_OF_ORDER
00001AA4                          1879  
00001AA4  43F9 00001C62           1880      LEA     STRING_OUT_OF_ORDER,A1
00001AAA  103C 000D               1881      MOVE.B  #13,D0
00001AAE  4E4F                    1882      TRAP    #15
00001AB0                          1883  
00001AB0  4EF8 1A3C               1884      JMP     GET_INPUT
00001AB4                          1885  
00001AB4                          1886  STRING_TO_HEX
00001AB4                          1887  
00001AB4  4282                    1888      CLR.L   D2
00001AB6  B23C 0000               1889      CMP.B   #0,D1
00001ABA  6700 0012               1890      BEQ     STH_END
00001ABE  4EB9 00001AE8           1891      JSR     STH_SET_VALUE
00001AC4  4EF8 1AB4               1892      JMP     STRING_TO_HEX
00001AC8                          1893  
00001AC8                          1894  STH_UPDATE
00001AC8                          1895  
00001AC8  5341                    1896      SUB.W   #1,D1
00001ACA  5249                    1897      ADDA.W  #1,A1
00001ACC  4E75                    1898      RTS
00001ACE                          1899  
00001ACE  4E75                    1900  STH_END     RTS
00001AD0                          1901  
00001AD0                          1902  STH_BAD_INPUT
00001AD0                          1903  
00001AD0  43F9 00001C20           1904      LEA     STRING_INVALID_INPUT,A1
00001AD6  103C 000D               1905      MOVE.B  #13,D0
00001ADA  4E4F                    1906      TRAP    #15
00001ADC                          1907  
00001ADC  327C 0000               1908      MOVEA   #0,A1
00001AE0  103C 0002               1909      MOVE.B  #2,D0
00001AE4  4E4F                    1910      TRAP    #15
00001AE6                          1911  
00001AE6  4E75                    1912      RTS
00001AE8                          1913  
00001AE8                          1914  STH_SET_VALUE
00001AE8                          1915  
00001AE8  7400                    1916      MOVE.L  #$0,D2
00001AEA  0C11 0030               1917      CMP.B   #$30,(A1)
00001AEE  6700 009C               1918      BEQ     STH_SHIFT_BITS
00001AF2                          1919  
00001AF2  7401                    1920      MOVE.L  #$1,D2
00001AF4  0C11 0031               1921      CMP.B   #$31,(A1)
00001AF8  6700 0092               1922      BEQ     STH_SHIFT_BITS
00001AFC                          1923  
00001AFC  7402                    1924      MOVE.L  #$2,D2
00001AFE  0C11 0032               1925      CMP.B   #$32,(A1)
00001B02  6700 0088               1926      BEQ     STH_SHIFT_BITS
00001B06                          1927  
00001B06  7403                    1928      MOVE.L  #$3,D2
00001B08  0C11 0033               1929      CMP.B   #$33,(A1)
00001B0C  6700 007E               1930      BEQ     STH_SHIFT_BITS
00001B10                          1931  
00001B10  7404                    1932      MOVE.L  #$4,D2
00001B12  0C11 0034               1933      CMP.B   #$34,(A1)
00001B16  6700 0074               1934      BEQ     STH_SHIFT_BITS
00001B1A                          1935  
00001B1A  7405                    1936      MOVE.L  #$5,D2
00001B1C  0C11 0035               1937      CMP.B   #$35,(A1)
00001B20  6700 006A               1938      BEQ     STH_SHIFT_BITS
00001B24                          1939  
00001B24  7406                    1940      MOVE.L  #$6,D2
00001B26  0C11 0036               1941      CMP.B   #$36,(A1)
00001B2A  6700 0060               1942      BEQ     STH_SHIFT_BITS
00001B2E                          1943  
00001B2E  7407                    1944      MOVE.L  #$7,D2
00001B30  0C11 0037               1945      CMP.B   #$37,(A1)
00001B34  6700 0056               1946      BEQ     STH_SHIFT_BITS
00001B38                          1947  
00001B38  7408                    1948      MOVE.L  #$8,D2
00001B3A  0C11 0038               1949      CMP.B   #$38,(A1)
00001B3E  6700 004C               1950      BEQ     STH_SHIFT_BITS
00001B42                          1951  
00001B42  7409                    1952      MOVE.L  #$9,D2
00001B44  0C11 0039               1953      CMP.B   #$39,(A1)
00001B48  6700 0042               1954      BEQ     STH_SHIFT_BITS
00001B4C                          1955  
00001B4C  740A                    1956      MOVE.L  #$A,D2
00001B4E  0C11 0041               1957      CMP.B   #$41,(A1)
00001B52  6700 0038               1958      BEQ     STH_SHIFT_BITS
00001B56                          1959  
00001B56  740B                    1960      MOVE.L  #$B,D2
00001B58  0C11 0042               1961      CMP.B   #$42,(A1)
00001B5C  6700 002E               1962      BEQ     STH_SHIFT_BITS
00001B60                          1963  
00001B60  740C                    1964      MOVE.L  #$C,D2
00001B62  0C11 0043               1965      CMP.B   #$43,(A1)
00001B66  6700 0024               1966      BEQ     STH_SHIFT_BITS
00001B6A                          1967  
00001B6A  740D                    1968      MOVE.L  #$D,D2
00001B6C  0C11 0044               1969      CMP.B   #$44,(A1)
00001B70  6700 001A               1970      BEQ     STH_SHIFT_BITS
00001B74                          1971  
00001B74  740E                    1972      MOVE.L  #$E,D2
00001B76  0C11 0045               1973      CMP.B   #$45,(A1)
00001B7A  6700 0010               1974      BEQ     STH_SHIFT_BITS
00001B7E                          1975  
00001B7E  740F                    1976      MOVE.L  #$F,D2
00001B80  0C11 0046               1977      CMP.B   #$46,(A1)
00001B84  6700 0006               1978      BEQ     STH_SHIFT_BITS
00001B88                          1979  
00001B88  4EF8 1AD0               1980      JMP     STH_BAD_INPUT
00001B8C                          1981  
00001B8C                          1982  STH_SHIFT_BITS
00001B8C                          1983  
00001B8C  B23C 0001               1984      CMP.B   #1,D1
00001B90  6700 0038               1985      BEQ     STH_INCREASE_VALUE
00001B94                          1986  
00001B94  E99A                    1987      ROL.L   #4,D2
00001B96  B23C 0002               1988      CMP.B   #2,D1
00001B9A  6700 002E               1989      BEQ     STH_INCREASE_VALUE
00001B9E                          1990  
00001B9E  E99A                    1991      ROL.L   #4,D2
00001BA0  B23C 0003               1992      CMP.B   #3,D1
00001BA4  6700 0024               1993      BEQ     STH_INCREASE_VALUE
00001BA8                          1994  
00001BA8  E99A                    1995      ROL.L   #4,D2
00001BAA  B23C 0004               1996      CMP.B   #4,D1
00001BAE  6700 001A               1997      BEQ     STH_INCREASE_VALUE
00001BB2                          1998  
00001BB2  E99A                    1999      ROL.L   #4,D2
00001BB4  B23C 0005               2000      CMP.B   #5,D1
00001BB8  6700 0010               2001      BEQ     STH_INCREASE_VALUE
00001BBC                          2002  
00001BBC  E99A                    2003      ROL.L   #4,D2
00001BBE  B23C 0006               2004      CMP.B   #6,D1
00001BC2  6700 0006               2005      BEQ     STH_INCREASE_VALUE
00001BC6                          2006  
00001BC6  4EF8 1AD0               2007      JMP     STH_BAD_INPUT
00001BCA                          2008  
00001BCA                          2009  STH_INCREASE_VALUE
00001BCA                          2010  
00001BCA  D682                    2011      ADD.L   D2,D3
00001BCC  4EF8 1AC8               2012      JMP     STH_UPDATE
00001BD0                          2013  
00001BD0                          2014  * END OF GET_INPUT -----------------------------------------------
00001BD0                          2015  
00001BD0  FFFF FFFF               2016      SIMHALT
00001BD4                          2017  
00001BD4                          2018  *-------------------------------------------------------------------------------
00001BD4                          2019  *                ________  ________  _________  ________
00001BD4                          2020  *               |\   ___ \|\   __  \|\___   ___\\   __  \
00001BD4                          2021  *               \ \  \_|\ \ \  \|\  \|___ \  \_\ \  \|\  \
00001BD4                          2022  *                \ \  \ \\ \ \   __  \   \ \  \ \ \   __  \
00001BD4                          2023  *                 \ \  \_\\ \ \  \ \  \   \ \  \ \ \  \ \  \
00001BD4                          2024  *                  \ \_______\ \__\ \__\   \ \__\ \ \__\ \__\
00001BD4                          2025  *                   \|_______|\|__|\|__|    \|__|  \|__|\|__|
00001BD4                          2026  *
00001BD4                          2027  *-------------------------------------------------------------------------------
00001BD4                          2028  
00001BD4                          2029  
00001BD4                          2030  * Data for GET_INPUT
00001BD4= 50 6C 65 61 73 65 ...   2031  STRING_ENTER_START      DC.B    'Please enter a start address, eg. 4A6C',0
00001BFB= 50 6C 65 61 73 65 ...   2032  STRING_ENTER_END        DC.B    'Please enter a end address, eg. 5D3F',0
00001C20= 49 4E 56 41 4C 49 ...   2033  STRING_INVALID_INPUT    DC.B    'INVALID INPUT, must be a valid EASy68k hexidecimal memory address',0
00001C62= 53 74 61 72 74 20 ...   2034  STRING_OUT_OF_ORDER     DC.B    'Start address must be less than end address',0
00001C8E                          2035  
00001C8E                          2036  
00001C8E= 49 4C 4C 45 47 41 ...   2037  STRING_ILLEGAL              DC.B    'ILLEGAL',0
00001C96= 2E 42 20 00             2038  STRING_BYTE_DESIGNATOR      DC.B    '.B ',0
00001C9A= 2E 57 20 00             2039  STRING_WORD_DESIGNATOR      DC.B    '.W ',0
00001C9E= 2E 4C 20 00             2040  STRING_LONG_DESIGNATOR      DC.B    '.L ',0
00001CA2= 44 00                   2041  STRING_D                    DC.B    'D',0
00001CA4= 41 00                   2042  STRING_A                    DC.B    'A',0
00001CA6= 2C 00                   2043  STRING_COMMA                DC.B    ',',0
00001CA8= 28 00                   2044  STRING_LEFT_PAREN           DC.B    '(',0
00001CAA= 29 00                   2045  STRING_RIGHT_PAREN          DC.B    ')',0
00001CAC= 2B 00                   2046  STRING_PLUS                 DC.B    '+',0
00001CAE= 2D 00                   2047  STRING_MINUS                DC.B    '-',0
00001CB0= 23 00                   2048  STRING_POUND                DC.B    '#',0
00001CB2= 24 00                   2049  STRING_DOLLAR               DC.B    '$',0
00001CB4                          2050  
00001CB4= 20 20 20 20 00          2051  STRING_FOURSPACE            DC.B    '    ',0
00001CB9= 0D 0A 00                2052  STRING_NEWLINE              DC.B    '',CR,LF,0
00001CBC                          2053  
00001CBC= 41 53 52 00             2054  STRING_ASR                  DC.B    'ASR',0
00001CC0= 41 53 4C 00             2055  STRING_ASL                  DC.B    'ASL',0
00001CC4= 4C 53 52 00             2056  STRING_LSR                  DC.B    'LSR',0
00001CC8= 4C 53 4C 00             2057  STRING_LSL                  DC.B    'LSL',0
00001CCC= 52 4F 52 00             2058  STRING_ROR                  DC.B    'ROR',0
00001CD0= 52 4F 4C 00             2059  STRING_ROL                  DC.B    'ROL',0
00001CD4= 4E 4F 50 00             2060  STRING_NOP                  DC.B    'NOP',0
00001CD8= 52 54 53 00             2061  STRING_RTS                  DC.B    'RTS',0
00001CDC= 41 44 44 51 00          2062  STRING_ADDQ                 DC.B    'ADDQ',0
00001CE1= 41 44 44 00             2063  STRING_ADD                  DC.B    'ADD',0
00001CE5= 41 44 44 41 00          2064  STRING_ADDA                 DC.B    'ADDA',0
00001CEA= 42 45 51 20 00          2065  STRING_BEQ                  DC.B    'BEQ ',0
00001CEF= 42 4C 45 20 00          2066  STRING_BLE                  DC.B    'BLE ',0
00001CF4= 42 52 41 20 00          2067  STRING_BRA                  DC.B    'BRA ',0
00001CF9= 42 47 54 20 00          2068  STRING_BGT                  DC.B    'BGT ',0
00001CFE= 4A 53 52 20 20 20 ...   2069  STRING_JSR                  DC.B    'JSR    ',0
00001D06                          2070  
00001D06                          2071  MISC_NUMBER  DS.B    1    * MISC_NUMBER to be printed
00001D08                          2072  MISC_OPCODE  DS.W    1
00001D0A                          2073  MISC_REGISTER DS.B   1
00001D0B                          2074  
00001D0B                          2075  
00001D0B                          2076  
00001D0B                          2077      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 14A6
ADDA                1426
ADDA_CONTINUE       146E
ADDA_L              144E
ADDA_W              145E
ADDQ                151C
ADD_ADDA            13F8
ADD_ADDA_LOOP_ADD_W  1412
ADD_ADDA_LOOP_NO_ADD  1414
ASL                 11D6
ASR                 11C6
ASX                 11B4
BCC                 1330
BCC_16              13C4
BCC_32              13DE
BCC_CONTINUE        139A
BCC_END             13E8
BEQ                 138A
BGT                 136A
BLE                 137A
BRA                 135A
BRANCHBLOCK         10EE
CR                  D
DATA1               1016
DATA2               101A
DONE                10EA
END_ADDR            1004
GET_INPUT           1A3C
INITIALIZE          101E
JSR                 1578
JSR_EA_MODE_ELSE    15A2
JSR_FINISH          15DC
JSR_PUSH_EA_MODE_ID_AN_INDIRECT  15BE
JSR_PUSH_EA_MODE_ID_IND_LONG  15D2
JSR_PUSH_EA_MODE_ID_IND_SHORT  15C8
LF                  A
LOOP_INC            1010
LOOP_INDEX          1012
LSL                 11A4
LSR                 1194
LSX                 1182
LSX_ASX_ROX         1164
LSX_ASX_ROX_CONTINUE  1218
LSX_ASX_ROX_CONTINUE2  1320
LSX_ASX_ROX_MEM     1308
LSX_ASX_ROX_REGISTER  12C0
LSX_ASX_ROX_RESET_D7  132A
LSX_ASX_ROX_SHIFT   1246
LSX_ASX_ROX_SHIFT_8  1290
MISC_NUMBER         1D06
MISC_OPCODE         1D08
MISC_REGISTER       1D0A
NOP                 14E8
OPCODE_LOOP         10A4
OUT_OF_ORDER        1AA4
PRINTADDR           1A1A
PRINT_ADD           17DA
PRINT_ADDA          17EA
PRINT_ADDQ          1836
PRINT_ASL           1750
PRINT_ASR           1740
PRINT_BEQ           17BA
PRINT_BGT           179A
PRINT_BLE           17AA
PRINT_BRA           17CA
PRINT_BYTE_DESIGNATOR  1846
PRINT_COMMA         19EC
PRINT_COUNT         1008
PRINT_DATA1_LONG    1780
PRINT_DATA1_WORD    178A
PRINT_EA_MODE_ID_ABS_DATA  19A6
PRINT_EA_MODE_ID_AN  1894
PRINT_EA_MODE_ID_AN_INDIRECT  18B2
PRINT_EA_MODE_ID_AN_POST_INC  18E8
PRINT_EA_MODE_ID_AN_PRE_DEC  192A
PRINT_EA_MODE_ID_DN  1876
PRINT_EA_MODE_ID_IND_LONG  198C
PRINT_EA_MODE_ID_IND_SHORT  196C
PRINT_FOURSPACE     19DC
PRINT_ILLEGAL       19FC
PRINT_IMMEDIATE_NEWLINE  1A30
PRINT_JSR           19CC
PRINT_LONG_DESIGNATOR  1866
PRINT_LSL           1730
PRINT_LSR           1720
PRINT_MISC_NUMBER   17FA
PRINT_MISC_NUMBER_AS_ADDRESS  1810
PRINT_OPCODE        15E4
PRINT_OPCODE_LOOP   15EE
PRINT_OPCODE_LOOP_FINISH  1604
PRINT_OPCODE_LOOP_INDEX  100A
PRINT_OPCODE_LOOP_RETURN  15FE
PRINT_ROL           1770
PRINT_ROR           1760
PRINT_WORD_DESIGNATOR  1856
PUSH_BWL            16D8
PUSH_BWL_BYTE       16F4
PUSH_BWL_FINISH     1712
PUSH_BWL_LONG       1708
PUSH_BWL_WORD       16FE
PUSH_EA_MODE_ID     1610
PUSH_EA_MODE_ID_ABS_DATA  16BC
PUSH_EA_MODE_ID_AN  1656
PUSH_EA_MODE_ID_AN_INDIRECT  1660
PUSH_EA_MODE_ID_AN_POST_INC  166A
PUSH_EA_MODE_ID_AN_PRE_DEC  1674
PUSH_EA_MODE_ID_DN  164C
PUSH_EA_MODE_ID_ELSE  167E
PUSH_EA_MODE_ID_FINISH  16CA
PUSH_EA_MODE_ID_IND_LONG  16AE
PUSH_EA_MODE_ID_IND_SHORT  16A0
RESUME_ADD          140C
ROL                 1208
ROR                 11F8
ROX                 11E6
RTS                 1502
STACK_BASE          100C
START               101E
START_ADDR          1000
STH_BAD_INPUT       1AD0
STH_END             1ACE
STH_INCREASE_VALUE  1BCA
STH_SET_VALUE       1AE8
STH_SHIFT_BITS      1B8C
STH_UPDATE          1AC8
STRING_A            1CA4
STRING_ADD          1CE1
STRING_ADDA         1CE5
STRING_ADDQ         1CDC
STRING_ASL          1CC0
STRING_ASR          1CBC
STRING_BEQ          1CEA
STRING_BGT          1CF9
STRING_BLE          1CEF
STRING_BRA          1CF4
STRING_BYTE_DESIGNATOR  1C96
STRING_COMMA        1CA6
STRING_D            1CA2
STRING_DOLLAR       1CB2
STRING_ENTER_END    1BFB
STRING_ENTER_START  1BD4
STRING_FOURSPACE    1CB4
STRING_ILLEGAL      1C8E
STRING_INVALID_INPUT  1C20
STRING_JSR          1CFE
STRING_LEFT_PAREN   1CA8
STRING_LONG_DESIGNATOR  1C9E
STRING_LSL          1CC8
STRING_LSR          1CC4
STRING_MINUS        1CAE
STRING_NEWLINE      1CB9
STRING_NOP          1CD4
STRING_OUT_OF_ORDER  1C62
STRING_PLUS         1CAC
STRING_POUND        1CB0
STRING_RIGHT_PAREN  1CAA
STRING_ROL          1CD0
STRING_ROR          1CCC
STRING_RTS          1CD8
STRING_TO_HEX       1AB4
STRING_WORD_DESIGNATOR  1C9A
