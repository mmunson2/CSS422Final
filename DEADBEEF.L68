00001020 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 6/10/2020 10:33:19 PM

00000000                             1  *-------------------------------------------------------------------------------
00000000                             2  * Title      : PUSH_BWT / EA_MODE_ID Development
00000000                             3  * Written by : Ihsan Halimun, Camden Brewster, Matthew Munson
00000000                             4  * Created    : May 16th 2020
00000000                             5  * Last Edited: June 10th 2020
00000000                             6  *-------------------------------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  *-------------------------------------------------------------------------------
00001000                             9  *      ________   ___        ________   ________   ________   ___
00001000                            10  *     |\   ____\ |\  \      |\   __  \ |\   __  \ |\   __  \ |\  \
00001000                            11  *     \ \  \___| \ \  \     \ \  \|\  \\ \  \|\ /_\ \  \|\  \\ \  \
00001000                            12  *      \ \  \  ___\ \  \     \ \  \\\  \\ \   __  \\ \   __  \\ \  \
00001000                            13  *       \ \  \|\  \\ \  \____ \ \  \\\  \\ \  \|\  \\ \  \ \  \\ \  \____
00001000                            14  *        \ \_______\\ \_______\\ \_______\\ \_______\\ \__\ \__\\ \_______\
00001000                            15  *         \|_______| \|_______| \|_______| \|_______| \|__|\|__| \|_______|
00001000                            16  *-------------------------------------------------------------------------------
00001000                            17  
00001000                            18  START_ADDR   DS.L  1   *User defined memory start address
00001004                            19  END_ADDR     DS.L  1   *User defined memory end address
00001008                            20  
00001008  =0000000D                 21  CR    EQU   $0D
00001008  =0000000A                 22  LF    EQU   $0A
00001008                            23  
00001008                            24  * How many print statements are sitting in the stack:
00001008                            25  PRINT_COUNT              DS.W    1
0000100A                            26  
0000100A                            27  PRINT_OPCODE_LOOP_INDEX  DS.W    1   * The print loop index
0000100C                            28  STACK_BASE               DS.L    1   * Where the print calls start
00001010                            29  
00001010                            30  LOOP_INC       DS.W    1    * How many words to skip to find the next opcode
00001012                            31  LOOP_INDEX     DS.L    1    * The opcode loop's index
00001016                            32  
00001016                            33  
00001016                            34  DATA1          DS.L    1    * The first line of opcode data
0000101A                            35  DATA1_IN_USE   DS.W    1  * Boolean: Whether or not DATA1 is being used
0000101C                            36  
0000101C                            37  DATA2          DS.L    1    * The second line of opcode data
00001020                            38  
00001020                            39  START:
00001020                            40  
00001020                            41  *-------------------------------------------------------------------------------
00001020                            42  *                ________  ________  ________  _______
00001020                            43  *               |\   ____\|\   __  \|\   ___ \|\  ___ \
00001020                            44  *               \ \  \___|\ \  \|\  \ \  \_|\ \ \   __/|
00001020                            45  *                \ \  \    \ \  \\\  \ \  \ \\ \ \  \_|/__
00001020                            46  *                 \ \  \____\ \  \\\  \ \  \_\\ \ \  \_|\ \
00001020                            47  *                  \ \_______\ \_______\ \_______\ \_______\
00001020                            48  *                   \|_______|\|_______|\|_______|\|_______|
00001020                            49  *
00001020                            50  *-------------------------------------------------------------------------------
00001020                            51  
00001020                            52  *-------------------------------------------------------------------------------
00001020                            53  INITIALIZE
00001020  31FC E3F9 4000            54    MOVE.W #$E3F9,$4000
00001026  21FC 12345678 4002        55    MOVE.L #$12345678,$4002
0000102E                            56  * ------ Standard Initializations ------
0000102E  31FC 0000 1008            57    MOVE.W    #0, PRINT_COUNT
00001034  13FC 0000 00002B7A        58    MOVE.B    #0, MISC_NUMBER
0000103C  33FC 0000 00002B80        59    MOVE.W    #0, LINE_COUNT
00001044                            60  
00001044                            61    * Begin the user input loop
00001044  4EB9 000027B8             62    JSR GET_INPUT
0000104A                            63  
0000104A  2078 1000                 64    MOVEA.L  START_ADDR,A0
0000104E  21C8 1012                 65    MOVE.L   A0,LOOP_INDEX * Both A0 and LOOP_INDEX contain the start address
00001052                            66  
00001052                            67  
00001052                            68  
00001052                            69  *-------------------------------------------------------------------------------
00001052                            70  *    OPCODE LOOP
00001052                            71  *
00001052                            72  *    The disassembler's main loop. Gets the contents of a memory location,
00001052                            73  *    sends it to BRANCHBLOCK to be decoded and printed, and checks if we're
00001052                            74  *    at the user defined endpoint.
00001052                            75  *
00001052                            76  * ________________________________________
00001052                            77  * Register Use Summary:
00001052                            78  *
00001052                            79  * D7: CONST - The opcode to decode. Set before BRANCHBLOCK
00001052                            80  *
00001052                            81  * A0: The current Loop Index, updated before and after BRANCHBLOCK
00001052                            82  * A1: How much we should increment the loop index
00001052                            83  * A2: Local Variable - used for retrieving DATA
00001052                            84  *-------------------------------------------------------------------------------
00001052                            85  OPCODE_LOOP
00001052                            86  
00001052  2078 1012                 87      MOVEA.L LOOP_INDEX,A0
00001056  B1F8 1004                 88      CMP.L   END_ADDR,A0  * Check to see if we're done
0000105A  6E00 0082                 89      BGT     DONE
0000105E                            90  
0000105E                            91  * ------ Reset Loop Variables ------
0000105E  31FC 0000 1008            92      MOVE.W  #0,PRINT_COUNT  * Reset print count to zero
00001064  31FC 0000 1010            93      MOVE.W  #0,LOOP_INC     * Reset loop index increment to zero
0000106A  4287                      94      CLR.L   D7
0000106C                            95  
0000106C                            96  * ------ Get memory at loop index ------
0000106C  3E10                      97      MOVE.W  (A0),D7
0000106E                            98  
0000106E                            99  * ------ Fill DATA1 and DATA2 ------
0000106E  2448                     100      MOVEA.L  A0,A2
00001070  544A                     101      ADDA     #2,A2        * Increment by 1 word to get the long afterwards
00001072  21D2 1016                102      MOVE.L  (A2),DATA1   * Fill DATA1 with the long after the opcode
00001076  584A                     103      ADDA     #4,A2
00001078  21D2 101C                104      MOVE.L  (A2),DATA2   * Fill DATA2 with the long after DATA1
0000107C                           105  
0000107C  31FC 0000 101A           106      MOVE.W  #0,DATA1_IN_USE  * Reset data boolean
00001082  13FC 0000 00002B7A       107      MOVE.B  #0,MISC_NUMBER   * Reset MISC_NUMBER
0000108A  13FC 0000 00002B7E       108      MOVE.B  #0,MISC_REGISTER * Reset MISC_REGISTER
00001092                           109  
00001092                           110  * ------ Execute Subroutines ------
00001092  4EB9 00002458            111      JSR     PRINTADDR             * Print the memory address
00001098  4EB9 000010EC            112      JSR     BRANCHBLOCK           * Figure out what opcode this is and print
0000109E                           113  
0000109E                           114  
0000109E                           115  * ------ Increment Loop ------
0000109E  2078 1012                116      MOVEA.L     LOOP_INDEX,A0
000010A2  3278 1010                117      MOVEA.W     LOOP_INC,A1
000010A6  D0C9                     118      ADDA    A1,A0  * Move the index to the next opcode
000010A8  21C8 1012                119      MOVE.L  A0,LOOP_INDEX
000010AC                           120  
000010AC                           121  
000010AC                           122  * ------ Check for pause ------
000010AC  247C 00000000            123      MOVEA.L   #0,A2
000010B2  3479 00002B80            124      MOVEA.W   LINE_COUNT,A2
000010B8  524A                     125      ADDA.W    #1,A2
000010BA  33CA 00002B80            126      MOVE.W    A2,LINE_COUNT
000010C0                           127  
000010C0  B4FC 001E                128      CMP.W     #30,A2
000010C4  6C00 0006                129      BGE       OPCODE_LOOP_PAUSE
000010C8                           130  
000010C8                           131  
000010C8  6000 0010                132      BRA     OPCODE_LOOP_CONTINUE
000010CC                           133  
000010CC                           134  OPCODE_LOOP_PAUSE
000010CC  4EB9 0000247A            135      JSR     PAUSE_CONSOLE
000010D2  33FC 0000 00002B80       136      MOVE.W  #0, LINE_COUNT
000010DA                           137  
000010DA                           138  OPCODE_LOOP_CONTINUE
000010DA  6000 FF76                139      BRA     OPCODE_LOOP
000010DE                           140  
000010DE                           141  DONE
000010DE                           142  
000010DE  4EB9 0000247A            143      JSR     PAUSE_CONSOLE
000010E4  6000 1866                144      BRA     QUERY_CONTINUE
000010E8                           145  
000010E8  FFFF FFFF                146      SIMHALT
000010EC                           147  
000010EC                           148  
000010EC                           149  
000010EC                           150  *-------------------------------------------------------------------------------
000010EC                           151  *     BRANCHBLOCK
000010EC                           152  *
000010EC                           153  *  Decodes the opcode in D7 and jumps to the corresponding opcode subroutine
000010EC                           154  *
000010EC                           155  *  Because 1 line is pulled out of memory at a time, it's possible that the
000010EC                           156  *  next opcode only takes up one word, and it's in the upper word of the
000010EC                           157  *  opcode long (eg.4E71FFFF is NOP then empty). We must check for single word
000010EC                           158  *  opcodes before we use any of the data in the lower word of D7.
000010EC                           159  *________________________________________
000010EC                           160  * Register Use Summary:
000010EC                           161  *
000010EC                           162  * D0: General variable, cleared every use to be safe
000010EC                           163  * D1:
000010EC                           164  * D2:
000010EC                           165  * D3:
000010EC                           166  * D4: (Keep in mind this is parameter for BWL)
000010EC                           167  * D5:
000010EC                           168  * D6:
000010EC                           169  * D7: CONST - The opcode to decode - NO TOUCH
000010EC                           170  *________________________________________
000010EC                           171  * A0:
000010EC                           172  * A1:
000010EC                           173  * A2:
000010EC                           174  * A3:
000010EC                           175  * A4:
000010EC                           176  * A5:
000010EC                           177  * A6:
000010EC                           178  * A7:
000010EC                           179  *-------------------------------------------------------------------------------
000010EC                           180  BRANCHBLOCK
000010EC                           181  
000010EC  21CF 100C                182    MOVE.L  SP,STACK_BASE   * Save the position of the stack for later
000010F0                           183  
000010F0                           184  * ---- EMPTY MEMORY ----
000010F0  BEBC 0000FFFF            185    CMP.L   #$FFFF,D7
000010F6  6700 133A                186    BEQ     PRINT_NON_OPCODE_DATA
000010FA                           187  
000010FA                           188  * ---- CONSTANT OPCODES ----
000010FA  BE7C 4E71                189    CMP.W   #$4E71,D7
000010FE  6700 0C0C                190    BEQ     NOP
00001102                           191  
00001102  BE7C 4E75                192    CMP.W   #$4E75,D7
00001106  6700 0C1E                193    BEQ     RTS
0000110A                           194  
0000110A                           195  * ------ MOVE / MOVEA ------
0000110A  4280                     196    CLR.L   D0
0000110C  3007                     197    MOVE.W  D7,D0
0000110E                           198  
0000110E  E598                     199    ROL.L   #$02,D0 * Move the first two bits into the upper word
00001110  4840                     200    SWAP    D0      * Swap the upper word and the lower word
00001112                           201  
00001112  B07C 0000                202    CMP.W   #0,D0
00001116  6700 05B4                203    BEQ     MOVE_MOVEA
0000111A                           204  
0000111A                           205  * ------ MOVEQ ------
0000111A  4280                     206    CLR.L   D0
0000111C  4281                     207    CLR.L   D1
0000111E  3007                     208    MOVE.W  D7,D0
00001120                           209  
00001120  E058                     210    ROR.W   #$8,D0 * Check bit 8 to make sure it's zero
00001122  3200                     211    MOVE.W  D0,D1 * D1 is where we'll do the mask
00001124  0241 0001                212    ANDI.W  #1,D1 * Mask 1
00001128                           213  
00001128  B27C 0000                214    CMP.W   #0,D1
0000112C  6600 0010                215    BNE     BRANCHBLOCK_MOVEQ_END
00001130                           216  
00001130  E858                     217    ROR.W   #$4,D0 * Check bits 12-15 for 0111
00001132  C07C 000F                218    AND.W   #$F,D0
00001136  B03C 0007                219    CMP.B   #$7,D0
0000113A  6700 053A                220    BEQ     MOVEQ
0000113E                           221  
0000113E                           222  BRANCHBLOCK_MOVEQ_END * Go here if it's not MOVEQ
0000113E                           223  
0000113E                           224  * ------ MOVEM ------
0000113E  4280                     225    CLR.L   D0
00001140  3007                     226    MOVE.W  D7,D0
00001142                           227  
00001142  C07C FB80                228    AND.W   #$FB80,D0 * Mask 1111 1011 1000 0000
00001146  B07C 4880                229    CMP.W   #$4880,D0
0000114A                           230  
0000114A  6700 0364                231    BEQ     MOVEM
0000114E                           232  
0000114E                           233  * ---- NOT ----
0000114E  4280                     234    CLR.L   D0
00001150  3007                     235    MOVE.W  D7,D0
00001152  C07C FF00                236    AND.W   #$FF00,D0
00001156  B07C 4600                237    CMP.W   #$4600,D0
0000115A  6700 0116                238    BEQ     NOT
0000115E                           239  
0000115E                           240  * ---- LEA ----
0000115E  4280                     241    CLR.L   D0
00001160  3007                     242    MOVE.W  D7,D0
00001162  C07C F1C0                243    AND.W   #$F1C0,D0
00001166  B07C 41C0                244    CMP.W   #$41C0,D0
0000116A  6700 008C                245    BEQ     LEA
0000116E                           246  
0000116E                           247  * ---- ADDQ ----
0000116E  4280                     248    CLR.L   D0
00001170  3007                     249    MOVE.W  D7,D0
00001172  4840                     250    SWAP    D0
00001174  E998                     251    ROL.L   #$04,D0
00001176  C03C 000F                252    AND.B   #$F,D0
0000117A  B03C 0005                253    CMP.B   #5,D0
0000117E  6700 0B18                254    BEQ     ADDQ
00001182                           255  
00001182                           256  * ---- ADDA / ADD ----
00001182  4280                     257    CLR.L   D0
00001184  3007                     258    MOVE.W  D7,D0   *DXXX
00001186  C07C F000                259    AND.W   #$F000,D0
0000118A  B07C D000                260    CMP.W   #$D000,D0
0000118E  6700 09DE                261    BEQ     ADD_ADDA
00001192                           262  
00001192                           263  * ---- SUB ----
00001192  4280                     264    CLR.L   D0
00001194  3007                     265    MOVE.W  D7,D0
00001196  C07C F000                266    AND.W   #$F000,D0
0000119A  B07C 9000                267    CMP.W   #$9000,D0
0000119E  6700 0272                268    BEQ     SUB
000011A2                           269  
000011A2                           270  * ---- OR ----
000011A2  4280                     271    CLR.L   D0
000011A4  3007                     272    MOVE.W  D7,D0
000011A6  C07C F000                273    AND.W   #$F000,D0
000011AA  B07C 8000                274    CMP.W   #$8000,D0
000011AE  6700 01B2                275    BEQ     OR
000011B2                           276  
000011B2                           277  * ---- AND ----
000011B2  4280                     278    CLR.L   D0
000011B4  3007                     279    MOVE.W  D7,D0
000011B6  C07C F000                280    AND.W   #$F000,D0
000011BA  B07C C000                281    CMP.W   #$C000,D0
000011BE  6700 00F2                282    BEQ     AND
000011C2                           283  
000011C2                           284  * ---- BCC ----
000011C2  4280                     285    CLR.L   D0
000011C4  2007                     286    MOVE.L  D7,D0
000011C6  C07C F000                287    AND.W   #$F000,D0
000011CA  B07C 6000                288    CMP.W   #$6000,D0
000011CE  6700 08D6                289    BEQ     BCC
000011D2                           290  
000011D2                           291  * ---- LSX_ASX_ROR ----
000011D2  4280                     292    CLR.L   D0
000011D4  2007                     293    MOVE.L  D7,D0
000011D6  C07C F000                294    AND.W   #$F000,D0
000011DA  B07C E000                295    CMP.W   #$E000,D0
000011DE  6700 06D6                296    BEQ     LSX_ASX_ROX
000011E2                           297  
000011E2                           298  * ---- JSR ----
000011E2  4280                     299    CLR.L   D0
000011E4  3007                     300    MOVE.W  D7,D0
000011E6  C07C FFC0                301    AND.W   #$FFC0,D0   * Mask opcode to get first 10 bits only
000011EA                           302  
000011EA  EC40                     303    ASR.W   #6,D0
000011EC  B07C 013A                304    CMP     #$13A,D0
000011F0  6700 0B4E                305    BEQ     JSR
000011F4                           306  
000011F4                           307  * ---- Data is not recognized as opcode ----
000011F4                           308  
000011F4  6000 123C                309    BRA     PRINT_NON_OPCODE_DATA
000011F8                           310  
000011F8                           311  
000011F8                           312  *-------------------------------------------------------------------------------
000011F8                           313  * ________   ________   ________   ________   ________   _______
000011F8                           314  *|\   __  \ |\   __  \ |\   ____\ |\   __  \ |\   ___ \ |\  ___ \
000011F8                           315  *\ \  \|\  \\ \  \|\  \\ \  \___| \ \  \|\  \\ \  \_|\ \\ \   __/|
000011F8                           316  * \ \  \\\  \\ \   ____\\ \  \     \ \  \\\  \\ \  \ \\ \\ \  \_|/__
000011F8                           317  *  \ \  \\\  \\ \  \___| \ \  \____ \ \  \\\  \\ \  \_\\ \\ \  \_|\ \
000011F8                           318  *   \ \_______\\ \__\     \ \_______\\ \_______\\ \_______\\ \_______\
000011F8                           319  *    \|_______| \|__|      \|_______| \|_______| \|_______| \|_______|
000011F8                           320  *
000011F8                           321  *-------------------------------------------------------------------------------
000011F8                           322  
000011F8                           323  *-------------------------------------------------------------------------------
000011F8                           324  * LEA
000011F8                           325  *
000011F8                           326  * Load Effective address
000011F8                           327  *
000011F8                           328  * "LEA" -> "    " -> <ea> -> "," -> An
000011F8                           329  *
000011F8                           330  * Effective address does not allow Dn, An, (An)+, -(An)
000011F8                           331  *-------------------------------------------------------------------------------
000011F8                           332  LEA
000011F8                           333  
000011F8                           334    * ------ Print "LEA" ------
000011F8  4BF9 000023DA            335    LEA     PRINT_LEA,A5    * Load the print subroutine into intermediate address
000011FE  2F0D                     336    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001200  5878 1008                337    ADD.W   #4,PRINT_COUNT
00001204                           338  
00001204                           339    * ------ Print some spaces ------
00001204  4BF9 000023EA            340    LEA     PRINT_FOURSPACE,A5    * Load the print subroutine into temp
0000120A  2F0D                     341    MOVE.L  A5, -(SP)             * Put the print subroutine jump onto the stack
0000120C  5878 1008                342    ADD.W   #4,PRINT_COUNT
00001210                           343  
00001210                           344    * ------ Dn,An,(An)+,-(An) are not allowed ------
00001210  4280                     345    CLR.L   D0
00001212  1007                     346    MOVE.B  D7,D0 * Put opcode in D0
00001214  C03C 0038                347    AND.B   #$38,D0   * Mask D0 with 0111000 to get MODE bits only
00001218  E600                     348    ASR.B   #3,D0 * Shift the result so D0 ranges between 000 and 111
0000121A                           349  
0000121A  B03C 0000                350    CMP.B   #0,D0         *000 -> Register
0000121E  6700 11FA                351    BEQ     PRINT_ILLEGAL
00001222  B03C 0001                352    CMP.B   #1,D0         *001 -> Address Register
00001226  6700 11F2                353    BEQ     PRINT_ILLEGAL
0000122A  B03C 0003                354    CMP.B   #3,D0         *011 -> Address Register  (Indirect)+
0000122E  6700 11EA                355    BEQ     PRINT_ILLEGAL
00001232  B03C 0004                356    CMP.B   #4,D0         *100 -> Address Register -(Indirect)
00001236  6700 11E2                357    BEQ     PRINT_ILLEGAL
0000123A                           358  
0000123A                           359    * ------ Print the effective address ------
0000123A  2C07                     360    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
0000123C  4EB9 00001DD8            361    JSR     PUSH_EA_MODE_ID
00001242                           362  
00001242                           363  * ------ Print a comma ------
00001242  4BF9 0000240A            364    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001248  2F0D                     365    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000124A  5878 1008                366    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000124E                           367  
0000124E                           368  * ------ Get Destination Address ------
0000124E  2007                     369    MOVE.L    D7,D0
00001250  E058                     370    ROR.W     #$8,D0 * Get the three register bits
00001252  E258                     371    ROR.W     #$1,D0
00001254  C07C 0007                372    AND.W     #$7,D0 * Mask 111
00001258                           373  
00001258  13C0 00002B7A            374    MOVE.B    D0,MISC_NUMBER
0000125E                           375  
0000125E                           376  * ------ Print Destination Address ------
0000125E  4BF9 00001FEA            377    LEA       PRINT_MISC_NUMBER_AS_ADDRESS,A5
00001264  2F0D                     378    MOVE.L    A5, -(SP)       * Put the print subroutine jump onto the stack
00001266  5878 1008                379    ADD.W     #4,PRINT_COUNT
0000126A                           380  
0000126A                           381  
0000126A  5478 1010                382    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
0000126E                           383  
0000126E  6000 0B3C                384    BRA   PRINT_OPCODE
00001272                           385  
00001272                           386  
00001272                           387  *-------------------------------------------------------------------------------
00001272                           388  * NOT
00001272                           389  *
00001272                           390  * "NOT" -> <.Size> -> <ea>
00001272                           391  *
00001272                           392  * Effective address does not allow An
00001272                           393  *-------------------------------------------------------------------------------
00001272                           394  NOT
00001272                           395  
00001272                           396  * ------ Print "NOT" ------
00001272  4BF9 000023CA            397    LEA     PRINT_NOT,A5    * Load the print subroutine into intermediate address
00001278  2F0D                     398    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000127A  5878 1008                399    ADD.W   #4,PRINT_COUNT
0000127E                           400  
0000127E                           401    * ------ Print size ------
0000127E  4280                     402      CLR.L   D0
00001280  2007                     403      MOVE.L  D7,D0
00001282                           404  
00001282  EC58                     405      ROR.W   #06,D0     * Get bits 7,6 on end
00001284  C03C 0003                406      AND.B   #03,D0     * Isolate bits 7,6
00001288                           407  
00001288  1800                     408      MOVE.B   D0,D4      * Move bits 7,6 to D4 for BWL
0000128A  4EB9 00001EB2            409      JSR      PUSH_BWL
00001290                           410  
00001290                           411  
00001290                           412    * ------ An is not allowed ------
00001290  4280                     413    CLR.L   D0
00001292  1007                     414    MOVE.B  D7,D0 * Put opcode in D0
00001294  C03C 0038                415    AND.B   #$38,D0   * Mask D0 with 0111000 to get MODE bits only
00001298  E600                     416    ASR.B   #3,D0 * Shift the result so D0 ranges between 000 and 111
0000129A                           417  
0000129A  B03C 0001                418    CMP.B   #1,D0         *001 -> Address Register
0000129E  6700 117A                419    BEQ     PRINT_ILLEGAL
000012A2                           420  
000012A2                           421    * ------ Print the effective address ------
000012A2  2C07                     422    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
000012A4  4EB9 00001DD8            423    JSR     PUSH_EA_MODE_ID
000012AA                           424  
000012AA  5478 1010                425    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
000012AE                           426  
000012AE  6000 0AFC                427    BRA   PRINT_OPCODE
000012B2                           428  
000012B2                           429  
000012B2                           430  *-------------------------------------------------------------------------------
000012B2                           431  * AND
000012B2                           432  *
000012B2                           433  *-------------------------------------------------------------------------------
000012B2                           434  AND
000012B2                           435  
000012B2                           436  * ------ Print "AND" ------
000012B2  4BF9 000021B4            437    LEA     PRINT_AND,A5    * Load the print subroutine into intermediate address
000012B8  2F0D                     438    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000012BA  5878 1008                439    ADD.W   #4,PRINT_COUNT
000012BE                           440  
000012BE                           441  * ------ Print size ------
000012BE  4280                     442    CLR.L    D0
000012C0  2007                     443    MOVE.L   D7,D0
000012C2                           444  
000012C2  EC58                     445    ROR.W    #06,D0     * Get bits 7,6 on end
000012C4  C03C 0003                446    AND.B    #03,D0     * Isolate bits 7,6
000012C8                           447  
000012C8  1800                     448    MOVE.B   D0,D4     * Move bits 7,6 to D4 for BWL
000012CA  4EB9 00001EB2            449    JSR      PUSH_BWL
000012D0                           450  
000012D0                           451  * ------ Reset D0, determine order ------
000012D0  2007                     452    MOVE.L  D7,D0
000012D2  E058                     453    ROR.W   #08,D0     * Get bit 8 on the end
000012D4  C07C 0001                454    AND.W   #1,D0
000012D8                           455  
000012D8                           456    * If bit 8 == 0 the order is <ea> AND Dn
000012D8                           457    * If bit 8 == 1 the order is Dn AND <ea>
000012D8                           458  
000012D8  B03C 0001                459    CMP.B   #1,D0
000012DC  6700 004C                460    BEQ     AND_DN_FIRST
000012E0                           461  
000012E0                           462  * ------ Print order is effective address, data register ------
000012E0                           463  AND_EA_FIRST
000012E0                           464  
000012E0                           465    * ------ An is not allowed ------
000012E0  4280                     466    CLR.L   D0
000012E2  1007                     467    MOVE.B  D7,D0 * Put opcode in D0
000012E4  C03C 0038                468    AND.B   #$38,D0   * Mask D0 with 0111000 to get MODE bits only
000012E8  E600                     469    ASR.B   #3,D0 * Shift the result so D0 ranges between 000 and 111
000012EA                           470  
000012EA  B03C 0001                471    CMP.B   #1,D0         *001 -> Address Register
000012EE  6700 112A                472    BEQ     PRINT_ILLEGAL
000012F2                           473  
000012F2                           474    * ------ Print the effective address ------
000012F2  2C07                     475    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
000012F4  4EB9 00001DD8            476    JSR     PUSH_EA_MODE_ID
000012FA                           477  
000012FA                           478    * ------ Print a comma ------
000012FA  4BF9 0000240A            479    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001300  2F0D                     480    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001302  5878 1008                481    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001306                           482  
00001306                           483    * ------ Determine the register number ------
00001306  2007                     484    MOVE.L  D7,D0
00001308  E058                     485    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
0000130A  E258                     486    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
0000130C  C07C 0007                487    AND.W   #7,D0 * Mask against 111 to only get 3 bits
00001310                           488  
00001310                           489    * ------ Print the register number ------
00001310  13C0 00002B7A            490    MOVE.B  D0,MISC_NUMBER
00001316  4BF9 00002010            491    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
0000131C  2F0D                     492    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000131E  5878 1008                493    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001322                           494  
00001322  5478 1010                495    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
00001326                           496  
00001326  6000 0A84                497    BRA   PRINT_OPCODE
0000132A                           498  
0000132A                           499  
0000132A                           500  * ------ Print order is data register, effective address ------
0000132A                           501  AND_DN_FIRST
0000132A                           502  
0000132A                           503  
0000132A                           504    * ------ Determine the register number ------
0000132A  2007                     505    MOVE.L  D7,D0
0000132C  E058                     506    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
0000132E  E258                     507    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
00001330  C07C 0007                508    AND.W   #7,D0 * Mask against 111 to only get 3 bits
00001334                           509  
00001334                           510    * ------ Print the register number ------
00001334  13C0 00002B7A            511    MOVE.B  D0,MISC_NUMBER
0000133A  4BF9 00002010            512    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
00001340  2F0D                     513    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001342  5878 1008                514    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001346                           515  
00001346                           516    * ------ Print a comma ------
00001346  4BF9 0000240A            517    LEA     PRINT_COMMA,A5   * Load the print subroutine
0000134C  2F0D                     518    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000134E  5878 1008                519    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001352                           520  
00001352                           521    * ------ Print the effective address ------
00001352  2C07                     522    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001354  4EB9 00001DD8            523    JSR     PUSH_EA_MODE_ID
0000135A                           524  
0000135A  5478 1010                525    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
0000135E                           526  
0000135E  6000 0A4C                527    BRA   PRINT_OPCODE
00001362                           528  
00001362                           529  
00001362                           530  *-------------------------------------------------------------------------------
00001362                           531  * OR
00001362                           532  *
00001362                           533  *
00001362                           534  *-------------------------------------------------------------------------------
00001362                           535  OR
00001362                           536  
00001362                           537  * ------ Print "OR" ------
00001362  4BF9 000021C4            538    LEA     PRINT_OR,A5    * Load the print subroutine into intermediate address
00001368  2F0D                     539    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000136A  5878 1008                540    ADD.W   #4,PRINT_COUNT
0000136E                           541  
0000136E                           542  * ------ Print size ------
0000136E  4280                     543    CLR.L   D0
00001370  2007                     544    MOVE.L  D7,D0
00001372                           545  
00001372  EC58                     546    ROR.W   #06,D0     * Get bits 7,6 on end
00001374  C03C 0003                547    AND.B   #03,D0     * Isolate bits 7,6
00001378                           548  
00001378  1800                     549    MOVE.B   D0,D4            * Move bits 7,6 to D4 for BWL
0000137A  4EB9 00001EB2            550    JSR      PUSH_BWL
00001380                           551  
00001380                           552  * ------ Reset D0, determine order ------
00001380  2007                     553    MOVE.L  D7,D0
00001382  E058                     554    ROR.W   #08,D0     * Get bit 8 on the end
00001384  C07C 0001                555    AND.W   #1,D0
00001388                           556  
00001388                           557    * If bit 8 == 0 the order is <ea> OR Dn
00001388                           558    * If bit 8 == 1 the order is Dn OR <ea>
00001388                           559  
00001388                           560  
00001388  B03C 0001                561    CMP.B   #1,D0
0000138C  6700 004C                562    BEQ     OR_DN_FIRST
00001390                           563  
00001390                           564  * ------ Print order is effective address, data register ------
00001390                           565  OR_EA_FIRST
00001390                           566  
00001390                           567    * ------ An is not allowed ------
00001390  4280                     568    CLR.L   D0
00001392  1007                     569    MOVE.B  D7,D0 * Put opcode in D0
00001394  C03C 0038                570    AND.B   #$38,D0   * Mask D0 with 0111000 to get MODE bits only
00001398  E600                     571    ASR.B   #3,D0 * Shift the result so D0 ranges between 000 and 111
0000139A                           572  
0000139A  B03C 0001                573    CMP.B   #1,D0         *001 -> Address Register
0000139E  6700 107A                574    BEQ     PRINT_ILLEGAL
000013A2                           575  
000013A2                           576    * ------ Print the effective address ------
000013A2  2C07                     577    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
000013A4  4EB9 00001DD8            578    JSR     PUSH_EA_MODE_ID
000013AA                           579  
000013AA                           580    * ------ Print a comma ------
000013AA  4BF9 0000240A            581    LEA     PRINT_COMMA,A5   * Load the print subroutine
000013B0  2F0D                     582    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000013B2  5878 1008                583    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000013B6                           584  
000013B6                           585    * ------ Determine the register number ------
000013B6  2007                     586    MOVE.L  D7,D0
000013B8  E058                     587    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
000013BA  E258                     588    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
000013BC  C07C 0007                589    AND.W   #7,D0 * Mask against 111 to only get 3 bits
000013C0                           590  
000013C0                           591    * ------ Print the register number ------
000013C0  13C0 00002B7A            592    MOVE.B  D0,MISC_NUMBER
000013C6  4BF9 00002010            593    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
000013CC  2F0D                     594    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000013CE  5878 1008                595    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000013D2                           596  
000013D2  5478 1010                597    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
000013D6                           598  
000013D6  6000 09D4                599    BRA   PRINT_OPCODE
000013DA                           600  
000013DA                           601  
000013DA                           602  * ------ Print order is data register, effective address ------
000013DA                           603  OR_DN_FIRST
000013DA                           604  
000013DA                           605  
000013DA                           606    * ------ Determine the register number ------
000013DA  2007                     607    MOVE.L  D7,D0
000013DC  E058                     608    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
000013DE  E258                     609    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
000013E0  C07C 0007                610    AND.W   #7,D0 * Mask against 111 to only get 3 bits
000013E4                           611  
000013E4                           612    * ------ Print the register number ------
000013E4  13C0 00002B7A            613    MOVE.B  D0,MISC_NUMBER
000013EA  4BF9 00002010            614    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
000013F0  2F0D                     615    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000013F2  5878 1008                616    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000013F6                           617  
000013F6                           618    * ------ Print a comma ------
000013F6  4BF9 0000240A            619    LEA     PRINT_COMMA,A5   * Load the print subroutine
000013FC  2F0D                     620    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000013FE  5878 1008                621    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001402                           622  
00001402                           623    * ------ Print the effective address ------
00001402  2C07                     624    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001404  4EB9 00001DD8            625    JSR     PUSH_EA_MODE_ID
0000140A                           626  
0000140A  5478 1010                627    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
0000140E                           628  
0000140E  6000 099C                629    BRA   PRINT_OPCODE
00001412                           630  
00001412                           631  
00001412                           632  
00001412                           633  
00001412                           634  *-------------------------------------------------------------------------------
00001412                           635  * SUB
00001412                           636  *
00001412                           637  *
00001412                           638  *-------------------------------------------------------------------------------
00001412                           639  SUB
00001412                           640  
00001412                           641  * ------ Print "SUB" ------
00001412  4BF9 000021A4            642    LEA     PRINT_SUB,A5    * Load the print subroutine into intermediate address
00001418  2F0D                     643    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000141A  5878 1008                644    ADD.W   #4,PRINT_COUNT
0000141E                           645  
0000141E                           646  * ------ Print size ------
0000141E  4280                     647    CLR.L   D0
00001420  2007                     648    MOVE.L  D7,D0
00001422                           649  
00001422  EC58                     650    ROR.W   #06,D0     * Get bits 7,6 on end
00001424  C03C 0003                651    AND.B   #03,D0     * Isolate bits 7,6
00001428                           652  
00001428  1800                     653    MOVE.B   D0,D4            * Move bits 7,6 to D4 for BWL
0000142A  4EB9 00001EB2            654    JSR      PUSH_BWL
00001430                           655  
00001430                           656  * ------ Reset D0, determine order ------
00001430  2007                     657    MOVE.L  D7,D0
00001432  E058                     658    ROR.W   #08,D0     * Get bit 8 on the end
00001434  C07C 0001                659    AND.W   #1,D0
00001438                           660  
00001438                           661    * If bit 8 == 0 the order is Dn - <ea>
00001438                           662    * If bit 8 == 1 the order is <ea> - Dn
00001438                           663  
00001438  B03C 0000                664    CMP.B   #0,D0
0000143C  6700 003A                665    BEQ     SUB_DN_FIRST
00001440                           666  
00001440                           667  * ------ Print order is effective address, data register ------
00001440                           668  SUB_EA_FIRST
00001440                           669  
00001440                           670  
00001440                           671    * ------ Print the effective address ------
00001440  2C07                     672    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001442  4EB9 00001DD8            673    JSR     PUSH_EA_MODE_ID
00001448                           674  
00001448                           675    * ------ Print a comma ------
00001448  4BF9 0000240A            676    LEA     PRINT_COMMA,A5   * Load the print subroutine
0000144E  2F0D                     677    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001450  5878 1008                678    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001454                           679  
00001454                           680    * ------ Determine the register number ------
00001454  2007                     681    MOVE.L  D7,D0
00001456  E058                     682    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
00001458  E258                     683    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
0000145A  C07C 0007                684    AND.W   #7,D0 * Mask against 111 to only get 3 bits
0000145E                           685  
0000145E                           686    * ------ Print the register number ------
0000145E  13C0 00002B7A            687    MOVE.B  D0,MISC_NUMBER
00001464  4BF9 00002010            688    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
0000146A  2F0D                     689    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000146C  5878 1008                690    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001470                           691  
00001470  5478 1010                692    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
00001474                           693  
00001474  6000 0936                694    BRA   PRINT_OPCODE
00001478                           695  
00001478                           696  
00001478                           697  * ------ Print order is data register, effective address ------
00001478                           698  SUB_DN_FIRST
00001478                           699  
00001478                           700  
00001478                           701    * ------ Determine the register number ------
00001478  2007                     702    MOVE.L  D7,D0
0000147A  E058                     703    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
0000147C  E258                     704    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
0000147E  C07C 0007                705    AND.W   #7,D0 * Mask against 111 to only get 3 bits
00001482                           706  
00001482                           707    * ------ Print the register number ------
00001482  13C0 00002B7A            708    MOVE.B  D0,MISC_NUMBER
00001488  4BF9 00002010            709    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
0000148E  2F0D                     710    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001490  5878 1008                711    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001494                           712  
00001494                           713    * ------ Print a comma ------
00001494  4BF9 0000240A            714    LEA     PRINT_COMMA,A5   * Load the print subroutine
0000149A  2F0D                     715    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000149C  5878 1008                716    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000014A0                           717  
000014A0                           718    * ------ Print the effective address ------
000014A0  2C07                     719    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
000014A2  4EB9 00001DD8            720    JSR     PUSH_EA_MODE_ID
000014A8                           721  
000014A8  5478 1010                722    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
000014AC                           723  
000014AC  6000 08FE                724    BRA   PRINT_OPCODE
000014B0                           725  
000014B0                           726  
000014B0                           727  
000014B0                           728  
000014B0                           729  
000014B0                           730  
000014B0                           731  *-------------------------------------------------------------------------------
000014B0                           732  * MOVEM
000014B0                           733  *
000014B0                           734  *
000014B0                           735  *-------------------------------------------------------------------------------
000014B0                           736  MOVEM
000014B0                           737  
000014B0                           738  * ------ Check for ILLEGAL ------
000014B0                           739  * Bits 7-9 must equal 001
000014B0  4280                     740    CLR.L   D0
000014B2  3007                     741    MOVE.W  D7,D0
000014B4                           742  
000014B4  EE58                     743    ROR.W   #7,D0 * Shift to bit 7
000014B6  C07C 0007                744    AND.W   #7,D0 * Mask 111
000014BA                           745  
000014BA  B03C 0001                746    CMP.B   #1,D0
000014BE  6600 0F5A                747    BNE     PRINT_ILLEGAL
000014C2                           748  
000014C2                           749  
000014C2                           750  * ------ Put List Mask in MISC_OPCODE ------
000014C2  2038 1016                751    MOVE.L    DATA1,D0
000014C6  4840                     752    SWAP      D0
000014C8  33C0 00002B7C            753    MOVE.W    D0,MISC_OPCODE
000014CE                           754  
000014CE                           755  * ------ Shift so DATA1 is standard ------
000014CE                           756  * The Effective Address Subroutine expects data in DATA1
000014CE                           757  * So we've moved the List Mask to MISC_OPCODE
000014CE                           758  * and shifted everything back 1 word so it fits nicely
000014CE                           759  
000014CE  2238 101C                760    MOVE.L    DATA2,D1
000014D2  4841                     761    SWAP      D1
000014D4                           762  
000014D4  3001                     763    MOVE.W    D1,D0
000014D6  21C0 1016                764    MOVE.L    D0,DATA1
000014DA                           765  
000014DA                           766  * ------ Print "MOVEM" ------
000014DA                           767  
000014DA  4BF9 00002194            768    LEA     PRINT_MOVEM,A5
000014E0  2F0D                     769    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000014E2  5878 1008                770    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000014E6                           771  
000014E6                           772  * ------ Get Size Bit ------
000014E6  4280                     773    CLR.L   D0
000014E8  3007                     774    MOVE.W  D7,D0
000014EA                           775  
000014EA  EC58                     776    ROR.W   #6,D0 * Bit 6 is size bit
000014EC  C07C 0001                777    AND.W   #1,D0 * Mask 0001
000014F0                           778  
000014F0                           779  * ------ Size Branching ------
000014F0  B03C 0000                780    CMP.B   #0,D0 * 0 = Word
000014F4  6700 0016                781    BEQ     MOVEM_SIZE_WORD
000014F8  6600 0002                782    BNE     MOVEM_SIZE_LONG
000014FC                           783  
000014FC                           784  * ------ Print ".L" ------
000014FC                           785  MOVEM_SIZE_LONG
000014FC                           786  
000014FC  4BF9 000021F4            787    LEA     PRINT_LONG_DESIGNATOR,A5 * Load the ".L" print subroutine
00001502  2F0D                     788    MOVE.L  A5, -(SP)       * Put the subroutine onto the stack
00001504  5878 1008                789    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001508                           790  
00001508  6000 0012                791    BRA   MOVEM_SIZE_CONTINUE
0000150C                           792  
0000150C                           793  * ------ Print ".W" ------
0000150C                           794  MOVEM_SIZE_WORD
0000150C                           795  
0000150C  4BF9 000021E4            796    LEA     PRINT_WORD_DESIGNATOR,A5 * Load the ".W" print subroutine
00001512  2F0D                     797    MOVE.L  A5, -(SP)         * Put the subroutine onto the stack
00001514  5878 1008                798    ADD.W   #4,PRINT_COUNT    * Increment Print Count by 1 long
00001518                           799  
00001518  6000 0002                800    BRA   MOVEM_SIZE_CONTINUE
0000151C                           801  
0000151C                           802  MOVEM_SIZE_CONTINUE
0000151C                           803  
0000151C                           804  * ------ Get the direction bit ------
0000151C  4280                     805    CLR.L   D0
0000151E  3007                     806    MOVE.W  D7,D0
00001520                           807  
00001520  E058                     808    ROR.W   #8,D0   * Get bit 10
00001522  E458                     809    ROR.W   #2,D0
00001524                           810  
00001524  C07C 0001                811    AND.W   #1,D0   * Mask 0000 0001
00001528                           812  
00001528  B03C 0001                813    CMP.B   #1,D0
0000152C  6700 0006                814    BEQ     MOVEM_MEM2REG * If direction bit is 1, do memory -> register(s)
00001530                           815  
00001530  6000 009E                816    BRA     MOVEM_REG2MEM * else, do register(s) -> memory
00001534                           817  
00001534                           818  
00001534                           819  *-------------------------------------------------------------------------------
00001534                           820  * MOVEM_MEM2REG
00001534                           821  *
00001534                           822  * • Do modified EA_MODE first
00001534                           823  *   • (An), (An)+, (xxx).W, (xxx).L only!
00001534                           824  * • Then push MOVEM register print
00001534                           825  *-------------------------------------------------------------------------------
00001534                           826  MOVEM_MEM2REG
00001534                           827  
00001534                           828  
00001534                           829  * ---- Custom Branching Block ----
00001534  4280                     830    CLR.L     D0
00001536  4286                     831    CLR.L     D6
00001538  1007                     832    MOVE.B    D7,D0 * Copy opcode into local variable
0000153A  3C07                     833    MOVE.W    D7,D6
0000153C                           834  
0000153C  C03C 0038                835    AND.B     #$38,D0 * Mask D0 with 0111000 to get MODE bits only
00001540  E600                     836    ASR.B     #3,D0   * Shift the result so D0 ranges between 000 and 111
00001542  1200                     837    MOVE.B    D0,D1 * Save result for later.
00001544                           838  
00001544  B03C 0002                839    CMP.B     #2,D0
00001548  6700 0032                840    BEQ       MOVEM_MEM2REG_AN_IND
0000154C  B03C 0003                841    CMP.B     #3,D0
00001550  6700 0034                842    BEQ       MOVEM_MEM2REG_POST_INC
00001554  B03C 0007                843    CMP.B     #7,D0
00001558  6700 0006                844    BEQ       MOVEM_MEM2REG_ELSE
0000155C                           845  
0000155C  6000 0EBC                846    BRA       PRINT_ILLEGAL
00001560                           847  
00001560                           848  MOVEM_MEM2REG_ELSE
00001560                           849  
00001560  4280                     850    CLR.L   D0
00001562  1007                     851    MOVE.B  D7,D0
00001564  C03C 0007                852    AND.B   #7,D0
00001568                           853  
00001568  B03C 0000                854    CMP.B   #0,D0
0000156C  6700 0022                855    BEQ     MOVEM_MEM2REG_IND_SHORT
00001570  B03C 0001                856    CMP.B   #1,D0
00001574  6700 0024                857    BEQ     MOVEM_MEM2REG_IND_LONG
00001578                           858  
00001578  6000 0EA0                859    BRA     PRINT_ILLEGAL
0000157C                           860  
0000157C                           861  *________________________________________
0000157C                           862  * Jump directly into the middle of
0000157C                           863  * the PUSH_EA_MODE subroutine
0000157C                           864  *----------------------------------------
0000157C                           865  MOVEM_MEM2REG_AN_IND
0000157C                           866  
0000157C  4EB9 00001E28            867    JSR     PUSH_EA_MODE_ID_AN_INDIRECT
00001582  6000 0020                868    BRA     MOVEM_MEM2REG_EA_FINISH
00001586                           869  *________________________________________
00001586                           870  * Jump directly into the middle of
00001586                           871  * the PUSH_EA_MODE subroutine
00001586                           872  *----------------------------------------
00001586                           873  MOVEM_MEM2REG_POST_INC
00001586                           874  
00001586  4EB9 00001E32            875    JSR     PUSH_EA_MODE_ID_AN_POST_INC
0000158C  6000 0016                876    BRA     MOVEM_MEM2REG_EA_FINISH
00001590                           877  
00001590                           878  *________________________________________
00001590                           879  * Jump directly into the middle of
00001590                           880  * the PUSH_EA_MODE subroutine
00001590                           881  *----------------------------------------
00001590                           882  MOVEM_MEM2REG_IND_SHORT
00001590                           883  
00001590  4EB9 00001E68            884    JSR   PUSH_EA_MODE_ID_IND_SHORT
00001596  6000 000C                885    BRA   MOVEM_MEM2REG_EA_FINISH
0000159A                           886  
0000159A                           887  *________________________________________
0000159A                           888  * Jump directly into the middle of
0000159A                           889  * the PUSH_EA_MODE subroutine
0000159A                           890  *----------------------------------------
0000159A                           891  MOVEM_MEM2REG_IND_LONG
0000159A                           892  
0000159A  4EB9 00001E7C            893    JSR   PUSH_EA_MODE_ID_IND_LONG
000015A0  6000 0002                894    BRA     MOVEM_MEM2REG_EA_FINISH
000015A4                           895  
000015A4                           896  *________________________________________
000015A4                           897  * Jump directly into the middle of
000015A4                           898  * the PUSH_EA_MODE subroutine
000015A4                           899  *----------------------------------------
000015A4                           900  MOVEM_MEM2REG_EA_FINISH
000015A4                           901  
000015A4  4BF9 0000240A            902    LEA     PRINT_COMMA,A5   * Load the print subroutine
000015AA  2F0D                     903    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000015AC  5878 1008                904    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000015B0                           905  
000015B0  4BF9 000023FA            906    LEA     PRINT_SPACE,A5   * Load the print subroutine
000015B6  2F0D                     907    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000015B8  5878 1008                908    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000015BC                           909  
000015BC  4BF9 00002488            910    LEA     PRINT_MOVEM_STANDARD,A5   * Load the print subroutine
000015C2  2F0D                     911    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000015C4  5878 1008                912    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000015C8                           913  
000015C8                           914  
000015C8  5878 1010                915    ADD.W  #4,LOOP_INC     * Increment the loop counter by 2 bytes
000015CC                           916  
000015CC  6000 07DE                917    BRA   PRINT_OPCODE
000015D0                           918  
000015D0                           919  
000015D0                           920  *-------------------------------------------------------------------------------
000015D0                           921  * MOVEM_REG2MEM
000015D0                           922  *
000015D0                           923  * • Push MOVEM register print first
000015D0                           924  * • Then do modified EA_MODE
000015D0                           925  *     • (An), -(An), (xxx).W, (xxx.L) only!
000015D0                           926  *
000015D0                           927  *-------------------------------------------------------------------------------
000015D0                           928  MOVEM_REG2MEM
000015D0                           929  
000015D0                           930  
000015D0                           931    * ---- Custom Branching Block ----
000015D0  4280                     932      CLR.L     D0
000015D2  4286                     933      CLR.L     D6
000015D4  1007                     934      MOVE.B    D7,D0 * Copy opcode into local variable
000015D6  3C07                     935      MOVE.W    D7,D6
000015D8                           936  
000015D8  C03C 0038                937      AND.B     #$38,D0 * Mask D0 with 0111000 to get MODE bits only
000015DC  E600                     938      ASR.B     #3,D0 * Shift the result so D0 ranges between 000 and 111
000015DE                           939  
000015DE  B03C 0002                940      CMP.B     #2,D0
000015E2  6700 0032                941      BEQ       MOVEM_REG2MEM_AN_IND
000015E6  B03C 0004                942      CMP.B     #4,D0
000015EA  6700 0040                943      BEQ       MOVEM_REG2MEM_PRE_DEC
000015EE  B03C 0007                944      CMP.B     #7,D0
000015F2  6700 0006                945      BEQ       MOVEM_REG2MEM_ELSE
000015F6                           946  
000015F6  6000 0E22                947      BRA       PRINT_ILLEGAL
000015FA                           948  
000015FA                           949  MOVEM_REG2MEM_ELSE
000015FA                           950  
000015FA  4280                     951      CLR.L   D0
000015FC  1007                     952      MOVE.B  D7,D0
000015FE  C03C 0007                953      AND.B   #7,D0
00001602                           954  
00001602  B03C 0000                955      CMP.B   #0,D0
00001606  6700 003A                956      BEQ     MOVEM_REG2MEM_IND_SHORT
0000160A  B03C 0001                957      CMP.B   #1,D0
0000160E  6700 0048                958      BEQ     MOVEM_REG2MEM_IND_LONG
00001612                           959  
00001612  6000 0E06                960      BRA     PRINT_ILLEGAL
00001616                           961  
00001616                           962  *________________________________________
00001616                           963  * Jump directly into the middle of
00001616                           964  * the PUSH_EA_MODE subroutine
00001616                           965  *----------------------------------------
00001616                           966  MOVEM_REG2MEM_AN_IND
00001616                           967  
00001616  4BF9 00002488            968      LEA     PRINT_MOVEM_STANDARD,A5   * Load the print subroutine
0000161C  2F0D                     969      MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000161E  5878 1008                970      ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001622                           971  
00001622  4EB9 00001E28            972      JSR     PUSH_EA_MODE_ID_AN_INDIRECT
00001628  6000 0044                973      BRA     MOVEM_REG2MEM_EA_FINISH
0000162C                           974  *________________________________________
0000162C                           975  * Jump directly into the middle of
0000162C                           976  * the PUSH_EA_MODE subroutine
0000162C                           977  *----------------------------------------
0000162C                           978  MOVEM_REG2MEM_PRE_DEC
0000162C                           979  
0000162C  4BF9 00002620            980      LEA     PRINT_MOVEM_REVERSE,A5   * Load the print subroutine
00001632  2F0D                     981      MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001634  5878 1008                982      ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001638                           983  
00001638  4EB9 00001E3C            984      JSR     PUSH_EA_MODE_ID_AN_PRE_DEC
0000163E  6000 002E                985      BRA     MOVEM_REG2MEM_EA_FINISH
00001642                           986  
00001642                           987  *________________________________________
00001642                           988  * Jump directly into the middle of
00001642                           989  * the PUSH_EA_MODE subroutine
00001642                           990  *----------------------------------------
00001642                           991  MOVEM_REG2MEM_IND_SHORT
00001642                           992  
00001642  4BF9 00002488            993      LEA     PRINT_MOVEM_STANDARD,A5   * Load the print subroutine
00001648  2F0D                     994      MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000164A  5878 1008                995      ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000164E                           996  
0000164E                           997  
0000164E  4EB9 00001E68            998      JSR   PUSH_EA_MODE_ID_IND_SHORT
00001654  6000 0018                999      BRA   MOVEM_REG2MEM_EA_FINISH
00001658                          1000  
00001658                          1001  *________________________________________
00001658                          1002  * Jump directly into the middle of
00001658                          1003  * the PUSH_EA_MODE subroutine
00001658                          1004  *----------------------------------------
00001658                          1005  MOVEM_REG2MEM_IND_LONG
00001658                          1006  
00001658  4BF9 00002488           1007      LEA     PRINT_MOVEM_STANDARD,A5   * Load the print subroutine
0000165E  2F0D                    1008      MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001660  5878 1008               1009      ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001664                          1010  
00001664  4EB9 00001E7C           1011      JSR   PUSH_EA_MODE_ID_IND_LONG
0000166A  6000 0002               1012      BRA     MOVEM_REG2MEM_EA_FINISH
0000166E                          1013  
0000166E                          1014  *________________________________________
0000166E                          1015  * Jump directly into the middle of
0000166E                          1016  * the PUSH_EA_MODE subroutine
0000166E                          1017  *----------------------------------------
0000166E                          1018  MOVEM_REG2MEM_EA_FINISH
0000166E                          1019  
0000166E  5878 1010               1020    ADD.W  #4,LOOP_INC     * Increment the loop counter by 2 bytes
00001672                          1021  
00001672  6000 0738               1022    BRA   PRINT_OPCODE
00001676                          1023  
00001676                          1024  
00001676                          1025  *-------------------------------------------------------------------------------
00001676                          1026  * MOVEQ
00001676                          1027  * Assumption: Bit 8 is checked for zero so this subroutine is always valid
00001676                          1028  *
00001676                          1029  *-------------------------------------------------------------------------------
00001676                          1030  MOVEQ
00001676                          1031  
00001676  4280                    1032    CLR.L   D0
00001678  3007                    1033    MOVE.W  D7,D0
0000167A                          1034  
0000167A                          1035  * ------ Print "MOVEQ" ------
0000167A                          1036  
0000167A  4BF9 00002184           1037    LEA     PRINT_MOVEQ,A5
00001680  2F0D                    1038    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001682  5878 1008               1039    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001686                          1040  
00001686                          1041  * ------ Print Data ------
00001686                          1042  
00001686  C07C 00FF               1043    AND.W   #$FF,D0 * Get bits 0-7
0000168A  13C0 00002B7A           1044    MOVE.B  D0,MISC_NUMBER
00001690                          1045  
00001690  4BF9 0000212E           1046    LEA     PRINT_MISC_NUMBER_AS_DATA,A5   * Load the print subroutine
00001696  2F0D                    1047    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001698  5878 1008               1048    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
0000169C                          1049  
0000169C                          1050  * ------ Print a comma ------
0000169C  4BF9 0000240A           1051    LEA     PRINT_COMMA,A5   * Load the print subroutine
000016A2  2F0D                    1052    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000016A4  5878 1008               1053    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000016A8                          1054  
000016A8                          1055  * ------ Print Register ------
000016A8                          1056  
000016A8  3007                    1057    MOVE.W  D7,D0
000016AA  E058                    1058    ROR.W   #8,D0 *Shift to get bits 9 - 11
000016AC  E258                    1059    ROR.W   #1,D0
000016AE                          1060  
000016AE  C07C 0007               1061    AND.W   #7,D0 * Mask 111
000016B2  13C0 00002B7E           1062    MOVE.B  D0,MISC_REGISTER
000016B8                          1063  
000016B8  4BF9 00002036           1064    LEA     PRINT_MISC_REGISTER,A5   * Load the print subroutine
000016BE  2F0D                    1065    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000016C0  5878 1008               1066    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000016C4                          1067  
000016C4  5478 1010               1068    ADD.W  #2,LOOP_INC     * Increment the loop counter by 2 bytes
000016C8                          1069  
000016C8  6000 06E2               1070    BRA   PRINT_OPCODE
000016CC                          1071  
000016CC                          1072  
000016CC                          1073  
000016CC                          1074  
000016CC                          1075  *-------------------------------------------------------------------------------
000016CC                          1076  * MOVE_MOVEA
000016CC                          1077  *
000016CC                          1078  * Both opcodes start with 00 so we need to figure out which is which
000016CC                          1079  *-------------------------------------------------------------------------------
000016CC                          1080  MOVE_MOVEA
000016CC  4280                    1081      CLR.L   D0
000016CE  3007                    1082      MOVE.W  D7,D0
000016D0                          1083  
000016D0  EC58                    1084      ROR     #$6,D0    *Get bits 6, 7, and 8
000016D2  0200 0007               1085      ANDI.B  #$07,D0   * Mask against 111
000016D6                          1086  
000016D6  0C00 0001               1087      CMPI.B  #1,D0     * If bits equal 001, it's MOVEA
000016DA  6700 015A               1088      BEQ     MOVEA
000016DE                          1089  
000016DE  6000 0002               1090      BRA     MOVE      * Else it's MOVE
000016E2                          1091  
000016E2                          1092  *-------------------------------------------------------------------------------
000016E2                          1093  * MOVE
000016E2                          1094  *
000016E2                          1095  * This hurts me
000016E2                          1096  *
000016E2                          1097  *-------------------------------------------------------------------------------
000016E2                          1098  MOVE
000016E2                          1099  
000016E2  2007                    1100    MOVE.L    D7,D0 * Load the print subroutine into intermediate address
000016E4                          1101  
000016E4                          1102  * ------ Print "MOVE" ------
000016E4                          1103  
000016E4  4BF9 00002164           1104    LEA       PRINT_MOVE,A5
000016EA  2F0D                    1105    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000016EC  5878 1008               1106    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000016F0                          1107  
000016F0                          1108  * ------ Determine Size ------
000016F0  E058                    1109    ROR.W   #$8,D0 * Shift a total of 12 bits to retrieve SIZE designator
000016F2  E858                    1110    ROR.W   #$4,D0
000016F4  C07C 0007               1111    AND.W   #$7,D0 * Mask 111
000016F8                          1112  
000016F8  4284                    1113    CLR.L   D4 * Clear D4 for use as BWL parameter
000016FA                          1114  
000016FA  B03C 0001               1115    CMP.B   #1,D0
000016FE  6700 0016               1116    BEQ     MOVE_B
00001702  B03C 0003               1117    CMP.B   #3,D0
00001706  6700 001C               1118    BEQ     MOVE_W
0000170A  B03C 0002               1119    CMP.B   #2,D0
0000170E  6700 0022               1120    BEQ     MOVE_L
00001712                          1121  
00001712  6000 0D06               1122    BRA     PRINT_ILLEGAL
00001716                          1123  
00001716                          1124  * ------ Size Branching ------
00001716                          1125  * MOVE uses a nonstandard size code. We convert it to the standard so we can
00001716                          1126  * easily use the existing PUSH_BWL subroutine
00001716                          1127  MOVE_B
00001716  183C 0000               1128    MOVE.B  #0,D4
0000171A  4EB9 00001EB2           1129    JSR     PUSH_BWL
00001720  6000 001E               1130    BRA     MOVE_SIZE_CONTINUE
00001724                          1131  
00001724                          1132  MOVE_W
00001724  183C 0001               1133    MOVE.B  #1,D4
00001728  4EB9 00001EB2           1134    JSR     PUSH_BWL
0000172E  6000 0010               1135    BRA     MOVE_SIZE_CONTINUE
00001732                          1136  
00001732                          1137  MOVE_L
00001732  183C 0002               1138    MOVE.B  #2,D4
00001736  4EB9 00001EB2           1139    JSR     PUSH_BWL
0000173C  6000 0002               1140    BRA     MOVE_SIZE_CONTINUE
00001740                          1141  
00001740                          1142  MOVE_SIZE_CONTINUE
00001740                          1143  
00001740                          1144  * ------ Print Source ------
00001740  2C07                    1145    MOVE.L    D7,D6
00001742  4EB9 00001DD8           1146    JSR       PUSH_EA_MODE_ID
00001748                          1147  
00001748                          1148  * ------ Print a comma ------
00001748  4BF9 0000240A           1149    LEA     PRINT_COMMA,A5   * Load the print subroutine
0000174E  2F0D                    1150    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001750  5878 1008               1151    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001754                          1152  
00001754                          1153  * ------ Print Destination ------
00001754                          1154  * Unfortunately our PUSH_EA_MODE_ID wasn't designed for this :/
00001754                          1155  
00001754  2007                    1156    MOVE.L    D7,D0 * D0 holds MODE bits
00001756  2207                    1157    MOVE.L    D7,D1 * D1 holds REGISTER bits
00001758                          1158  
00001758  EC58                    1159    ROR.W     #$6,D0 * Get the three mode bits
0000175A  C07C 0007               1160    AND.W     #$7,D0 * Mask 111
0000175E                          1161  
0000175E  E059                    1162    ROR.W     #$8,D1 * Get the three register bits
00001760  E259                    1163    ROR.W     #$1,D1
00001762  C27C 0007               1164    AND.W     #$7,D1 * Mask 111
00001766                          1165  
00001766                          1166  * ---- Branching Block ----
00001766                          1167  
00001766                          1168  
00001766  13C1 00002B7A           1169    MOVE.B  D1,MISC_NUMBER * For modes that print the register bits as a number
0000176C                          1170  
0000176C  B03C 0000               1171    CMP.B   #0,D0         *000 -> Register
00001770  6700 0026               1172    BEQ     MOVE_MODE_DN
00001774  B03C 0002               1173    CMP.B   #2,D0         *010 -> Address Register   Indirect
00001778  6700 0028               1174    BEQ     MOVE_MODE_AN_INDIRECT
0000177C  B03C 0003               1175    CMP.B   #3,D0         *011 -> Address Register  (Indirect)+
00001780  6700 002A               1176    BEQ     MOVE_MODE_AN_POST_INC
00001784  B03C 0004               1177    CMP.B   #4,D0         *100 -> Address Register -(Indirect)
00001788  6700 002C               1178    BEQ     MOVE_MODE_AN_PRE_DEC
0000178C  B03C 0007               1179    CMP.B   #7,D0         *111 -> All Data Operations
00001790  6700 002E               1180    BEQ     MOVE_MODE_ELSE
00001794                          1181  
00001794  6000 0C84               1182    BRA     PRINT_ILLEGAL
00001798                          1183  
00001798                          1184  *________________________________________
00001798                          1185  * Load Register Print Label
00001798                          1186  *----------------------------------------
00001798                          1187  MOVE_MODE_DN
00001798  4BF9 00002010           1188    LEA   PRINT_MISC_NUMBER_AS_REGISTER,A5
0000179E  6000 0088               1189    BRA   MOVE_MODE_FINISH
000017A2                          1190  *________________________________________
000017A2                          1191  * Load (Address Register) Print Label
000017A2                          1192  *----------------------------------------
000017A2                          1193  MOVE_MODE_AN_INDIRECT
000017A2  4BF9 000020F0           1194    LEA   PRINT_MISC_ADDRESS_IND,A5
000017A8  6000 007E               1195    BRA   MOVE_MODE_FINISH
000017AC                          1196  *________________________________________
000017AC                          1197  * Load (Address Register)+ Print Label
000017AC                          1198  *----------------------------------------
000017AC                          1199  MOVE_MODE_AN_POST_INC
000017AC  4BF9 000020A6           1200    LEA   PRINT_MISC_POST_INC,A5
000017B2  6000 0074               1201    BRA   MOVE_MODE_FINISH
000017B6                          1202  *________________________________________
000017B6                          1203  * Load -(Address Register) Print Label
000017B6                          1204  *----------------------------------------
000017B6                          1205  MOVE_MODE_AN_PRE_DEC
000017B6  4BF9 0000205C           1206    LEA   PRINT_MISC_PRE_DEC,A5
000017BC  6000 006A               1207    BRA   MOVE_MODE_FINISH
000017C0                          1208  
000017C0                          1209  *________________________________________
000017C0                          1210  * Handle Data Branching Logic
000017C0                          1211  *----------------------------------------
000017C0                          1212  MOVE_MODE_ELSE
000017C0                          1213  
000017C0  B23C 0000               1214      CMP.B   #0,D1
000017C4  6700 000A               1215      BEQ     MOVE_MODE_IND_SHORT
000017C8                          1216  
000017C8  B23C 0001               1217      CMP.B   #1,D1
000017CC  6700 002E               1218      BEQ     MOVE_MODE_IND_LONG
000017D0                          1219  
000017D0                          1220  * ------ Data is short ------
000017D0                          1221  MOVE_MODE_IND_SHORT
000017D0  0C78 0001 101A          1222      CMP.W  #1,DATA1_IN_USE
000017D6  6700 0016               1223      BEQ     MOVE_MODE_IND_SHORT_DATA2
000017DA  5478 1010               1224      ADD.W           #2, LOOP_INC * Adjust the Loop increment to skip the data
000017DE  31FC 0001 101A          1225      MOVE.W  #1,DATA1_IN_USE
000017E4                          1226  
000017E4  4BF9 000022FA           1227      LEA     PRINT_EA_MODE_ID_IND_SHORT,A5
000017EA  6000 003C               1228      BRA     MOVE_MODE_FINISH
000017EE                          1229  
000017EE                          1230  * ------ Data is short, DATA1 is in use ------
000017EE                          1231  MOVE_MODE_IND_SHORT_DATA2
000017EE  5478 1010               1232      ADD.W           #2, LOOP_INC * Adjust the Loop increment to skip the data
000017F2                          1233  
000017F2  4BF9 0000231A           1234      LEA     PRINT_EA_MODE_ID_IND_SHORT_DATA2,A5
000017F8  6000 002E               1235      BRA     MOVE_MODE_FINISH
000017FC                          1236  
000017FC                          1237  * ------ Data is Long ------
000017FC                          1238  MOVE_MODE_IND_LONG
000017FC  0C78 0001 101A          1239      CMP.W  #1,DATA1_IN_USE
00001802  6700 0016               1240      BEQ     MOVE_MODE_IND_LONG_DATA2
00001806                          1241  
00001806  4BF9 0000233A           1242      LEA     PRINT_EA_MODE_ID_IND_LONG,A5
0000180C  5878 1010               1243      ADD.W           #4,LOOP_INC * Adjust the Loop increment to skip the data
00001810  31FC 0001 101A          1244      MOVE.W  #1,DATA1_IN_USE
00001816  6000 0010               1245      BRA     MOVE_MODE_FINISH
0000181A                          1246  
0000181A                          1247  
0000181A                          1248  * ------ Data is Long, DATA1 is in use ------
0000181A                          1249  MOVE_MODE_IND_LONG_DATA2
0000181A                          1250  
0000181A  4BF9 00002354           1251      LEA     PRINT_EA_MODE_ID_IND_LONG_DATA2,A5
00001820  5878 1010               1252      ADD.W           #4,LOOP_INC * Adjust the Loop increment to skip the data
00001824  6000 0002               1253      BRA     MOVE_MODE_FINISH
00001828                          1254  
00001828                          1255  
00001828                          1256  MOVE_MODE_FINISH
00001828                          1257  
00001828  2F0D                    1258    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000182A  5878 1008               1259    ADD.W           #4,PRINT_COUNT
0000182E                          1260  
0000182E  5478 1010               1261    ADD.W  #2,LOOP_INC     * Increment the loop counter by 2 bytes
00001832                          1262  
00001832  6000 0578               1263    BRA   PRINT_OPCODE
00001836                          1264  
00001836                          1265  
00001836                          1266  *-------------------------------------------------------------------------------
00001836                          1267  * MOVEA
00001836                          1268  *
00001836                          1269  *
00001836                          1270  *-------------------------------------------------------------------------------
00001836                          1271  MOVEA
00001836                          1272  
00001836  2007                    1273    MOVE.L    D7,D0 * Load the print subroutine into intermediate address
00001838                          1274  
00001838                          1275  * ------ Print "MOVEA" ------
00001838                          1276  
00001838  4BF9 00002174           1277    LEA     PRINT_MOVEA,A5
0000183E  2F0D                    1278    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001840  5878 1008               1279    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001844                          1280  
00001844                          1281  * ------ Determine Size ------
00001844  E058                    1282    ROR.W   #$8,D0 * Shift a total of 12 bits to retrieve SIZE designator
00001846  E858                    1283    ROR.W   #$4,D0
00001848  C07C 0007               1284    AND.W   #$7,D0 * Mask 111
0000184C                          1285  
0000184C  4284                    1286    CLR.L   D4 * Clear D4 for use as BWL parameter
0000184E                          1287  
0000184E  B03C 0003               1288    CMP.B   #3,D0
00001852  6700 000E               1289    BEQ     MOVEA_W
00001856  B03C 0002               1290    CMP.B   #2,D0
0000185A  6700 0014               1291    BEQ     MOVEA_L
0000185E                          1292  
0000185E  6000 0BBA               1293    BRA     PRINT_ILLEGAL
00001862                          1294  
00001862                          1295  
00001862                          1296  * ------ Size Branching ------
00001862                          1297  * MOVEA uses a nonstandard size code. We convert it to the standard so we can
00001862                          1298  * easily use the existing PUSH_BWL subroutine
00001862                          1299  MOVEA_W
00001862  183C 0001               1300    MOVE.B  #1,D4
00001866  4EB9 00001EB2           1301    JSR     PUSH_BWL
0000186C  6000 0010               1302    BRA     MOVEA_SIZE_CONTINUE
00001870                          1303  
00001870                          1304  MOVEA_L
00001870  183C 0002               1305    MOVE.B  #2,D4
00001874  4EB9 00001EB2           1306    JSR     PUSH_BWL
0000187A  6000 0002               1307    BRA     MOVEA_SIZE_CONTINUE
0000187E                          1308  
0000187E                          1309  MOVEA_SIZE_CONTINUE
0000187E                          1310  
0000187E                          1311  * ------ Print Source ------
0000187E  2C07                    1312    MOVE.L    D7,D6
00001880  4EB9 00001DD8           1313    JSR       PUSH_EA_MODE_ID
00001886                          1314  
00001886                          1315  * ------ Print a comma ------
00001886  4BF9 0000240A           1316    LEA     PRINT_COMMA,A5   * Load the print subroutine
0000188C  2F0D                    1317    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
0000188E  5878 1008               1318    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001892                          1319  
00001892                          1320  * ------ Get Destination Address ------
00001892  2007                    1321    MOVE.L    D7,D0
00001894  E058                    1322    ROR.W     #$8,D0 * Get the three register bits
00001896  E258                    1323    ROR.W     #$1,D0
00001898  C07C 0007               1324    AND.W     #$7,D0 * Mask 111
0000189C                          1325  
0000189C  13C0 00002B7A           1326    MOVE.B    D0,MISC_NUMBER
000018A2                          1327  
000018A2                          1328  * ------ Print Destination Address ------
000018A2  4BF9 00001FEA           1329    LEA       PRINT_MISC_NUMBER_AS_ADDRESS,A5
000018A8  2F0D                    1330    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000018AA  5878 1008               1331    ADD.W           #4,PRINT_COUNT
000018AE                          1332  
000018AE  5478 1010               1333    ADD.W  #2,LOOP_INC     * Increment the loop counter by 2 bytes
000018B2                          1334  
000018B2  6000 04F8               1335    BRA   PRINT_OPCODE
000018B6                          1336  
000018B6                          1337  *-------------------------------------------------------------------------------
000018B6                          1338  *   LSX_ASX_ROX
000018B6                          1339  *
000018B6                          1340  *
000018B6                          1341  *-------------------------------------------------------------------------------
000018B6                          1342  LSX_ASX_ROX
000018B6  2007                    1343    MOVE.L    D7,D0      * Reset D0
000018B8  C07C FEC0               1344    AND.W     #$FEC0,D0
000018BC                          1345     
000018BC                          1346  * ------ Arithmetic Shift MEM ------   
000018BC  B07C E0C0               1347    CMP.W #$E0C0,D0
000018C0  6700 0066               1348    BEQ   ASX
000018C4                          1349  
000018C4                          1350  * ------ Logical Shift MEM -----
000018C4  B07C E2C0               1351    CMP.W #$E2C0,D0
000018C8  6700 002C               1352    BEQ   LSX
000018CC                          1353  
000018CC                          1354  * ------ Rotate MEM ------
000018CC  B07C E6C0               1355    CMP.W #$E6C0,D0
000018D0  6700 0088               1356    BEQ   ROX
000018D4                          1357    
000018D4  2007                    1358    MOVE.L    D7,D0      * Reset D0  
000018D6  C07C 0018               1359    AND.W     #$18,D0  * Isolate bits 4,3 
000018DA                          1360    
000018DA                          1361  * ------ Arithmetic Shift ------
000018DA  B07C 0000               1362    CMP.W #0,D0
000018DE  6700 0048               1363    BEQ   ASX
000018E2                          1364  
000018E2                          1365  * ------ Logical Shift ------
000018E2  B07C 0008               1366    CMP.W #8,D0
000018E6  6700 000E               1367    BEQ   LSX
000018EA                          1368  
000018EA                          1369  * ------ Rotate ------
000018EA  B07C 0018               1370    CMP.W #$18,D0
000018EE  6700 006A               1371    BEQ   ROX
000018F2                          1372  
000018F2  6000 0B26               1373    BRA   PRINT_ILLEGAL
000018F6                          1374  *______________________________
000018F6                          1375  *Determine Logical Shift Direction
000018F6                          1376  *------------------------------
000018F6                          1377  LSX
000018F6  2007                    1378    MOVE.L    D7,D0      * Reset D0
000018F8  C07C 0100               1379    AND.W     #$100,D0   * Isolate bit 8
000018FC  B07C 0000               1380    CMP.W     #0,D0
00001900  6700 0006               1381    BEQ       LSR
00001904  6000 0012               1382    BRA       LSL
00001908                          1383  
00001908                          1384  *______________________________
00001908                          1385  * Logical Shift Right
00001908                          1386  *------------------------------
00001908                          1387  LSR
00001908  4BF9 00001EFA           1388    LEA     PRINT_LSR,A5    * Load the print subroutine into intermediate address
0000190E  2F0D                    1389    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001910  5878 1008               1390    ADD.W   #4,PRINT_COUNT
00001914                          1391  
00001914  6000 0076               1392    BRA     LSX_ASX_ROX_CONTINUE
00001918                          1393  
00001918                          1394  *______________________________
00001918                          1395  * Logical Shift Left
00001918                          1396  *------------------------------
00001918                          1397  LSL
00001918  4BF9 00001F0A           1398    LEA     PRINT_LSL,A5    * Load the print subroutine into intermediate address
0000191E  2F0D                    1399    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001920  5878 1008               1400    ADD.W   #4,PRINT_COUNT
00001924                          1401  
00001924  6000 0066               1402    BRA     LSX_ASX_ROX_CONTINUE
00001928                          1403  
00001928                          1404  *______________________________
00001928                          1405  *Determine Arithmetic Shift Direction
00001928                          1406  *------------------------------
00001928                          1407  ASX
00001928  2007                    1408    MOVE.L    D7,D0      * Reset D0
0000192A  C07C 0100               1409    AND.W     #$100,D0   * Isolate bit 8
0000192E  B07C 0000               1410    CMP.W     #0,D0
00001932  6700 0006               1411    BEQ       ASR
00001936  6000 0012               1412    BRA       ASL
0000193A                          1413  
0000193A                          1414  *______________________________
0000193A                          1415  * Arithmetic Shift Right
0000193A                          1416  *------------------------------
0000193A                          1417  ASR
0000193A  4BF9 00001F1A           1418    LEA     PRINT_ASR,A5    * Load the print subroutine into intermediate address
00001940  2F0D                    1419    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001942  5878 1008               1420    ADD.W   #4,PRINT_COUNT
00001946                          1421  
00001946  6000 0044               1422    BRA     LSX_ASX_ROX_CONTINUE
0000194A                          1423  
0000194A                          1424  *______________________________
0000194A                          1425  * Arithmetic Shift Left
0000194A                          1426  *------------------------------
0000194A                          1427  ASL
0000194A  4BF9 00001F2A           1428    LEA     PRINT_ASL,A5    * Load the print subroutine into intermediate address
00001950  2F0D                    1429    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001952  5878 1008               1430    ADD.W   #4,PRINT_COUNT
00001956                          1431  
00001956  6000 0034               1432    BRA     LSX_ASX_ROX_CONTINUE
0000195A                          1433  
0000195A                          1434  *______________________________
0000195A                          1435  * Determine Rotate Direction
0000195A                          1436  *------------------------------
0000195A                          1437  ROX
0000195A  2007                    1438    MOVE.L    D7,D0      * Reset D0
0000195C  C07C 0100               1439    AND.W     #$100,D0   * Isolate bit 8
00001960  B07C 0000               1440    CMP.W     #0,D0
00001964  6700 0006               1441    BEQ       ROR
00001968  6000 0012               1442    BRA       ROL
0000196C                          1443  
0000196C                          1444  *______________________________
0000196C                          1445  * Rotate Right
0000196C                          1446  *------------------------------
0000196C                          1447  ROR
0000196C  4BF9 00001F3A           1448    LEA     PRINT_ROR,A5    * Load the print subroutine into intermediate address
00001972  2F0D                    1449    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001974  5878 1008               1450    ADD.W   #4,PRINT_COUNT
00001978                          1451  
00001978  6000 0012               1452    BRA     LSX_ASX_ROX_CONTINUE
0000197C                          1453  
0000197C                          1454  *______________________________
0000197C                          1455  * Rotate Left
0000197C                          1456  *------------------------------
0000197C                          1457  ROL
0000197C  4BF9 00001F4A           1458    LEA     PRINT_ROL,A5    * Load the print subroutine into intermediate address
00001982  2F0D                    1459    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001984  5878 1008               1460    ADD.W   #4,PRINT_COUNT
00001988                          1461  
00001988  6000 0002               1462    BRA     LSX_ASX_ROX_CONTINUE
0000198C                          1463  
0000198C                          1464  *______________________________
0000198C                          1465  * All Subroutine Continue
0000198C                          1466  *------------------------------
0000198C                          1467  LSX_ASX_ROX_CONTINUE
0000198C  2007                    1468    MOVE.L    D7,D0      * Reset D0
0000198E  EC98                    1469    ROR.L     #$06,D0    * Isolate bits 7,6
00001990  C0BC 00000003           1470    AND.L     #3,D0
00001996  4284                    1471    CLR.L     D4
00001998  1800                    1472    MOVE.B    D0,D4      * Move bits 7,6 to D4 for BWL
0000199A                          1473  
0000199A  B03C 0003               1474    CMP.B     #3,D0
0000199E  6700 00CE               1475    BEQ       LSX_ASX_ROX_MEM
000019A2                          1476  
000019A2  4EB9 00001EB2           1477    JSR PUSH_BWL
000019A8                          1478  
000019A8  2007                    1479    MOVE.L    D7,D0      * Reset D0
000019AA  C07C 0020               1480    AND.W     #$20,D0    * Isolate bit 5
000019AE  B07C 0000               1481    CMP.W     #0,D0
000019B2  6700 0006               1482    BEQ       LSX_ASX_ROX_SHIFT
000019B6  6000 007C               1483    BRA       LSX_ASX_ROX_REGISTER
000019BA                          1484  
000019BA                          1485  *__________________________________
000019BA                          1486  * Print the number of bits to shift
000019BA                          1487  *----------------------------------
000019BA                          1488  LSX_ASX_ROX_SHIFT
000019BA  2007                    1489    MOVE.L  D7,D0             * Reset D0
000019BC  C0BC 00000E00           1490    AND.L   #$E00,D0           * Get bits 11 - 9
000019C2  B0BC 00000000           1491    CMP.L   #0,D0
000019C8  6700 003A               1492    BEQ     LSX_ASX_ROX_SHIFT_8  * If 0, shift count is 8
000019CC                          1493  
000019CC  21FC 00000000 1016      1494    MOVE.L  #0,DATA1
000019D4  E080                    1495    ASR.L   #$8,D0
000019D6  E280                    1496    ASR.L   #$1,D0
000019D8  21C0 1016               1497    MOVE.L  D0,DATA1
000019DC                          1498  
000019DC  4BF9 0000236E           1499    LEA PRINT_EA_MODE_ID_ABS_DATA,A5 * Print shift count
000019E2  2F0D                    1500    MOVE.L    A5, -(SP)
000019E4  5878 1008               1501    ADD.W     #4, PRINT_COUNT
000019E8                          1502  
000019E8  4BF9 0000240A           1503    LEA     PRINT_COMMA,A5   * Load the print subroutine
000019EE  2F0D                    1504    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
000019F0  5878 1008               1505    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
000019F4                          1506  
000019F4  4BF9 00002204           1507    LEA   PRINT_EA_MODE_ID_DN,A5  * Print data register
000019FA  2F0D                    1508    MOVE.L    A5, -(SP)
000019FC  5878 1008               1509    ADD.W     #4, PRINT_COUNT
00001A00                          1510  
00001A00  6000 0094               1511    BRA LSX_ASX_ROX_FINISH
00001A04                          1512  
00001A04                          1513  *__________________________________
00001A04                          1514  * Convert 0 to 8 (Special case)
00001A04                          1515  *----------------------------------
00001A04                          1516  LSX_ASX_ROX_SHIFT_8
00001A04  21FC 00000008 1016      1517    MOVE.L  #8,DATA1
00001A0C  4BF9 0000236E           1518    LEA PRINT_EA_MODE_ID_ABS_DATA,A5  * Print shift count 8
00001A12  2F0D                    1519    MOVE.L    A5, -(SP)
00001A14  5878 1008               1520    ADD.W     #4, PRINT_COUNT
00001A18                          1521  
00001A18  4BF9 0000240A           1522    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001A1E  2F0D                    1523    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001A20  5878 1008               1524    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001A24                          1525  
00001A24                          1526  
00001A24  4BF9 00002204           1527    LEA   PRINT_EA_MODE_ID_DN,A5  * Print data register
00001A2A  2F0D                    1528    MOVE.L    A5, -(SP)
00001A2C  5878 1008               1529    ADD.W     #4, PRINT_COUNT
00001A30                          1530  
00001A30  6000 0064               1531    BRA LSX_ASX_ROX_FINISH
00001A34                          1532  
00001A34                          1533  *__________________________________
00001A34                          1534  * Print the register that contains the number of bits to shift
00001A34                          1535  *----------------------------------
00001A34                          1536  LSX_ASX_ROX_REGISTER
00001A34  2007                    1537    MOVE.L    D7,D0      * Reset D0
00001A36  C0BC 00000E00           1538    AND.L   #$E00,D0
00001A3C                          1539  
00001A3C  E080                    1540    ASR.L   #$8,D0
00001A3E  E280                    1541    ASR.L   #$1,D0
00001A40                          1542  
00001A40  13C0 00002B7A           1543    MOVE.B  D0,MISC_NUMBER
00001A46  4BF9 00002010           1544    LEA   PRINT_MISC_NUMBER_AS_REGISTER,A5  * Print data register
00001A4C  2F0D                    1545    MOVE.L    A5, -(SP)
00001A4E  5878 1008               1546    ADD.W     #4, PRINT_COUNT
00001A52                          1547  
00001A52  4BF9 0000240A           1548    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001A58  2F0D                    1549    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001A5A  5878 1008               1550    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001A5E                          1551  
00001A5E  4BF9 00002204           1552    LEA   PRINT_EA_MODE_ID_DN,A5  * Print data register
00001A64  2F0D                    1553    MOVE.L    A5, -(SP)
00001A66  5878 1008               1554    ADD.W     #4, PRINT_COUNT
00001A6A                          1555  
00001A6A  6000 002A               1556    BRA LSX_ASX_ROX_FINISH
00001A6E                          1557  
00001A6E                          1558  *__________________________________
00001A6E                          1559  * Memory Shift mode
00001A6E                          1560  *----------------------------------
00001A6E                          1561  LSX_ASX_ROX_MEM
00001A6E  2C07                    1562    MOVE.L D7,D6
00001A70  CCBC 00000038           1563    AND.L #$38,D6
00001A76  BC7C 0008               1564    CMP.W #8,D6
00001A7A  6F00 099E               1565    BLE   PRINT_ILLEGAL
00001A7E                          1566  
00001A7E  4BF9 000023EA           1567    LEA PRINT_FOURSPACE,A5
00001A84  2F0D                    1568    MOVE.L    A5,-(SP)
00001A86  5878 1008               1569    ADD.W    #4,PRINT_COUNT
00001A8A                          1570  
00001A8A  2C07                    1571    MOVE.L D7,D6 * Restore D6
00001A8C  4EB9 00001DD8           1572    JSR     PUSH_EA_MODE_ID
00001A92                          1573  
00001A92  6000 0002               1574    BRA LSX_ASX_ROX_FINISH
00001A96                          1575  
00001A96                          1576  
00001A96                          1577  *__________________________________
00001A96                          1578  * Finish
00001A96                          1579  *----------------------------------
00001A96                          1580  LSX_ASX_ROX_FINISH
00001A96  31FC 0002 1010          1581    MOVE.W  #2,LOOP_INC
00001A9C  6000 030E               1582    BRA   PRINT_OPCODE
00001AA0                          1583  
00001AA0                          1584  LSX_ASX_ROX_RESET_D7
00001AA0  2007                    1585      MOVE.L    D7,D0
00001AA2  6000 0322               1586      BRA   PRINT_OPCODE_LOOP_RETURN
00001AA6                          1587  
00001AA6                          1588  *-------------------------------------------------------------------------------
00001AA6                          1589  *   BCC
00001AA6                          1590  *
00001AA6                          1591  *
00001AA6                          1592  *-------------------------------------------------------------------------------
00001AA6                          1593  BCC
00001AA6  2007                    1594    MOVE.L    D7,D0      * Reset D0
00001AA8  C07C 0F00               1595    AND.W     #$0F00,D0  * Isolate bits 11-8
00001AAC  B07C 0000               1596    CMP.W     #0,D0
00001AB0  6700 001E               1597    BEQ       BRA
00001AB4                          1598  
00001AB4  B07C 0E00               1599    CMP.W     #$E00,D0
00001AB8  6700 0026               1600    BEQ       BGT
00001ABC                          1601  
00001ABC  B07C 0F00               1602    CMP.W     #$F00,D0
00001AC0  6700 002E               1603    BEQ       BLE
00001AC4                          1604  
00001AC4  B07C 0700               1605    CMP.W     #$700,D0
00001AC8  6700 0036               1606    BEQ       BEQ
00001ACC                          1607  
00001ACC  6000 094C               1608    BRA       PRINT_ILLEGAL
00001AD0                          1609  
00001AD0                          1610  BRA
00001AD0  4BF9 00001FA4           1611    LEA     PRINT_BRA,A5    * Load the print subroutine into intermediate address
00001AD6  2F0D                    1612    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001AD8  5878 1008               1613    ADD.W   #4,PRINT_COUNT
00001ADC                          1614  
00001ADC  6000 0032               1615    BRA   BCC_CONTINUE
00001AE0                          1616  
00001AE0                          1617  BGT
00001AE0  4BF9 00001F74           1618    LEA     PRINT_BGT,A5    * Load the print subroutine into intermediate address
00001AE6  2F0D                    1619    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001AE8  5878 1008               1620    ADD.W   #4,PRINT_COUNT
00001AEC                          1621  
00001AEC  6000 0022               1622    BRA   BCC_CONTINUE
00001AF0                          1623  
00001AF0                          1624  BLE
00001AF0  4BF9 00001F84           1625    LEA     PRINT_BLE,A5    * Load the print subroutine into intermediate address
00001AF6  2F0D                    1626    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001AF8  5878 1008               1627    ADD.W   #4,PRINT_COUNT
00001AFC                          1628  
00001AFC  6000 0012               1629    BRA   BCC_CONTINUE
00001B00                          1630  
00001B00                          1631  BEQ
00001B00  4BF9 00001F94           1632    LEA     PRINT_BEQ,A5    * Load the print subroutine into intermediate address
00001B06  2F0D                    1633    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001B08  5878 1008               1634    ADD.W   #4,PRINT_COUNT
00001B0C                          1635  
00001B0C  6000 0002               1636    BRA   BCC_CONTINUE
00001B10                          1637  
00001B10                          1638  BCC_CONTINUE
00001B10  7000                    1639    MOVE.L    #0,D0
00001B12  1007                    1640    MOVE.B    D7,D0      * Reset D0
00001B14  B03C 0000               1641    CMP.B     #0,D0
00001B18  6700 0020               1642    BEQ       BCC_16     * if 16 bit displacement, print the following short
00001B1C                          1643  
00001B1C  B03C 00FF               1644    CMP.B     #$FF,D0    * if 32 bit displacement, print the following long
00001B20  6700 0032               1645    BEQ       BCC_32
00001B24                          1646  
00001B24  21FC 00000000 1016      1647    MOVE.L    #0,DATA1
00001B2C                          1648    *ROR.L     #4,D0
00001B2C  21C0 1016               1649    MOVE.L    D0,DATA1
00001B30                          1650  
00001B30  31FC 0002 1010          1651    MOVE.W  #2,LOOP_INC
00001B36                          1652  
00001B36  6000 0026               1653    BRA     BCC_END
00001B3A                          1654  
00001B3A                          1655  BCC_16
00001B3A  2238 1016               1656    MOVE.L          DATA1,D1
00001B3E  4841                    1657    SWAP            D1              * We only want the upper word
00001B40  C2BC 0000FFFF           1658    AND.L           #$0000FFFF,D1   * Bit mask for upper word
00001B46  21C1 1016               1659    MOVE.L          D1,DATA1
00001B4A                          1660  
00001B4A  31FC 0004 1010          1661    MOVE.W  #4,LOOP_INC
00001B50                          1662  
00001B50  6000 000C               1663    BRA     BCC_END
00001B54                          1664  
00001B54                          1665  BCC_32
00001B54  31FC 0006 1010          1666    MOVE.W  #6,LOOP_INC
00001B5A  6000 0002               1667    BRA     BCC_END
00001B5E                          1668  
00001B5E                          1669  BCC_END
00001B5E  4BF9 0000236E           1670    LEA     PRINT_EA_MODE_ID_ABS_DATA,A5
00001B64  2F0D                    1671    MOVE.L  A5, -(SP)
00001B66  5878 1008               1672    ADD.W   #4, PRINT_COUNT
00001B6A                          1673  
00001B6A  6000 0240               1674    BRA   PRINT_OPCODE
00001B6E                          1675  
00001B6E                          1676  
00001B6E                          1677  *-------------------------------------------------------------------------------
00001B6E                          1678  *   ADD ADDA
00001B6E                          1679  *
00001B6E                          1680  * Because ADD and ADDA have the same first four bits (1101), we need to do
00001B6E                          1681  * some additional branching to differentiate them.
00001B6E                          1682  *________________________________________
00001B6E                          1683  * Register Use Summary:
00001B6E                          1684  *
00001B6E                          1685  * D0: General variable, cleared every use to be safe
00001B6E                          1686  * D7: CONST - The opcode to decode - NO TOUCH
00001B6E                          1687  *
00001B6E                          1688  *-------------------------------------------------------------------------------
00001B6E                          1689  ADD_ADDA
00001B6E                          1690  
00001B6E  4280                    1691    CLR.L   D0
00001B70  2007                    1692    MOVE.L  D7,D0
00001B72                          1693  
00001B72  EC58                    1694    ROR.W   #06,D0     * Get bits 7,6 on end
00001B74  C03C 0003               1695    AND.B   #03,D0     * Isolate bits 7,6
00001B78  B03C 0003               1696    CMP.B   #03,D0
00001B7C  6700 0006               1697    BEQ   ADDA
00001B80                          1698  
00001B80  6000 0082               1699    BRA   ADD          * Else it's ADD
00001B84                          1700  *-------------------------------------------------------------------------------
00001B84                          1701  
00001B84                          1702  
00001B84                          1703  *-------------------------------------------------------------------------------
00001B84                          1704  *   ADDA
00001B84                          1705  *
00001B84                          1706  *
00001B84                          1707  *-------------------------------------------------------------------------------
00001B84                          1708  ADDA
00001B84                          1709  
00001B84  2007                    1710    MOVE.L  D7,D0         * Reset D0
00001B86                          1711  
00001B86  4BF9 00001FC4           1712    LEA     PRINT_ADDA,A5    * Load the print subroutine into intermediate address
00001B8C  2F0D                    1713    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001B8E  5878 1008               1714    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001B92                          1715  
00001B92  EC58                    1716    ROR.W   #$6,D0        * Get bits 9,8,7,6 on end byte
00001B94  C03C 0007               1717    AND.B   #7,D0         * Isolate bits 8,7,6
00001B98                          1718  
00001B98  B03C 0003               1719    CMP.B   #3,D0         * If 8,7,6 == 011
00001B9C  6700 001E               1720    BEQ     ADDA_W
00001BA0                          1721  
00001BA0  B03C 0007               1722    CMP.B   #7,D0         * If 8,7,6 == 111
00001BA4  6700 0006               1723    BEQ     ADDA_L
00001BA8                          1724  
00001BA8  6000 0870               1725    BRA     PRINT_ILLEGAL
00001BAC                          1726  
00001BAC                          1727  * ------ Long Opmode ------
00001BAC                          1728  ADDA_L
00001BAC                          1729  
00001BAC  4BF9 000021F4           1730    LEA     PRINT_LONG_DESIGNATOR,A5 * Load the ".L" print subroutine
00001BB2  2F0D                    1731    MOVE.L  A5, -(SP)       * Put the subroutine onto the stack
00001BB4  5878 1008               1732    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001BB8                          1733  
00001BB8  6000 0012               1734    BRA     ADDA_CONTINUE
00001BBC                          1735  
00001BBC                          1736  * ------ Word Opmode ------
00001BBC                          1737  ADDA_W
00001BBC                          1738  
00001BBC  4BF9 000021E4           1739    LEA     PRINT_WORD_DESIGNATOR,A5 * Load the ".W" print subroutine
00001BC2  2F0D                    1740    MOVE.L  A5, -(SP)         * Put the subroutine onto the stack
00001BC4  5878 1008               1741    ADD.W   #4,PRINT_COUNT    * Increment Print Count by 1 long
00001BC8                          1742  
00001BC8  6000 0002               1743    BRA     ADDA_CONTINUE
00001BCC                          1744  
00001BCC                          1745  * ------ Continue ------
00001BCC                          1746  ADDA_CONTINUE
00001BCC                          1747  
00001BCC                          1748  * Push the effective address print subroutine onto the stack
00001BCC  2C07                    1749    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001BCE  4EB9 00001DD8           1750    JSR     PUSH_EA_MODE_ID
00001BD4                          1751  
00001BD4                          1752  
00001BD4  4BF9 0000240A           1753    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001BDA  2F0D                    1754    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001BDC  5878 1008               1755    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001BE0                          1756  
00001BE0                          1757  
00001BE0                          1758  
00001BE0                          1759  * Reset and push the address register print subroutine onto the stack
00001BE0  2007                    1760    MOVE.L D7,D0    * Reset D0
00001BE2                          1761  
00001BE2  E080                    1762    ASR.L   #$8,D0
00001BE4  E280                    1763    ASR.L   #$1,D0
00001BE6  C03C 0007               1764    AND.B   #$7,D0
00001BEA                          1765  
00001BEA  13C0 00002B7A           1766    MOVE.B  D0,MISC_NUMBER
00001BF0                          1767  
00001BF0  4BF9 00001FEA           1768    LEA     PRINT_MISC_NUMBER_AS_ADDRESS,A5   * Load the print subroutine
00001BF6  2F0D                    1769    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001BF8  5878 1008               1770    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001BFC                          1771  
00001BFC  5478 1010               1772    ADD.W  #2,LOOP_INC     * Increment the loop counter by 2 bytes
00001C00                          1773  
00001C00  6000 01AA               1774    BRA   PRINT_OPCODE
00001C04                          1775  
00001C04                          1776  *-------------------------------------------------------------------------------
00001C04                          1777  *   ADD
00001C04                          1778  *
00001C04                          1779  *
00001C04                          1780  *-------------------------------------------------------------------------------
00001C04                          1781  ADD
00001C04                          1782  
00001C04                          1783  * ------ Print "ADD" ------
00001C04  4BF9 00001FB4           1784    LEA     PRINT_ADD,A5    * Load the print subroutine into intermediate address
00001C0A  2F0D                    1785    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001C0C  5878 1008               1786    ADD.W   #4,PRINT_COUNT
00001C10                          1787  
00001C10                          1788  * ------ Print size ------
00001C10  1800                    1789    MOVE.B   D0,D4            * Move bits 7,6 to D4 for BWL
00001C12  4EB9 00001EB2           1790    JSR      PUSH_BWL
00001C18                          1791  
00001C18                          1792  * ------ Reset D0, determine order ------
00001C18  2007                    1793    MOVE.L  D7,D0
00001C1A  E058                    1794    ROR.W   #08,D0     * Get bit 8 on the end
00001C1C  C07C 0001               1795    AND.W   #1,D0
00001C20                          1796  
00001C20                          1797    * If bit 8 == 0 the order is <ea> + Dn
00001C20                          1798    * If bit 8 == 1 the order is Dn + <ea>
00001C20                          1799  
00001C20  B03C 0001               1800    CMP.B   #1,D0
00001C24  6700 003A               1801    BEQ     ADD_DN_FIRST
00001C28                          1802  
00001C28                          1803  * ------ Print order is effective address, data register ------
00001C28                          1804  ADD_EA_FIRST
00001C28                          1805  
00001C28                          1806  
00001C28                          1807    * ------ Print the effective address ------
00001C28  2C07                    1808    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001C2A  4EB9 00001DD8           1809    JSR     PUSH_EA_MODE_ID
00001C30                          1810  
00001C30                          1811    * ------ Print a comma ------
00001C30  4BF9 0000240A           1812    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001C36  2F0D                    1813    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001C38  5878 1008               1814    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001C3C                          1815  
00001C3C                          1816    * ------ Determine the register number ------
00001C3C  2007                    1817    MOVE.L  D7,D0
00001C3E  E058                    1818    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
00001C40  E258                    1819    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
00001C42  C07C 0007               1820    AND.W   #7,D0 * Mask against 111 to only get 3 bits
00001C46                          1821  
00001C46                          1822    * ------ Print the register number ------
00001C46  13C0 00002B7A           1823    MOVE.B  D0,MISC_NUMBER
00001C4C  4BF9 00002010           1824    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
00001C52  2F0D                    1825    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001C54  5878 1008               1826    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001C58                          1827  
00001C58  5478 1010               1828    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
00001C5C                          1829  
00001C5C  6000 014E               1830    BRA   PRINT_OPCODE
00001C60                          1831  
00001C60                          1832  
00001C60                          1833  * ------ Print order is data register, effective address ------
00001C60                          1834  ADD_DN_FIRST
00001C60                          1835  
00001C60                          1836  
00001C60                          1837    * ------ Determine the register number ------
00001C60  2007                    1838    MOVE.L  D7,D0
00001C62  E058                    1839    ROR.W   #08,D0 * Get bits 9, 10, and 11 on the end
00001C64  E258                    1840    ROR.W   #01,D0 * Get bits 9, 10, and 11 on the end
00001C66  C07C 0007               1841    AND.W   #7,D0 * Mask against 111 to only get 3 bits
00001C6A                          1842  
00001C6A                          1843    * ------ Print the register number ------
00001C6A  13C0 00002B7A           1844    MOVE.B  D0,MISC_NUMBER
00001C70  4BF9 00002010           1845    LEA     PRINT_MISC_NUMBER_AS_REGISTER,A5   * Load the print subroutine
00001C76  2F0D                    1846    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001C78  5878 1008               1847    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001C7C                          1848  
00001C7C                          1849    * ------ Print a comma ------
00001C7C  4BF9 0000240A           1850    LEA     PRINT_COMMA,A5   * Load the print subroutine
00001C82  2F0D                    1851    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001C84  5878 1008               1852    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001C88                          1853  
00001C88                          1854    * ------ Print the effective address ------
00001C88  2C07                    1855    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001C8A  4EB9 00001DD8           1856    JSR     PUSH_EA_MODE_ID
00001C90                          1857  
00001C90  5478 1010               1858    ADD.W  #2,LOOP_INC     * Increment the loop counter by 4 bytes
00001C94                          1859  
00001C94  6000 0116               1860    BRA   PRINT_OPCODE
00001C98                          1861  
00001C98                          1862  
00001C98                          1863  *-------------------------------------------------------------------------------
00001C98                          1864  *   ADDQ
00001C98                          1865  *
00001C98                          1866  *
00001C98                          1867  *-------------------------------------------------------------------------------
00001C98                          1868  ADDQ
00001C98                          1869  
00001C98                          1870  
00001C98                          1871  * ------ Ensure that opcode is valid ------
00001C98  2007                    1872    MOVE.L  D7,D0
00001C9A  E058                    1873    ROR.W   #$08,D0
00001C9C  C03C 0001               1874    AND.B   #1,D0
00001CA0  B03C 0000               1875    CMP.B   #0,D0             * Check for 0 in 8th bit
00001CA4  6600 0774               1876    BNE     PRINT_ILLEGAL
00001CA8                          1877  
00001CA8                          1878  * ------ Print "ADDQ" ------
00001CA8  4BF9 00002154           1879    LEA     PRINT_ADDQ,A5    * Load the print subroutine into intermediate address
00001CAE  2F0D                    1880    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001CB0  5878 1008               1881    ADD.W   #4,PRINT_COUNT
00001CB4                          1882  
00001CB4                          1883  * ------ Print Size ------
00001CB4  2007                    1884    MOVE.L  D7,D0
00001CB6  EC58                    1885    ROR.W   #6,D0
00001CB8  C07C 0003               1886    AND.W   #3,D0
00001CBC                          1887  
00001CBC  4284                    1888    CLR.L   D4
00001CBE  1800                    1889    MOVE.B  D0,D4            * Move bits 7,6 to D4 for BWL
00001CC0  4EB9 00001EB2           1890    JSR     PUSH_BWL
00001CC6                          1891  
00001CC6                          1892  * ------ Retrieve Data ------
00001CC6  2007                    1893    MOVE.L  D7,D0             * Reset D0
00001CC8  E058                    1894    ROR.W   #$8, D0           * Get bits 11 - 9
00001CCA  E258                    1895    ROR.W   #$1, D0           * Get bits 11 - 9
00001CCC  C03C 0007               1896    AND.B   #$7, D0           * Clear bit 11
00001CD0                          1897  
00001CD0                          1898  
00001CD0                          1899  * ADDQ converts 000 to 8 since nobody wants to add 0 to their number
00001CD0  0C00 0000               1900    CMPI.B   #0,D0
00001CD4  6600 0006               1901    BNE      ADDQ_NOT_ZERO
00001CD8                          1902  
00001CD8                          1903  *Else: D0 is 0, so we convert to 8
00001CD8  103C 0008               1904    MOVE.B   #8,D0
00001CDC                          1905  
00001CDC                          1906  ADDQ_NOT_ZERO
00001CDC                          1907  
00001CDC  13C0 00002B7A           1908    MOVE.B  D0,MISC_NUMBER
00001CE2                          1909  
00001CE2                          1910  * ------ Print Data ------
00001CE2  4BF9 0000212E           1911    LEA     PRINT_MISC_NUMBER_AS_DATA,A5
00001CE8  2F0D                    1912    MOVE.L  A5, -(SP)
00001CEA  5878 1008               1913    ADD.W   #4, PRINT_COUNT
00001CEE                          1914  
00001CEE                          1915  * ------ Print a comma ------
00001CEE  4BF9 0000240A           1916    LEA     PRINT_COMMA,A5  * Load the print subroutine
00001CF4  2F0D                    1917    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001CF6  5878 1008               1918    ADD.W   #4,PRINT_COUNT  * Increment Print Count by 1 long
00001CFA                          1919  
00001CFA                          1920  * ------ Print Effective Address ------
00001CFA  2C07                    1921    MOVE.L  D7,D6 * Put full opcode into D6 as parameter
00001CFC  4EB9 00001DD8           1922    JSR     PUSH_EA_MODE_ID
00001D02                          1923  
00001D02                          1924  
00001D02  31FC 0002 1010          1925    MOVE.W  #2,LOOP_INC     * Increment the loop counter by 2 bytes
00001D08  6000 00A2               1926    BRA     PRINT_OPCODE    * Always put this at the end
00001D0C                          1927  
00001D0C                          1928  
00001D0C                          1929  
00001D0C                          1930  *-------------------------------------------------------------------------------
00001D0C                          1931  *   NOP
00001D0C                          1932  *
00001D0C                          1933  *   NONSTANDARD OPCODE! Don't base your design off of this :)
00001D0C                          1934  *
00001D0C                          1935  *-------------------------------------------------------------------------------
00001D0C                          1936  NOP
00001D0C                          1937  
00001D0C  43F9 00002ADA           1938    LEA     STRING_NOP,A1
00001D12  103C 000E               1939    MOVE.B  #14,D0
00001D16  4E4F                    1940    TRAP    #15
00001D18                          1941  
00001D18  31FC 0002 1010          1942    MOVE.W  #2,LOOP_INC   * Increment the loop counter by 2 bytes
00001D1E                          1943  
00001D1E  4EB9 0000246E           1944    JSR     PRINT_IMMEDIATE_NEWLINE
00001D24                          1945  
00001D24  4E75                    1946    RTS
00001D26                          1947  
00001D26                          1948  *-------------------------------------------------------------------------------
00001D26                          1949  *   RTS
00001D26                          1950  *
00001D26                          1951  *   NONSTANDARD OPCODE! Don't base your design off of this :)
00001D26                          1952  *
00001D26                          1953  *-------------------------------------------------------------------------------
00001D26                          1954  RTS
00001D26                          1955  
00001D26  43F9 00002ADE           1956    LEA     STRING_RTS,A1
00001D2C  103C 000E               1957    MOVE.B  #14,D0
00001D30  4E4F                    1958    TRAP    #15
00001D32                          1959  
00001D32  31FC 0002 1010          1960    MOVE.W  #2,LOOP_INC   * Increment the loop counter by 2 bytes
00001D38                          1961  
00001D38  4EB9 0000246E           1962    JSR     PRINT_IMMEDIATE_NEWLINE
00001D3E                          1963  
00001D3E  4E75                    1964    RTS
00001D40                          1965  
00001D40                          1966  
00001D40                          1967  *-------------------------------------------------------------------------------
00001D40                          1968  *   JSR
00001D40                          1969  *
00001D40                          1970  *
00001D40                          1971  *-------------------------------------------------------------------------------
00001D40                          1972  JSR
00001D40                          1973  
00001D40  4BF9 000023BA           1974    LEA     PRINT_JSR,A5    * Load the print subroutine into intermediate address
00001D46  2F0D                    1975    MOVE.L  A5, -(SP)       * Put the print subroutine jump onto the stack
00001D48  5878 1008               1976    ADD.W           #4,PRINT_COUNT
00001D4C                          1977  
00001D4C                          1978  * ---- Custom Branching Block ----
00001D4C                          1979  * Supported Modes: (An), Indirect short, Indirect Long
00001D4C                          1980  
00001D4C  4280                    1981    CLR.L     D0
00001D4E  1007                    1982    MOVE.B    D7,D0 * Copy opcode into local variable
00001D50  C03C 0038               1983    AND.B     #$38,D0 * Mask D0 with 0111000 to get MODE bits only
00001D54  E600                    1984    ASR.B   #3,D0 * Shift the result so D0 ranges between 000 and 111
00001D56                          1985  
00001D56  B03C 0002               1986    CMP.B   #2,D0         *010 -> Address Register   Indirect
00001D5A  6700 002A               1987    BEQ   JSR_PUSH_EA_MODE_ID_AN_INDIRECT
00001D5E  B03C 0007               1988    CMP.B   #7,D0         *111 -> All Data Operations
00001D62  6700 0006               1989    BEQ     JSR_EA_MODE_ELSE
00001D66                          1990  
00001D66  6000 06B2               1991    BRA     PRINT_ILLEGAL
00001D6A                          1992  
00001D6A                          1993  
00001D6A                          1994  *________________________________________
00001D6A                          1995  * Handle Data Branching Logic
00001D6A                          1996  * Only short and long indirect allowed
00001D6A                          1997  *----------------------------------------
00001D6A                          1998  JSR_EA_MODE_ELSE
00001D6A                          1999  
00001D6A  4280                    2000    CLR.L   D0
00001D6C  1007                    2001    MOVE.B  D7,D0
00001D6E  C03C 0007               2002    AND.B   #7,D0
00001D72                          2003  
00001D72  B03C 0000               2004    CMP.B   #0,D0
00001D76  6700 0018               2005    BEQ     JSR_PUSH_EA_MODE_ID_IND_SHORT
00001D7A                          2006  
00001D7A  B03C 0001               2007    CMP.B   #1,D0
00001D7E  6700 001A               2008    BEQ     JSR_PUSH_EA_MODE_ID_IND_LONG
00001D82                          2009  
00001D82  6000 0696               2010    BRA     PRINT_ILLEGAL
00001D86                          2011  
00001D86                          2012  *________________________________________
00001D86                          2013  * Jump directly into the middle of
00001D86                          2014  * the PUSH_EA_MODE subroutine
00001D86                          2015  *----------------------------------------
00001D86                          2016  JSR_PUSH_EA_MODE_ID_AN_INDIRECT
00001D86  4EB9 00001E28           2017    JSR   PUSH_EA_MODE_ID_AN_INDIRECT
00001D8C  6000 0016               2018    BRA   JSR_FINISH
00001D90                          2019  
00001D90                          2020  *________________________________________
00001D90                          2021  * Jump directly into the middle of
00001D90                          2022  * the PUSH_EA_MODE subroutine
00001D90                          2023  *----------------------------------------
00001D90                          2024  JSR_PUSH_EA_MODE_ID_IND_SHORT
00001D90  4EB9 00001E68           2025    JSR   PUSH_EA_MODE_ID_IND_SHORT
00001D96  6000 000C               2026    BRA   JSR_FINISH
00001D9A                          2027  
00001D9A                          2028  *________________________________________
00001D9A                          2029  * Jump directly into the middle of
00001D9A                          2030  * the PUSH_EA_MODE subroutine
00001D9A                          2031  *----------------------------------------
00001D9A                          2032  JSR_PUSH_EA_MODE_ID_IND_LONG
00001D9A  4EB9 00001E7C           2033    JSR   PUSH_EA_MODE_ID_IND_LONG
00001DA0  6000 0002               2034    BRA   JSR_FINISH
00001DA4                          2035  
00001DA4                          2036  JSR_FINISH
00001DA4                          2037  
00001DA4  5478 1010               2038    ADD.W   #2,LOOP_INC     * Increment the loop counter by 1 word
00001DA8                          2039  
00001DA8  6000 0002               2040    BRA     PRINT_OPCODE    * Always put this at the end
00001DAC                          2041  
00001DAC                          2042  *-------------------------------------------------------------------------------
00001DAC                          2043  *   PRINT OPCODE
00001DAC                          2044  *-------------------------------------------------------------------------------
00001DAC                          2045  
00001DAC                          2046  PRINT_OPCODE
00001DAC                          2047  
00001DAC  2E78 100C               2048    MOVE.L  STACK_BASE,SP * Put the stack back to where it was when we started
00001DB0  31FC 0000 100A          2049    MOVE.W  #0,PRINT_OPCODE_LOOP_INDEX
00001DB6                          2050  
00001DB6                          2051  PRINT_OPCODE_LOOP
00001DB6                          2052  
00001DB6  3278 100A               2053    MOVEA.W   PRINT_OPCODE_LOOP_INDEX,A1
00001DBA                          2054  
00001DBA  B2F8 1008               2055    CMP.W   PRINT_COUNT,A1 * Check if we're done
00001DBE  6C00 000C               2056    BGE     PRINT_OPCODE_LOOP_FINISH
00001DC2                          2057  
00001DC2  2467                    2058    MOVE.L  -(SP),A2  * Pop the next item on the stack and put it in A1
00001DC4  4ED2                    2059    JMP     (A2)        * Jump to the routine we stored on the stack
00001DC6                          2060  
00001DC6                          2061  PRINT_OPCODE_LOOP_RETURN * Print methods come back here
00001DC6                          2062  
00001DC6  5878 100A               2063    ADD.W    #4,PRINT_OPCODE_LOOP_INDEX
00001DCA                          2064  
00001DCA  60EA                    2065    BRA     PRINT_OPCODE_LOOP
00001DCC                          2066  
00001DCC                          2067  PRINT_OPCODE_LOOP_FINISH
00001DCC                          2068  
00001DCC  2E78 100C               2069    MOVE.L  STACK_BASE,SP  * Return the stack to normal so we can RTS
00001DD0                          2070  
00001DD0  4EB9 0000246E           2071    JSR     PRINT_IMMEDIATE_NEWLINE
00001DD6  4E75                    2072    RTS
00001DD8                          2073  
00001DD8                          2074  *-------------------------------------------------------------------------------
00001DD8                          2075  
00001DD8                          2076  
00001DD8                          2077  
00001DD8                          2078  
00001DD8                          2079  
00001DD8                          2080  
00001DD8                          2081  
00001DD8                          2082  
00001DD8                          2083  
00001DD8                          2084  
00001DD8                          2085  *-------------------------------------------------------------------------------
00001DD8                          2086  *     _______    ________
00001DD8                          2087  *    |\  ___ \  |\   __  \
00001DD8                          2088  *    \ \   __/| \ \  \|\  \
00001DD8                          2089  *     \ \  \_|/__\ \   __  \
00001DD8                          2090  *      \ \  \_|\ \\ \  \ \  \
00001DD8                          2091  *       \ \_______\\ \__\ \__\
00001DD8                          2092  *        \|_______| \|__|\|__|
00001DD8                          2093  *
00001DD8                          2094  *-------------------------------------------------------------------------------
00001DD8                          2095  
00001DD8                          2096  *-------------------------------------------------------------------------------
00001DD8                          2097  *
00001DD8                          2098  *       PUSH EFFECTIVE ADDRESS MODE IDENTIFIER
00001DD8                          2099  *
00001DD8                          2100  * Determines the addressing mode of the effective address. Used for opcodes
00001DD8                          2101  * with the last five bits dedicated to the effective address.
00001DD8                          2102  *
00001DD8                          2103  * TODO: Implement a counter for how many prints we've made
00001DD8                          2104  *
00001DD8                          2105  *________________________________________
00001DD8                          2106  * Register Use Summary:
00001DD8                          2107  *
00001DD8                          2108  * D0: LOCAL VARIABLE - low byte of opcode
00001DD8                          2109  * D6: PARAMETER - The effective address bits. Assumes bits are shifted into
00001DD8                          2110  *                 the lowest 6 bits of the register.
00001DD8                          2111  *
00001DD8                          2112  * A4: LOCAL VARIABLE - RTS value temporary storage - must be swapped
00001DD8                          2113  * A5: LOCAL VARIABLE - Print Label to be pushed to stack
00001DD8                          2114  *
00001DD8                          2115  *-------------------------------------------------------------------------------
00001DD8                          2116  PUSH_EA_MODE_ID
00001DD8                          2117  
00001DD8                          2118  
00001DD8                          2119  * ---- Input Processing ----
00001DD8                          2120  
00001DD8  1006                    2121      MOVE.B  D6,D0   * Put opcode in D0
00001DDA  C03C 0038               2122      AND.B   #$38,D0 * Mask D0 with 0111000 to get MODE bits only
00001DDE  E600                    2123      ASR.B   #3,D0   * Shift the result so D0 ranges between 000 and 111
00001DE0                          2124  
00001DE0                          2125  
00001DE0                          2126  * ---- Branching Block ----
00001DE0                          2127  
00001DE0  B03C 0000               2128      CMP.B   #0,D0           *000 -> Register
00001DE4  6700 002E               2129      BEQ     PUSH_EA_MODE_ID_DN
00001DE8  B03C 0001               2130      CMP.B   #1,D0           *001 -> Address Register
00001DEC  6700 0030               2131      BEQ     PUSH_EA_MODE_ID_AN
00001DF0  B03C 0002               2132      CMP.B   #2,D0           *010 -> Address Register   Indirect
00001DF4  6700 0032               2133      BEQ     PUSH_EA_MODE_ID_AN_INDIRECT
00001DF8  B03C 0003               2134      CMP.B   #3,D0           *011 -> Address Register  (Indirect)+
00001DFC  6700 0034               2135      BEQ     PUSH_EA_MODE_ID_AN_POST_INC
00001E00  B03C 0004               2136      CMP.B   #4,D0           *100 -> Address Register -(Indirect)
00001E04  6700 0036               2137      BEQ     PUSH_EA_MODE_ID_AN_PRE_DEC
00001E08  B03C 0007               2138      CMP.B   #7,D0           *111 -> All Data Operations
00001E0C  6700 0038               2139      BEQ     PUSH_EA_MODE_ID_ELSE
00001E10                          2140  
00001E10  6000 0608               2141      BRA     PRINT_ILLEGAL
00001E14                          2142  
00001E14                          2143  *________________________________________
00001E14                          2144  * Load Register Print Label
00001E14                          2145  *----------------------------------------
00001E14                          2146  PUSH_EA_MODE_ID_DN
00001E14  4BF9 00002204           2147      LEA     PRINT_EA_MODE_ID_DN,A5
00001E1A  6000 0088               2148      BRA     PUSH_EA_MODE_ID_FINISH
00001E1E                          2149  
00001E1E                          2150  *________________________________________
00001E1E                          2151  * Load Address Register Print Label
00001E1E                          2152  *----------------------------------------
00001E1E                          2153  PUSH_EA_MODE_ID_AN
00001E1E  4BF9 00002222           2154      LEA     PRINT_EA_MODE_ID_AN,A5
00001E24  6000 007E               2155      BRA     PUSH_EA_MODE_ID_FINISH
00001E28                          2156  
00001E28                          2157  *________________________________________
00001E28                          2158  * Load (Address Register) Print Label
00001E28                          2159  *----------------------------------------
00001E28                          2160  PUSH_EA_MODE_ID_AN_INDIRECT
00001E28  4BF9 00002240           2161      LEA     PRINT_EA_MODE_ID_AN_INDIRECT,A5
00001E2E  6000 0074               2162      BRA     PUSH_EA_MODE_ID_FINISH
00001E32                          2163  
00001E32                          2164  *________________________________________
00001E32                          2165  * Load (Address Register)+ Print Label
00001E32                          2166  *----------------------------------------
00001E32                          2167  PUSH_EA_MODE_ID_AN_POST_INC
00001E32  4BF9 00002276           2168      LEA     PRINT_EA_MODE_ID_AN_POST_INC,A5
00001E38  6000 006A               2169      BRA     PUSH_EA_MODE_ID_FINISH
00001E3C                          2170  
00001E3C                          2171  *________________________________________
00001E3C                          2172  * Load -(Address Register) Print Label
00001E3C                          2173  *----------------------------------------
00001E3C                          2174  PUSH_EA_MODE_ID_AN_PRE_DEC
00001E3C  4BF9 000022B8           2175      LEA     PRINT_EA_MODE_ID_AN_PRE_DEC,A5
00001E42  6000 0060               2176      BRA     PUSH_EA_MODE_ID_FINISH
00001E46                          2177  
00001E46                          2178  *________________________________________
00001E46                          2179  * Handle Data Branching Logic
00001E46                          2180  *----------------------------------------
00001E46                          2181  PUSH_EA_MODE_ID_ELSE
00001E46  1006                    2182      MOVE.B  D6,D0
00001E48  C03C 0007               2183      AND.B   #7,D0
00001E4C                          2184  
00001E4C  B03C 0000               2185      CMP.B   #0,D0
00001E50  6700 0016               2186      BEQ     PUSH_EA_MODE_ID_IND_SHORT
00001E54                          2187  
00001E54  B03C 0001               2188      CMP.B   #1,D0
00001E58  6700 0022               2189      BEQ     PUSH_EA_MODE_ID_IND_LONG
00001E5C                          2190  
00001E5C  B03C 0004               2191      CMP.B   #4,D0
00001E60  6700 002E               2192      BEQ     PUSH_EA_MODE_ID_ABS_DATA
00001E64                          2193  
00001E64  6000 05B4               2194      BRA     PRINT_ILLEGAL
00001E68                          2195  
00001E68                          2196  PUSH_EA_MODE_ID_IND_SHORT
00001E68  4BF9 000022FA           2197      LEA     PRINT_EA_MODE_ID_IND_SHORT,A5
00001E6E  5478 1010               2198      ADD.W           #2, LOOP_INC * Adjust the Loop increment to skip the data
00001E72  31FC 0001 101A          2199      MOVE.W  #1,DATA1_IN_USE
00001E78  6000 002A               2200      BRA     PUSH_EA_MODE_ID_FINISH
00001E7C                          2201  
00001E7C                          2202  PUSH_EA_MODE_ID_IND_LONG
00001E7C  4BF9 0000233A           2203      LEA     PRINT_EA_MODE_ID_IND_LONG,A5
00001E82  5878 1010               2204      ADD.W           #4,LOOP_INC * Adjust the Loop increment to skip the data
00001E86  31FC 0001 101A          2205      MOVE.W  #1,DATA1_IN_USE
00001E8C  6000 0016               2206      BRA     PUSH_EA_MODE_ID_FINISH
00001E90                          2207  
00001E90                          2208  PUSH_EA_MODE_ID_ABS_DATA
00001E90  4BF9 0000236E           2209      LEA     PRINT_EA_MODE_ID_ABS_DATA,A5
00001E96  5878 1010               2210      ADD.W           #4,LOOP_INC * Adjust the Loop increment to skip the data
00001E9A  31FC 0001 101A          2211          MOVE.W  #1,DATA1_IN_USE
00001EA0  6000 0002               2212      BRA     PUSH_EA_MODE_ID_FINISH
00001EA4                          2213  
00001EA4                          2214  *________________________________________
00001EA4                          2215  PUSH_EA_MODE_ID_FINISH
00001EA4  2857                    2216      MOVEA.L         (SP),A4 * Store the value we're going to RTS to
00001EA6  588F                    2217      ADD.L           #4,SP   * Move the stack pointer down to the RTS value
00001EA8  2F0D                    2218      MOVE.L          A5,-(SP)    * Overwrite the RTS value with the print label
00001EAA  2F0C                    2219      MOVE.L          A4,-(SP)    * Push the RTS so we can return like normal
00001EAC                          2220  
00001EAC  5878 1008               2221      ADD.W           #4,PRINT_COUNT
00001EB0                          2222  
00001EB0  4E75                    2223      RTS
00001EB2                          2224  
00001EB2                          2225  *-------------------------------------------------------------------------------
00001EB2                          2226  *                 ________  ___       __   ___
00001EB2                          2227  *                |\   __  \|\  \     |\  \|\  \
00001EB2                          2228  *                \ \  \|\ /\ \  \    \ \  \ \  \
00001EB2                          2229  *                 \ \   __  \ \  \  __\ \  \ \  \
00001EB2                          2230  *                  \ \  \|\  \ \  \|\__\_\  \ \  \____
00001EB2                          2231  *                   \ \_______\ \____________\ \_______\
00001EB2                          2232  *                    \|_______|\|____________|\|_______|
00001EB2                          2233  *
00001EB2                          2234  
00001EB2                          2235  *-------------------------------------------------------------------------------
00001EB2                          2236  
00001EB2                          2237  *-------------------------------------------------------------------------------
00001EB2                          2238  *
00001EB2                          2239  *       PUSH BYTE, WORD, OR LONG
00001EB2                          2240  *
00001EB2                          2241  * TODO: Implement a counter for how many prints we've made
00001EB2                          2242  *________________________________________
00001EB2                          2243  * Register Use Summary:
00001EB2                          2244  *
00001EB2                          2245  * D4: PARAMETER       - The size bits to print
00001EB2                          2246  * D7: CONST PARAMETER - The opcode word
00001EB2                          2247  *
00001EB2                          2248  * A4: LOCAL VARIABLE  - Temp RTS location
00001EB2                          2249  * A5: LOCAL VARIABLE  - Label for the print routine to store on the stack
00001EB2                          2250  *-------------------------------------------------------------------------------
00001EB2                          2251  PUSH_BWL
00001EB2                          2252  
00001EB2                          2253  * ---- Branching Block ----
00001EB2                          2254  
00001EB2  B83C 0000               2255      CMP.B           #0,D4       *00 -> Byte
00001EB6  6700 0016               2256      BEQ             PUSH_BWL_BYTE
00001EBA  B83C 0001               2257      CMP.B           #1,D4       *01 -> Word
00001EBE  6700 0018               2258      BEQ             PUSH_BWL_WORD
00001EC2  B83C 0002               2259      CMP.B           #2,D4       *10 -> Long
00001EC6  6700 001A               2260      BEQ             PUSH_BWL_LONG
00001ECA                          2261  
00001ECA  6000 054E               2262      BRA             PRINT_ILLEGAL
00001ECE                          2263  
00001ECE                          2264  *________________________________________
00001ECE                          2265  * Load Byte Print Label
00001ECE                          2266  *----------------------------------------
00001ECE                          2267  PUSH_BWL_BYTE
00001ECE  4BF9 000021D4           2268      LEA             PRINT_BYTE_DESIGNATOR,A5
00001ED4  6000 0016               2269      BRA             PUSH_BWL_FINISH
00001ED8                          2270  *________________________________________
00001ED8                          2271  * Load Word Print Label
00001ED8                          2272  *----------------------------------------
00001ED8                          2273  PUSH_BWL_WORD
00001ED8  4BF9 000021E4           2274      LEA             PRINT_WORD_DESIGNATOR,A5
00001EDE  6000 000C               2275      BRA             PUSH_BWL_FINISH
00001EE2                          2276  
00001EE2                          2277  *________________________________________
00001EE2                          2278  * Load Long Print Label
00001EE2                          2279  *----------------------------------------
00001EE2                          2280  PUSH_BWL_LONG
00001EE2  4BF9 000021F4           2281      LEA             PRINT_LONG_DESIGNATOR,A5
00001EE8  6000 0002               2282      BRA             PUSH_BWL_FINISH
00001EEC                          2283  
00001EEC                          2284  *________________________________________
00001EEC                          2285  PUSH_BWL_FINISH
00001EEC                          2286  
00001EEC  2857                    2287      MOVEA.L         (SP),A4 * Store the value we're going to RTS to
00001EEE  588F                    2288      ADD.L           #4,SP   * Move the stack pointer down to the RTS value
00001EF0  2F0D                    2289      MOVE.L          A5,-(SP)    * Overwrite the RTS value with the print label
00001EF2  2F0C                    2290      MOVE.L          A4,-(SP)    * Push the RTS so we can return like normal
00001EF4                          2291  
00001EF4  5878 1008               2292      ADD.W           #4,PRINT_COUNT
00001EF8                          2293  
00001EF8  4E75                    2294      RTS
00001EFA                          2295  
00001EFA                          2296  
00001EFA                          2297  *-------------------------------------------------------------------------------
00001EFA                          2298  *     ________   ________   ___   ________    _________
00001EFA                          2299  *    |\   __  \ |\   __  \ |\  \ |\   ___  \ |\___   ___\
00001EFA                          2300  *    \ \  \|\  \\ \  \|\  \\ \  \\ \  \\ \  \\|___ \  \_|
00001EFA                          2301  *     \ \   ____\\ \   _  _\\ \  \\ \  \\ \  \    \ \  \
00001EFA                          2302  *      \ \  \___| \ \  \\  \|\ \  \\ \  \\ \  \    \ \  \
00001EFA                          2303  *       \ \__\     \ \__\\ _\ \ \__\\ \__\\ \__\    \ \__\
00001EFA                          2304  *        \|__|      \|__|\|__| \|__| \|__| \|__|     \|__|
00001EFA                          2305  *
00001EFA                          2306  * May god have mercy on your soul
00001EFA                          2307  *-------------------------------------------------------------------------------
00001EFA                          2308  *-------------------------------------------------------------------------------
00001EFA                          2309  *
00001EFA                          2310  *       PRINT LSR
00001EFA                          2311  *________________________________________
00001EFA                          2312  * Register Use Summary:
00001EFA                          2313  *
00001EFA                          2314  * D0: LOCAL VARIABLE  - Trap task designator
00001EFA                          2315  *
00001EFA                          2316  * A1: LOCAL VARIABLE  - String address
00001EFA                          2317  *-------------------------------------------------------------------------------
00001EFA                          2318  PRINT_LSR
00001EFA  43F9 00002ACA           2319      LEA             STRING_LSR,A1   * Load "LSR" into A1
00001F00  103C 000E               2320      MOVE.B          #14,D0      * Set trap task to String
00001F04  4E4F                    2321      TRAP            #15         * Print "LSR "
00001F06  6000 FEBE               2322      BRA             PRINT_OPCODE_LOOP_RETURN
00001F0A                          2323  
00001F0A                          2324  *-------------------------------------------------------------------------------
00001F0A                          2325  *
00001F0A                          2326  *       PRINT LSL
00001F0A                          2327  *________________________________________
00001F0A                          2328  * Register Use Summary:
00001F0A                          2329  *
00001F0A                          2330  * D0: LOCAL VARIABLE  - Trap task designator
00001F0A                          2331  *
00001F0A                          2332  * A1: LOCAL VARIABLE  - String address
00001F0A                          2333  *-------------------------------------------------------------------------------
00001F0A                          2334  PRINT_LSL
00001F0A  43F9 00002ACE           2335      LEA             STRING_LSL,A1   * Load "LSL" into A1
00001F10  103C 000E               2336      MOVE.B          #14,D0      * Set trap task to String
00001F14  4E4F                    2337      TRAP            #15         * Print "LSL "
00001F16  6000 FEAE               2338      BRA             PRINT_OPCODE_LOOP_RETURN
00001F1A                          2339  
00001F1A                          2340  *-------------------------------------------------------------------------------
00001F1A                          2341  *
00001F1A                          2342  *       PRINT ASR
00001F1A                          2343  *________________________________________
00001F1A                          2344  * Register Use Summary:
00001F1A                          2345  *
00001F1A                          2346  * D0: LOCAL VARIABLE  - Trap task designator
00001F1A                          2347  *
00001F1A                          2348  * A1: LOCAL VARIABLE  - String address
00001F1A                          2349  *-------------------------------------------------------------------------------
00001F1A                          2350  PRINT_ASR
00001F1A  43F9 00002AC2           2351      LEA             STRING_ASR,A1   * Load "ASR" into A1
00001F20  103C 000E               2352      MOVE.B          #14,D0      * Set trap task to String
00001F24  4E4F                    2353      TRAP            #15         * Print "ASR "
00001F26  6000 FE9E               2354      BRA             PRINT_OPCODE_LOOP_RETURN
00001F2A                          2355  
00001F2A                          2356  *-------------------------------------------------------------------------------
00001F2A                          2357  *
00001F2A                          2358  *       PRINT ASL
00001F2A                          2359  *________________________________________
00001F2A                          2360  * Register Use Summary:
00001F2A                          2361  *
00001F2A                          2362  * D0: LOCAL VARIABLE  - Trap task designator
00001F2A                          2363  *
00001F2A                          2364  * A1: LOCAL VARIABLE  - String address
00001F2A                          2365  *-------------------------------------------------------------------------------
00001F2A                          2366  PRINT_ASL
00001F2A  43F9 00002AC6           2367      LEA             STRING_ASL,A1   * Load "ASL" into A1
00001F30  103C 000E               2368      MOVE.B          #14,D0      * Set trap task to String
00001F34  4E4F                    2369      TRAP            #15         * Print "ASL "
00001F36  6000 FE8E               2370      BRA             PRINT_OPCODE_LOOP_RETURN
00001F3A                          2371  
00001F3A                          2372  *-------------------------------------------------------------------------------
00001F3A                          2373  *
00001F3A                          2374  *       PRINT ROR
00001F3A                          2375  *________________________________________
00001F3A                          2376  * Register Use Summary:
00001F3A                          2377  *
00001F3A                          2378  * D0: LOCAL VARIABLE  - Trap task designator
00001F3A                          2379  *
00001F3A                          2380  * A1: LOCAL VARIABLE  - String address
00001F3A                          2381  *-------------------------------------------------------------------------------
00001F3A                          2382  PRINT_ROR
00001F3A  43F9 00002AD2           2383      LEA             STRING_ROR,A1   * Load "ROR" into A1
00001F40  103C 000E               2384      MOVE.B          #14,D0      * Set trap task to String
00001F44  4E4F                    2385      TRAP            #15         * Print "ROR "
00001F46  6000 FE7E               2386      BRA             PRINT_OPCODE_LOOP_RETURN
00001F4A                          2387  
00001F4A                          2388  *-------------------------------------------------------------------------------
00001F4A                          2389  *
00001F4A                          2390  *       PRINT ROL
00001F4A                          2391  *________________________________________
00001F4A                          2392  * Register Use Summary:
00001F4A                          2393  *
00001F4A                          2394  * D0: LOCAL VARIABLE  - Trap task designator
00001F4A                          2395  *
00001F4A                          2396  * A1: LOCAL VARIABLE  - String address
00001F4A                          2397  *-------------------------------------------------------------------------------
00001F4A                          2398  PRINT_ROL
00001F4A  43F9 00002AD6           2399      LEA             STRING_ROL,A1   * Load "ROL" into A1
00001F50  103C 000E               2400      MOVE.B          #14,D0      * Set trap task to String
00001F54  4E4F                    2401      TRAP            #15         * Print "ROL"
00001F56  6000 FE6E               2402      BRA             PRINT_OPCODE_LOOP_RETURN
00001F5A                          2403  
00001F5A                          2404  *-------------------------------------------------------------------------------
00001F5A                          2405  *
00001F5A                          2406  *       PRINT DATA1_WORD
00001F5A                          2407  *________________________________________
00001F5A                          2408  * Register Use Summary:
00001F5A                          2409  *
00001F5A                          2410  * D0: LOCAL VARIABLE  - Trap task designator
00001F5A                          2411  *
00001F5A                          2412  * D1: LOCAL VARIABLE  - DATA1 local copy
00001F5A                          2413  *
00001F5A                          2414  * D2: LOCAL VARIABLE  - Base in which to print
00001F5A                          2415  *
00001F5A                          2416  * A1: LOCAL VARIABLE  - String address
00001F5A                          2417  *-------------------------------------------------------------------------------
00001F5A                          2418  PRINT_DATA1_LONG
00001F5A  2238 1016               2419      MOVE.L          DATA1,D1
00001F5E  700F                    2420      MOVEQ           #15,D0
00001F60  7410                    2421      MOVEQ           #16,D2
00001F62  4E4F                    2422      TRAP            #15
00001F64                          2423  
00001F64                          2424  *-------------------------------------------------------------------------------
00001F64                          2425  *
00001F64                          2426  *       PRINT DATA1_WORD
00001F64                          2427  *________________________________________
00001F64                          2428  * Register Use Summary:
00001F64                          2429  *
00001F64                          2430  * D0: LOCAL VARIABLE  - Trap task designator
00001F64                          2431  *
00001F64                          2432  * D1: LOCAL VARIABLE  - DATA1 local copy
00001F64                          2433  *
00001F64                          2434  * D2: LOCAL VARIABLE  - Base in which to print
00001F64                          2435  *
00001F64                          2436  * A1: LOCAL VARIABLE  - String address
00001F64                          2437  *-------------------------------------------------------------------------------
00001F64                          2438  PRINT_DATA1_WORD
00001F64  2238 1016               2439      MOVE.L          DATA1,D1
00001F68  4841                    2440      SWAP            D1              * We only want the upper word
00001F6A  C27C FFFF               2441      AND             #$0000FFFF,D1   * Bit mask for upper word
00001F6E  700F                    2442      MOVEQ           #15,D0
00001F70  7410                    2443      MOVEQ           #16,D2
00001F72  4E4F                    2444      TRAP            #15
00001F74                          2445  
00001F74                          2446  *-------------------------------------------------------------------------------
00001F74                          2447  *
00001F74                          2448  *       PRINT BGT
00001F74                          2449  *________________________________________
00001F74                          2450  * Register Use Summary:
00001F74                          2451  *
00001F74                          2452  * D0: LOCAL VARIABLE  - Trap task designator
00001F74                          2453  *
00001F74                          2454  * A1: LOCAL VARIABLE  - String address
00001F74                          2455  *-------------------------------------------------------------------------------
00001F74                          2456  PRINT_BGT
00001F74  43F9 00002AFF           2457      LEA             STRING_BGT,A1   * Load "BGT" into A1
00001F7A  103C 000E               2458      MOVE.B          #14,D0      * Set trap task to String
00001F7E  4E4F                    2459      TRAP            #15         * Print "BGT "
00001F80  6000 FE44               2460      BRA             PRINT_OPCODE_LOOP_RETURN
00001F84                          2461  
00001F84                          2462  *-------------------------------------------------------------------------------
00001F84                          2463  *
00001F84                          2464  *       PRINT BLE
00001F84                          2465  *________________________________________
00001F84                          2466  * Register Use Summary:
00001F84                          2467  *
00001F84                          2468  * D0: LOCAL VARIABLE  - Trap task designator
00001F84                          2469  *
00001F84                          2470  * A1: LOCAL VARIABLE  - String address
00001F84                          2471  *-------------------------------------------------------------------------------
00001F84                          2472  PRINT_BLE
00001F84  43F9 00002AF5           2473      LEA             STRING_BLE,A1   * Load "BLE" into A1
00001F8A  103C 000E               2474      MOVE.B          #14,D0      * Set trap task to String
00001F8E  4E4F                    2475      TRAP            #15         * Print "BLE "
00001F90  6000 FE34               2476      BRA             PRINT_OPCODE_LOOP_RETURN
00001F94                          2477  
00001F94                          2478  *-------------------------------------------------------------------------------
00001F94                          2479  *
00001F94                          2480  *       PRINT BEQ
00001F94                          2481  *________________________________________
00001F94                          2482  * Register Use Summary:
00001F94                          2483  *
00001F94                          2484  * D0: LOCAL VARIABLE  - Trap task designator
00001F94                          2485  *
00001F94                          2486  * A1: LOCAL VARIABLE  - String address
00001F94                          2487  *-------------------------------------------------------------------------------
00001F94                          2488  PRINT_BEQ
00001F94  43F9 00002AF0           2489      LEA             STRING_BEQ,A1   * Load "BEQ" into A1
00001F9A  103C 000E               2490      MOVE.B          #14,D0      * Set trap task to String
00001F9E  4E4F                    2491      TRAP            #15         * Print "BEQ "
00001FA0  6000 FE24               2492      BRA             PRINT_OPCODE_LOOP_RETURN
00001FA4                          2493  
00001FA4                          2494  
00001FA4                          2495  *-------------------------------------------------------------------------------
00001FA4                          2496  *
00001FA4                          2497  *       PRINT BRA
00001FA4                          2498  *________________________________________
00001FA4                          2499  * Register Use Summary:
00001FA4                          2500  *
00001FA4                          2501  * D0: LOCAL VARIABLE  - Trap task designator
00001FA4                          2502  *
00001FA4                          2503  * A1: LOCAL VARIABLE  - String address
00001FA4                          2504  *-------------------------------------------------------------------------------
00001FA4                          2505  PRINT_BRA
00001FA4  43F9 00002AFA           2506      LEA             STRING_BRA,A1   * Load "BRA" into A1
00001FAA  103C 000E               2507      MOVE.B          #14,D0      * Set trap task to String
00001FAE  4E4F                    2508      TRAP            #15         * Print "BRA "
00001FB0  6000 FE14               2509      BRA             PRINT_OPCODE_LOOP_RETURN
00001FB4                          2510  
00001FB4                          2511  
00001FB4                          2512  *-------------------------------------------------------------------------------
00001FB4                          2513  *
00001FB4                          2514  *       PRINT ADD
00001FB4                          2515  *________________________________________
00001FB4                          2516  * Register Use Summary:
00001FB4                          2517  *
00001FB4                          2518  * D0: LOCAL VARIABLE  - Trap task designator
00001FB4                          2519  *
00001FB4                          2520  * A1: LOCAL VARIABLE  - String address
00001FB4                          2521  *-------------------------------------------------------------------------------
00001FB4                          2522  PRINT_ADD
00001FB4  43F9 00002AE7           2523      LEA             STRING_ADD,A1   * Load "ADD" into A1
00001FBA  103C 000E               2524      MOVE.B          #14,D0      * Set trap task to String
00001FBE  4E4F                    2525      TRAP            #15         * Print "ADD "
00001FC0  6000 FE04               2526      BRA             PRINT_OPCODE_LOOP_RETURN
00001FC4                          2527  
00001FC4                          2528  
00001FC4                          2529  *-------------------------------------------------------------------------------
00001FC4                          2530  *
00001FC4                          2531  *       PRINT ADDA
00001FC4                          2532  *________________________________________
00001FC4                          2533  * Register Use Summary:
00001FC4                          2534  *
00001FC4                          2535  * D0: LOCAL VARIABLE  - Trap task designator
00001FC4                          2536  *
00001FC4                          2537  * A1: LOCAL VARIABLE  - String address
00001FC4                          2538  *-------------------------------------------------------------------------------
00001FC4                          2539  PRINT_ADDA
00001FC4  43F9 00002AEB           2540      LEA             STRING_ADDA,A1  * Load "ADDA" into A1
00001FCA  103C 000E               2541      MOVE.B          #14,D0      * Set trap task to String
00001FCE  4E4F                    2542      TRAP            #15         * Print "ADDA "
00001FD0  6000 FDF4               2543      BRA             PRINT_OPCODE_LOOP_RETURN
00001FD4                          2544  
00001FD4                          2545  
00001FD4                          2546  *-------------------------------------------------------------------------------
00001FD4                          2547  *
00001FD4                          2548  *       PRINT MISC_NUMBER
00001FD4                          2549  *________________________________________
00001FD4                          2550  * Register Use Summary:
00001FD4                          2551  *
00001FD4                          2552  * D0: LOCAL VARIABLE  - Trap task designator
00001FD4                          2553  *
00001FD4                          2554  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
00001FD4                          2555  *
00001FD4                          2556  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
00001FD4                          2557  *
00001FD4                          2558  * A1: LOCAL VARIABLE  - String address
00001FD4                          2559  *-------------------------------------------------------------------------------
00001FD4                          2560  PRINT_MISC_NUMBER
00001FD4  4281                    2561      CLR.L   D1
00001FD6                          2562  
00001FD6  103C 000F               2563      MOVE.B  #15,D0
00001FDA  1239 00002B7A           2564      MOVE.B  MISC_NUMBER,D1
00001FE0  143C 000A               2565      MOVE.B  #10,D2
00001FE4  4E4F                    2566      TRAP #15
00001FE6                          2567  
00001FE6  6000 FDDE               2568      BRA     PRINT_OPCODE_LOOP_RETURN
00001FEA                          2569  
00001FEA                          2570  *-------------------------------------------------------------------------------
00001FEA                          2571  *
00001FEA                          2572  *       PRINT MISC_NUMBER_AS_ADDRESS
00001FEA                          2573  *________________________________________
00001FEA                          2574  * Register Use Summary:
00001FEA                          2575  *
00001FEA                          2576  * D0: LOCAL VARIABLE  - Trap task designator
00001FEA                          2577  *
00001FEA                          2578  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
00001FEA                          2579  *
00001FEA                          2580  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
00001FEA                          2581  *
00001FEA                          2582  * A1: LOCAL VARIABLE  - String address
00001FEA                          2583  *-------------------------------------------------------------------------------
00001FEA                          2584  PRINT_MISC_NUMBER_AS_ADDRESS
00001FEA                          2585  
00001FEA  43F9 00002AA8           2586      LEA             STRING_A,A1
00001FF0  103C 000E               2587      MOVE.B          #14,D0
00001FF4  4E4F                    2588      TRAP            #15
00001FF6                          2589  
00001FF6  4280                    2590      CLR.L   D0
00001FF8  4281                    2591      CLR.L   D1
00001FFA  4282                    2592      CLR.L   D2
00001FFC                          2593  
00001FFC  103C 000F               2594      MOVE.B  #15,D0
00002000  1239 00002B7A           2595      MOVE.B  MISC_NUMBER,D1
00002006  143C 000A               2596      MOVE.B  #10,D2
0000200A  4E4F                    2597      TRAP #15
0000200C                          2598  
0000200C  6000 FDB8               2599      BRA     PRINT_OPCODE_LOOP_RETURN
00002010                          2600  
00002010                          2601  *-------------------------------------------------------------------------------
00002010                          2602  *
00002010                          2603  *       PRINT MISC_NUMBER_AS_REGISTER
00002010                          2604  *________________________________________
00002010                          2605  * Register Use Summary:
00002010                          2606  *
00002010                          2607  * D0: LOCAL VARIABLE  - Trap task designator
00002010                          2608  *
00002010                          2609  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
00002010                          2610  *
00002010                          2611  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
00002010                          2612  *
00002010                          2613  * A1: LOCAL VARIABLE  - String address
00002010                          2614  *-------------------------------------------------------------------------------
00002010                          2615  PRINT_MISC_NUMBER_AS_REGISTER
00002010                          2616  
00002010  43F9 00002AA6           2617      LEA             STRING_D,A1
00002016  103C 000E               2618      MOVE.B          #14,D0
0000201A  4E4F                    2619      TRAP            #15
0000201C                          2620  
0000201C  4280                    2621      CLR.L   D0
0000201E  4281                    2622      CLR.L   D1
00002020  4282                    2623      CLR.L   D2
00002022                          2624  
00002022  103C 000F               2625      MOVE.B  #15,D0
00002026  1239 00002B7A           2626      MOVE.B  MISC_NUMBER,D1
0000202C  143C 000A               2627      MOVE.B  #10,D2
00002030  4E4F                    2628      TRAP #15
00002032                          2629  
00002032  6000 FD92               2630      BRA     PRINT_OPCODE_LOOP_RETURN
00002036                          2631  
00002036                          2632  *-------------------------------------------------------------------------------
00002036                          2633  *
00002036                          2634  *       PRINT MISC_REGISTER
00002036                          2635  *________________________________________
00002036                          2636  * Register Use Summary:
00002036                          2637  *
00002036                          2638  * D0: LOCAL VARIABLE  - Trap task designator
00002036                          2639  *
00002036                          2640  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
00002036                          2641  *
00002036                          2642  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
00002036                          2643  *
00002036                          2644  * A1: LOCAL VARIABLE  - String address
00002036                          2645  *-------------------------------------------------------------------------------
00002036                          2646  PRINT_MISC_REGISTER
00002036                          2647  
00002036  43F9 00002AA6           2648      LEA             STRING_D,A1
0000203C  103C 000E               2649      MOVE.B          #14,D0
00002040  4E4F                    2650      TRAP            #15
00002042                          2651  
00002042  4280                    2652      CLR.L   D0
00002044  4281                    2653      CLR.L   D1
00002046  4282                    2654      CLR.L   D2
00002048                          2655  
00002048  103C 000F               2656      MOVE.B  #15,D0
0000204C  1239 00002B7E           2657      MOVE.B  MISC_REGISTER,D1
00002052  143C 000A               2658      MOVE.B  #10,D2
00002056  4E4F                    2659      TRAP #15
00002058                          2660  
00002058  6000 FD6C               2661      BRA     PRINT_OPCODE_LOOP_RETURN
0000205C                          2662  
0000205C                          2663  
0000205C                          2664  
0000205C                          2665  *-------------------------------------------------------------------------------
0000205C                          2666  *
0000205C                          2667  *       PRINT_MISC_PRE_DEC
0000205C                          2668  *________________________________________
0000205C                          2669  * Register Use Summary:
0000205C                          2670  *
0000205C                          2671  * D0: LOCAL VARIABLE  - Trap task designator
0000205C                          2672  *
0000205C                          2673  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
0000205C                          2674  *
0000205C                          2675  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
0000205C                          2676  *
0000205C                          2677  * A1: LOCAL VARIABLE  - String address
0000205C                          2678  *-------------------------------------------------------------------------------
0000205C                          2679  PRINT_MISC_PRE_DEC
0000205C                          2680  
0000205C  43F9 00002AB2           2681      LEA             STRING_MINUS,A1
00002062  103C 000E               2682      MOVE.B          #14,D0
00002066  4E4F                    2683      TRAP            #15
00002068                          2684  
00002068  43F9 00002AAC           2685      LEA             STRING_LEFT_PAREN,A1
0000206E  103C 000E               2686      MOVE.B          #14,D0
00002072  4E4F                    2687      TRAP            #15
00002074                          2688  
00002074  43F9 00002AA8           2689      LEA             STRING_A,A1
0000207A  103C 000E               2690      MOVE.B          #14,D0
0000207E  4E4F                    2691      TRAP            #15
00002080                          2692  
00002080  4280                    2693      CLR.L   D0
00002082  4281                    2694      CLR.L   D1
00002084  4282                    2695      CLR.L   D2
00002086                          2696  
00002086  103C 000F               2697      MOVE.B  #15,D0
0000208A  1239 00002B7A           2698      MOVE.B  MISC_NUMBER,D1
00002090  143C 000A               2699      MOVE.B  #10,D2
00002094  4E4F                    2700      TRAP #15
00002096                          2701  
00002096  43F9 00002AAE           2702      LEA             STRING_RIGHT_PAREN,A1
0000209C  103C 000E               2703      MOVE.B          #14,D0
000020A0  4E4F                    2704      TRAP            #15
000020A2                          2705  
000020A2  6000 FD22               2706      BRA     PRINT_OPCODE_LOOP_RETURN
000020A6                          2707  
000020A6                          2708  *-------------------------------------------------------------------------------
000020A6                          2709  *
000020A6                          2710  *       PRINT_MISC_POST_INC
000020A6                          2711  *________________________________________
000020A6                          2712  * Register Use Summary:
000020A6                          2713  *
000020A6                          2714  * D0: LOCAL VARIABLE  - Trap task designator
000020A6                          2715  *
000020A6                          2716  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
000020A6                          2717  *
000020A6                          2718  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
000020A6                          2719  *
000020A6                          2720  * A1: LOCAL VARIABLE  - String address
000020A6                          2721  *-------------------------------------------------------------------------------
000020A6                          2722  PRINT_MISC_POST_INC
000020A6                          2723  
000020A6  43F9 00002AAC           2724      LEA             STRING_LEFT_PAREN,A1
000020AC  103C 000E               2725      MOVE.B          #14,D0
000020B0  4E4F                    2726      TRAP            #15
000020B2                          2727  
000020B2  43F9 00002AA8           2728      LEA             STRING_A,A1
000020B8  103C 000E               2729      MOVE.B          #14,D0
000020BC  4E4F                    2730      TRAP            #15
000020BE                          2731  
000020BE  4280                    2732      CLR.L   D0
000020C0  4281                    2733      CLR.L   D1
000020C2  4282                    2734      CLR.L   D2
000020C4                          2735  
000020C4  103C 000F               2736      MOVE.B  #15,D0
000020C8  1239 00002B7A           2737      MOVE.B  MISC_NUMBER,D1
000020CE  143C 000A               2738      MOVE.B  #10,D2
000020D2  4E4F                    2739      TRAP #15
000020D4                          2740  
000020D4  43F9 00002AAE           2741      LEA             STRING_RIGHT_PAREN,A1
000020DA  103C 000E               2742      MOVE.B          #14,D0
000020DE  4E4F                    2743      TRAP            #15
000020E0                          2744  
000020E0  43F9 00002AB0           2745      LEA             STRING_PLUS,A1
000020E6  103C 000E               2746      MOVE.B          #14,D0
000020EA  4E4F                    2747      TRAP            #15
000020EC                          2748  
000020EC  6000 FCD8               2749      BRA     PRINT_OPCODE_LOOP_RETURN
000020F0                          2750  
000020F0                          2751  *-------------------------------------------------------------------------------
000020F0                          2752  *
000020F0                          2753  *       PRINT_MISC_ADDRESS_IND
000020F0                          2754  *________________________________________
000020F0                          2755  * Register Use Summary:
000020F0                          2756  *
000020F0                          2757  * D0: LOCAL VARIABLE  - Trap task designator
000020F0                          2758  *
000020F0                          2759  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
000020F0                          2760  *
000020F0                          2761  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
000020F0                          2762  *
000020F0                          2763  * A1: LOCAL VARIABLE  - String address
000020F0                          2764  *-------------------------------------------------------------------------------
000020F0                          2765  PRINT_MISC_ADDRESS_IND
000020F0                          2766  
000020F0  43F9 00002AAC           2767      LEA             STRING_LEFT_PAREN,A1
000020F6  103C 000E               2768      MOVE.B          #14,D0
000020FA  4E4F                    2769      TRAP            #15
000020FC                          2770  
000020FC  43F9 00002AA8           2771      LEA             STRING_A,A1
00002102  103C 000E               2772      MOVE.B          #14,D0
00002106  4E4F                    2773      TRAP            #15
00002108                          2774  
00002108  4280                    2775      CLR.L   D0
0000210A  4281                    2776      CLR.L   D1
0000210C  4282                    2777      CLR.L   D2
0000210E                          2778  
0000210E  103C 000F               2779      MOVE.B  #15,D0
00002112  1239 00002B7A           2780      MOVE.B  MISC_NUMBER,D1
00002118  143C 000A               2781      MOVE.B  #10,D2
0000211C  4E4F                    2782      TRAP #15
0000211E                          2783  
0000211E  43F9 00002AAE           2784      LEA             STRING_RIGHT_PAREN,A1
00002124  103C 000E               2785      MOVE.B          #14,D0
00002128  4E4F                    2786      TRAP            #15
0000212A                          2787  
0000212A  6000 FC9A               2788      BRA     PRINT_OPCODE_LOOP_RETURN
0000212E                          2789  
0000212E                          2790  
0000212E                          2791  *-------------------------------------------------------------------------------
0000212E                          2792  *
0000212E                          2793  *       PRINT MISC_NUMBER_AS_DATA
0000212E                          2794  *________________________________________
0000212E                          2795  * Register Use Summary:
0000212E                          2796  *
0000212E                          2797  * D0: LOCAL VARIABLE  - Trap task designator
0000212E                          2798  *
0000212E                          2799  * D1: LOCAL VARIABLE  - MISC_NUMBER to be printed
0000212E                          2800  *
0000212E                          2801  * D2: LOCAL VARIABLE  - Base of MISC_NUMBER
0000212E                          2802  *
0000212E                          2803  * A1: LOCAL VARIABLE  - String address
0000212E                          2804  *-------------------------------------------------------------------------------
0000212E                          2805  PRINT_MISC_NUMBER_AS_DATA
0000212E                          2806  
0000212E  43F9 00002AB4           2807      LEA             STRING_POUND,A1
00002134  103C 000E               2808      MOVE.B          #14,D0
00002138  4E4F                    2809      TRAP            #15
0000213A                          2810  
0000213A  4280                    2811      CLR.L   D0
0000213C  4281                    2812      CLR.L   D1
0000213E  4282                    2813      CLR.L   D2
00002140                          2814  
00002140  103C 000F               2815      MOVE.B  #15,D0
00002144  1239 00002B7A           2816      MOVE.B  MISC_NUMBER,D1
0000214A  143C 000A               2817      MOVE.B  #10,D2
0000214E  4E4F                    2818      TRAP #15
00002150                          2819  
00002150  6000 FC74               2820      BRA     PRINT_OPCODE_LOOP_RETURN
00002154                          2821  
00002154                          2822  
00002154                          2823  *-------------------------------------------------------------------------------
00002154                          2824  *
00002154                          2825  *       PRINT ADDQ
00002154                          2826  *________________________________________
00002154                          2827  * Register Use Summary:
00002154                          2828  *
00002154                          2829  * D0: LOCAL VARIABLE  - Trap task designator
00002154                          2830  *
00002154                          2831  * A1: LOCAL VARIABLE  - String address
00002154                          2832  *-------------------------------------------------------------------------------
00002154                          2833  PRINT_ADDQ
00002154  43F9 00002AE2           2834      LEA             STRING_ADDQ,A1  * Load "ADDQ" into A1
0000215A  103C 000E               2835      MOVE.B          #14,D0      * Set trap task to String
0000215E  4E4F                    2836      TRAP            #15         * Print ", "
00002160  6000 FC64               2837      BRA             PRINT_OPCODE_LOOP_RETURN
00002164                          2838  
00002164                          2839  *-------------------------------------------------------------------------------
00002164                          2840  *
00002164                          2841  *       PRINT MOVE
00002164                          2842  *________________________________________
00002164                          2843  * Register Use Summary:
00002164                          2844  *
00002164                          2845  * D0: LOCAL VARIABLE  - Trap task designator
00002164                          2846  *
00002164                          2847  * A1: LOCAL VARIABLE  - String address
00002164                          2848  *-------------------------------------------------------------------------------
00002164                          2849  PRINT_MOVE
00002164  43F9 00002B0C           2850      LEA             STRING_MOVE,A1  * Load "MOVE" into A1
0000216A  103C 000E               2851      MOVE.B          #14,D0      * Set trap task to String
0000216E  4E4F                    2852      TRAP            #15         * Print ", "
00002170  6000 FC54               2853      BRA             PRINT_OPCODE_LOOP_RETURN
00002174                          2854  
00002174                          2855  *-------------------------------------------------------------------------------
00002174                          2856  *
00002174                          2857  *       PRINT MOVEA
00002174                          2858  *________________________________________
00002174                          2859  * Register Use Summary:
00002174                          2860  *
00002174                          2861  * D0: LOCAL VARIABLE  - Trap task designator
00002174                          2862  *
00002174                          2863  * A1: LOCAL VARIABLE  - String address
00002174                          2864  *-------------------------------------------------------------------------------
00002174                          2865  PRINT_MOVEA
00002174  43F9 00002B11           2866      LEA             STRING_MOVEA,A1 * Load "MOVEA" into A1
0000217A  103C 000E               2867      MOVE.B          #14,D0      * Set trap task to String
0000217E  4E4F                    2868      TRAP            #15         * Print ", "
00002180  6000 FC44               2869      BRA             PRINT_OPCODE_LOOP_RETURN
00002184                          2870  
00002184                          2871  
00002184                          2872  *-------------------------------------------------------------------------------
00002184                          2873  *
00002184                          2874  *       PRINT MOVEQ
00002184                          2875  *________________________________________
00002184                          2876  * Register Use Summary:
00002184                          2877  *
00002184                          2878  * D0: LOCAL VARIABLE  - Trap task designator
00002184                          2879  *
00002184                          2880  * A1: LOCAL VARIABLE  - String address
00002184                          2881  *-------------------------------------------------------------------------------
00002184                          2882  PRINT_MOVEQ
00002184  43F9 00002B17           2883      LEA             STRING_MOVEQ,A1 * Load "MOVEQ" into A1
0000218A  103C 000E               2884      MOVE.B          #14,D0      * Set trap task to String
0000218E  4E4F                    2885      TRAP            #15         * Print ", "
00002190  6000 FC34               2886      BRA             PRINT_OPCODE_LOOP_RETURN
00002194                          2887  
00002194                          2888  
00002194                          2889  *-------------------------------------------------------------------------------
00002194                          2890  *
00002194                          2891  *       PRINT MOVEM
00002194                          2892  *________________________________________
00002194                          2893  * Register Use Summary:
00002194                          2894  *
00002194                          2895  * D0: LOCAL VARIABLE  - Trap task designator
00002194                          2896  *
00002194                          2897  * A1: LOCAL VARIABLE  - String address
00002194                          2898  *-------------------------------------------------------------------------------
00002194                          2899  PRINT_MOVEM
00002194  43F9 00002B21           2900      LEA             STRING_MOVEM,A1 * Load "MOVEM" into A1
0000219A  103C 000E               2901      MOVE.B          #14,D0      * Set trap task to String
0000219E  4E4F                    2902      TRAP            #15         * Print ", "
000021A0  6000 FC24               2903      BRA             PRINT_OPCODE_LOOP_RETURN
000021A4                          2904  
000021A4                          2905  *-------------------------------------------------------------------------------
000021A4                          2906  *
000021A4                          2907  *       PRINT SUB
000021A4                          2908  *________________________________________
000021A4                          2909  * Register Use Summary:
000021A4                          2910  *
000021A4                          2911  * D0: LOCAL VARIABLE  - Trap task designator
000021A4                          2912  *
000021A4                          2913  * A1: LOCAL VARIABLE  - String address
000021A4                          2914  *-------------------------------------------------------------------------------
000021A4                          2915  PRINT_SUB
000021A4  43F9 00002B27           2916      LEA             STRING_SUB,A1   * Load "SUB" into A1
000021AA  103C 000E               2917      MOVE.B          #14,D0      * Set trap task to String
000021AE  4E4F                    2918      TRAP            #15         * Print ", "
000021B0  6000 FC14               2919      BRA             PRINT_OPCODE_LOOP_RETURN
000021B4                          2920  
000021B4                          2921  *-------------------------------------------------------------------------------
000021B4                          2922  *
000021B4                          2923  *       PRINT AND
000021B4                          2924  *________________________________________
000021B4                          2925  * Register Use Summary:
000021B4                          2926  *
000021B4                          2927  * D0: LOCAL VARIABLE  - Trap task designator
000021B4                          2928  *
000021B4                          2929  * A1: LOCAL VARIABLE  - String address
000021B4                          2930  *-------------------------------------------------------------------------------
000021B4                          2931  PRINT_AND
000021B4  43F9 00002B2B           2932      LEA             STRING_AND,A1   * Load "AND" into A1
000021BA  103C 000E               2933      MOVE.B          #14,D0      * Set trap task to String
000021BE  4E4F                    2934      TRAP            #15         * Print ", "
000021C0  6000 FC04               2935      BRA             PRINT_OPCODE_LOOP_RETURN
000021C4                          2936  
000021C4                          2937  *-------------------------------------------------------------------------------
000021C4                          2938  *
000021C4                          2939  *       PRINT OR
000021C4                          2940  *________________________________________
000021C4                          2941  * Register Use Summary:
000021C4                          2942  *
000021C4                          2943  * D0: LOCAL VARIABLE  - Trap task designator
000021C4                          2944  *
000021C4                          2945  * A1: LOCAL VARIABLE  - String address
000021C4                          2946  *-------------------------------------------------------------------------------
000021C4                          2947  PRINT_OR
000021C4  43F9 00002B2F           2948      LEA             STRING_OR,A1    * Load "OR" into A1
000021CA  103C 000E               2949      MOVE.B          #14,D0      * Set trap task to String
000021CE  4E4F                    2950      TRAP            #15         * Print ", "
000021D0  6000 FBF4               2951      BRA             PRINT_OPCODE_LOOP_RETURN
000021D4                          2952  
000021D4                          2953  
000021D4                          2954  *-------------------------------------------------------------------------------
000021D4                          2955  *
000021D4                          2956  *       PRINT BYTE DESIGNATOR
000021D4                          2957  *________________________________________
000021D4                          2958  * Register Use Summary:
000021D4                          2959  *
000021D4                          2960  * D0: LOCAL VARIABLE  - low byte of opcode
000021D4                          2961  * A1: LOCAL VARIABLE  - String address
000021D4                          2962  *-------------------------------------------------------------------------------
000021D4                          2963  PRINT_BYTE_DESIGNATOR
000021D4  43F9 00002A9A           2964      LEA             STRING_BYTE_DESIGNATOR,A1
000021DA  103C 000E               2965      MOVE.B          #14,D0
000021DE  4E4F                    2966      TRAP            #15
000021E0  6000 FBE4               2967      BRA             PRINT_OPCODE_LOOP_RETURN
000021E4                          2968  
000021E4                          2969  *-------------------------------------------------------------------------------
000021E4                          2970  *
000021E4                          2971  *       PRINT WORD DESIGNATOR
000021E4                          2972  *________________________________________
000021E4                          2973  * Register Use Summary:
000021E4                          2974  *
000021E4                          2975  * D0: LOCAL VARIABLE  - low byte of opcode
000021E4                          2976  * A1: LOCAL VARIABLE  - String address
000021E4                          2977  *-------------------------------------------------------------------------------
000021E4                          2978  PRINT_WORD_DESIGNATOR
000021E4  43F9 00002A9E           2979      LEA             STRING_WORD_DESIGNATOR,A1
000021EA  103C 000E               2980      MOVE.B          #14,D0
000021EE  4E4F                    2981      TRAP            #15
000021F0  6000 FBD4               2982      BRA             PRINT_OPCODE_LOOP_RETURN
000021F4                          2983  
000021F4                          2984  *-------------------------------------------------------------------------------
000021F4                          2985  *
000021F4                          2986  *       PRINT LONG DESIGNATOR
000021F4                          2987  *________________________________________
000021F4                          2988  * Register Use Summary:
000021F4                          2989  *
000021F4                          2990  * D0: LOCAL VARIABLE  - low byte of opcode
000021F4                          2991  * A1: LOCAL VARIABLE  - String address
000021F4                          2992  *-------------------------------------------------------------------------------
000021F4                          2993  PRINT_LONG_DESIGNATOR
000021F4  43F9 00002AA2           2994      LEA             STRING_LONG_DESIGNATOR,A1
000021FA  103C 000E               2995      MOVE.B          #14,D0
000021FE  4E4F                    2996      TRAP            #15
00002200  6000 FBC4               2997      BRA             PRINT_OPCODE_LOOP_RETURN
00002204                          2998  
00002204                          2999  *-------------------------------------------------------------------------------
00002204                          3000  *
00002204                          3001  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - Dn REGISTER
00002204                          3002  *
00002204                          3003  * Prints "Dx, " where x ranges between 0 and 7. This is determined by masking
00002204                          3004  * the last four bits of the current opcode stored in D7.
00002204                          3005  *
00002204                          3006  *________________________________________
00002204                          3007  * Register Use Summary:
00002204                          3008  *
00002204                          3009  * D0: LOCAL VARIABLE  - Trap task designator
00002204                          3010  * D1: LOCAL VARIABLE  - Dn Register number to display
00002204                          3011  * D7: CONST PARAMETER - The opcode word
00002204                          3012  *
00002204                          3013  * A1: LOCAL VARIABLE  - String address
00002204                          3014  *-------------------------------------------------------------------------------
00002204                          3015  PRINT_EA_MODE_ID_DN
00002204  43F9 00002AA6           3016      LEA             STRING_D,A1     * Load "D" into A1
0000220A  103C 000E               3017      MOVE.B          #14,D0      * Set trap task to String
0000220E  4E4F                    3018      TRAP            #15         * Print "D"
00002210                          3019  
00002210  4281                    3020      CLR.L           D1
00002212  1207                    3021      MOVE.B          D7,D1       * Get the lowest byte of the opcode
00002214  C23C 0007               3022      AND.B           #$7,D1      * Get the lowest four bits (register #)
00002218  103C 0003               3023      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
0000221C  4E4F                    3024      TRAP            #15         * Print the register MISC_NUMBER
0000221E                          3025  
0000221E  6000 FBA6               3026      BRA             PRINT_OPCODE_LOOP_RETURN
00002222                          3027  
00002222                          3028  *-------------------------------------------------------------------------------
00002222                          3029  *
00002222                          3030  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - ADDRESS REGISTER
00002222                          3031  *
00002222                          3032  * Prints "Ax, " where x ranges between 0 and 7. This is determined by masking
00002222                          3033  * the last four bits of the current opcode stored in D7.
00002222                          3034  *
00002222                          3035  *________________________________________
00002222                          3036  * Register Use Summary:
00002222                          3037  *
00002222                          3038  * D0: LOCAL VARIABLE  - Trap task designator
00002222                          3039  * D1: LOCAL VARIABLE  - Dn Register number to display
00002222                          3040  * D7: CONST PARAMETER - The opcode word
00002222                          3041  *
00002222                          3042  * A1: LOCAL VARIABLE  - String address
00002222                          3043  *-------------------------------------------------------------------------------
00002222                          3044  PRINT_EA_MODE_ID_AN
00002222  43F9 00002AA8           3045      LEA             STRING_A,A1
00002228  103C 000E               3046      MOVE.B          #14,D0
0000222C  4E4F                    3047      TRAP            #15
0000222E                          3048  
0000222E                          3049  
0000222E  4281                    3050      CLR.L           D1
00002230  1207                    3051      MOVE.B          D7,D1       * Get the lowest byte of the opcode
00002232  C23C 0007               3052      AND.B           #$7,D1      * Get the lowest four bits (register #)
00002236  103C 0003               3053      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
0000223A  4E4F                    3054      TRAP            #15         * Print the register MISC_NUMBER
0000223C                          3055  
0000223C  6000 FB88               3056      BRA             PRINT_OPCODE_LOOP_RETURN
00002240                          3057  
00002240                          3058  
00002240                          3059  *-------------------------------------------------------------------------------
00002240                          3060  *
00002240                          3061  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - (ADDRESS REGISTER)
00002240                          3062  *
00002240                          3063  *________________________________________
00002240                          3064  * Register Use Summary:
00002240                          3065  *
00002240                          3066  * D0: LOCAL VARIABLE  - Trap task designator
00002240                          3067  * D1: LOCAL VARIABLE  - Dn Register MISC_NUMBER to display
00002240                          3068  * D7: CONST PARAMETER - The opcode word
00002240                          3069  *
00002240                          3070  * A1: LOCAL VARIABLE  - String address
00002240                          3071  *-------------------------------------------------------------------------------
00002240                          3072  PRINT_EA_MODE_ID_AN_INDIRECT
00002240  43F9 00002AAC           3073      LEA             STRING_LEFT_PAREN,A1
00002246  103C 000E               3074      MOVE.B          #14,D0
0000224A  4E4F                    3075      TRAP            #15
0000224C                          3076  
0000224C  43F9 00002AA8           3077      LEA             STRING_A,A1
00002252  103C 000E               3078      MOVE.B          #14,D0
00002256  4E4F                    3079      TRAP            #15
00002258                          3080  
00002258  4281                    3081      CLR.L           D1
0000225A  1207                    3082      MOVE.B          D7,D1       * Get the lowest byte of the opcode
0000225C  C23C 0007               3083      AND.B           #$7,D1      * Get the lowest four bits (register #)
00002260  103C 0003               3084      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
00002264  4E4F                    3085      TRAP            #15         * Print the register MISC_NUMBER
00002266                          3086  
00002266  43F9 00002AAE           3087      LEA             STRING_RIGHT_PAREN,A1
0000226C  103C 000E               3088      MOVE.B          #14,D0
00002270  4E4F                    3089      TRAP            #15
00002272                          3090  
00002272  6000 FB52               3091      BRA             PRINT_OPCODE_LOOP_RETURN
00002276                          3092  
00002276                          3093  *-------------------------------------------------------------------------------
00002276                          3094  *
00002276                          3095  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - (ADDRESS REGISTER)+
00002276                          3096  *
00002276                          3097  *________________________________________
00002276                          3098  * Register Use Summary:
00002276                          3099  *
00002276                          3100  * D0: LOCAL VARIABLE  - Trap task designator
00002276                          3101  * D1: LOCAL VARIABLE  - Dn Register number to display
00002276                          3102  * D7: CONST PARAMETER - The opcode word
00002276                          3103  *
00002276                          3104  * A1: LOCAL VARIABLE  - String address
00002276                          3105  *-------------------------------------------------------------------------------
00002276                          3106  PRINT_EA_MODE_ID_AN_POST_INC
00002276  43F9 00002AAC           3107      LEA             STRING_LEFT_PAREN,A1
0000227C  103C 000E               3108      MOVE.B          #14,D0
00002280  4E4F                    3109      TRAP            #15
00002282                          3110  
00002282  43F9 00002AA8           3111      LEA             STRING_A,A1
00002288  103C 000E               3112      MOVE.B          #14,D0
0000228C  4E4F                    3113      TRAP            #15
0000228E                          3114  
0000228E  4281                    3115      CLR.L           D1
00002290  1207                    3116      MOVE.B          D7,D1       * Get the lowest byte of the opcode
00002292  C23C 0007               3117      AND.B           #$7,D1      * Get the lowest four bits (register #)
00002296  103C 0003               3118      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
0000229A  4E4F                    3119      TRAP            #15         * Print the register MISC_NUMBER
0000229C                          3120  
0000229C  43F9 00002AAE           3121      LEA             STRING_RIGHT_PAREN,A1
000022A2  103C 000E               3122      MOVE.B          #14,D0
000022A6  4E4F                    3123      TRAP            #15
000022A8                          3124  
000022A8  43F9 00002AB0           3125      LEA             STRING_PLUS,A1
000022AE  103C 000E               3126      MOVE.B          #14,D0
000022B2  4E4F                    3127      TRAP            #15
000022B4                          3128  
000022B4  6000 FB10               3129      BRA             PRINT_OPCODE_LOOP_RETURN
000022B8                          3130  
000022B8                          3131  
000022B8                          3132  
000022B8                          3133  *-------------------------------------------------------------------------------
000022B8                          3134  *
000022B8                          3135  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - -(ADDRESS REGISTER)
000022B8                          3136  *
000022B8                          3137  *________________________________________
000022B8                          3138  * Register Use Summary:
000022B8                          3139  *
000022B8                          3140  * D0: LOCAL VARIABLE  - Trap task designator
000022B8                          3141  * D1: LOCAL VARIABLE  - Dn Register number to display
000022B8                          3142  * D7: CONST PARAMETER - The opcode word
000022B8                          3143  *
000022B8                          3144  * A1: LOCAL VARIABLE  - String address
000022B8                          3145  *-------------------------------------------------------------------------------
000022B8                          3146  PRINT_EA_MODE_ID_AN_PRE_DEC
000022B8  43F9 00002AB2           3147      LEA             STRING_MINUS,A1
000022BE  103C 000E               3148      MOVE.B          #14,D0
000022C2  4E4F                    3149      TRAP            #15
000022C4                          3150  
000022C4  43F9 00002AAC           3151      LEA             STRING_LEFT_PAREN,A1
000022CA  103C 000E               3152      MOVE.B          #14,D0
000022CE  4E4F                    3153      TRAP            #15
000022D0                          3154  
000022D0  43F9 00002AA8           3155      LEA             STRING_A,A1
000022D6  103C 000E               3156      MOVE.B          #14,D0
000022DA  4E4F                    3157      TRAP            #15
000022DC                          3158  
000022DC  4281                    3159      CLR.L           D1
000022DE  1207                    3160      MOVE.B          D7,D1       * Get the lowest byte of the opcode
000022E0  C23C 0007               3161      AND.B           #$7,D1      * Get the lowest four bits (register #)
000022E4  103C 0003               3162      MOVE.B          #3,D0       * Set trap task to signed MISC_NUMBER
000022E8  4E4F                    3163      TRAP            #15         * Print the register MISC_NUMBER
000022EA                          3164  
000022EA  43F9 00002AAE           3165      LEA             STRING_RIGHT_PAREN,A1
000022F0  103C 000E               3166      MOVE.B          #14,D0
000022F4  4E4F                    3167      TRAP            #15
000022F6                          3168  
000022F6  6000 FACE               3169      BRA             PRINT_OPCODE_LOOP_RETURN
000022FA                          3170  
000022FA                          3171  
000022FA                          3172  
000022FA                          3173  
000022FA                          3174  
000022FA                          3175  *-------------------------------------------------------------------------------
000022FA                          3176  *
000022FA                          3177  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - WORD DATA
000022FA                          3178  *
000022FA                          3179  *________________________________________
000022FA                          3180  * Register Use Summary:
000022FA                          3181  *
000022FA                          3182  * D0: LOCAL VARIABLE  - Trap task designator
000022FA                          3183  * D1: LOCAL VARIABLE  - Dn Register number to display
000022FA                          3184  * D7: CONST PARAMETER - The opcode word
000022FA                          3185  *
000022FA                          3186  * A1: LOCAL VARIABLE  - String address
000022FA                          3187  *-------------------------------------------------------------------------------
000022FA                          3188  PRINT_EA_MODE_ID_IND_SHORT
000022FA  43F9 00002AB6           3189      LEA             STRING_DOLLAR,A1
00002300  103C 000E               3190      MOVE.B          #14,D0
00002304  4E4F                    3191      TRAP            #15
00002306                          3192  
00002306  2238 1016               3193      MOVE.L          DATA1,D1
0000230A  4841                    3194      SWAP            D1              * We only want the upper word
0000230C  C27C FFFF               3195      AND             #$0000FFFF,D1   * Bit mask for upper word
00002310                          3196  
00002310  700F                    3197      MOVEQ           #15,D0
00002312  7410                    3198      MOVEQ           #16,D2
00002314  4E4F                    3199      TRAP            #15
00002316                          3200  
00002316  6000 FAAE               3201      BRA             PRINT_OPCODE_LOOP_RETURN
0000231A                          3202  
0000231A                          3203  *-------------------------------------------------------------------------------
0000231A                          3204  *
0000231A                          3205  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - WORD DATA - DATA2
0000231A                          3206  *
0000231A                          3207  *________________________________________
0000231A                          3208  * Register Use Summary:
0000231A                          3209  *
0000231A                          3210  * D0: LOCAL VARIABLE  - Trap task designator
0000231A                          3211  * D1: LOCAL VARIABLE  - Dn Register number to display
0000231A                          3212  * D7: CONST PARAMETER - The opcode word
0000231A                          3213  *
0000231A                          3214  * A1: LOCAL VARIABLE  - String address
0000231A                          3215  *-------------------------------------------------------------------------------
0000231A                          3216  PRINT_EA_MODE_ID_IND_SHORT_DATA2
0000231A  43F9 00002AB6           3217      LEA             STRING_DOLLAR,A1
00002320  103C 000E               3218      MOVE.B          #14,D0
00002324  4E4F                    3219      TRAP            #15
00002326                          3220  
00002326  2238 101C               3221      MOVE.L          DATA2,D1
0000232A  4841                    3222      SWAP            D1              * We only want the upper word
0000232C  C27C FFFF               3223      AND             #$0000FFFF,D1   * Bit mask for upper word
00002330                          3224  
00002330  700F                    3225      MOVEQ           #15,D0
00002332  7410                    3226      MOVEQ           #16,D2
00002334  4E4F                    3227      TRAP            #15
00002336                          3228  
00002336  6000 FA8E               3229      BRA             PRINT_OPCODE_LOOP_RETURN
0000233A                          3230  
0000233A                          3231  *-------------------------------------------------------------------------------
0000233A                          3232  *
0000233A                          3233  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - LONG DATA
0000233A                          3234  *
0000233A                          3235  *________________________________________
0000233A                          3236  * Register Use Summary:
0000233A                          3237  *
0000233A                          3238  * D0: LOCAL VARIABLE  - Trap task designator
0000233A                          3239  * D1: LOCAL VARIABLE  - Dn Register number to display
0000233A                          3240  * D7: CONST PARAMETER - The opcode word
0000233A                          3241  *
0000233A                          3242  * A1: LOCAL VARIABLE  - String address
0000233A                          3243  *-------------------------------------------------------------------------------
0000233A                          3244  PRINT_EA_MODE_ID_IND_LONG
0000233A  43F9 00002AB6           3245      LEA             STRING_DOLLAR,A1
00002340  103C 000E               3246      MOVE.B          #14,D0
00002344  4E4F                    3247      TRAP            #15
00002346                          3248  
00002346  2238 1016               3249      MOVE.L          DATA1,D1
0000234A  700F                    3250      MOVEQ           #15,D0
0000234C  7410                    3251      MOVEQ           #16,D2
0000234E  4E4F                    3252      TRAP            #15
00002350                          3253  
00002350  6000 FA74               3254      BRA             PRINT_OPCODE_LOOP_RETURN
00002354                          3255  
00002354                          3256  *-------------------------------------------------------------------------------
00002354                          3257  *
00002354                          3258  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - LONG DATA - DATA2
00002354                          3259  *
00002354                          3260  *________________________________________
00002354                          3261  * Register Use Summary:
00002354                          3262  *
00002354                          3263  * D0: LOCAL VARIABLE  - Trap task designator
00002354                          3264  * D1: LOCAL VARIABLE  - Dn Register number to display
00002354                          3265  * D7: CONST PARAMETER - The opcode word
00002354                          3266  *
00002354                          3267  * A1: LOCAL VARIABLE  - String address
00002354                          3268  *-------------------------------------------------------------------------------
00002354                          3269  PRINT_EA_MODE_ID_IND_LONG_DATA2
00002354  43F9 00002AB6           3270      LEA             STRING_DOLLAR,A1
0000235A  103C 000E               3271      MOVE.B          #14,D0
0000235E  4E4F                    3272      TRAP            #15
00002360                          3273  
00002360  2238 101C               3274      MOVE.L          DATA2,D1
00002364  700F                    3275      MOVEQ           #15,D0
00002366  7410                    3276      MOVEQ           #16,D2
00002368  4E4F                    3277      TRAP            #15
0000236A                          3278  
0000236A  6000 FA5A               3279      BRA             PRINT_OPCODE_LOOP_RETURN
0000236E                          3280  
0000236E                          3281  *-------------------------------------------------------------------------------
0000236E                          3282  *
0000236E                          3283  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - ABSOLUTE
0000236E                          3284  *
0000236E                          3285  *________________________________________
0000236E                          3286  * Register Use Summary:
0000236E                          3287  *
0000236E                          3288  * D0: LOCAL VARIABLE  - Trap task designator
0000236E                          3289  * D1: LOCAL VARIABLE  - Dn Register number to display
0000236E                          3290  * D7: CONST PARAMETER - The opcode word
0000236E                          3291  *
0000236E                          3292  * A1: LOCAL VARIABLE  - String address
0000236E                          3293  *-------------------------------------------------------------------------------
0000236E                          3294  PRINT_EA_MODE_ID_ABS_DATA
0000236E  43F9 00002AB4           3295      LEA             STRING_POUND,A1
00002374  103C 000E               3296      MOVE.B          #14,D0
00002378  4E4F                    3297      TRAP            #15
0000237A                          3298  
0000237A  43F9 00002AB6           3299      LEA             STRING_DOLLAR,A1
00002380  103C 000E               3300      MOVE.B          #14,D0
00002384  4E4F                    3301      TRAP            #15
00002386                          3302  
00002386  2238 1016               3303      MOVE.L          DATA1,D1
0000238A  700F                    3304      MOVEQ           #15,D0
0000238C  7410                    3305      MOVEQ           #16,D2
0000238E  4E4F                    3306      TRAP            #15
00002390                          3307  
00002390  6000 FA34               3308      BRA             PRINT_OPCODE_LOOP_RETURN
00002394                          3309  
00002394                          3310  *-------------------------------------------------------------------------------
00002394                          3311  *
00002394                          3312  *       PRINT EFFECTIVE ADDRESS MODE IDENTIFIER - ABSOLUTE DATA2
00002394                          3313  *
00002394                          3314  *________________________________________
00002394                          3315  * Register Use Summary:
00002394                          3316  *
00002394                          3317  * D0: LOCAL VARIABLE  - Trap task designator
00002394                          3318  * D1: LOCAL VARIABLE  - Dn Register number to display
00002394                          3319  * D7: CONST PARAMETER - The opcode word
00002394                          3320  *
00002394                          3321  * A1: LOCAL VARIABLE  - String address
00002394                          3322  *-------------------------------------------------------------------------------
00002394                          3323  PRINT_EA_MODE_ID_ABS_DATA2
00002394  43F9 00002AB4           3324      LEA             STRING_POUND,A1
0000239A  103C 000E               3325      MOVE.B          #14,D0
0000239E  4E4F                    3326      TRAP            #15
000023A0                          3327  
000023A0  43F9 00002AB6           3328      LEA             STRING_DOLLAR,A1
000023A6  103C 000E               3329      MOVE.B          #14,D0
000023AA  4E4F                    3330      TRAP            #15
000023AC                          3331  
000023AC  2238 101C               3332      MOVE.L          DATA2,D1
000023B0  700F                    3333      MOVEQ           #15,D0
000023B2  7410                    3334      MOVEQ           #16,D2
000023B4  4E4F                    3335      TRAP            #15
000023B6                          3336  
000023B6  6000 FA0E               3337      BRA             PRINT_OPCODE_LOOP_RETURN
000023BA                          3338  
000023BA                          3339  *-------------------------------------------------------------------------------
000023BA                          3340  *
000023BA                          3341  *       PRINT JSR
000023BA                          3342  *________________________________________
000023BA                          3343  * Register Use Summary:
000023BA                          3344  *
000023BA                          3345  * D0: LOCAL VARIABLE  - Trap task designator
000023BA                          3346  *
000023BA                          3347  * A1: LOCAL VARIABLE  - String address
000023BA                          3348  *-------------------------------------------------------------------------------
000023BA                          3349  PRINT_JSR
000023BA  43F9 00002B04           3350      LEA             STRING_JSR,A1   * Load "JSR" into A1
000023C0  103C 000E               3351      MOVE.B          #14,D0      * Set trap task to String
000023C4  4E4F                    3352      TRAP            #15
000023C6  6000 F9FE               3353      BRA             PRINT_OPCODE_LOOP_RETURN
000023CA                          3354  
000023CA                          3355  *-------------------------------------------------------------------------------
000023CA                          3356  *
000023CA                          3357  *       PRINT NOT
000023CA                          3358  *________________________________________
000023CA                          3359  * Register Use Summary:
000023CA                          3360  *
000023CA                          3361  * D0: LOCAL VARIABLE  - Trap task designator
000023CA                          3362  *
000023CA                          3363  * A1: LOCAL VARIABLE  - String address
000023CA                          3364  *-------------------------------------------------------------------------------
000023CA                          3365  PRINT_NOT
000023CA  43F9 00002B32           3366      LEA             STRING_NOT,A1   * Load "NOT" into A1
000023D0  103C 000E               3367      MOVE.B          #14,D0      * Set trap task to String
000023D4  4E4F                    3368      TRAP            #15
000023D6  6000 F9EE               3369      BRA             PRINT_OPCODE_LOOP_RETURN
000023DA                          3370  
000023DA                          3371  *-------------------------------------------------------------------------------
000023DA                          3372  *
000023DA                          3373  *       PRINT LEA
000023DA                          3374  *________________________________________
000023DA                          3375  * Register Use Summary:
000023DA                          3376  *
000023DA                          3377  * D0: LOCAL VARIABLE  - Trap task designator
000023DA                          3378  *
000023DA                          3379  * A1: LOCAL VARIABLE  - String address
000023DA                          3380  *-------------------------------------------------------------------------------
000023DA                          3381  PRINT_LEA
000023DA  43F9 00002B36           3382      LEA             STRING_LEA,A1   * Load "LEA" into A1
000023E0  103C 000E               3383      MOVE.B          #14,D0      * Set trap task to String
000023E4  4E4F                    3384      TRAP            #15
000023E6  6000 F9DE               3385      BRA             PRINT_OPCODE_LOOP_RETURN
000023EA                          3386  
000023EA                          3387  *-------------------------------------------------------------------------------
000023EA                          3388  *
000023EA                          3389  *       PRINT FOURSPACE
000023EA                          3390  *________________________________________
000023EA                          3391  * Register Use Summary:
000023EA                          3392  *
000023EA                          3393  * D0: LOCAL VARIABLE  - Trap task designator
000023EA                          3394  *
000023EA                          3395  * A1: LOCAL VARIABLE  - String address
000023EA                          3396  *-------------------------------------------------------------------------------
000023EA                          3397  PRINT_FOURSPACE
000023EA  43F9 00002ABA           3398      LEA             STRING_FOURSPACE,A1 * Load four spaces into A1
000023F0  103C 000E               3399      MOVE.B          #14,D0              * Set trap task to String
000023F4  4E4F                    3400      TRAP            #15
000023F6  6000 F9CE               3401      BRA             PRINT_OPCODE_LOOP_RETURN
000023FA                          3402  
000023FA                          3403  *-------------------------------------------------------------------------------
000023FA                          3404  *
000023FA                          3405  *       PRINT SPACE
000023FA                          3406  *________________________________________
000023FA                          3407  * Register Use Summary:
000023FA                          3408  *
000023FA                          3409  * D0: LOCAL VARIABLE  - Trap task designator
000023FA                          3410  *
000023FA                          3411  * A1: LOCAL VARIABLE  - String address
000023FA                          3412  *-------------------------------------------------------------------------------
000023FA                          3413  PRINT_SPACE
000023FA  43F9 00002AB8           3414      LEA             STRING_SPACE,A1 * Load four spaces into A1
00002400  103C 000E               3415      MOVE.B          #14,D0              * Set trap task to String
00002404  4E4F                    3416      TRAP            #15
00002406  6000 F9BE               3417      BRA             PRINT_OPCODE_LOOP_RETURN
0000240A                          3418  
0000240A                          3419  
0000240A                          3420  *-------------------------------------------------------------------------------
0000240A                          3421  *
0000240A                          3422  *       PRINT COMMA
0000240A                          3423  *________________________________________
0000240A                          3424  * Register Use Summary:
0000240A                          3425  *
0000240A                          3426  * D0: LOCAL VARIABLE  - Trap task designator
0000240A                          3427  *
0000240A                          3428  * A1: LOCAL VARIABLE  - String address
0000240A                          3429  *-------------------------------------------------------------------------------
0000240A                          3430  PRINT_COMMA
0000240A  43F9 00002AAA           3431      LEA             STRING_COMMA,A1 * Load the comma into A1
00002410  103C 000E               3432      MOVE.B          #14,D0              * Set trap task to String
00002414  4E4F                    3433      TRAP            #15
00002416  6000 F9AE               3434      BRA             PRINT_OPCODE_LOOP_RETURN
0000241A                          3435  
0000241A                          3436  *-------------------------------------------------------------------------------
0000241A                          3437  *
0000241A                          3438  *       PRINT ILLEGAL
0000241A                          3439  *
0000241A                          3440  * Incomplete implementation - final version will depend on opcode logic.
0000241A                          3441  * Currently clears stack entirely, future implementation may need to keep
0000241A                          3442  * some RTS addresses
0000241A                          3443  *
0000241A                          3444  * D7: RTS address (opcode shouldn't be necessary at this point)
0000241A                          3445  *-------------------------------------------------------------------------------
0000241A                          3446  PRINT_ILLEGAL       * INCOMPLETE *
0000241A  2E78 100C               3447      MOVE.L          STACK_BASE,SP
0000241E                          3448      * SUBA.L          #4,SP
0000241E                          3449  
0000241E  43F9 00002A92           3450      LEA             STRING_ILLEGAL,A1
00002424  103C 000D               3451      MOVE.B          #13,D0
00002428  4E4F                    3452      TRAP            #15
0000242A                          3453  
0000242A                          3454  
0000242A  31FC 0002 1010          3455      MOVE.W  #2,LOOP_INC     * Increment the loop counter by 1 word
00002430                          3456  
00002430                          3457  
00002430  4E75                    3458      RTS
00002432                          3459  
00002432                          3460  *-------------------------------------------------------------------------------
00002432                          3461  *
00002432                          3462  *       PRINT NON_OPCODE_DATA
00002432                          3463  *
00002432                          3464  * Incomplete implementation - final version will depend on opcode logic.
00002432                          3465  * Currently clears stack entirely, future implementation may need to keep
00002432                          3466  * some RTS addresses
00002432                          3467  *
00002432                          3468  * D5: RTS address
00002432                          3469  *-------------------------------------------------------------------------------
00002432                          3470  PRINT_NON_OPCODE_DATA
00002432  2E78 100C               3471      MOVE.L          STACK_BASE,SP
00002436                          3472   *    SUBA.L          #4,SP
00002436                          3473  
00002436                          3474  * ------ Print "DATA: " ------
00002436  43F9 00002A8B           3475      LEA             STRING_DATA,A1
0000243C  103C 000E               3476      MOVE.B          #14,D0
00002440  4E4F                    3477      TRAP            #15
00002442                          3478  
00002442                          3479  * ------ Print D7 contents ------
00002442  2207                    3480      MOVE.L          D7,D1
00002444  700F                    3481      MOVEQ           #15,D0
00002446  7410                    3482      MOVEQ           #16,D2
00002448  4E4F                    3483      TRAP            #15
0000244A                          3484  
0000244A  4EB9 0000246E           3485      JSR             PRINT_IMMEDIATE_NEWLINE
00002450                          3486  
00002450  31FC 0002 1010          3487      MOVE.W  #2,LOOP_INC     * Increment the loop counter by 1 word
00002456                          3488  
00002456  4E75                    3489      RTS
00002458                          3490  
00002458                          3491  
00002458                          3492  *--------------------------------------------------------------------------------
00002458                          3493  * PRINTADDR SUBROUTINE
00002458                          3494  *
00002458                          3495  * Prints the memory address and some blank spaces before the disassembled
00002458                          3496  * instruction is appended.
00002458                          3497  *
00002458                          3498  * Registers Used:
00002458                          3499  *   D0: Trap task designator
00002458                          3500  *   D1: Memory address to display
00002458                          3501  * D2: Trap task numerical base (Hex = 16)
00002458                          3502  *
00002458                          3503  *
00002458                          3504  * A1: Data memory location
00002458                          3505  *
00002458                          3506  *
00002458                          3507  PRINTADDR
00002458                          3508  
00002458  2238 1012               3509      MOVE.L   LOOP_INDEX,D1 * Print the loop index (memory location)
0000245C  700F                    3510      MOVEQ    #15,D0
0000245E  7410                    3511      MOVEQ    #16,D2
00002460                          3512  
00002460  4E4F                    3513      TRAP     #15
00002462                          3514  
00002462  43F9 00002ABA           3515      LEA      STRING_FOURSPACE,A1 * Print some spaces
00002468  700E                    3516      MOVEQ      #14,D0
0000246A  4E4F                    3517      TRAP       #15
0000246C                          3518  
0000246C  4E75                    3519      RTS
0000246E                          3520  
0000246E                          3521  *--------------------------------------------------------------------------------
0000246E                          3522  * PRINT_IMMEDIATE_NEWLINE
0000246E                          3523  *
0000246E                          3524  * CANNOT PUSH TO STACK - Used to put a newline after each opcode
0000246E                          3525  *
0000246E                          3526  * Registers Used:
0000246E                          3527  *   D0: Trap task designator
0000246E                          3528  *   D1: Memory address to display
0000246E                          3529  *
0000246E                          3530  * A1: Data memory location
0000246E                          3531  *
0000246E                          3532  PRINT_IMMEDIATE_NEWLINE
0000246E                          3533  
0000246E  43F9 00002ABF           3534    LEA        STRING_NEWLINE,A1
00002474  700E                    3535      MOVEQ      #14,D0
00002476  4E4F                    3536      TRAP       #15
00002478                          3537  
00002478  4E75                    3538    RTS
0000247A                          3539  
0000247A                          3540  
0000247A                          3541  
0000247A                          3542  *--------------------------------------------------------------------------------
0000247A                          3543  * PAUSE_CONSOLE
0000247A                          3544  *
0000247A                          3545  * Takes user input and promptly throws it away
0000247A                          3546  *
0000247A                          3547  *
0000247A                          3548  PAUSE_CONSOLE
0000247A                          3549  
0000247A  7002                    3550    MOVEQ    #2,D0
0000247C  4E4F                    3551      TRAP       #15
0000247E  4241                    3552    CLR.W    D1
00002480  227C 00000000           3553    MOVEA.L  #0,A1
00002486                          3554  
00002486  4E75                    3555    RTS
00002488                          3556  
00002488                          3557  
00002488                          3558  
00002488                          3559  *--------------------------------------------------------------------------------
00002488                          3560  * PRINT_MOVEM_STANDARD
00002488                          3561  *
00002488                          3562  * Oh no
00002488                          3563  *
00002488                          3564  * Registers Used:
00002488                          3565  *   D0: Trap task designator
00002488                          3566  *   D1: Memory address to display
00002488                          3567  *
00002488                          3568  * A1: Data memory location
00002488                          3569  *
00002488                          3570  PRINT_MOVEM_STANDARD
00002488                          3571  
00002488  4282                    3572    CLR.L     D2 * D2 is where full data is stored
0000248A  3439 00002B7C           3573    MOVE.W    MISC_OPCODE,D2
00002490                          3574  
00002490  4281                    3575    CLR.L     D1 * D1 is where we'll do the masking
00002492  3202                    3576    MOVE.W    D2,D1
00002494                          3577  
00002494                          3578  PRINT_MOVEM_STANDARD_A7
00002494                          3579  
00002494  C27C 8000               3580    AND.W     #$8000,D1
00002498  B27C 8000               3581    CMP.W     #$8000,D1
0000249C  6600 000C               3582    BNE       PRINT_MOVEM_STANDARD_A6
000024A0                          3583  
000024A0  43F9 00002B56           3584    LEA        STRING_A7,A1
000024A6  700E                    3585      MOVEQ      #14,D0
000024A8  4E4F                    3586      TRAP       #15
000024AA                          3587  
000024AA                          3588  PRINT_MOVEM_STANDARD_A6
000024AA                          3589  
000024AA  3202                    3590    MOVE.W    D2,D1
000024AC  C27C 4000               3591    AND.W     #$4000,D1
000024B0  B27C 4000               3592    CMP.W     #$4000,D1
000024B4  6600 000C               3593    BNE       PRINT_MOVEM_STANDARD_A5
000024B8                          3594  
000024B8  43F9 00002B52           3595    LEA        STRING_A6,A1
000024BE  700E                    3596      MOVEQ      #14,D0
000024C0  4E4F                    3597      TRAP       #15
000024C2                          3598  
000024C2                          3599  PRINT_MOVEM_STANDARD_A5
000024C2                          3600  
000024C2  3202                    3601    MOVE.W    D2,D1
000024C4  C27C 2000               3602    AND.W     #$2000,D1
000024C8  B27C 2000               3603    CMP.W     #$2000,D1
000024CC  6600 000C               3604    BNE       PRINT_MOVEM_STANDARD_A4
000024D0                          3605  
000024D0  43F9 00002B4E           3606    LEA        STRING_A5,A1
000024D6  700E                    3607      MOVEQ      #14,D0
000024D8  4E4F                    3608      TRAP       #15
000024DA                          3609  
000024DA                          3610  PRINT_MOVEM_STANDARD_A4
000024DA                          3611  
000024DA  3202                    3612    MOVE.W    D2,D1
000024DC  C27C 1000               3613    AND.W     #$1000,D1
000024E0  B27C 1000               3614    CMP.W     #$1000,D1
000024E4  6600 000C               3615    BNE       PRINT_MOVEM_STANDARD_A3
000024E8                          3616  
000024E8  43F9 00002B4A           3617    LEA        STRING_A4,A1
000024EE  700E                    3618      MOVEQ      #14,D0
000024F0  4E4F                    3619      TRAP       #15
000024F2                          3620  
000024F2                          3621  PRINT_MOVEM_STANDARD_A3
000024F2                          3622  
000024F2  3202                    3623    MOVE.W    D2,D1
000024F4  C27C 0800               3624    AND.W     #$0800,D1
000024F8  B27C 0800               3625    CMP.W     #$0800,D1
000024FC  6600 000C               3626    BNE       PRINT_MOVEM_STANDARD_A2
00002500                          3627  
00002500  43F9 00002B46           3628    LEA        STRING_A3,A1
00002506  700E                    3629      MOVEQ      #14,D0
00002508  4E4F                    3630      TRAP       #15
0000250A                          3631  
0000250A                          3632  PRINT_MOVEM_STANDARD_A2
0000250A                          3633  
0000250A  3202                    3634    MOVE.W    D2,D1
0000250C  C27C 0400               3635    AND.W     #$0400,D1
00002510  B27C 0400               3636    CMP.W     #$0400,D1
00002514  6600 000C               3637    BNE       PRINT_MOVEM_STANDARD_A1
00002518                          3638  
00002518  43F9 00002B42           3639    LEA        STRING_A2,A1
0000251E  700E                    3640      MOVEQ      #14,D0
00002520  4E4F                    3641      TRAP       #15
00002522                          3642  
00002522                          3643  PRINT_MOVEM_STANDARD_A1
00002522                          3644  
00002522  3202                    3645    MOVE.W    D2,D1
00002524  C27C 0200               3646    AND.W     #$0200,D1
00002528  B27C 0200               3647    CMP.W     #$0200,D1
0000252C  6600 000C               3648    BNE       PRINT_MOVEM_STANDARD_A0
00002530                          3649  
00002530  43F9 00002B3E           3650    LEA        STRING_A1,A1
00002536  700E                    3651      MOVEQ      #14,D0
00002538  4E4F                    3652      TRAP       #15
0000253A                          3653  
0000253A                          3654  PRINT_MOVEM_STANDARD_A0
0000253A                          3655  
0000253A  3202                    3656    MOVE.W    D2,D1
0000253C  C27C 0100               3657    AND.W     #$0100,D1
00002540  B27C 0100               3658    CMP.W     #$0100,D1
00002544  6600 000C               3659    BNE       PRINT_MOVEM_STANDARD_D7
00002548                          3660  
00002548  43F9 00002B3A           3661    LEA        STRING_A0,A1
0000254E  700E                    3662      MOVEQ      #14,D0
00002550  4E4F                    3663      TRAP       #15
00002552                          3664  
00002552                          3665  PRINT_MOVEM_STANDARD_D7
00002552                          3666  
00002552  3202                    3667    MOVE.W    D2,D1
00002554  C27C 0080               3668    AND.W     #$0080,D1
00002558  B27C 0080               3669    CMP.W     #$0080,D1
0000255C  6600 000C               3670    BNE       PRINT_MOVEM_STANDARD_D6
00002560                          3671  
00002560  43F9 00002B76           3672    LEA        STRING_D7,A1
00002566  700E                    3673      MOVEQ      #14,D0
00002568  4E4F                    3674      TRAP       #15
0000256A                          3675  
0000256A                          3676  PRINT_MOVEM_STANDARD_D6
0000256A                          3677  
0000256A  3202                    3678    MOVE.W    D2,D1
0000256C  C27C 0040               3679    AND.W     #$0040,D1
00002570  B27C 0040               3680    CMP.W     #$0040,D1
00002574  6600 000C               3681    BNE       PRINT_MOVEM_STANDARD_D5
00002578                          3682  
00002578  43F9 00002B72           3683    LEA        STRING_D6,A1
0000257E  700E                    3684      MOVEQ      #14,D0
00002580  4E4F                    3685      TRAP       #15
00002582                          3686  
00002582                          3687  PRINT_MOVEM_STANDARD_D5
00002582                          3688  
00002582  3202                    3689    MOVE.W    D2,D1
00002584  C27C 0020               3690    AND.W     #$0020,D1
00002588  B27C 0020               3691    CMP.W     #$0020,D1
0000258C  6600 000C               3692    BNE       PRINT_MOVEM_STANDARD_D4
00002590                          3693  
00002590  43F9 00002B6E           3694    LEA        STRING_D5,A1
00002596  700E                    3695      MOVEQ      #14,D0
00002598  4E4F                    3696      TRAP       #15
0000259A                          3697  
0000259A                          3698  PRINT_MOVEM_STANDARD_D4
0000259A                          3699  
0000259A  3202                    3700    MOVE.W    D2,D1
0000259C  C27C 0010               3701    AND.W     #$0010,D1
000025A0  B27C 0010               3702    CMP.W     #$0010,D1
000025A4  6600 000C               3703    BNE       PRINT_MOVEM_STANDARD_D3
000025A8                          3704  
000025A8  43F9 00002B6A           3705    LEA        STRING_D4,A1
000025AE  700E                    3706      MOVEQ      #14,D0
000025B0  4E4F                    3707      TRAP       #15
000025B2                          3708  
000025B2                          3709  PRINT_MOVEM_STANDARD_D3
000025B2                          3710  
000025B2  3202                    3711    MOVE.W    D2,D1
000025B4  C27C 0008               3712    AND.W     #$0008,D1
000025B8  B27C 0008               3713    CMP.W     #$0008,D1
000025BC  6600 000C               3714    BNE       PRINT_MOVEM_STANDARD_D2
000025C0                          3715  
000025C0  43F9 00002B66           3716    LEA        STRING_D3,A1
000025C6  700E                    3717      MOVEQ      #14,D0
000025C8  4E4F                    3718      TRAP       #15
000025CA                          3719  
000025CA                          3720  PRINT_MOVEM_STANDARD_D2
000025CA                          3721  
000025CA  3202                    3722    MOVE.W    D2,D1
000025CC  C27C 0004               3723    AND.W     #$0004,D1
000025D0  B27C 0004               3724    CMP.W     #$0004,D1
000025D4  6600 000C               3725    BNE       PRINT_MOVEM_STANDARD_D1
000025D8                          3726  
000025D8  43F9 00002B62           3727    LEA        STRING_D2,A1
000025DE  700E                    3728      MOVEQ      #14,D0
000025E0  4E4F                    3729      TRAP       #15
000025E2                          3730  
000025E2                          3731  PRINT_MOVEM_STANDARD_D1
000025E2                          3732  
000025E2  3202                    3733    MOVE.W    D2,D1
000025E4  C27C 0002               3734    AND.W     #$0002,D1
000025E8  B27C 0002               3735    CMP.W     #$0002,D1
000025EC  6600 000C               3736    BNE       PRINT_MOVEM_STANDARD_D0
000025F0                          3737  
000025F0  43F9 00002B5E           3738    LEA        STRING_D1,A1
000025F6  700E                    3739      MOVEQ      #14,D0
000025F8  4E4F                    3740      TRAP       #15
000025FA                          3741  
000025FA                          3742  PRINT_MOVEM_STANDARD_D0
000025FA                          3743  
000025FA  3202                    3744    MOVE.W    D2,D1
000025FC  C27C 0001               3745    AND.W     #$0001,D1
00002600  B27C 0001               3746    CMP.W     #$0001,D1
00002604  6600 000C               3747    BNE       PRINT_MOVEM_STANDARD_END
00002608                          3748  
00002608  43F9 00002B5A           3749    LEA        STRING_D0,A1
0000260E  700E                    3750      MOVEQ      #14,D0
00002610  4E4F                    3751      TRAP       #15
00002612                          3752  
00002612                          3753  PRINT_MOVEM_STANDARD_END
00002612                          3754  
00002612  43F9 00002AB8           3755    LEA        STRING_SPACE,A1
00002618  700E                    3756    MOVEQ    #14,D0
0000261A  4E4F                    3757    TRAP     #15
0000261C                          3758  
0000261C                          3759  
0000261C  6000 F7A8               3760    BRA      PRINT_OPCODE_LOOP_RETURN
00002620                          3761  
00002620                          3762  
00002620                          3763  *--------------------------------------------------------------------------------
00002620                          3764  * PRINT_MOVEM_REVERSE
00002620                          3765  *
00002620                          3766  * it hurts
00002620                          3767  *
00002620                          3768  * Registers Used:
00002620                          3769  *   D0: Trap task designator
00002620                          3770  *   D1: Memory address to display
00002620                          3771  *
00002620                          3772  * A1: Data memory location
00002620                          3773  *
00002620                          3774  PRINT_MOVEM_REVERSE
00002620                          3775  
00002620                          3776  
00002620  4282                    3777    CLR.L     D2 * D2 is where full data is stored
00002622  3439 00002B7C           3778    MOVE.W    MISC_OPCODE,D2
00002628                          3779  
00002628  4281                    3780    CLR.L     D1 * D1 is where we'll do the masking
0000262A  3202                    3781    MOVE.W    D2,D1
0000262C                          3782  
0000262C                          3783  PRINT_MOVEM_REVERSE_D0
0000262C                          3784  
0000262C  C27C 8000               3785    AND.W     #$8000,D1
00002630  B27C 8000               3786    CMP.W     #$8000,D1
00002634  6600 000C               3787    BNE       PRINT_MOVEM_REVERSE_D1
00002638                          3788  
00002638  43F9 00002B5A           3789    LEA        STRING_D0,A1
0000263E  700E                    3790      MOVEQ      #14,D0
00002640  4E4F                    3791      TRAP       #15
00002642                          3792  
00002642                          3793  PRINT_MOVEM_REVERSE_D1
00002642                          3794  
00002642  3202                    3795    MOVE.W    D2,D1
00002644  C27C 4000               3796    AND.W     #$4000,D1
00002648  B27C 4000               3797    CMP.W     #$4000,D1
0000264C  6600 000C               3798    BNE       PRINT_MOVEM_REVERSE_D2
00002650                          3799  
00002650  43F9 00002B5E           3800    LEA        STRING_D1,A1
00002656  700E                    3801      MOVEQ      #14,D0
00002658  4E4F                    3802      TRAP       #15
0000265A                          3803  
0000265A                          3804  PRINT_MOVEM_REVERSE_D2
0000265A                          3805  
0000265A  3202                    3806    MOVE.W    D2,D1
0000265C  C27C 2000               3807    AND.W     #$2000,D1
00002660  B27C 2000               3808    CMP.W     #$2000,D1
00002664  6600 000C               3809    BNE       PRINT_MOVEM_REVERSE_D3
00002668                          3810  
00002668  43F9 00002B62           3811    LEA        STRING_D2,A1
0000266E  700E                    3812      MOVEQ      #14,D0
00002670  4E4F                    3813      TRAP       #15
00002672                          3814  
00002672                          3815  PRINT_MOVEM_REVERSE_D3
00002672                          3816  
00002672  3202                    3817    MOVE.W    D2,D1
00002674  C27C 1000               3818    AND.W     #$1000,D1
00002678  B27C 1000               3819    CMP.W     #$1000,D1
0000267C  6600 000C               3820    BNE       PRINT_MOVEM_REVERSE_D4
00002680                          3821  
00002680  43F9 00002B66           3822    LEA        STRING_D3,A1
00002686  700E                    3823      MOVEQ      #14,D0
00002688  4E4F                    3824      TRAP       #15
0000268A                          3825  
0000268A                          3826  PRINT_MOVEM_REVERSE_D4
0000268A                          3827  
0000268A  3202                    3828    MOVE.W    D2,D1
0000268C  C27C 0800               3829    AND.W     #$0800,D1
00002690  B27C 0800               3830    CMP.W     #$0800,D1
00002694  6600 000C               3831    BNE       PRINT_MOVEM_REVERSE_D5
00002698                          3832  
00002698  43F9 00002B6A           3833    LEA        STRING_D4,A1
0000269E  700E                    3834      MOVEQ      #14,D0
000026A0  4E4F                    3835      TRAP       #15
000026A2                          3836  
000026A2                          3837  PRINT_MOVEM_REVERSE_D5
000026A2                          3838  
000026A2  3202                    3839    MOVE.W    D2,D1
000026A4  C27C 0400               3840    AND.W     #$0400,D1
000026A8  B27C 0400               3841    CMP.W     #$0400,D1
000026AC  6600 000C               3842    BNE       PRINT_MOVEM_REVERSE_D6
000026B0                          3843  
000026B0  43F9 00002B6E           3844    LEA        STRING_D5,A1
000026B6  700E                    3845      MOVEQ      #14,D0
000026B8  4E4F                    3846      TRAP       #15
000026BA                          3847  
000026BA                          3848  PRINT_MOVEM_REVERSE_D6
000026BA                          3849  
000026BA  3202                    3850    MOVE.W    D2,D1
000026BC  C27C 0200               3851    AND.W     #$0200,D1
000026C0  B27C 0200               3852    CMP.W     #$0200,D1
000026C4  6600 000C               3853    BNE       PRINT_MOVEM_REVERSE_D7
000026C8                          3854  
000026C8  43F9 00002B72           3855    LEA        STRING_D6,A1
000026CE  700E                    3856      MOVEQ      #14,D0
000026D0  4E4F                    3857      TRAP       #15
000026D2                          3858  
000026D2                          3859  PRINT_MOVEM_REVERSE_D7
000026D2                          3860  
000026D2  3202                    3861    MOVE.W    D2,D1
000026D4  C27C 0100               3862    AND.W     #$0100,D1
000026D8  B27C 0100               3863    CMP.W     #$0100,D1
000026DC  6600 000C               3864    BNE       PRINT_MOVEM_REVERSE_A0
000026E0                          3865  
000026E0  43F9 00002B76           3866    LEA        STRING_D7,A1
000026E6  700E                    3867      MOVEQ      #14,D0
000026E8  4E4F                    3868      TRAP       #15
000026EA                          3869  
000026EA                          3870  PRINT_MOVEM_REVERSE_A0
000026EA                          3871  
000026EA  3202                    3872    MOVE.W    D2,D1
000026EC  C27C 0080               3873    AND.W     #$0080,D1
000026F0  B27C 0080               3874    CMP.W     #$0080,D1
000026F4  6600 000C               3875    BNE       PRINT_MOVEM_REVERSE_A1
000026F8                          3876  
000026F8  43F9 00002B3A           3877    LEA        STRING_A0,A1
000026FE  700E                    3878      MOVEQ      #14,D0
00002700  4E4F                    3879      TRAP       #15
00002702                          3880  
00002702                          3881  PRINT_MOVEM_REVERSE_A1
00002702                          3882  
00002702  3202                    3883    MOVE.W    D2,D1
00002704  C27C 0040               3884    AND.W     #$0040,D1
00002708  B27C 0040               3885    CMP.W     #$0040,D1
0000270C  6600 000C               3886    BNE       PRINT_MOVEM_REVERSE_A2
00002710                          3887  
00002710  43F9 00002B3E           3888    LEA        STRING_A1,A1
00002716  700E                    3889      MOVEQ      #14,D0
00002718  4E4F                    3890      TRAP       #15
0000271A                          3891  
0000271A                          3892  PRINT_MOVEM_REVERSE_A2
0000271A                          3893  
0000271A  3202                    3894    MOVE.W    D2,D1
0000271C  C27C 0020               3895    AND.W     #$0020,D1
00002720  B27C 0020               3896    CMP.W     #$0020,D1
00002724  6600 000C               3897    BNE       PRINT_MOVEM_REVERSE_A3
00002728                          3898  
00002728  43F9 00002B42           3899    LEA        STRING_A2,A1
0000272E  700E                    3900      MOVEQ      #14,D0
00002730  4E4F                    3901      TRAP       #15
00002732                          3902  
00002732                          3903  PRINT_MOVEM_REVERSE_A3
00002732                          3904  
00002732  3202                    3905    MOVE.W    D2,D1
00002734  C27C 0010               3906    AND.W     #$0010,D1
00002738  B27C 0010               3907    CMP.W     #$0010,D1
0000273C  6600 000C               3908    BNE       PRINT_MOVEM_REVERSE_A4
00002740                          3909  
00002740  43F9 00002B46           3910    LEA        STRING_A3,A1
00002746  700E                    3911      MOVEQ      #14,D0
00002748  4E4F                    3912      TRAP       #15
0000274A                          3913  
0000274A                          3914  PRINT_MOVEM_REVERSE_A4
0000274A                          3915  
0000274A  3202                    3916    MOVE.W    D2,D1
0000274C  C27C 0008               3917    AND.W     #$0008,D1
00002750  B27C 0008               3918    CMP.W     #$0008,D1
00002754  6600 000C               3919    BNE       PRINT_MOVEM_REVERSE_A5
00002758                          3920  
00002758  43F9 00002B4A           3921    LEA        STRING_A4,A1
0000275E  700E                    3922      MOVEQ      #14,D0
00002760  4E4F                    3923      TRAP       #15
00002762                          3924  
00002762                          3925  PRINT_MOVEM_REVERSE_A5
00002762                          3926  
00002762  3202                    3927    MOVE.W    D2,D1
00002764  C27C 0004               3928    AND.W     #$0004,D1
00002768  B27C 0004               3929    CMP.W     #$0004,D1
0000276C  6600 000C               3930    BNE       PRINT_MOVEM_REVERSE_A6
00002770                          3931  
00002770  43F9 00002B4E           3932    LEA        STRING_A5,A1
00002776  700E                    3933      MOVEQ      #14,D0
00002778  4E4F                    3934      TRAP       #15
0000277A                          3935  
0000277A                          3936  PRINT_MOVEM_REVERSE_A6
0000277A                          3937  
0000277A  3202                    3938    MOVE.W    D2,D1
0000277C  C27C 0002               3939    AND.W     #$0002,D1
00002780  B27C 0002               3940    CMP.W     #$0002,D1
00002784  6600 000C               3941    BNE       PRINT_MOVEM_REVERSE_A7
00002788                          3942  
00002788  43F9 00002B52           3943    LEA        STRING_A6,A1
0000278E  700E                    3944      MOVEQ      #14,D0
00002790  4E4F                    3945      TRAP       #15
00002792                          3946  
00002792                          3947  PRINT_MOVEM_REVERSE_A7
00002792                          3948  
00002792  3202                    3949    MOVE.W    D2,D1
00002794  C27C 0001               3950    AND.W     #$0001,D1
00002798  B27C 0001               3951    CMP.W     #$0001,D1
0000279C  6600 000C               3952    BNE       PRINT_MOVEM_REVERSE_END
000027A0                          3953  
000027A0  43F9 00002B56           3954    LEA        STRING_A7,A1
000027A6  700E                    3955      MOVEQ      #14,D0
000027A8  4E4F                    3956      TRAP       #15
000027AA                          3957  
000027AA                          3958  PRINT_MOVEM_REVERSE_END
000027AA                          3959  
000027AA  43F9 00002AB8           3960    LEA        STRING_SPACE,A1
000027B0  700E                    3961      MOVEQ      #14,D0
000027B2  4E4F                    3962      TRAP       #15
000027B4                          3963  
000027B4                          3964  
000027B4  6000 F610               3965    BRA   PRINT_OPCODE_LOOP_RETURN
000027B8                          3966  
000027B8                          3967  
000027B8                          3968  *-----------------------------------------------------------------
000027B8                          3969  * GET_INPUT
000027B8                          3970  *
000027B8                          3971  * Called before anything else, clears what it uses
000027B8                          3972  *-----------------------------------------------------------------
000027B8                          3973  GET_INPUT
000027B8                          3974  
000027B8  21FC 00000000 1000      3975      MOVE.L  #0,START_ADDR
000027C0  21FC 00000000 1004      3976      MOVE.L  #0,END_ADDR
000027C8                          3977  
000027C8  4283                    3978      CLR.L   D3
000027CA                          3979  
000027CA  43F9 0000297A           3980      LEA     STRING_ENTER_START,A1
000027D0  103C 000D               3981      MOVE.B  #13,D0
000027D4  4E4F                    3982      TRAP    #15
000027D6                          3983  
000027D6  327C 0000               3984      MOVEA   #0,A1
000027DA  103C 0002               3985      MOVE.B  #2,D0
000027DE  4E4F                    3986      TRAP    #15
000027E0                          3987  
000027E0  4EB9 00002830           3988      JSR     STRING_TO_HEX
000027E6  21C3 1000               3989      MOVE.L  D3,START_ADDR
000027EA                          3990  
000027EA  4283                    3991      CLR.L   D3
000027EC                          3992  
000027EC  43F9 000029A1           3993      LEA     STRING_ENTER_END,A1
000027F2  103C 000D               3994      MOVE.B  #13,D0
000027F6  4E4F                    3995      TRAP    #15
000027F8                          3996  
000027F8  327C 0000               3997      MOVEA   #0,A1
000027FC  103C 0002               3998      MOVE.B  #2,D0
00002800  4E4F                    3999      TRAP    #15
00002802                          4000  
00002802  4EB9 00002830           4001      JSR     STRING_TO_HEX
00002808  21C3 1004               4002      MOVE.L  D3,END_ADDR
0000280C                          4003  
0000280C  2438 1000               4004      MOVE.L  START_ADDR,D2
00002810  B682                    4005      CMP.L   D2,D3
00002812  6D00 000C               4006      BLT     OUT_OF_ORDER
00002816                          4007  
00002816  4280                    4008      CLR.L     D0
00002818  4281                    4009      CLR.L     D1
0000281A  4282                    4010      CLR.L     D2
0000281C  4283                    4011      CLR.L     D3
0000281E                          4012  
0000281E  4E75                    4013      RTS
00002820                          4014  
00002820                          4015  OUT_OF_ORDER
00002820                          4016  
00002820  43F9 00002A08           4017      LEA     STRING_OUT_OF_ORDER,A1
00002826  103C 000D               4018      MOVE.B  #13,D0
0000282A  4E4F                    4019      TRAP    #15
0000282C                          4020  
0000282C  4EF8 27B8               4021      JMP     GET_INPUT
00002830                          4022  
00002830                          4023  STRING_TO_HEX
00002830                          4024  
00002830  4282                    4025      CLR.L   D2
00002832  B23C 0000               4026      CMP.B   #0,D1
00002836  6700 0012               4027      BEQ     STH_END
0000283A  4EB9 00002864           4028      JSR     STH_SET_VALUE
00002840  4EF8 2830               4029      JMP     STRING_TO_HEX
00002844                          4030  
00002844                          4031  STH_UPDATE
00002844                          4032  
00002844  5341                    4033      SUB.W   #1,D1
00002846  5249                    4034      ADDA.W  #1,A1
00002848  4E75                    4035      RTS
0000284A                          4036  
0000284A  4E75                    4037  STH_END     RTS
0000284C                          4038  
0000284C                          4039  STH_BAD_INPUT
0000284C                          4040  
0000284C  43F9 000029C6           4041      LEA     STRING_INVALID_INPUT,A1
00002852  103C 000D               4042      MOVE.B  #13,D0
00002856  4E4F                    4043      TRAP    #15
00002858                          4044  
00002858  327C 0000               4045      MOVEA   #0,A1
0000285C  103C 0002               4046      MOVE.B  #2,D0
00002860  4E4F                    4047      TRAP    #15
00002862                          4048  
00002862  4E75                    4049      RTS
00002864                          4050  
00002864                          4051  STH_SET_VALUE
00002864                          4052  
00002864  7400                    4053      MOVE.L  #$0,D2
00002866  0C11 0030               4054      CMP.B   #$30,(A1)
0000286A  6700 009C               4055      BEQ     STH_SHIFT_BITS
0000286E                          4056  
0000286E  7401                    4057      MOVE.L  #$1,D2
00002870  0C11 0031               4058      CMP.B   #$31,(A1)
00002874  6700 0092               4059      BEQ     STH_SHIFT_BITS
00002878                          4060  
00002878  7402                    4061      MOVE.L  #$2,D2
0000287A  0C11 0032               4062      CMP.B   #$32,(A1)
0000287E  6700 0088               4063      BEQ     STH_SHIFT_BITS
00002882                          4064  
00002882  7403                    4065      MOVE.L  #$3,D2
00002884  0C11 0033               4066      CMP.B   #$33,(A1)
00002888  6700 007E               4067      BEQ     STH_SHIFT_BITS
0000288C                          4068  
0000288C  7404                    4069      MOVE.L  #$4,D2
0000288E  0C11 0034               4070      CMP.B   #$34,(A1)
00002892  6700 0074               4071      BEQ     STH_SHIFT_BITS
00002896                          4072  
00002896  7405                    4073      MOVE.L  #$5,D2
00002898  0C11 0035               4074      CMP.B   #$35,(A1)
0000289C  6700 006A               4075      BEQ     STH_SHIFT_BITS
000028A0                          4076  
000028A0  7406                    4077      MOVE.L  #$6,D2
000028A2  0C11 0036               4078      CMP.B   #$36,(A1)
000028A6  6700 0060               4079      BEQ     STH_SHIFT_BITS
000028AA                          4080  
000028AA  7407                    4081      MOVE.L  #$7,D2
000028AC  0C11 0037               4082      CMP.B   #$37,(A1)
000028B0  6700 0056               4083      BEQ     STH_SHIFT_BITS
000028B4                          4084  
000028B4  7408                    4085      MOVE.L  #$8,D2
000028B6  0C11 0038               4086      CMP.B   #$38,(A1)
000028BA  6700 004C               4087      BEQ     STH_SHIFT_BITS
000028BE                          4088  
000028BE  7409                    4089      MOVE.L  #$9,D2
000028C0  0C11 0039               4090      CMP.B   #$39,(A1)
000028C4  6700 0042               4091      BEQ     STH_SHIFT_BITS
000028C8                          4092  
000028C8  740A                    4093      MOVE.L  #$A,D2
000028CA  0C11 0041               4094      CMP.B   #$41,(A1)
000028CE  6700 0038               4095      BEQ     STH_SHIFT_BITS
000028D2                          4096  
000028D2  740B                    4097      MOVE.L  #$B,D2
000028D4  0C11 0042               4098      CMP.B   #$42,(A1)
000028D8  6700 002E               4099      BEQ     STH_SHIFT_BITS
000028DC                          4100  
000028DC  740C                    4101      MOVE.L  #$C,D2
000028DE  0C11 0043               4102      CMP.B   #$43,(A1)
000028E2  6700 0024               4103      BEQ     STH_SHIFT_BITS
000028E6                          4104  
000028E6  740D                    4105      MOVE.L  #$D,D2
000028E8  0C11 0044               4106      CMP.B   #$44,(A1)
000028EC  6700 001A               4107      BEQ     STH_SHIFT_BITS
000028F0                          4108  
000028F0  740E                    4109      MOVE.L  #$E,D2
000028F2  0C11 0045               4110      CMP.B   #$45,(A1)
000028F6  6700 0010               4111      BEQ     STH_SHIFT_BITS
000028FA                          4112  
000028FA  740F                    4113      MOVE.L  #$F,D2
000028FC  0C11 0046               4114      CMP.B   #$46,(A1)
00002900  6700 0006               4115      BEQ     STH_SHIFT_BITS
00002904                          4116  
00002904  4EF8 284C               4117      JMP     STH_BAD_INPUT
00002908                          4118  
00002908                          4119  STH_SHIFT_BITS
00002908                          4120  
00002908  B23C 0001               4121      CMP.B   #1,D1
0000290C  6700 0038               4122      BEQ     STH_INCREASE_VALUE
00002910                          4123  
00002910  E99A                    4124      ROL.L   #4,D2
00002912  B23C 0002               4125      CMP.B   #2,D1
00002916  6700 002E               4126      BEQ     STH_INCREASE_VALUE
0000291A                          4127  
0000291A  E99A                    4128      ROL.L   #4,D2
0000291C  B23C 0003               4129      CMP.B   #3,D1
00002920  6700 0024               4130      BEQ     STH_INCREASE_VALUE
00002924                          4131  
00002924  E99A                    4132      ROL.L   #4,D2
00002926  B23C 0004               4133      CMP.B   #4,D1
0000292A  6700 001A               4134      BEQ     STH_INCREASE_VALUE
0000292E                          4135  
0000292E  E99A                    4136      ROL.L   #4,D2
00002930  B23C 0005               4137      CMP.B   #5,D1
00002934  6700 0010               4138      BEQ     STH_INCREASE_VALUE
00002938                          4139  
00002938  E99A                    4140      ROL.L   #4,D2
0000293A  B23C 0006               4141      CMP.B   #6,D1
0000293E  6700 0006               4142      BEQ     STH_INCREASE_VALUE
00002942                          4143  
00002942  4EF8 284C               4144      JMP     STH_BAD_INPUT
00002946                          4145  
00002946                          4146  STH_INCREASE_VALUE
00002946                          4147  
00002946  D682                    4148      ADD.L   D2,D3
00002948  4EF8 2844               4149      JMP     STH_UPDATE
0000294C                          4150  
0000294C                          4151  * END OF GET_INPUT -----------------------------------------------
0000294C                          4152  
0000294C                          4153  *-----------------------------------------------------------------
0000294C                          4154  * QUERY_CONTINUE
0000294C                          4155  *
0000294C                          4156  * Called before anything else, clears what it uses
0000294C                          4157  *-----------------------------------------------------------------
0000294C                          4158  QUERY_CONTINUE
0000294C                          4159  
0000294C  43F9 00002A34           4160      LEA     STRING_QUERY_CONTINUE,A1
00002952  103C 000D               4161      MOVE.B  #13,D0
00002956  4E4F                    4162      TRAP    #15
00002958                          4163  
00002958  327C 0000               4164      MOVEA   #0,A1
0000295C  103C 0002               4165      MOVE.B  #2,D0
00002960  4E4F                    4166      TRAP    #15
00002962                          4167  
00002962  0C11 0079               4168      CMP.B   #$79,(A1)
00002966  6700 E6B8               4169      BEQ     INITIALIZE
0000296A                          4170  
0000296A  43F9 00002A6E           4171      LEA     STRING_EXITING,A1
00002970  103C 000D               4172      MOVE.B  #13,D0
00002974  4E4F                    4173      TRAP    #15
00002976                          4174  
00002976  FFFF FFFF               4175      SIMHALT
0000297A                          4176  
0000297A                          4177  *-------------------------------------------------------------------------------
0000297A                          4178  *                ________  ________  _________  ________
0000297A                          4179  *               |\   ___ \|\   __  \|\___   ___\\   __  \
0000297A                          4180  *               \ \  \_|\ \ \  \|\  \|___ \  \_\ \  \|\  \
0000297A                          4181  *                \ \  \ \\ \ \   __  \   \ \  \ \ \   __  \
0000297A                          4182  *                 \ \  \_\\ \ \  \ \  \   \ \  \ \ \  \ \  \
0000297A                          4183  *                  \ \_______\ \__\ \__\   \ \__\ \ \__\ \__\
0000297A                          4184  *                   \|_______|\|__|\|__|    \|__|  \|__|\|__|
0000297A                          4185  *
0000297A                          4186  *-------------------------------------------------------------------------------
0000297A                          4187  
0000297A                          4188  
0000297A                          4189  * Data for GET_INPUT and QUERY_CONTINUE ----------
0000297A= 50 6C 65 61 73 65 ...   4190  STRING_ENTER_START      DC.B    'Please enter a start address, eg. 4A6C',0
000029A1= 50 6C 65 61 73 65 ...   4191  STRING_ENTER_END        DC.B    'Please enter a end address, eg. 5D3F',0
000029C6= 49 4E 56 41 4C 49 ...   4192  STRING_INVALID_INPUT    DC.B    'INVALID INPUT, must be a valid EASy68k hexidecimal memory address',0
00002A08= 53 74 61 72 74 20 ...   4193  STRING_OUT_OF_ORDER     DC.B    'Start address must be less than end address',0
00002A34= 57 6F 75 6C 64 20 ...   4194  STRING_QUERY_CONTINUE   DC.B    'Would you like to disassemble another memory image? (y/n)',0
00002A6E= 4E 6F 77 20 65 78 ...   4195  STRING_EXITING          DC.B    'Now exiting, have a nice day',0
00002A8B                          4196  * -------------------------------------------------
00002A8B                          4197  
00002A8B= 44 41 54 41 3A 20 00    4198  STRING_DATA                 DC.B    'DATA: ',0
00002A92= 49 4C 4C 45 47 41 ...   4199  STRING_ILLEGAL              DC.B    'ILLEGAL',0
00002A9A= 2E 42 20 00             4200  STRING_BYTE_DESIGNATOR      DC.B    '.B ',0
00002A9E= 2E 57 20 00             4201  STRING_WORD_DESIGNATOR      DC.B    '.W ',0
00002AA2= 2E 4C 20 00             4202  STRING_LONG_DESIGNATOR      DC.B    '.L ',0
00002AA6= 44 00                   4203  STRING_D                    DC.B    'D',0
00002AA8= 41 00                   4204  STRING_A                    DC.B    'A',0
00002AAA= 2C 00                   4205  STRING_COMMA                DC.B    ',',0
00002AAC= 28 00                   4206  STRING_LEFT_PAREN           DC.B    '(',0
00002AAE= 29 00                   4207  STRING_RIGHT_PAREN          DC.B    ')',0
00002AB0= 2B 00                   4208  STRING_PLUS                 DC.B    '+',0
00002AB2= 2D 00                   4209  STRING_MINUS                DC.B    '-',0
00002AB4= 23 00                   4210  STRING_POUND                DC.B    '#',0
00002AB6= 24 00                   4211  STRING_DOLLAR               DC.B    '$',0
00002AB8                          4212  
00002AB8= 20 00                   4213  STRING_SPACE                DC.B    ' ',0
00002ABA= 20 20 20 20 00          4214  STRING_FOURSPACE            DC.B    '    ',0
00002ABF= 0D 0A 00                4215  STRING_NEWLINE              DC.B    '',CR,LF,0
00002AC2                          4216  
00002AC2= 41 53 52 00             4217  STRING_ASR                  DC.B    'ASR',0
00002AC6= 41 53 4C 00             4218  STRING_ASL                  DC.B    'ASL',0
00002ACA= 4C 53 52 00             4219  STRING_LSR                  DC.B    'LSR',0
00002ACE= 4C 53 4C 00             4220  STRING_LSL                  DC.B    'LSL',0
00002AD2= 52 4F 52 00             4221  STRING_ROR                  DC.B    'ROR',0
00002AD6= 52 4F 4C 00             4222  STRING_ROL                  DC.B    'ROL',0
00002ADA= 4E 4F 50 00             4223  STRING_NOP                  DC.B    'NOP',0
00002ADE= 52 54 53 00             4224  STRING_RTS                  DC.B    'RTS',0
00002AE2= 41 44 44 51 00          4225  STRING_ADDQ                 DC.B    'ADDQ',0
00002AE7= 41 44 44 00             4226  STRING_ADD                  DC.B    'ADD',0
00002AEB= 41 44 44 41 00          4227  STRING_ADDA                 DC.B    'ADDA',0
00002AF0= 42 45 51 20 00          4228  STRING_BEQ                  DC.B    'BEQ ',0
00002AF5= 42 4C 45 20 00          4229  STRING_BLE                  DC.B    'BLE ',0
00002AFA= 42 52 41 20 00          4230  STRING_BRA                  DC.B    'BRA ',0
00002AFF= 42 47 54 20 00          4231  STRING_BGT                  DC.B    'BGT ',0
00002B04= 4A 53 52 20 20 20 ...   4232  STRING_JSR                  DC.B    'JSR    ',0
00002B0C= 4D 4F 56 45 00          4233  STRING_MOVE                 DC.B    'MOVE',0
00002B11= 4D 4F 56 45 41 00       4234  STRING_MOVEA                DC.B    'MOVEA',0
00002B17= 4D 4F 56 45 51 20 ...   4235  STRING_MOVEQ                DC.B    'MOVEQ    ',0
00002B21= 4D 4F 56 45 4D 00       4236  STRING_MOVEM                DC.B    'MOVEM',0
00002B27= 53 55 42 00             4237  STRING_SUB                  DC.B    'SUB',0
00002B2B= 41 4E 44 00             4238  STRING_AND                  DC.B    'AND',0
00002B2F= 4F 52 00                4239  STRING_OR                   DC.B    'OR',0
00002B32= 4E 4F 54 00             4240  STRING_NOT                  DC.B    'NOT',0
00002B36= 4C 45 41 00             4241  STRING_LEA                  DC.B    'LEA',0
00002B3A                          4242  
00002B3A= 41 30 2C 00             4243  STRING_A0                   DC.B    'A0,',0
00002B3E= 41 31 2C 00             4244  STRING_A1                   DC.B    'A1,',0
00002B42= 41 32 2C 00             4245  STRING_A2                   DC.B    'A2,',0
00002B46= 41 33 2C 00             4246  STRING_A3                   DC.B    'A3,',0
00002B4A= 41 34 2C 00             4247  STRING_A4                   DC.B    'A4,',0
00002B4E= 41 35 2C 00             4248  STRING_A5                   DC.B    'A5,',0
00002B52= 41 36 2C 00             4249  STRING_A6                   DC.B    'A6,',0
00002B56= 41 37 2C 00             4250  STRING_A7                   DC.B    'A7,',0
00002B5A                          4251  
00002B5A= 44 30 2C 00             4252  STRING_D0                   DC.B    'D0,',0
00002B5E= 44 31 2C 00             4253  STRING_D1                   DC.B    'D1,',0
00002B62= 44 32 2C 00             4254  STRING_D2                   DC.B    'D2,',0
00002B66= 44 33 2C 00             4255  STRING_D3                   DC.B    'D3,',0
00002B6A= 44 34 2C 00             4256  STRING_D4                   DC.B    'D4,',0
00002B6E= 44 35 2C 00             4257  STRING_D5                   DC.B    'D5,',0
00002B72= 44 36 2C 00             4258  STRING_D6                   DC.B    'D6,',0
00002B76= 44 37 2C 00             4259  STRING_D7                   DC.B    'D7,',0
00002B7A                          4260  
00002B7A                          4261  MISC_NUMBER  DS.B    1    * MISC_NUMBER to be printed
00002B7C                          4262  MISC_OPCODE  DS.W    1
00002B7E                          4263  MISC_REGISTER DS.B   1
00002B80                          4264  LINE_COUNT    DS.W    1    * How many lines are currently displayed onscreen
00002B82                          4265  
00002B82                          4266  
00002B82                          4267  
00002B82                          4268      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 1C04
ADDA                1B84
ADDA_CONTINUE       1BCC
ADDA_L              1BAC
ADDA_W              1BBC
ADDQ                1C98
ADDQ_NOT_ZERO       1CDC
ADD_ADDA            1B6E
ADD_DN_FIRST        1C60
ADD_EA_FIRST        1C28
AND                 12B2
AND_DN_FIRST        132A
AND_EA_FIRST        12E0
ASL                 194A
ASR                 193A
ASX                 1928
BCC                 1AA6
BCC_16              1B3A
BCC_32              1B54
BCC_CONTINUE        1B10
BCC_END             1B5E
BEQ                 1B00
BGT                 1AE0
BLE                 1AF0
BRA                 1AD0
BRANCHBLOCK         10EC
BRANCHBLOCK_MOVEQ_END  113E
CR                  D
DATA1               1016
DATA1_IN_USE        101A
DATA2               101C
DONE                10DE
END_ADDR            1004
GET_INPUT           27B8
INITIALIZE          1020
JSR                 1D40
JSR_EA_MODE_ELSE    1D6A
JSR_FINISH          1DA4
JSR_PUSH_EA_MODE_ID_AN_INDIRECT  1D86
JSR_PUSH_EA_MODE_ID_IND_LONG  1D9A
JSR_PUSH_EA_MODE_ID_IND_SHORT  1D90
LEA                 11F8
LF                  A
LINE_COUNT          2B80
LOOP_INC            1010
LOOP_INDEX          1012
LSL                 1918
LSR                 1908
LSX                 18F6
LSX_ASX_ROX         18B6
LSX_ASX_ROX_CONTINUE  198C
LSX_ASX_ROX_FINISH  1A96
LSX_ASX_ROX_MEM     1A6E
LSX_ASX_ROX_REGISTER  1A34
LSX_ASX_ROX_RESET_D7  1AA0
LSX_ASX_ROX_SHIFT   19BA
LSX_ASX_ROX_SHIFT_8  1A04
MISC_NUMBER         2B7A
MISC_OPCODE         2B7C
MISC_REGISTER       2B7E
MOVE                16E2
MOVEA               1836
MOVEA_L             1870
MOVEA_SIZE_CONTINUE  187E
MOVEA_W             1862
MOVEM               14B0
MOVEM_MEM2REG       1534
MOVEM_MEM2REG_AN_IND  157C
MOVEM_MEM2REG_EA_FINISH  15A4
MOVEM_MEM2REG_ELSE  1560
MOVEM_MEM2REG_IND_LONG  159A
MOVEM_MEM2REG_IND_SHORT  1590
MOVEM_MEM2REG_POST_INC  1586
MOVEM_REG2MEM       15D0
MOVEM_REG2MEM_AN_IND  1616
MOVEM_REG2MEM_EA_FINISH  166E
MOVEM_REG2MEM_ELSE  15FA
MOVEM_REG2MEM_IND_LONG  1658
MOVEM_REG2MEM_IND_SHORT  1642
MOVEM_REG2MEM_PRE_DEC  162C
MOVEM_SIZE_CONTINUE  151C
MOVEM_SIZE_LONG     14FC
MOVEM_SIZE_WORD     150C
MOVEQ               1676
MOVE_B              1716
MOVE_L              1732
MOVE_MODE_AN_INDIRECT  17A2
MOVE_MODE_AN_POST_INC  17AC
MOVE_MODE_AN_PRE_DEC  17B6
MOVE_MODE_DN        1798
MOVE_MODE_ELSE      17C0
MOVE_MODE_FINISH    1828
MOVE_MODE_IND_LONG  17FC
MOVE_MODE_IND_LONG_DATA2  181A
MOVE_MODE_IND_SHORT  17D0
MOVE_MODE_IND_SHORT_DATA2  17EE
MOVE_MOVEA          16CC
MOVE_SIZE_CONTINUE  1740
MOVE_W              1724
NOP                 1D0C
NOT                 1272
OPCODE_LOOP         1052
OPCODE_LOOP_CONTINUE  10DA
OPCODE_LOOP_PAUSE   10CC
OR                  1362
OR_DN_FIRST         13DA
OR_EA_FIRST         1390
OUT_OF_ORDER        2820
PAUSE_CONSOLE       247A
PRINTADDR           2458
PRINT_ADD           1FB4
PRINT_ADDA          1FC4
PRINT_ADDQ          2154
PRINT_AND           21B4
PRINT_ASL           1F2A
PRINT_ASR           1F1A
PRINT_BEQ           1F94
PRINT_BGT           1F74
PRINT_BLE           1F84
PRINT_BRA           1FA4
PRINT_BYTE_DESIGNATOR  21D4
PRINT_COMMA         240A
PRINT_COUNT         1008
PRINT_DATA1_LONG    1F5A
PRINT_DATA1_WORD    1F64
PRINT_EA_MODE_ID_ABS_DATA  236E
PRINT_EA_MODE_ID_ABS_DATA2  2394
PRINT_EA_MODE_ID_AN  2222
PRINT_EA_MODE_ID_AN_INDIRECT  2240
PRINT_EA_MODE_ID_AN_POST_INC  2276
PRINT_EA_MODE_ID_AN_PRE_DEC  22B8
PRINT_EA_MODE_ID_DN  2204
PRINT_EA_MODE_ID_IND_LONG  233A
PRINT_EA_MODE_ID_IND_LONG_DATA2  2354
PRINT_EA_MODE_ID_IND_SHORT  22FA
PRINT_EA_MODE_ID_IND_SHORT_DATA2  231A
PRINT_FOURSPACE     23EA
PRINT_ILLEGAL       241A
PRINT_IMMEDIATE_NEWLINE  246E
PRINT_JSR           23BA
PRINT_LEA           23DA
PRINT_LONG_DESIGNATOR  21F4
PRINT_LSL           1F0A
PRINT_LSR           1EFA
PRINT_MISC_ADDRESS_IND  20F0
PRINT_MISC_NUMBER   1FD4
PRINT_MISC_NUMBER_AS_ADDRESS  1FEA
PRINT_MISC_NUMBER_AS_DATA  212E
PRINT_MISC_NUMBER_AS_REGISTER  2010
PRINT_MISC_POST_INC  20A6
PRINT_MISC_PRE_DEC  205C
PRINT_MISC_REGISTER  2036
PRINT_MOVE          2164
PRINT_MOVEA         2174
PRINT_MOVEM         2194
PRINT_MOVEM_REVERSE  2620
PRINT_MOVEM_REVERSE_A0  26EA
PRINT_MOVEM_REVERSE_A1  2702
PRINT_MOVEM_REVERSE_A2  271A
PRINT_MOVEM_REVERSE_A3  2732
PRINT_MOVEM_REVERSE_A4  274A
PRINT_MOVEM_REVERSE_A5  2762
PRINT_MOVEM_REVERSE_A6  277A
PRINT_MOVEM_REVERSE_A7  2792
PRINT_MOVEM_REVERSE_D0  262C
PRINT_MOVEM_REVERSE_D1  2642
PRINT_MOVEM_REVERSE_D2  265A
PRINT_MOVEM_REVERSE_D3  2672
PRINT_MOVEM_REVERSE_D4  268A
PRINT_MOVEM_REVERSE_D5  26A2
PRINT_MOVEM_REVERSE_D6  26BA
PRINT_MOVEM_REVERSE_D7  26D2
PRINT_MOVEM_REVERSE_END  27AA
PRINT_MOVEM_STANDARD  2488
PRINT_MOVEM_STANDARD_A0  253A
PRINT_MOVEM_STANDARD_A1  2522
PRINT_MOVEM_STANDARD_A2  250A
PRINT_MOVEM_STANDARD_A3  24F2
PRINT_MOVEM_STANDARD_A4  24DA
PRINT_MOVEM_STANDARD_A5  24C2
PRINT_MOVEM_STANDARD_A6  24AA
PRINT_MOVEM_STANDARD_A7  2494
PRINT_MOVEM_STANDARD_D0  25FA
PRINT_MOVEM_STANDARD_D1  25E2
PRINT_MOVEM_STANDARD_D2  25CA
PRINT_MOVEM_STANDARD_D3  25B2
PRINT_MOVEM_STANDARD_D4  259A
PRINT_MOVEM_STANDARD_D5  2582
PRINT_MOVEM_STANDARD_D6  256A
PRINT_MOVEM_STANDARD_D7  2552
PRINT_MOVEM_STANDARD_END  2612
PRINT_MOVEQ         2184
PRINT_NON_OPCODE_DATA  2432
PRINT_NOT           23CA
PRINT_OPCODE        1DAC
PRINT_OPCODE_LOOP   1DB6
PRINT_OPCODE_LOOP_FINISH  1DCC
PRINT_OPCODE_LOOP_INDEX  100A
PRINT_OPCODE_LOOP_RETURN  1DC6
PRINT_OR            21C4
PRINT_ROL           1F4A
PRINT_ROR           1F3A
PRINT_SPACE         23FA
PRINT_SUB           21A4
PRINT_WORD_DESIGNATOR  21E4
PUSH_BWL            1EB2
PUSH_BWL_BYTE       1ECE
PUSH_BWL_FINISH     1EEC
PUSH_BWL_LONG       1EE2
PUSH_BWL_WORD       1ED8
PUSH_EA_MODE_ID     1DD8
PUSH_EA_MODE_ID_ABS_DATA  1E90
PUSH_EA_MODE_ID_AN  1E1E
PUSH_EA_MODE_ID_AN_INDIRECT  1E28
PUSH_EA_MODE_ID_AN_POST_INC  1E32
PUSH_EA_MODE_ID_AN_PRE_DEC  1E3C
PUSH_EA_MODE_ID_DN  1E14
PUSH_EA_MODE_ID_ELSE  1E46
PUSH_EA_MODE_ID_FINISH  1EA4
PUSH_EA_MODE_ID_IND_LONG  1E7C
PUSH_EA_MODE_ID_IND_SHORT  1E68
QUERY_CONTINUE      294C
ROL                 197C
ROR                 196C
ROX                 195A
RTS                 1D26
STACK_BASE          100C
START               1020
START_ADDR          1000
STH_BAD_INPUT       284C
STH_END             284A
STH_INCREASE_VALUE  2946
STH_SET_VALUE       2864
STH_SHIFT_BITS      2908
STH_UPDATE          2844
STRING_A            2AA8
STRING_A0           2B3A
STRING_A1           2B3E
STRING_A2           2B42
STRING_A3           2B46
STRING_A4           2B4A
STRING_A5           2B4E
STRING_A6           2B52
STRING_A7           2B56
STRING_ADD          2AE7
STRING_ADDA         2AEB
STRING_ADDQ         2AE2
STRING_AND          2B2B
STRING_ASL          2AC6
STRING_ASR          2AC2
STRING_BEQ          2AF0
STRING_BGT          2AFF
STRING_BLE          2AF5
STRING_BRA          2AFA
STRING_BYTE_DESIGNATOR  2A9A
STRING_COMMA        2AAA
STRING_D            2AA6
STRING_D0           2B5A
STRING_D1           2B5E
STRING_D2           2B62
STRING_D3           2B66
STRING_D4           2B6A
STRING_D5           2B6E
STRING_D6           2B72
STRING_D7           2B76
STRING_DATA         2A8B
STRING_DOLLAR       2AB6
STRING_ENTER_END    29A1
STRING_ENTER_START  297A
STRING_EXITING      2A6E
STRING_FOURSPACE    2ABA
STRING_ILLEGAL      2A92
STRING_INVALID_INPUT  29C6
STRING_JSR          2B04
STRING_LEA          2B36
STRING_LEFT_PAREN   2AAC
STRING_LONG_DESIGNATOR  2AA2
STRING_LSL          2ACE
STRING_LSR          2ACA
STRING_MINUS        2AB2
STRING_MOVE         2B0C
STRING_MOVEA        2B11
STRING_MOVEM        2B21
STRING_MOVEQ        2B17
STRING_NEWLINE      2ABF
STRING_NOP          2ADA
STRING_NOT          2B32
STRING_OR           2B2F
STRING_OUT_OF_ORDER  2A08
STRING_PLUS         2AB0
STRING_POUND        2AB4
STRING_QUERY_CONTINUE  2A34
STRING_RIGHT_PAREN  2AAE
STRING_ROL          2AD6
STRING_ROR          2AD2
STRING_RTS          2ADE
STRING_SPACE        2AB8
STRING_SUB          2B27
STRING_TO_HEX       2830
STRING_WORD_DESIGNATOR  2A9E
SUB                 1412
SUB_DN_FIRST        1478
SUB_EA_FIRST        1440
